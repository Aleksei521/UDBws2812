L 1 "main.c"
N/* ========================================
N *
N * Copyright YOUR COMPANY, THE YEAR
N * All Rights Reserved
N * UNPUBLISHED, LICENSED SOFTWARE.
N *
N * CONFIDENTIAL AND PROPRIETARY INFORMATION
N * WHICH IS THE PROPERTY OF your company.
N *
N * ========================================
N*/
N#include "project.h"
L 1 "Generated_Source\PSoC5\project.h" 1
N/*******************************************************************************
N* File Name: project.h
N* 
N* PSoC Creator  4.4
N*
N* Description:
N* It contains references to all generated header files and should not be modified.
N* This file is automatically generated by PSoC Creator.
N*
N********************************************************************************
N* Copyright (c) 2007-2020 Cypress Semiconductor.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions, 
N* disclaimers, and limitations in the end user license agreement accompanying 
N* the software package with which this file was provided.
N********************************************************************************/
N
N#include "cyfitter_cfg.h"
L 1 "Generated_Source\PSoC5\cyfitter_cfg.h" 1
N/*******************************************************************************
N* File Name: cyfitter_cfg.h
N* 
N* PSoC Creator  4.4
N*
N* Description:
N* This file provides basic startup and mux configuration settings
N* This file is automatically generated by PSoC Creator.
N*
N********************************************************************************
N* Copyright (c) 2007-2020 Cypress Semiconductor.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions, 
N* disclaimers, and limitations in the end user license agreement accompanying 
N* the software package with which this file was provided.
N********************************************************************************/
N
N#ifndef CYFITTER_CFG_H
N#define CYFITTER_CFG_H
N
N#include "cytypes.h"
L 1 "Generated_Source\PSoC5\cytypes.h" 1
N/***************************************************************************//**
N* \file cytypes.h
N* \version 6.10
N*
N* \brief CyTypes provides register access macros and approved types for use in
N* firmware.
N*
N* \note Due to endiannesses of the hardware and some compilers, the register
N* access macros for big endian compilers use some library calls to arrange
N* data the correct way.
N*
N* Register Access macros and functions perform their operations on an
N* input of the type pointer to void.  The arguments passed to it should be
N* pointers to the type associated with the register size.
N* (i.e. a "uint8 *" shouldn't be passed to obtain a 16-bit register value)
N*
N********************************************************************************
N* \copyright
N* Copyright 2008-2021, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions,
N* disclaimers, and limitations in the end user license agreement accompanying
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_BOOT_CYTYPES_H)
X#if !0L
N#define CY_BOOT_CYTYPES_H
N
N#if defined(__C51__)
X#if 0L
S    #include <intrins.h>
N#endif  /* (__C51__) */
N
N/* ARM and C99 or later */
N#if defined(__GNUC__) || defined(__ARMCC_VERSION) || (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L)
X#if 0L || 1L || (1L && 199901L >= 199901L)
N    #include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060044
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 35 "Generated_Source\PSoC5\cytypes.h" 2
N#endif  /* (__GNUC__) || defined(__ARMCC_VERSION) || (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) */
N
N#include "cyfitter.h"
L 1 "Generated_Source\PSoC5\cyfitter.h" 1
N/*******************************************************************************
N* File Name: cyfitter.h
N* 
N* PSoC Creator  4.4
N*
N* Description:
N* 
N* This file is automatically generated by PSoC Creator.
N*
N********************************************************************************
N* Copyright (c) 2007-2020 Cypress Semiconductor.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions, 
N* disclaimers, and limitations in the end user license agreement accompanying 
N* the software package with which this file was provided.
N********************************************************************************/
N
N#ifndef INCLUDED_CYFITTER_H
N#define INCLUDED_CYFITTER_H
N#include "cydevice.h"
L 1 "Generated_Source\PSoC5\cydevice.h" 1
N/*******************************************************************************
N* File Name: cydevice.h
N* OBSOLETE: Do not use this file. Use the _trm version instead.
N* PSoC Creator  4.4
N*
N* Description:
N* This file provides all of the address values for the entire PSoC device.
N* This file is automatically generated by PSoC Creator.
N*
N********************************************************************************
N* Copyright (c) 2007-2020 Cypress Semiconductor.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions, 
N* disclaimers, and limitations in the end user license agreement accompanying 
N* the software package with which this file was provided.
N********************************************************************************/
N
N#if !defined(CYDEVICE_H)
X#if !0L
N#define CYDEVICE_H
N#define CYDEV_FLASH_BASE 0x00000000u
N#define CYDEV_FLASH_SIZE 0x00040000u
N#define CYDEV_FLASH_DATA_MBASE 0x00000000u
N#define CYDEV_FLASH_DATA_MSIZE 0x00040000u
N#define CYDEV_SRAM_BASE 0x1fff8000u
N#define CYDEV_SRAM_SIZE 0x00010000u
N#define CYDEV_SRAM_CODE64K_MBASE 0x1fff8000u
N#define CYDEV_SRAM_CODE64K_MSIZE 0x00004000u
N#define CYDEV_SRAM_CODE32K_MBASE 0x1fffc000u
N#define CYDEV_SRAM_CODE32K_MSIZE 0x00002000u
N#define CYDEV_SRAM_CODE16K_MBASE 0x1fffe000u
N#define CYDEV_SRAM_CODE16K_MSIZE 0x00001000u
N#define CYDEV_SRAM_CODE_MBASE 0x1fff8000u
N#define CYDEV_SRAM_CODE_MSIZE 0x00008000u
N#define CYDEV_SRAM_DATA_MBASE 0x20000000u
N#define CYDEV_SRAM_DATA_MSIZE 0x00008000u
N#define CYDEV_SRAM_DATA16K_MBASE 0x20001000u
N#define CYDEV_SRAM_DATA16K_MSIZE 0x00001000u
N#define CYDEV_SRAM_DATA32K_MBASE 0x20002000u
N#define CYDEV_SRAM_DATA32K_MSIZE 0x00002000u
N#define CYDEV_SRAM_DATA64K_MBASE 0x20004000u
N#define CYDEV_SRAM_DATA64K_MSIZE 0x00004000u
N#define CYDEV_DMA_BASE 0x20008000u
N#define CYDEV_DMA_SIZE 0x00008000u
N#define CYDEV_DMA_SRAM64K_MBASE 0x20008000u
N#define CYDEV_DMA_SRAM64K_MSIZE 0x00004000u
N#define CYDEV_DMA_SRAM32K_MBASE 0x2000c000u
N#define CYDEV_DMA_SRAM32K_MSIZE 0x00002000u
N#define CYDEV_DMA_SRAM16K_MBASE 0x2000e000u
N#define CYDEV_DMA_SRAM16K_MSIZE 0x00001000u
N#define CYDEV_DMA_SRAM_MBASE 0x2000f000u
N#define CYDEV_DMA_SRAM_MSIZE 0x00001000u
N#define CYDEV_CLKDIST_BASE 0x40004000u
N#define CYDEV_CLKDIST_SIZE 0x00000110u
N#define CYDEV_CLKDIST_CR 0x40004000u
N#define CYDEV_CLKDIST_LD 0x40004001u
N#define CYDEV_CLKDIST_WRK0 0x40004002u
N#define CYDEV_CLKDIST_WRK1 0x40004003u
N#define CYDEV_CLKDIST_MSTR0 0x40004004u
N#define CYDEV_CLKDIST_MSTR1 0x40004005u
N#define CYDEV_CLKDIST_BCFG0 0x40004006u
N#define CYDEV_CLKDIST_BCFG1 0x40004007u
N#define CYDEV_CLKDIST_BCFG2 0x40004008u
N#define CYDEV_CLKDIST_UCFG 0x40004009u
N#define CYDEV_CLKDIST_DLY0 0x4000400au
N#define CYDEV_CLKDIST_DLY1 0x4000400bu
N#define CYDEV_CLKDIST_DMASK 0x40004010u
N#define CYDEV_CLKDIST_AMASK 0x40004014u
N#define CYDEV_CLKDIST_DCFG0_BASE 0x40004080u
N#define CYDEV_CLKDIST_DCFG0_SIZE 0x00000003u
N#define CYDEV_CLKDIST_DCFG0_CFG0 0x40004080u
N#define CYDEV_CLKDIST_DCFG0_CFG1 0x40004081u
N#define CYDEV_CLKDIST_DCFG0_CFG2 0x40004082u
N#define CYDEV_CLKDIST_DCFG1_BASE 0x40004084u
N#define CYDEV_CLKDIST_DCFG1_SIZE 0x00000003u
N#define CYDEV_CLKDIST_DCFG1_CFG0 0x40004084u
N#define CYDEV_CLKDIST_DCFG1_CFG1 0x40004085u
N#define CYDEV_CLKDIST_DCFG1_CFG2 0x40004086u
N#define CYDEV_CLKDIST_DCFG2_BASE 0x40004088u
N#define CYDEV_CLKDIST_DCFG2_SIZE 0x00000003u
N#define CYDEV_CLKDIST_DCFG2_CFG0 0x40004088u
N#define CYDEV_CLKDIST_DCFG2_CFG1 0x40004089u
N#define CYDEV_CLKDIST_DCFG2_CFG2 0x4000408au
N#define CYDEV_CLKDIST_DCFG3_BASE 0x4000408cu
N#define CYDEV_CLKDIST_DCFG3_SIZE 0x00000003u
N#define CYDEV_CLKDIST_DCFG3_CFG0 0x4000408cu
N#define CYDEV_CLKDIST_DCFG3_CFG1 0x4000408du
N#define CYDEV_CLKDIST_DCFG3_CFG2 0x4000408eu
N#define CYDEV_CLKDIST_DCFG4_BASE 0x40004090u
N#define CYDEV_CLKDIST_DCFG4_SIZE 0x00000003u
N#define CYDEV_CLKDIST_DCFG4_CFG0 0x40004090u
N#define CYDEV_CLKDIST_DCFG4_CFG1 0x40004091u
N#define CYDEV_CLKDIST_DCFG4_CFG2 0x40004092u
N#define CYDEV_CLKDIST_DCFG5_BASE 0x40004094u
N#define CYDEV_CLKDIST_DCFG5_SIZE 0x00000003u
N#define CYDEV_CLKDIST_DCFG5_CFG0 0x40004094u
N#define CYDEV_CLKDIST_DCFG5_CFG1 0x40004095u
N#define CYDEV_CLKDIST_DCFG5_CFG2 0x40004096u
N#define CYDEV_CLKDIST_DCFG6_BASE 0x40004098u
N#define CYDEV_CLKDIST_DCFG6_SIZE 0x00000003u
N#define CYDEV_CLKDIST_DCFG6_CFG0 0x40004098u
N#define CYDEV_CLKDIST_DCFG6_CFG1 0x40004099u
N#define CYDEV_CLKDIST_DCFG6_CFG2 0x4000409au
N#define CYDEV_CLKDIST_DCFG7_BASE 0x4000409cu
N#define CYDEV_CLKDIST_DCFG7_SIZE 0x00000003u
N#define CYDEV_CLKDIST_DCFG7_CFG0 0x4000409cu
N#define CYDEV_CLKDIST_DCFG7_CFG1 0x4000409du
N#define CYDEV_CLKDIST_DCFG7_CFG2 0x4000409eu
N#define CYDEV_CLKDIST_ACFG0_BASE 0x40004100u
N#define CYDEV_CLKDIST_ACFG0_SIZE 0x00000004u
N#define CYDEV_CLKDIST_ACFG0_CFG0 0x40004100u
N#define CYDEV_CLKDIST_ACFG0_CFG1 0x40004101u
N#define CYDEV_CLKDIST_ACFG0_CFG2 0x40004102u
N#define CYDEV_CLKDIST_ACFG0_CFG3 0x40004103u
N#define CYDEV_CLKDIST_ACFG1_BASE 0x40004104u
N#define CYDEV_CLKDIST_ACFG1_SIZE 0x00000004u
N#define CYDEV_CLKDIST_ACFG1_CFG0 0x40004104u
N#define CYDEV_CLKDIST_ACFG1_CFG1 0x40004105u
N#define CYDEV_CLKDIST_ACFG1_CFG2 0x40004106u
N#define CYDEV_CLKDIST_ACFG1_CFG3 0x40004107u
N#define CYDEV_CLKDIST_ACFG2_BASE 0x40004108u
N#define CYDEV_CLKDIST_ACFG2_SIZE 0x00000004u
N#define CYDEV_CLKDIST_ACFG2_CFG0 0x40004108u
N#define CYDEV_CLKDIST_ACFG2_CFG1 0x40004109u
N#define CYDEV_CLKDIST_ACFG2_CFG2 0x4000410au
N#define CYDEV_CLKDIST_ACFG2_CFG3 0x4000410bu
N#define CYDEV_CLKDIST_ACFG3_BASE 0x4000410cu
N#define CYDEV_CLKDIST_ACFG3_SIZE 0x00000004u
N#define CYDEV_CLKDIST_ACFG3_CFG0 0x4000410cu
N#define CYDEV_CLKDIST_ACFG3_CFG1 0x4000410du
N#define CYDEV_CLKDIST_ACFG3_CFG2 0x4000410eu
N#define CYDEV_CLKDIST_ACFG3_CFG3 0x4000410fu
N#define CYDEV_FASTCLK_BASE 0x40004200u
N#define CYDEV_FASTCLK_SIZE 0x00000026u
N#define CYDEV_FASTCLK_IMO_BASE 0x40004200u
N#define CYDEV_FASTCLK_IMO_SIZE 0x00000001u
N#define CYDEV_FASTCLK_IMO_CR 0x40004200u
N#define CYDEV_FASTCLK_XMHZ_BASE 0x40004210u
N#define CYDEV_FASTCLK_XMHZ_SIZE 0x00000004u
N#define CYDEV_FASTCLK_XMHZ_CSR 0x40004210u
N#define CYDEV_FASTCLK_XMHZ_CFG0 0x40004212u
N#define CYDEV_FASTCLK_XMHZ_CFG1 0x40004213u
N#define CYDEV_FASTCLK_PLL_BASE 0x40004220u
N#define CYDEV_FASTCLK_PLL_SIZE 0x00000006u
N#define CYDEV_FASTCLK_PLL_CFG0 0x40004220u
N#define CYDEV_FASTCLK_PLL_CFG1 0x40004221u
N#define CYDEV_FASTCLK_PLL_P 0x40004222u
N#define CYDEV_FASTCLK_PLL_Q 0x40004223u
N#define CYDEV_FASTCLK_PLL_SR 0x40004225u
N#define CYDEV_SLOWCLK_BASE 0x40004300u
N#define CYDEV_SLOWCLK_SIZE 0x0000000bu
N#define CYDEV_SLOWCLK_ILO_BASE 0x40004300u
N#define CYDEV_SLOWCLK_ILO_SIZE 0x00000002u
N#define CYDEV_SLOWCLK_ILO_CR0 0x40004300u
N#define CYDEV_SLOWCLK_ILO_CR1 0x40004301u
N#define CYDEV_SLOWCLK_X32_BASE 0x40004308u
N#define CYDEV_SLOWCLK_X32_SIZE 0x00000003u
N#define CYDEV_SLOWCLK_X32_CR 0x40004308u
N#define CYDEV_SLOWCLK_X32_CFG 0x40004309u
N#define CYDEV_SLOWCLK_X32_TST 0x4000430au
N#define CYDEV_BOOST_BASE 0x40004320u
N#define CYDEV_BOOST_SIZE 0x00000007u
N#define CYDEV_BOOST_CR0 0x40004320u
N#define CYDEV_BOOST_CR1 0x40004321u
N#define CYDEV_BOOST_CR2 0x40004322u
N#define CYDEV_BOOST_CR3 0x40004323u
N#define CYDEV_BOOST_SR 0x40004324u
N#define CYDEV_BOOST_CR4 0x40004325u
N#define CYDEV_BOOST_SR2 0x40004326u
N#define CYDEV_PWRSYS_BASE 0x40004330u
N#define CYDEV_PWRSYS_SIZE 0x00000002u
N#define CYDEV_PWRSYS_CR0 0x40004330u
N#define CYDEV_PWRSYS_CR1 0x40004331u
N#define CYDEV_PM_BASE 0x40004380u
N#define CYDEV_PM_SIZE 0x00000057u
N#define CYDEV_PM_TW_CFG0 0x40004380u
N#define CYDEV_PM_TW_CFG1 0x40004381u
N#define CYDEV_PM_TW_CFG2 0x40004382u
N#define CYDEV_PM_WDT_CFG 0x40004383u
N#define CYDEV_PM_WDT_CR 0x40004384u
N#define CYDEV_PM_INT_SR 0x40004390u
N#define CYDEV_PM_MODE_CFG0 0x40004391u
N#define CYDEV_PM_MODE_CFG1 0x40004392u
N#define CYDEV_PM_MODE_CSR 0x40004393u
N#define CYDEV_PM_USB_CR0 0x40004394u
N#define CYDEV_PM_WAKEUP_CFG0 0x40004398u
N#define CYDEV_PM_WAKEUP_CFG1 0x40004399u
N#define CYDEV_PM_WAKEUP_CFG2 0x4000439au
N#define CYDEV_PM_ACT_BASE 0x400043a0u
N#define CYDEV_PM_ACT_SIZE 0x0000000eu
N#define CYDEV_PM_ACT_CFG0 0x400043a0u
N#define CYDEV_PM_ACT_CFG1 0x400043a1u
N#define CYDEV_PM_ACT_CFG2 0x400043a2u
N#define CYDEV_PM_ACT_CFG3 0x400043a3u
N#define CYDEV_PM_ACT_CFG4 0x400043a4u
N#define CYDEV_PM_ACT_CFG5 0x400043a5u
N#define CYDEV_PM_ACT_CFG6 0x400043a6u
N#define CYDEV_PM_ACT_CFG7 0x400043a7u
N#define CYDEV_PM_ACT_CFG8 0x400043a8u
N#define CYDEV_PM_ACT_CFG9 0x400043a9u
N#define CYDEV_PM_ACT_CFG10 0x400043aau
N#define CYDEV_PM_ACT_CFG11 0x400043abu
N#define CYDEV_PM_ACT_CFG12 0x400043acu
N#define CYDEV_PM_ACT_CFG13 0x400043adu
N#define CYDEV_PM_STBY_BASE 0x400043b0u
N#define CYDEV_PM_STBY_SIZE 0x0000000eu
N#define CYDEV_PM_STBY_CFG0 0x400043b0u
N#define CYDEV_PM_STBY_CFG1 0x400043b1u
N#define CYDEV_PM_STBY_CFG2 0x400043b2u
N#define CYDEV_PM_STBY_CFG3 0x400043b3u
N#define CYDEV_PM_STBY_CFG4 0x400043b4u
N#define CYDEV_PM_STBY_CFG5 0x400043b5u
N#define CYDEV_PM_STBY_CFG6 0x400043b6u
N#define CYDEV_PM_STBY_CFG7 0x400043b7u
N#define CYDEV_PM_STBY_CFG8 0x400043b8u
N#define CYDEV_PM_STBY_CFG9 0x400043b9u
N#define CYDEV_PM_STBY_CFG10 0x400043bau
N#define CYDEV_PM_STBY_CFG11 0x400043bbu
N#define CYDEV_PM_STBY_CFG12 0x400043bcu
N#define CYDEV_PM_STBY_CFG13 0x400043bdu
N#define CYDEV_PM_AVAIL_BASE 0x400043c0u
N#define CYDEV_PM_AVAIL_SIZE 0x00000017u
N#define CYDEV_PM_AVAIL_CR0 0x400043c0u
N#define CYDEV_PM_AVAIL_CR1 0x400043c1u
N#define CYDEV_PM_AVAIL_CR2 0x400043c2u
N#define CYDEV_PM_AVAIL_CR3 0x400043c3u
N#define CYDEV_PM_AVAIL_CR4 0x400043c4u
N#define CYDEV_PM_AVAIL_CR5 0x400043c5u
N#define CYDEV_PM_AVAIL_CR6 0x400043c6u
N#define CYDEV_PM_AVAIL_SR0 0x400043d0u
N#define CYDEV_PM_AVAIL_SR1 0x400043d1u
N#define CYDEV_PM_AVAIL_SR2 0x400043d2u
N#define CYDEV_PM_AVAIL_SR3 0x400043d3u
N#define CYDEV_PM_AVAIL_SR4 0x400043d4u
N#define CYDEV_PM_AVAIL_SR5 0x400043d5u
N#define CYDEV_PM_AVAIL_SR6 0x400043d6u
N#define CYDEV_PICU_BASE 0x40004500u
N#define CYDEV_PICU_SIZE 0x000000b0u
N#define CYDEV_PICU_INTTYPE_BASE 0x40004500u
N#define CYDEV_PICU_INTTYPE_SIZE 0x00000080u
N#define CYDEV_PICU_INTTYPE_PICU0_BASE 0x40004500u
N#define CYDEV_PICU_INTTYPE_PICU0_SIZE 0x00000008u
N#define CYDEV_PICU_INTTYPE_PICU0_INTTYPE0 0x40004500u
N#define CYDEV_PICU_INTTYPE_PICU0_INTTYPE1 0x40004501u
N#define CYDEV_PICU_INTTYPE_PICU0_INTTYPE2 0x40004502u
N#define CYDEV_PICU_INTTYPE_PICU0_INTTYPE3 0x40004503u
N#define CYDEV_PICU_INTTYPE_PICU0_INTTYPE4 0x40004504u
N#define CYDEV_PICU_INTTYPE_PICU0_INTTYPE5 0x40004505u
N#define CYDEV_PICU_INTTYPE_PICU0_INTTYPE6 0x40004506u
N#define CYDEV_PICU_INTTYPE_PICU0_INTTYPE7 0x40004507u
N#define CYDEV_PICU_INTTYPE_PICU1_BASE 0x40004508u
N#define CYDEV_PICU_INTTYPE_PICU1_SIZE 0x00000008u
N#define CYDEV_PICU_INTTYPE_PICU1_INTTYPE0 0x40004508u
N#define CYDEV_PICU_INTTYPE_PICU1_INTTYPE1 0x40004509u
N#define CYDEV_PICU_INTTYPE_PICU1_INTTYPE2 0x4000450au
N#define CYDEV_PICU_INTTYPE_PICU1_INTTYPE3 0x4000450bu
N#define CYDEV_PICU_INTTYPE_PICU1_INTTYPE4 0x4000450cu
N#define CYDEV_PICU_INTTYPE_PICU1_INTTYPE5 0x4000450du
N#define CYDEV_PICU_INTTYPE_PICU1_INTTYPE6 0x4000450eu
N#define CYDEV_PICU_INTTYPE_PICU1_INTTYPE7 0x4000450fu
N#define CYDEV_PICU_INTTYPE_PICU2_BASE 0x40004510u
N#define CYDEV_PICU_INTTYPE_PICU2_SIZE 0x00000008u
N#define CYDEV_PICU_INTTYPE_PICU2_INTTYPE0 0x40004510u
N#define CYDEV_PICU_INTTYPE_PICU2_INTTYPE1 0x40004511u
N#define CYDEV_PICU_INTTYPE_PICU2_INTTYPE2 0x40004512u
N#define CYDEV_PICU_INTTYPE_PICU2_INTTYPE3 0x40004513u
N#define CYDEV_PICU_INTTYPE_PICU2_INTTYPE4 0x40004514u
N#define CYDEV_PICU_INTTYPE_PICU2_INTTYPE5 0x40004515u
N#define CYDEV_PICU_INTTYPE_PICU2_INTTYPE6 0x40004516u
N#define CYDEV_PICU_INTTYPE_PICU2_INTTYPE7 0x40004517u
N#define CYDEV_PICU_INTTYPE_PICU3_BASE 0x40004518u
N#define CYDEV_PICU_INTTYPE_PICU3_SIZE 0x00000008u
N#define CYDEV_PICU_INTTYPE_PICU3_INTTYPE0 0x40004518u
N#define CYDEV_PICU_INTTYPE_PICU3_INTTYPE1 0x40004519u
N#define CYDEV_PICU_INTTYPE_PICU3_INTTYPE2 0x4000451au
N#define CYDEV_PICU_INTTYPE_PICU3_INTTYPE3 0x4000451bu
N#define CYDEV_PICU_INTTYPE_PICU3_INTTYPE4 0x4000451cu
N#define CYDEV_PICU_INTTYPE_PICU3_INTTYPE5 0x4000451du
N#define CYDEV_PICU_INTTYPE_PICU3_INTTYPE6 0x4000451eu
N#define CYDEV_PICU_INTTYPE_PICU3_INTTYPE7 0x4000451fu
N#define CYDEV_PICU_INTTYPE_PICU4_BASE 0x40004520u
N#define CYDEV_PICU_INTTYPE_PICU4_SIZE 0x00000008u
N#define CYDEV_PICU_INTTYPE_PICU4_INTTYPE0 0x40004520u
N#define CYDEV_PICU_INTTYPE_PICU4_INTTYPE1 0x40004521u
N#define CYDEV_PICU_INTTYPE_PICU4_INTTYPE2 0x40004522u
N#define CYDEV_PICU_INTTYPE_PICU4_INTTYPE3 0x40004523u
N#define CYDEV_PICU_INTTYPE_PICU4_INTTYPE4 0x40004524u
N#define CYDEV_PICU_INTTYPE_PICU4_INTTYPE5 0x40004525u
N#define CYDEV_PICU_INTTYPE_PICU4_INTTYPE6 0x40004526u
N#define CYDEV_PICU_INTTYPE_PICU4_INTTYPE7 0x40004527u
N#define CYDEV_PICU_INTTYPE_PICU5_BASE 0x40004528u
N#define CYDEV_PICU_INTTYPE_PICU5_SIZE 0x00000008u
N#define CYDEV_PICU_INTTYPE_PICU5_INTTYPE0 0x40004528u
N#define CYDEV_PICU_INTTYPE_PICU5_INTTYPE1 0x40004529u
N#define CYDEV_PICU_INTTYPE_PICU5_INTTYPE2 0x4000452au
N#define CYDEV_PICU_INTTYPE_PICU5_INTTYPE3 0x4000452bu
N#define CYDEV_PICU_INTTYPE_PICU5_INTTYPE4 0x4000452cu
N#define CYDEV_PICU_INTTYPE_PICU5_INTTYPE5 0x4000452du
N#define CYDEV_PICU_INTTYPE_PICU5_INTTYPE6 0x4000452eu
N#define CYDEV_PICU_INTTYPE_PICU5_INTTYPE7 0x4000452fu
N#define CYDEV_PICU_INTTYPE_PICU6_BASE 0x40004530u
N#define CYDEV_PICU_INTTYPE_PICU6_SIZE 0x00000008u
N#define CYDEV_PICU_INTTYPE_PICU6_INTTYPE0 0x40004530u
N#define CYDEV_PICU_INTTYPE_PICU6_INTTYPE1 0x40004531u
N#define CYDEV_PICU_INTTYPE_PICU6_INTTYPE2 0x40004532u
N#define CYDEV_PICU_INTTYPE_PICU6_INTTYPE3 0x40004533u
N#define CYDEV_PICU_INTTYPE_PICU6_INTTYPE4 0x40004534u
N#define CYDEV_PICU_INTTYPE_PICU6_INTTYPE5 0x40004535u
N#define CYDEV_PICU_INTTYPE_PICU6_INTTYPE6 0x40004536u
N#define CYDEV_PICU_INTTYPE_PICU6_INTTYPE7 0x40004537u
N#define CYDEV_PICU_INTTYPE_PICU12_BASE 0x40004560u
N#define CYDEV_PICU_INTTYPE_PICU12_SIZE 0x00000008u
N#define CYDEV_PICU_INTTYPE_PICU12_INTTYPE0 0x40004560u
N#define CYDEV_PICU_INTTYPE_PICU12_INTTYPE1 0x40004561u
N#define CYDEV_PICU_INTTYPE_PICU12_INTTYPE2 0x40004562u
N#define CYDEV_PICU_INTTYPE_PICU12_INTTYPE3 0x40004563u
N#define CYDEV_PICU_INTTYPE_PICU12_INTTYPE4 0x40004564u
N#define CYDEV_PICU_INTTYPE_PICU12_INTTYPE5 0x40004565u
N#define CYDEV_PICU_INTTYPE_PICU12_INTTYPE6 0x40004566u
N#define CYDEV_PICU_INTTYPE_PICU12_INTTYPE7 0x40004567u
N#define CYDEV_PICU_INTTYPE_PICU15_BASE 0x40004578u
N#define CYDEV_PICU_INTTYPE_PICU15_SIZE 0x00000008u
N#define CYDEV_PICU_INTTYPE_PICU15_INTTYPE0 0x40004578u
N#define CYDEV_PICU_INTTYPE_PICU15_INTTYPE1 0x40004579u
N#define CYDEV_PICU_INTTYPE_PICU15_INTTYPE2 0x4000457au
N#define CYDEV_PICU_INTTYPE_PICU15_INTTYPE3 0x4000457bu
N#define CYDEV_PICU_INTTYPE_PICU15_INTTYPE4 0x4000457cu
N#define CYDEV_PICU_INTTYPE_PICU15_INTTYPE5 0x4000457du
N#define CYDEV_PICU_INTTYPE_PICU15_INTTYPE6 0x4000457eu
N#define CYDEV_PICU_INTTYPE_PICU15_INTTYPE7 0x4000457fu
N#define CYDEV_PICU_STAT_BASE 0x40004580u
N#define CYDEV_PICU_STAT_SIZE 0x00000010u
N#define CYDEV_PICU_STAT_PICU0_BASE 0x40004580u
N#define CYDEV_PICU_STAT_PICU0_SIZE 0x00000001u
N#define CYDEV_PICU_STAT_PICU0_INTSTAT 0x40004580u
N#define CYDEV_PICU_STAT_PICU1_BASE 0x40004581u
N#define CYDEV_PICU_STAT_PICU1_SIZE 0x00000001u
N#define CYDEV_PICU_STAT_PICU1_INTSTAT 0x40004581u
N#define CYDEV_PICU_STAT_PICU2_BASE 0x40004582u
N#define CYDEV_PICU_STAT_PICU2_SIZE 0x00000001u
N#define CYDEV_PICU_STAT_PICU2_INTSTAT 0x40004582u
N#define CYDEV_PICU_STAT_PICU3_BASE 0x40004583u
N#define CYDEV_PICU_STAT_PICU3_SIZE 0x00000001u
N#define CYDEV_PICU_STAT_PICU3_INTSTAT 0x40004583u
N#define CYDEV_PICU_STAT_PICU4_BASE 0x40004584u
N#define CYDEV_PICU_STAT_PICU4_SIZE 0x00000001u
N#define CYDEV_PICU_STAT_PICU4_INTSTAT 0x40004584u
N#define CYDEV_PICU_STAT_PICU5_BASE 0x40004585u
N#define CYDEV_PICU_STAT_PICU5_SIZE 0x00000001u
N#define CYDEV_PICU_STAT_PICU5_INTSTAT 0x40004585u
N#define CYDEV_PICU_STAT_PICU6_BASE 0x40004586u
N#define CYDEV_PICU_STAT_PICU6_SIZE 0x00000001u
N#define CYDEV_PICU_STAT_PICU6_INTSTAT 0x40004586u
N#define CYDEV_PICU_STAT_PICU12_BASE 0x4000458cu
N#define CYDEV_PICU_STAT_PICU12_SIZE 0x00000001u
N#define CYDEV_PICU_STAT_PICU12_INTSTAT 0x4000458cu
N#define CYDEV_PICU_STAT_PICU15_BASE 0x4000458fu
N#define CYDEV_PICU_STAT_PICU15_SIZE 0x00000001u
N#define CYDEV_PICU_STAT_PICU15_INTSTAT 0x4000458fu
N#define CYDEV_PICU_SNAP_BASE 0x40004590u
N#define CYDEV_PICU_SNAP_SIZE 0x00000010u
N#define CYDEV_PICU_SNAP_PICU0_BASE 0x40004590u
N#define CYDEV_PICU_SNAP_PICU0_SIZE 0x00000001u
N#define CYDEV_PICU_SNAP_PICU0_SNAP 0x40004590u
N#define CYDEV_PICU_SNAP_PICU1_BASE 0x40004591u
N#define CYDEV_PICU_SNAP_PICU1_SIZE 0x00000001u
N#define CYDEV_PICU_SNAP_PICU1_SNAP 0x40004591u
N#define CYDEV_PICU_SNAP_PICU2_BASE 0x40004592u
N#define CYDEV_PICU_SNAP_PICU2_SIZE 0x00000001u
N#define CYDEV_PICU_SNAP_PICU2_SNAP 0x40004592u
N#define CYDEV_PICU_SNAP_PICU3_BASE 0x40004593u
N#define CYDEV_PICU_SNAP_PICU3_SIZE 0x00000001u
N#define CYDEV_PICU_SNAP_PICU3_SNAP 0x40004593u
N#define CYDEV_PICU_SNAP_PICU4_BASE 0x40004594u
N#define CYDEV_PICU_SNAP_PICU4_SIZE 0x00000001u
N#define CYDEV_PICU_SNAP_PICU4_SNAP 0x40004594u
N#define CYDEV_PICU_SNAP_PICU5_BASE 0x40004595u
N#define CYDEV_PICU_SNAP_PICU5_SIZE 0x00000001u
N#define CYDEV_PICU_SNAP_PICU5_SNAP 0x40004595u
N#define CYDEV_PICU_SNAP_PICU6_BASE 0x40004596u
N#define CYDEV_PICU_SNAP_PICU6_SIZE 0x00000001u
N#define CYDEV_PICU_SNAP_PICU6_SNAP 0x40004596u
N#define CYDEV_PICU_SNAP_PICU12_BASE 0x4000459cu
N#define CYDEV_PICU_SNAP_PICU12_SIZE 0x00000001u
N#define CYDEV_PICU_SNAP_PICU12_SNAP 0x4000459cu
N#define CYDEV_PICU_SNAP_PICU_15_BASE 0x4000459fu
N#define CYDEV_PICU_SNAP_PICU_15_SIZE 0x00000001u
N#define CYDEV_PICU_SNAP_PICU_15_SNAP_15 0x4000459fu
N#define CYDEV_PICU_DISABLE_COR_BASE 0x400045a0u
N#define CYDEV_PICU_DISABLE_COR_SIZE 0x00000010u
N#define CYDEV_PICU_DISABLE_COR_PICU0_BASE 0x400045a0u
N#define CYDEV_PICU_DISABLE_COR_PICU0_SIZE 0x00000001u
N#define CYDEV_PICU_DISABLE_COR_PICU0_DISABLE_COR 0x400045a0u
N#define CYDEV_PICU_DISABLE_COR_PICU1_BASE 0x400045a1u
N#define CYDEV_PICU_DISABLE_COR_PICU1_SIZE 0x00000001u
N#define CYDEV_PICU_DISABLE_COR_PICU1_DISABLE_COR 0x400045a1u
N#define CYDEV_PICU_DISABLE_COR_PICU2_BASE 0x400045a2u
N#define CYDEV_PICU_DISABLE_COR_PICU2_SIZE 0x00000001u
N#define CYDEV_PICU_DISABLE_COR_PICU2_DISABLE_COR 0x400045a2u
N#define CYDEV_PICU_DISABLE_COR_PICU3_BASE 0x400045a3u
N#define CYDEV_PICU_DISABLE_COR_PICU3_SIZE 0x00000001u
N#define CYDEV_PICU_DISABLE_COR_PICU3_DISABLE_COR 0x400045a3u
N#define CYDEV_PICU_DISABLE_COR_PICU4_BASE 0x400045a4u
N#define CYDEV_PICU_DISABLE_COR_PICU4_SIZE 0x00000001u
N#define CYDEV_PICU_DISABLE_COR_PICU4_DISABLE_COR 0x400045a4u
N#define CYDEV_PICU_DISABLE_COR_PICU5_BASE 0x400045a5u
N#define CYDEV_PICU_DISABLE_COR_PICU5_SIZE 0x00000001u
N#define CYDEV_PICU_DISABLE_COR_PICU5_DISABLE_COR 0x400045a5u
N#define CYDEV_PICU_DISABLE_COR_PICU6_BASE 0x400045a6u
N#define CYDEV_PICU_DISABLE_COR_PICU6_SIZE 0x00000001u
N#define CYDEV_PICU_DISABLE_COR_PICU6_DISABLE_COR 0x400045a6u
N#define CYDEV_PICU_DISABLE_COR_PICU12_BASE 0x400045acu
N#define CYDEV_PICU_DISABLE_COR_PICU12_SIZE 0x00000001u
N#define CYDEV_PICU_DISABLE_COR_PICU12_DISABLE_COR 0x400045acu
N#define CYDEV_PICU_DISABLE_COR_PICU15_BASE 0x400045afu
N#define CYDEV_PICU_DISABLE_COR_PICU15_SIZE 0x00000001u
N#define CYDEV_PICU_DISABLE_COR_PICU15_DISABLE_COR 0x400045afu
N#define CYDEV_MFGCFG_BASE 0x40004600u
N#define CYDEV_MFGCFG_SIZE 0x000000edu
N#define CYDEV_MFGCFG_ANAIF_BASE 0x40004600u
N#define CYDEV_MFGCFG_ANAIF_SIZE 0x00000038u
N#define CYDEV_MFGCFG_ANAIF_DAC0_BASE 0x40004608u
N#define CYDEV_MFGCFG_ANAIF_DAC0_SIZE 0x00000001u
N#define CYDEV_MFGCFG_ANAIF_DAC0_TR 0x40004608u
N#define CYDEV_MFGCFG_ANAIF_DAC1_BASE 0x40004609u
N#define CYDEV_MFGCFG_ANAIF_DAC1_SIZE 0x00000001u
N#define CYDEV_MFGCFG_ANAIF_DAC1_TR 0x40004609u
N#define CYDEV_MFGCFG_ANAIF_DAC2_BASE 0x4000460au
N#define CYDEV_MFGCFG_ANAIF_DAC2_SIZE 0x00000001u
N#define CYDEV_MFGCFG_ANAIF_DAC2_TR 0x4000460au
N#define CYDEV_MFGCFG_ANAIF_DAC3_BASE 0x4000460bu
N#define CYDEV_MFGCFG_ANAIF_DAC3_SIZE 0x00000001u
N#define CYDEV_MFGCFG_ANAIF_DAC3_TR 0x4000460bu
N#define CYDEV_MFGCFG_ANAIF_NPUMP_DSM_BASE 0x40004610u
N#define CYDEV_MFGCFG_ANAIF_NPUMP_DSM_SIZE 0x00000001u
N#define CYDEV_MFGCFG_ANAIF_NPUMP_DSM_TR0 0x40004610u
N#define CYDEV_MFGCFG_ANAIF_NPUMP_SC_BASE 0x40004611u
N#define CYDEV_MFGCFG_ANAIF_NPUMP_SC_SIZE 0x00000001u
N#define CYDEV_MFGCFG_ANAIF_NPUMP_SC_TR0 0x40004611u
N#define CYDEV_MFGCFG_ANAIF_NPUMP_OPAMP_BASE 0x40004612u
N#define CYDEV_MFGCFG_ANAIF_NPUMP_OPAMP_SIZE 0x00000001u
N#define CYDEV_MFGCFG_ANAIF_NPUMP_OPAMP_TR0 0x40004612u
N#define CYDEV_MFGCFG_ANAIF_SAR0_BASE 0x40004614u
N#define CYDEV_MFGCFG_ANAIF_SAR0_SIZE 0x00000001u
N#define CYDEV_MFGCFG_ANAIF_SAR0_TR0 0x40004614u
N#define CYDEV_MFGCFG_ANAIF_SAR1_BASE 0x40004616u
N#define CYDEV_MFGCFG_ANAIF_SAR1_SIZE 0x00000001u
N#define CYDEV_MFGCFG_ANAIF_SAR1_TR0 0x40004616u
N#define CYDEV_MFGCFG_ANAIF_OPAMP0_BASE 0x40004620u
N#define CYDEV_MFGCFG_ANAIF_OPAMP0_SIZE 0x00000002u
N#define CYDEV_MFGCFG_ANAIF_OPAMP0_TR0 0x40004620u
N#define CYDEV_MFGCFG_ANAIF_OPAMP0_TR1 0x40004621u
N#define CYDEV_MFGCFG_ANAIF_OPAMP1_BASE 0x40004622u
N#define CYDEV_MFGCFG_ANAIF_OPAMP1_SIZE 0x00000002u
N#define CYDEV_MFGCFG_ANAIF_OPAMP1_TR0 0x40004622u
N#define CYDEV_MFGCFG_ANAIF_OPAMP1_TR1 0x40004623u
N#define CYDEV_MFGCFG_ANAIF_OPAMP2_BASE 0x40004624u
N#define CYDEV_MFGCFG_ANAIF_OPAMP2_SIZE 0x00000002u
N#define CYDEV_MFGCFG_ANAIF_OPAMP2_TR0 0x40004624u
N#define CYDEV_MFGCFG_ANAIF_OPAMP2_TR1 0x40004625u
N#define CYDEV_MFGCFG_ANAIF_OPAMP3_BASE 0x40004626u
N#define CYDEV_MFGCFG_ANAIF_OPAMP3_SIZE 0x00000002u
N#define CYDEV_MFGCFG_ANAIF_OPAMP3_TR0 0x40004626u
N#define CYDEV_MFGCFG_ANAIF_OPAMP3_TR1 0x40004627u
N#define CYDEV_MFGCFG_ANAIF_CMP0_BASE 0x40004630u
N#define CYDEV_MFGCFG_ANAIF_CMP0_SIZE 0x00000002u
N#define CYDEV_MFGCFG_ANAIF_CMP0_TR0 0x40004630u
N#define CYDEV_MFGCFG_ANAIF_CMP0_TR1 0x40004631u
N#define CYDEV_MFGCFG_ANAIF_CMP1_BASE 0x40004632u
N#define CYDEV_MFGCFG_ANAIF_CMP1_SIZE 0x00000002u
N#define CYDEV_MFGCFG_ANAIF_CMP1_TR0 0x40004632u
N#define CYDEV_MFGCFG_ANAIF_CMP1_TR1 0x40004633u
N#define CYDEV_MFGCFG_ANAIF_CMP2_BASE 0x40004634u
N#define CYDEV_MFGCFG_ANAIF_CMP2_SIZE 0x00000002u
N#define CYDEV_MFGCFG_ANAIF_CMP2_TR0 0x40004634u
N#define CYDEV_MFGCFG_ANAIF_CMP2_TR1 0x40004635u
N#define CYDEV_MFGCFG_ANAIF_CMP3_BASE 0x40004636u
N#define CYDEV_MFGCFG_ANAIF_CMP3_SIZE 0x00000002u
N#define CYDEV_MFGCFG_ANAIF_CMP3_TR0 0x40004636u
N#define CYDEV_MFGCFG_ANAIF_CMP3_TR1 0x40004637u
N#define CYDEV_MFGCFG_PWRSYS_BASE 0x40004680u
N#define CYDEV_MFGCFG_PWRSYS_SIZE 0x0000000bu
N#define CYDEV_MFGCFG_PWRSYS_HIB_TR0 0x40004680u
N#define CYDEV_MFGCFG_PWRSYS_HIB_TR1 0x40004681u
N#define CYDEV_MFGCFG_PWRSYS_I2C_TR 0x40004682u
N#define CYDEV_MFGCFG_PWRSYS_SLP_TR 0x40004683u
N#define CYDEV_MFGCFG_PWRSYS_BUZZ_TR 0x40004684u
N#define CYDEV_MFGCFG_PWRSYS_WAKE_TR0 0x40004685u
N#define CYDEV_MFGCFG_PWRSYS_WAKE_TR1 0x40004686u
N#define CYDEV_MFGCFG_PWRSYS_BREF_TR 0x40004687u
N#define CYDEV_MFGCFG_PWRSYS_BG_TR 0x40004688u
N#define CYDEV_MFGCFG_PWRSYS_WAKE_TR2 0x40004689u
N#define CYDEV_MFGCFG_PWRSYS_WAKE_TR3 0x4000468au
N#define CYDEV_MFGCFG_ILO_BASE 0x40004690u
N#define CYDEV_MFGCFG_ILO_SIZE 0x00000002u
N#define CYDEV_MFGCFG_ILO_TR0 0x40004690u
N#define CYDEV_MFGCFG_ILO_TR1 0x40004691u
N#define CYDEV_MFGCFG_X32_BASE 0x40004698u
N#define CYDEV_MFGCFG_X32_SIZE 0x00000001u
N#define CYDEV_MFGCFG_X32_TR 0x40004698u
N#define CYDEV_MFGCFG_IMO_BASE 0x400046a0u
N#define CYDEV_MFGCFG_IMO_SIZE 0x00000005u
N#define CYDEV_MFGCFG_IMO_TR0 0x400046a0u
N#define CYDEV_MFGCFG_IMO_TR1 0x400046a1u
N#define CYDEV_MFGCFG_IMO_GAIN 0x400046a2u
N#define CYDEV_MFGCFG_IMO_C36M 0x400046a3u
N#define CYDEV_MFGCFG_IMO_TR2 0x400046a4u
N#define CYDEV_MFGCFG_XMHZ_BASE 0x400046a8u
N#define CYDEV_MFGCFG_XMHZ_SIZE 0x00000001u
N#define CYDEV_MFGCFG_XMHZ_TR 0x400046a8u
N#define CYDEV_MFGCFG_DLY 0x400046c0u
N#define CYDEV_MFGCFG_MLOGIC_BASE 0x400046e0u
N#define CYDEV_MFGCFG_MLOGIC_SIZE 0x0000000du
N#define CYDEV_MFGCFG_MLOGIC_DMPSTR 0x400046e2u
N#define CYDEV_MFGCFG_MLOGIC_SEG_BASE 0x400046e4u
N#define CYDEV_MFGCFG_MLOGIC_SEG_SIZE 0x00000002u
N#define CYDEV_MFGCFG_MLOGIC_SEG_CR 0x400046e4u
N#define CYDEV_MFGCFG_MLOGIC_SEG_CFG0 0x400046e5u
N#define CYDEV_MFGCFG_MLOGIC_DEBUG 0x400046e8u
N#define CYDEV_MFGCFG_MLOGIC_CPU_SCR_BASE 0x400046eau
N#define CYDEV_MFGCFG_MLOGIC_CPU_SCR_SIZE 0x00000001u
N#define CYDEV_MFGCFG_MLOGIC_CPU_SCR_CPU_SCR 0x400046eau
N#define CYDEV_MFGCFG_MLOGIC_REV_ID 0x400046ecu
N#define CYDEV_RESET_BASE 0x400046f0u
N#define CYDEV_RESET_SIZE 0x0000000fu
N#define CYDEV_RESET_IPOR_CR0 0x400046f0u
N#define CYDEV_RESET_IPOR_CR1 0x400046f1u
N#define CYDEV_RESET_IPOR_CR2 0x400046f2u
N#define CYDEV_RESET_IPOR_CR3 0x400046f3u
N#define CYDEV_RESET_CR0 0x400046f4u
N#define CYDEV_RESET_CR1 0x400046f5u
N#define CYDEV_RESET_CR2 0x400046f6u
N#define CYDEV_RESET_CR3 0x400046f7u
N#define CYDEV_RESET_CR4 0x400046f8u
N#define CYDEV_RESET_CR5 0x400046f9u
N#define CYDEV_RESET_SR0 0x400046fau
N#define CYDEV_RESET_SR1 0x400046fbu
N#define CYDEV_RESET_SR2 0x400046fcu
N#define CYDEV_RESET_SR3 0x400046fdu
N#define CYDEV_RESET_TR 0x400046feu
N#define CYDEV_SPC_BASE 0x40004700u
N#define CYDEV_SPC_SIZE 0x00000100u
N#define CYDEV_SPC_FM_EE_CR 0x40004700u
N#define CYDEV_SPC_FM_EE_WAKE_CNT 0x40004701u
N#define CYDEV_SPC_EE_SCR 0x40004702u
N#define CYDEV_SPC_EE_ERR 0x40004703u
N#define CYDEV_SPC_CPU_DATA 0x40004720u
N#define CYDEV_SPC_DMA_DATA 0x40004721u
N#define CYDEV_SPC_SR 0x40004722u
N#define CYDEV_SPC_CR 0x40004723u
N#define CYDEV_SPC_DMM_MAP_BASE 0x40004780u
N#define CYDEV_SPC_DMM_MAP_SIZE 0x00000080u
N#define CYDEV_SPC_DMM_MAP_SRAM_MBASE 0x40004780u
N#define CYDEV_SPC_DMM_MAP_SRAM_MSIZE 0x00000080u
N#define CYDEV_CACHE_BASE 0x40004800u
N#define CYDEV_CACHE_SIZE 0x0000009cu
N#define CYDEV_CACHE_CC_CTL 0x40004800u
N#define CYDEV_CACHE_ECC_CORR 0x40004880u
N#define CYDEV_CACHE_ECC_ERR 0x40004888u
N#define CYDEV_CACHE_FLASH_ERR 0x40004890u
N#define CYDEV_CACHE_HITMISS 0x40004898u
N#define CYDEV_I2C_BASE 0x40004900u
N#define CYDEV_I2C_SIZE 0x000000e1u
N#define CYDEV_I2C_XCFG 0x400049c8u
N#define CYDEV_I2C_ADR 0x400049cau
N#define CYDEV_I2C_CFG 0x400049d6u
N#define CYDEV_I2C_CSR 0x400049d7u
N#define CYDEV_I2C_D 0x400049d8u
N#define CYDEV_I2C_MCSR 0x400049d9u
N#define CYDEV_I2C_CLK_DIV1 0x400049dbu
N#define CYDEV_I2C_CLK_DIV2 0x400049dcu
N#define CYDEV_I2C_TMOUT_CSR 0x400049ddu
N#define CYDEV_I2C_TMOUT_SR 0x400049deu
N#define CYDEV_I2C_TMOUT_CFG0 0x400049dfu
N#define CYDEV_I2C_TMOUT_CFG1 0x400049e0u
N#define CYDEV_DEC_BASE 0x40004e00u
N#define CYDEV_DEC_SIZE 0x00000015u
N#define CYDEV_DEC_CR 0x40004e00u
N#define CYDEV_DEC_SR 0x40004e01u
N#define CYDEV_DEC_SHIFT1 0x40004e02u
N#define CYDEV_DEC_SHIFT2 0x40004e03u
N#define CYDEV_DEC_DR2 0x40004e04u
N#define CYDEV_DEC_DR2H 0x40004e05u
N#define CYDEV_DEC_DR1 0x40004e06u
N#define CYDEV_DEC_OCOR 0x40004e08u
N#define CYDEV_DEC_OCORM 0x40004e09u
N#define CYDEV_DEC_OCORH 0x40004e0au
N#define CYDEV_DEC_GCOR 0x40004e0cu
N#define CYDEV_DEC_GCORH 0x40004e0du
N#define CYDEV_DEC_GVAL 0x40004e0eu
N#define CYDEV_DEC_OUTSAMP 0x40004e10u
N#define CYDEV_DEC_OUTSAMPM 0x40004e11u
N#define CYDEV_DEC_OUTSAMPH 0x40004e12u
N#define CYDEV_DEC_OUTSAMPS 0x40004e13u
N#define CYDEV_DEC_COHER 0x40004e14u
N#define CYDEV_TMR0_BASE 0x40004f00u
N#define CYDEV_TMR0_SIZE 0x0000000cu
N#define CYDEV_TMR0_CFG0 0x40004f00u
N#define CYDEV_TMR0_CFG1 0x40004f01u
N#define CYDEV_TMR0_CFG2 0x40004f02u
N#define CYDEV_TMR0_SR0 0x40004f03u
N#define CYDEV_TMR0_PER0 0x40004f04u
N#define CYDEV_TMR0_PER1 0x40004f05u
N#define CYDEV_TMR0_CNT_CMP0 0x40004f06u
N#define CYDEV_TMR0_CNT_CMP1 0x40004f07u
N#define CYDEV_TMR0_CAP0 0x40004f08u
N#define CYDEV_TMR0_CAP1 0x40004f09u
N#define CYDEV_TMR0_RT0 0x40004f0au
N#define CYDEV_TMR0_RT1 0x40004f0bu
N#define CYDEV_TMR1_BASE 0x40004f0cu
N#define CYDEV_TMR1_SIZE 0x0000000cu
N#define CYDEV_TMR1_CFG0 0x40004f0cu
N#define CYDEV_TMR1_CFG1 0x40004f0du
N#define CYDEV_TMR1_CFG2 0x40004f0eu
N#define CYDEV_TMR1_SR0 0x40004f0fu
N#define CYDEV_TMR1_PER0 0x40004f10u
N#define CYDEV_TMR1_PER1 0x40004f11u
N#define CYDEV_TMR1_CNT_CMP0 0x40004f12u
N#define CYDEV_TMR1_CNT_CMP1 0x40004f13u
N#define CYDEV_TMR1_CAP0 0x40004f14u
N#define CYDEV_TMR1_CAP1 0x40004f15u
N#define CYDEV_TMR1_RT0 0x40004f16u
N#define CYDEV_TMR1_RT1 0x40004f17u
N#define CYDEV_TMR2_BASE 0x40004f18u
N#define CYDEV_TMR2_SIZE 0x0000000cu
N#define CYDEV_TMR2_CFG0 0x40004f18u
N#define CYDEV_TMR2_CFG1 0x40004f19u
N#define CYDEV_TMR2_CFG2 0x40004f1au
N#define CYDEV_TMR2_SR0 0x40004f1bu
N#define CYDEV_TMR2_PER0 0x40004f1cu
N#define CYDEV_TMR2_PER1 0x40004f1du
N#define CYDEV_TMR2_CNT_CMP0 0x40004f1eu
N#define CYDEV_TMR2_CNT_CMP1 0x40004f1fu
N#define CYDEV_TMR2_CAP0 0x40004f20u
N#define CYDEV_TMR2_CAP1 0x40004f21u
N#define CYDEV_TMR2_RT0 0x40004f22u
N#define CYDEV_TMR2_RT1 0x40004f23u
N#define CYDEV_TMR3_BASE 0x40004f24u
N#define CYDEV_TMR3_SIZE 0x0000000cu
N#define CYDEV_TMR3_CFG0 0x40004f24u
N#define CYDEV_TMR3_CFG1 0x40004f25u
N#define CYDEV_TMR3_CFG2 0x40004f26u
N#define CYDEV_TMR3_SR0 0x40004f27u
N#define CYDEV_TMR3_PER0 0x40004f28u
N#define CYDEV_TMR3_PER1 0x40004f29u
N#define CYDEV_TMR3_CNT_CMP0 0x40004f2au
N#define CYDEV_TMR3_CNT_CMP1 0x40004f2bu
N#define CYDEV_TMR3_CAP0 0x40004f2cu
N#define CYDEV_TMR3_CAP1 0x40004f2du
N#define CYDEV_TMR3_RT0 0x40004f2eu
N#define CYDEV_TMR3_RT1 0x40004f2fu
N#define CYDEV_IO_BASE 0x40005000u
N#define CYDEV_IO_SIZE 0x00000200u
N#define CYDEV_IO_PC_BASE 0x40005000u
N#define CYDEV_IO_PC_SIZE 0x00000080u
N#define CYDEV_IO_PC_PRT0_BASE 0x40005000u
N#define CYDEV_IO_PC_PRT0_SIZE 0x00000008u
N#define CYDEV_IO_PC_PRT0_PC0 0x40005000u
N#define CYDEV_IO_PC_PRT0_PC1 0x40005001u
N#define CYDEV_IO_PC_PRT0_PC2 0x40005002u
N#define CYDEV_IO_PC_PRT0_PC3 0x40005003u
N#define CYDEV_IO_PC_PRT0_PC4 0x40005004u
N#define CYDEV_IO_PC_PRT0_PC5 0x40005005u
N#define CYDEV_IO_PC_PRT0_PC6 0x40005006u
N#define CYDEV_IO_PC_PRT0_PC7 0x40005007u
N#define CYDEV_IO_PC_PRT1_BASE 0x40005008u
N#define CYDEV_IO_PC_PRT1_SIZE 0x00000008u
N#define CYDEV_IO_PC_PRT1_PC0 0x40005008u
N#define CYDEV_IO_PC_PRT1_PC1 0x40005009u
N#define CYDEV_IO_PC_PRT1_PC2 0x4000500au
N#define CYDEV_IO_PC_PRT1_PC3 0x4000500bu
N#define CYDEV_IO_PC_PRT1_PC4 0x4000500cu
N#define CYDEV_IO_PC_PRT1_PC5 0x4000500du
N#define CYDEV_IO_PC_PRT1_PC6 0x4000500eu
N#define CYDEV_IO_PC_PRT1_PC7 0x4000500fu
N#define CYDEV_IO_PC_PRT2_BASE 0x40005010u
N#define CYDEV_IO_PC_PRT2_SIZE 0x00000008u
N#define CYDEV_IO_PC_PRT2_PC0 0x40005010u
N#define CYDEV_IO_PC_PRT2_PC1 0x40005011u
N#define CYDEV_IO_PC_PRT2_PC2 0x40005012u
N#define CYDEV_IO_PC_PRT2_PC3 0x40005013u
N#define CYDEV_IO_PC_PRT2_PC4 0x40005014u
N#define CYDEV_IO_PC_PRT2_PC5 0x40005015u
N#define CYDEV_IO_PC_PRT2_PC6 0x40005016u
N#define CYDEV_IO_PC_PRT2_PC7 0x40005017u
N#define CYDEV_IO_PC_PRT3_BASE 0x40005018u
N#define CYDEV_IO_PC_PRT3_SIZE 0x00000008u
N#define CYDEV_IO_PC_PRT3_PC0 0x40005018u
N#define CYDEV_IO_PC_PRT3_PC1 0x40005019u
N#define CYDEV_IO_PC_PRT3_PC2 0x4000501au
N#define CYDEV_IO_PC_PRT3_PC3 0x4000501bu
N#define CYDEV_IO_PC_PRT3_PC4 0x4000501cu
N#define CYDEV_IO_PC_PRT3_PC5 0x4000501du
N#define CYDEV_IO_PC_PRT3_PC6 0x4000501eu
N#define CYDEV_IO_PC_PRT3_PC7 0x4000501fu
N#define CYDEV_IO_PC_PRT4_BASE 0x40005020u
N#define CYDEV_IO_PC_PRT4_SIZE 0x00000008u
N#define CYDEV_IO_PC_PRT4_PC0 0x40005020u
N#define CYDEV_IO_PC_PRT4_PC1 0x40005021u
N#define CYDEV_IO_PC_PRT4_PC2 0x40005022u
N#define CYDEV_IO_PC_PRT4_PC3 0x40005023u
N#define CYDEV_IO_PC_PRT4_PC4 0x40005024u
N#define CYDEV_IO_PC_PRT4_PC5 0x40005025u
N#define CYDEV_IO_PC_PRT4_PC6 0x40005026u
N#define CYDEV_IO_PC_PRT4_PC7 0x40005027u
N#define CYDEV_IO_PC_PRT5_BASE 0x40005028u
N#define CYDEV_IO_PC_PRT5_SIZE 0x00000008u
N#define CYDEV_IO_PC_PRT5_PC0 0x40005028u
N#define CYDEV_IO_PC_PRT5_PC1 0x40005029u
N#define CYDEV_IO_PC_PRT5_PC2 0x4000502au
N#define CYDEV_IO_PC_PRT5_PC3 0x4000502bu
N#define CYDEV_IO_PC_PRT5_PC4 0x4000502cu
N#define CYDEV_IO_PC_PRT5_PC5 0x4000502du
N#define CYDEV_IO_PC_PRT5_PC6 0x4000502eu
N#define CYDEV_IO_PC_PRT5_PC7 0x4000502fu
N#define CYDEV_IO_PC_PRT6_BASE 0x40005030u
N#define CYDEV_IO_PC_PRT6_SIZE 0x00000008u
N#define CYDEV_IO_PC_PRT6_PC0 0x40005030u
N#define CYDEV_IO_PC_PRT6_PC1 0x40005031u
N#define CYDEV_IO_PC_PRT6_PC2 0x40005032u
N#define CYDEV_IO_PC_PRT6_PC3 0x40005033u
N#define CYDEV_IO_PC_PRT6_PC4 0x40005034u
N#define CYDEV_IO_PC_PRT6_PC5 0x40005035u
N#define CYDEV_IO_PC_PRT6_PC6 0x40005036u
N#define CYDEV_IO_PC_PRT6_PC7 0x40005037u
N#define CYDEV_IO_PC_PRT12_BASE 0x40005060u
N#define CYDEV_IO_PC_PRT12_SIZE 0x00000008u
N#define CYDEV_IO_PC_PRT12_PC0 0x40005060u
N#define CYDEV_IO_PC_PRT12_PC1 0x40005061u
N#define CYDEV_IO_PC_PRT12_PC2 0x40005062u
N#define CYDEV_IO_PC_PRT12_PC3 0x40005063u
N#define CYDEV_IO_PC_PRT12_PC4 0x40005064u
N#define CYDEV_IO_PC_PRT12_PC5 0x40005065u
N#define CYDEV_IO_PC_PRT12_PC6 0x40005066u
N#define CYDEV_IO_PC_PRT12_PC7 0x40005067u
N#define CYDEV_IO_PC_PRT15_BASE 0x40005078u
N#define CYDEV_IO_PC_PRT15_SIZE 0x00000006u
N#define CYDEV_IO_PC_PRT15_PC0 0x40005078u
N#define CYDEV_IO_PC_PRT15_PC1 0x40005079u
N#define CYDEV_IO_PC_PRT15_PC2 0x4000507au
N#define CYDEV_IO_PC_PRT15_PC3 0x4000507bu
N#define CYDEV_IO_PC_PRT15_PC4 0x4000507cu
N#define CYDEV_IO_PC_PRT15_PC5 0x4000507du
N#define CYDEV_IO_PC_PRT15_7_6_BASE 0x4000507eu
N#define CYDEV_IO_PC_PRT15_7_6_SIZE 0x00000002u
N#define CYDEV_IO_PC_PRT15_7_6_PC0 0x4000507eu
N#define CYDEV_IO_PC_PRT15_7_6_PC1 0x4000507fu
N#define CYDEV_IO_DR_BASE 0x40005080u
N#define CYDEV_IO_DR_SIZE 0x00000010u
N#define CYDEV_IO_DR_PRT0_BASE 0x40005080u
N#define CYDEV_IO_DR_PRT0_SIZE 0x00000001u
N#define CYDEV_IO_DR_PRT0_DR_ALIAS 0x40005080u
N#define CYDEV_IO_DR_PRT1_BASE 0x40005081u
N#define CYDEV_IO_DR_PRT1_SIZE 0x00000001u
N#define CYDEV_IO_DR_PRT1_DR_ALIAS 0x40005081u
N#define CYDEV_IO_DR_PRT2_BASE 0x40005082u
N#define CYDEV_IO_DR_PRT2_SIZE 0x00000001u
N#define CYDEV_IO_DR_PRT2_DR_ALIAS 0x40005082u
N#define CYDEV_IO_DR_PRT3_BASE 0x40005083u
N#define CYDEV_IO_DR_PRT3_SIZE 0x00000001u
N#define CYDEV_IO_DR_PRT3_DR_ALIAS 0x40005083u
N#define CYDEV_IO_DR_PRT4_BASE 0x40005084u
N#define CYDEV_IO_DR_PRT4_SIZE 0x00000001u
N#define CYDEV_IO_DR_PRT4_DR_ALIAS 0x40005084u
N#define CYDEV_IO_DR_PRT5_BASE 0x40005085u
N#define CYDEV_IO_DR_PRT5_SIZE 0x00000001u
N#define CYDEV_IO_DR_PRT5_DR_ALIAS 0x40005085u
N#define CYDEV_IO_DR_PRT6_BASE 0x40005086u
N#define CYDEV_IO_DR_PRT6_SIZE 0x00000001u
N#define CYDEV_IO_DR_PRT6_DR_ALIAS 0x40005086u
N#define CYDEV_IO_DR_PRT12_BASE 0x4000508cu
N#define CYDEV_IO_DR_PRT12_SIZE 0x00000001u
N#define CYDEV_IO_DR_PRT12_DR_ALIAS 0x4000508cu
N#define CYDEV_IO_DR_PRT15_BASE 0x4000508fu
N#define CYDEV_IO_DR_PRT15_SIZE 0x00000001u
N#define CYDEV_IO_DR_PRT15_DR_15_ALIAS 0x4000508fu
N#define CYDEV_IO_PS_BASE 0x40005090u
N#define CYDEV_IO_PS_SIZE 0x00000010u
N#define CYDEV_IO_PS_PRT0_BASE 0x40005090u
N#define CYDEV_IO_PS_PRT0_SIZE 0x00000001u
N#define CYDEV_IO_PS_PRT0_PS_ALIAS 0x40005090u
N#define CYDEV_IO_PS_PRT1_BASE 0x40005091u
N#define CYDEV_IO_PS_PRT1_SIZE 0x00000001u
N#define CYDEV_IO_PS_PRT1_PS_ALIAS 0x40005091u
N#define CYDEV_IO_PS_PRT2_BASE 0x40005092u
N#define CYDEV_IO_PS_PRT2_SIZE 0x00000001u
N#define CYDEV_IO_PS_PRT2_PS_ALIAS 0x40005092u
N#define CYDEV_IO_PS_PRT3_BASE 0x40005093u
N#define CYDEV_IO_PS_PRT3_SIZE 0x00000001u
N#define CYDEV_IO_PS_PRT3_PS_ALIAS 0x40005093u
N#define CYDEV_IO_PS_PRT4_BASE 0x40005094u
N#define CYDEV_IO_PS_PRT4_SIZE 0x00000001u
N#define CYDEV_IO_PS_PRT4_PS_ALIAS 0x40005094u
N#define CYDEV_IO_PS_PRT5_BASE 0x40005095u
N#define CYDEV_IO_PS_PRT5_SIZE 0x00000001u
N#define CYDEV_IO_PS_PRT5_PS_ALIAS 0x40005095u
N#define CYDEV_IO_PS_PRT6_BASE 0x40005096u
N#define CYDEV_IO_PS_PRT6_SIZE 0x00000001u
N#define CYDEV_IO_PS_PRT6_PS_ALIAS 0x40005096u
N#define CYDEV_IO_PS_PRT12_BASE 0x4000509cu
N#define CYDEV_IO_PS_PRT12_SIZE 0x00000001u
N#define CYDEV_IO_PS_PRT12_PS_ALIAS 0x4000509cu
N#define CYDEV_IO_PS_PRT15_BASE 0x4000509fu
N#define CYDEV_IO_PS_PRT15_SIZE 0x00000001u
N#define CYDEV_IO_PS_PRT15_PS15_ALIAS 0x4000509fu
N#define CYDEV_IO_PRT_BASE 0x40005100u
N#define CYDEV_IO_PRT_SIZE 0x00000100u
N#define CYDEV_IO_PRT_PRT0_BASE 0x40005100u
N#define CYDEV_IO_PRT_PRT0_SIZE 0x00000010u
N#define CYDEV_IO_PRT_PRT0_DR 0x40005100u
N#define CYDEV_IO_PRT_PRT0_PS 0x40005101u
N#define CYDEV_IO_PRT_PRT0_DM0 0x40005102u
N#define CYDEV_IO_PRT_PRT0_DM1 0x40005103u
N#define CYDEV_IO_PRT_PRT0_DM2 0x40005104u
N#define CYDEV_IO_PRT_PRT0_SLW 0x40005105u
N#define CYDEV_IO_PRT_PRT0_BYP 0x40005106u
N#define CYDEV_IO_PRT_PRT0_BIE 0x40005107u
N#define CYDEV_IO_PRT_PRT0_INP_DIS 0x40005108u
N#define CYDEV_IO_PRT_PRT0_CTL 0x40005109u
N#define CYDEV_IO_PRT_PRT0_PRT 0x4000510au
N#define CYDEV_IO_PRT_PRT0_BIT_MASK 0x4000510bu
N#define CYDEV_IO_PRT_PRT0_AMUX 0x4000510cu
N#define CYDEV_IO_PRT_PRT0_AG 0x4000510du
N#define CYDEV_IO_PRT_PRT0_LCD_COM_SEG 0x4000510eu
N#define CYDEV_IO_PRT_PRT0_LCD_EN 0x4000510fu
N#define CYDEV_IO_PRT_PRT1_BASE 0x40005110u
N#define CYDEV_IO_PRT_PRT1_SIZE 0x00000010u
N#define CYDEV_IO_PRT_PRT1_DR 0x40005110u
N#define CYDEV_IO_PRT_PRT1_PS 0x40005111u
N#define CYDEV_IO_PRT_PRT1_DM0 0x40005112u
N#define CYDEV_IO_PRT_PRT1_DM1 0x40005113u
N#define CYDEV_IO_PRT_PRT1_DM2 0x40005114u
N#define CYDEV_IO_PRT_PRT1_SLW 0x40005115u
N#define CYDEV_IO_PRT_PRT1_BYP 0x40005116u
N#define CYDEV_IO_PRT_PRT1_BIE 0x40005117u
N#define CYDEV_IO_PRT_PRT1_INP_DIS 0x40005118u
N#define CYDEV_IO_PRT_PRT1_CTL 0x40005119u
N#define CYDEV_IO_PRT_PRT1_PRT 0x4000511au
N#define CYDEV_IO_PRT_PRT1_BIT_MASK 0x4000511bu
N#define CYDEV_IO_PRT_PRT1_AMUX 0x4000511cu
N#define CYDEV_IO_PRT_PRT1_AG 0x4000511du
N#define CYDEV_IO_PRT_PRT1_LCD_COM_SEG 0x4000511eu
N#define CYDEV_IO_PRT_PRT1_LCD_EN 0x4000511fu
N#define CYDEV_IO_PRT_PRT2_BASE 0x40005120u
N#define CYDEV_IO_PRT_PRT2_SIZE 0x00000010u
N#define CYDEV_IO_PRT_PRT2_DR 0x40005120u
N#define CYDEV_IO_PRT_PRT2_PS 0x40005121u
N#define CYDEV_IO_PRT_PRT2_DM0 0x40005122u
N#define CYDEV_IO_PRT_PRT2_DM1 0x40005123u
N#define CYDEV_IO_PRT_PRT2_DM2 0x40005124u
N#define CYDEV_IO_PRT_PRT2_SLW 0x40005125u
N#define CYDEV_IO_PRT_PRT2_BYP 0x40005126u
N#define CYDEV_IO_PRT_PRT2_BIE 0x40005127u
N#define CYDEV_IO_PRT_PRT2_INP_DIS 0x40005128u
N#define CYDEV_IO_PRT_PRT2_CTL 0x40005129u
N#define CYDEV_IO_PRT_PRT2_PRT 0x4000512au
N#define CYDEV_IO_PRT_PRT2_BIT_MASK 0x4000512bu
N#define CYDEV_IO_PRT_PRT2_AMUX 0x4000512cu
N#define CYDEV_IO_PRT_PRT2_AG 0x4000512du
N#define CYDEV_IO_PRT_PRT2_LCD_COM_SEG 0x4000512eu
N#define CYDEV_IO_PRT_PRT2_LCD_EN 0x4000512fu
N#define CYDEV_IO_PRT_PRT3_BASE 0x40005130u
N#define CYDEV_IO_PRT_PRT3_SIZE 0x00000010u
N#define CYDEV_IO_PRT_PRT3_DR 0x40005130u
N#define CYDEV_IO_PRT_PRT3_PS 0x40005131u
N#define CYDEV_IO_PRT_PRT3_DM0 0x40005132u
N#define CYDEV_IO_PRT_PRT3_DM1 0x40005133u
N#define CYDEV_IO_PRT_PRT3_DM2 0x40005134u
N#define CYDEV_IO_PRT_PRT3_SLW 0x40005135u
N#define CYDEV_IO_PRT_PRT3_BYP 0x40005136u
N#define CYDEV_IO_PRT_PRT3_BIE 0x40005137u
N#define CYDEV_IO_PRT_PRT3_INP_DIS 0x40005138u
N#define CYDEV_IO_PRT_PRT3_CTL 0x40005139u
N#define CYDEV_IO_PRT_PRT3_PRT 0x4000513au
N#define CYDEV_IO_PRT_PRT3_BIT_MASK 0x4000513bu
N#define CYDEV_IO_PRT_PRT3_AMUX 0x4000513cu
N#define CYDEV_IO_PRT_PRT3_AG 0x4000513du
N#define CYDEV_IO_PRT_PRT3_LCD_COM_SEG 0x4000513eu
N#define CYDEV_IO_PRT_PRT3_LCD_EN 0x4000513fu
N#define CYDEV_IO_PRT_PRT4_BASE 0x40005140u
N#define CYDEV_IO_PRT_PRT4_SIZE 0x00000010u
N#define CYDEV_IO_PRT_PRT4_DR 0x40005140u
N#define CYDEV_IO_PRT_PRT4_PS 0x40005141u
N#define CYDEV_IO_PRT_PRT4_DM0 0x40005142u
N#define CYDEV_IO_PRT_PRT4_DM1 0x40005143u
N#define CYDEV_IO_PRT_PRT4_DM2 0x40005144u
N#define CYDEV_IO_PRT_PRT4_SLW 0x40005145u
N#define CYDEV_IO_PRT_PRT4_BYP 0x40005146u
N#define CYDEV_IO_PRT_PRT4_BIE 0x40005147u
N#define CYDEV_IO_PRT_PRT4_INP_DIS 0x40005148u
N#define CYDEV_IO_PRT_PRT4_CTL 0x40005149u
N#define CYDEV_IO_PRT_PRT4_PRT 0x4000514au
N#define CYDEV_IO_PRT_PRT4_BIT_MASK 0x4000514bu
N#define CYDEV_IO_PRT_PRT4_AMUX 0x4000514cu
N#define CYDEV_IO_PRT_PRT4_AG 0x4000514du
N#define CYDEV_IO_PRT_PRT4_LCD_COM_SEG 0x4000514eu
N#define CYDEV_IO_PRT_PRT4_LCD_EN 0x4000514fu
N#define CYDEV_IO_PRT_PRT5_BASE 0x40005150u
N#define CYDEV_IO_PRT_PRT5_SIZE 0x00000010u
N#define CYDEV_IO_PRT_PRT5_DR 0x40005150u
N#define CYDEV_IO_PRT_PRT5_PS 0x40005151u
N#define CYDEV_IO_PRT_PRT5_DM0 0x40005152u
N#define CYDEV_IO_PRT_PRT5_DM1 0x40005153u
N#define CYDEV_IO_PRT_PRT5_DM2 0x40005154u
N#define CYDEV_IO_PRT_PRT5_SLW 0x40005155u
N#define CYDEV_IO_PRT_PRT5_BYP 0x40005156u
N#define CYDEV_IO_PRT_PRT5_BIE 0x40005157u
N#define CYDEV_IO_PRT_PRT5_INP_DIS 0x40005158u
N#define CYDEV_IO_PRT_PRT5_CTL 0x40005159u
N#define CYDEV_IO_PRT_PRT5_PRT 0x4000515au
N#define CYDEV_IO_PRT_PRT5_BIT_MASK 0x4000515bu
N#define CYDEV_IO_PRT_PRT5_AMUX 0x4000515cu
N#define CYDEV_IO_PRT_PRT5_AG 0x4000515du
N#define CYDEV_IO_PRT_PRT5_LCD_COM_SEG 0x4000515eu
N#define CYDEV_IO_PRT_PRT5_LCD_EN 0x4000515fu
N#define CYDEV_IO_PRT_PRT6_BASE 0x40005160u
N#define CYDEV_IO_PRT_PRT6_SIZE 0x00000010u
N#define CYDEV_IO_PRT_PRT6_DR 0x40005160u
N#define CYDEV_IO_PRT_PRT6_PS 0x40005161u
N#define CYDEV_IO_PRT_PRT6_DM0 0x40005162u
N#define CYDEV_IO_PRT_PRT6_DM1 0x40005163u
N#define CYDEV_IO_PRT_PRT6_DM2 0x40005164u
N#define CYDEV_IO_PRT_PRT6_SLW 0x40005165u
N#define CYDEV_IO_PRT_PRT6_BYP 0x40005166u
N#define CYDEV_IO_PRT_PRT6_BIE 0x40005167u
N#define CYDEV_IO_PRT_PRT6_INP_DIS 0x40005168u
N#define CYDEV_IO_PRT_PRT6_CTL 0x40005169u
N#define CYDEV_IO_PRT_PRT6_PRT 0x4000516au
N#define CYDEV_IO_PRT_PRT6_BIT_MASK 0x4000516bu
N#define CYDEV_IO_PRT_PRT6_AMUX 0x4000516cu
N#define CYDEV_IO_PRT_PRT6_AG 0x4000516du
N#define CYDEV_IO_PRT_PRT6_LCD_COM_SEG 0x4000516eu
N#define CYDEV_IO_PRT_PRT6_LCD_EN 0x4000516fu
N#define CYDEV_IO_PRT_PRT12_BASE 0x400051c0u
N#define CYDEV_IO_PRT_PRT12_SIZE 0x00000010u
N#define CYDEV_IO_PRT_PRT12_DR 0x400051c0u
N#define CYDEV_IO_PRT_PRT12_PS 0x400051c1u
N#define CYDEV_IO_PRT_PRT12_DM0 0x400051c2u
N#define CYDEV_IO_PRT_PRT12_DM1 0x400051c3u
N#define CYDEV_IO_PRT_PRT12_DM2 0x400051c4u
N#define CYDEV_IO_PRT_PRT12_SLW 0x400051c5u
N#define CYDEV_IO_PRT_PRT12_BYP 0x400051c6u
N#define CYDEV_IO_PRT_PRT12_BIE 0x400051c7u
N#define CYDEV_IO_PRT_PRT12_INP_DIS 0x400051c8u
N#define CYDEV_IO_PRT_PRT12_SIO_HYST_EN 0x400051c9u
N#define CYDEV_IO_PRT_PRT12_PRT 0x400051cau
N#define CYDEV_IO_PRT_PRT12_BIT_MASK 0x400051cbu
N#define CYDEV_IO_PRT_PRT12_SIO_REG_HIFREQ 0x400051ccu
N#define CYDEV_IO_PRT_PRT12_AG 0x400051cdu
N#define CYDEV_IO_PRT_PRT12_SIO_CFG 0x400051ceu
N#define CYDEV_IO_PRT_PRT12_SIO_DIFF 0x400051cfu
N#define CYDEV_IO_PRT_PRT15_BASE 0x400051f0u
N#define CYDEV_IO_PRT_PRT15_SIZE 0x00000010u
N#define CYDEV_IO_PRT_PRT15_DR 0x400051f0u
N#define CYDEV_IO_PRT_PRT15_PS 0x400051f1u
N#define CYDEV_IO_PRT_PRT15_DM0 0x400051f2u
N#define CYDEV_IO_PRT_PRT15_DM1 0x400051f3u
N#define CYDEV_IO_PRT_PRT15_DM2 0x400051f4u
N#define CYDEV_IO_PRT_PRT15_SLW 0x400051f5u
N#define CYDEV_IO_PRT_PRT15_BYP 0x400051f6u
N#define CYDEV_IO_PRT_PRT15_BIE 0x400051f7u
N#define CYDEV_IO_PRT_PRT15_INP_DIS 0x400051f8u
N#define CYDEV_IO_PRT_PRT15_CTL 0x400051f9u
N#define CYDEV_IO_PRT_PRT15_PRT 0x400051fau
N#define CYDEV_IO_PRT_PRT15_BIT_MASK 0x400051fbu
N#define CYDEV_IO_PRT_PRT15_AMUX 0x400051fcu
N#define CYDEV_IO_PRT_PRT15_AG 0x400051fdu
N#define CYDEV_IO_PRT_PRT15_LCD_COM_SEG 0x400051feu
N#define CYDEV_IO_PRT_PRT15_LCD_EN 0x400051ffu
N#define CYDEV_PRTDSI_BASE 0x40005200u
N#define CYDEV_PRTDSI_SIZE 0x0000007fu
N#define CYDEV_PRTDSI_PRT0_BASE 0x40005200u
N#define CYDEV_PRTDSI_PRT0_SIZE 0x00000007u
N#define CYDEV_PRTDSI_PRT0_OUT_SEL0 0x40005200u
N#define CYDEV_PRTDSI_PRT0_OUT_SEL1 0x40005201u
N#define CYDEV_PRTDSI_PRT0_OE_SEL0 0x40005202u
N#define CYDEV_PRTDSI_PRT0_OE_SEL1 0x40005203u
N#define CYDEV_PRTDSI_PRT0_DBL_SYNC_IN 0x40005204u
N#define CYDEV_PRTDSI_PRT0_SYNC_OUT 0x40005205u
N#define CYDEV_PRTDSI_PRT0_CAPS_SEL 0x40005206u
N#define CYDEV_PRTDSI_PRT1_BASE 0x40005208u
N#define CYDEV_PRTDSI_PRT1_SIZE 0x00000007u
N#define CYDEV_PRTDSI_PRT1_OUT_SEL0 0x40005208u
N#define CYDEV_PRTDSI_PRT1_OUT_SEL1 0x40005209u
N#define CYDEV_PRTDSI_PRT1_OE_SEL0 0x4000520au
N#define CYDEV_PRTDSI_PRT1_OE_SEL1 0x4000520bu
N#define CYDEV_PRTDSI_PRT1_DBL_SYNC_IN 0x4000520cu
N#define CYDEV_PRTDSI_PRT1_SYNC_OUT 0x4000520du
N#define CYDEV_PRTDSI_PRT1_CAPS_SEL 0x4000520eu
N#define CYDEV_PRTDSI_PRT2_BASE 0x40005210u
N#define CYDEV_PRTDSI_PRT2_SIZE 0x00000007u
N#define CYDEV_PRTDSI_PRT2_OUT_SEL0 0x40005210u
N#define CYDEV_PRTDSI_PRT2_OUT_SEL1 0x40005211u
N#define CYDEV_PRTDSI_PRT2_OE_SEL0 0x40005212u
N#define CYDEV_PRTDSI_PRT2_OE_SEL1 0x40005213u
N#define CYDEV_PRTDSI_PRT2_DBL_SYNC_IN 0x40005214u
N#define CYDEV_PRTDSI_PRT2_SYNC_OUT 0x40005215u
N#define CYDEV_PRTDSI_PRT2_CAPS_SEL 0x40005216u
N#define CYDEV_PRTDSI_PRT3_BASE 0x40005218u
N#define CYDEV_PRTDSI_PRT3_SIZE 0x00000007u
N#define CYDEV_PRTDSI_PRT3_OUT_SEL0 0x40005218u
N#define CYDEV_PRTDSI_PRT3_OUT_SEL1 0x40005219u
N#define CYDEV_PRTDSI_PRT3_OE_SEL0 0x4000521au
N#define CYDEV_PRTDSI_PRT3_OE_SEL1 0x4000521bu
N#define CYDEV_PRTDSI_PRT3_DBL_SYNC_IN 0x4000521cu
N#define CYDEV_PRTDSI_PRT3_SYNC_OUT 0x4000521du
N#define CYDEV_PRTDSI_PRT3_CAPS_SEL 0x4000521eu
N#define CYDEV_PRTDSI_PRT4_BASE 0x40005220u
N#define CYDEV_PRTDSI_PRT4_SIZE 0x00000007u
N#define CYDEV_PRTDSI_PRT4_OUT_SEL0 0x40005220u
N#define CYDEV_PRTDSI_PRT4_OUT_SEL1 0x40005221u
N#define CYDEV_PRTDSI_PRT4_OE_SEL0 0x40005222u
N#define CYDEV_PRTDSI_PRT4_OE_SEL1 0x40005223u
N#define CYDEV_PRTDSI_PRT4_DBL_SYNC_IN 0x40005224u
N#define CYDEV_PRTDSI_PRT4_SYNC_OUT 0x40005225u
N#define CYDEV_PRTDSI_PRT4_CAPS_SEL 0x40005226u
N#define CYDEV_PRTDSI_PRT5_BASE 0x40005228u
N#define CYDEV_PRTDSI_PRT5_SIZE 0x00000007u
N#define CYDEV_PRTDSI_PRT5_OUT_SEL0 0x40005228u
N#define CYDEV_PRTDSI_PRT5_OUT_SEL1 0x40005229u
N#define CYDEV_PRTDSI_PRT5_OE_SEL0 0x4000522au
N#define CYDEV_PRTDSI_PRT5_OE_SEL1 0x4000522bu
N#define CYDEV_PRTDSI_PRT5_DBL_SYNC_IN 0x4000522cu
N#define CYDEV_PRTDSI_PRT5_SYNC_OUT 0x4000522du
N#define CYDEV_PRTDSI_PRT5_CAPS_SEL 0x4000522eu
N#define CYDEV_PRTDSI_PRT6_BASE 0x40005230u
N#define CYDEV_PRTDSI_PRT6_SIZE 0x00000007u
N#define CYDEV_PRTDSI_PRT6_OUT_SEL0 0x40005230u
N#define CYDEV_PRTDSI_PRT6_OUT_SEL1 0x40005231u
N#define CYDEV_PRTDSI_PRT6_OE_SEL0 0x40005232u
N#define CYDEV_PRTDSI_PRT6_OE_SEL1 0x40005233u
N#define CYDEV_PRTDSI_PRT6_DBL_SYNC_IN 0x40005234u
N#define CYDEV_PRTDSI_PRT6_SYNC_OUT 0x40005235u
N#define CYDEV_PRTDSI_PRT6_CAPS_SEL 0x40005236u
N#define CYDEV_PRTDSI_PRT12_BASE 0x40005260u
N#define CYDEV_PRTDSI_PRT12_SIZE 0x00000006u
N#define CYDEV_PRTDSI_PRT12_OUT_SEL0 0x40005260u
N#define CYDEV_PRTDSI_PRT12_OUT_SEL1 0x40005261u
N#define CYDEV_PRTDSI_PRT12_OE_SEL0 0x40005262u
N#define CYDEV_PRTDSI_PRT12_OE_SEL1 0x40005263u
N#define CYDEV_PRTDSI_PRT12_DBL_SYNC_IN 0x40005264u
N#define CYDEV_PRTDSI_PRT12_SYNC_OUT 0x40005265u
N#define CYDEV_PRTDSI_PRT15_BASE 0x40005278u
N#define CYDEV_PRTDSI_PRT15_SIZE 0x00000007u
N#define CYDEV_PRTDSI_PRT15_OUT_SEL0 0x40005278u
N#define CYDEV_PRTDSI_PRT15_OUT_SEL1 0x40005279u
N#define CYDEV_PRTDSI_PRT15_OE_SEL0 0x4000527au
N#define CYDEV_PRTDSI_PRT15_OE_SEL1 0x4000527bu
N#define CYDEV_PRTDSI_PRT15_DBL_SYNC_IN 0x4000527cu
N#define CYDEV_PRTDSI_PRT15_SYNC_OUT 0x4000527du
N#define CYDEV_PRTDSI_PRT15_CAPS_SEL 0x4000527eu
N#define CYDEV_EMIF_BASE 0x40005400u
N#define CYDEV_EMIF_SIZE 0x00000007u
N#define CYDEV_EMIF_NO_UDB 0x40005400u
N#define CYDEV_EMIF_RP_WAIT_STATES 0x40005401u
N#define CYDEV_EMIF_MEM_DWN 0x40005402u
N#define CYDEV_EMIF_MEMCLK_DIV 0x40005403u
N#define CYDEV_EMIF_CLOCK_EN 0x40005404u
N#define CYDEV_EMIF_EM_TYPE 0x40005405u
N#define CYDEV_EMIF_WP_WAIT_STATES 0x40005406u
N#define CYDEV_ANAIF_BASE 0x40005800u
N#define CYDEV_ANAIF_SIZE 0x000003a9u
N#define CYDEV_ANAIF_CFG_BASE 0x40005800u
N#define CYDEV_ANAIF_CFG_SIZE 0x0000010fu
N#define CYDEV_ANAIF_CFG_SC0_BASE 0x40005800u
N#define CYDEV_ANAIF_CFG_SC0_SIZE 0x00000003u
N#define CYDEV_ANAIF_CFG_SC0_CR0 0x40005800u
N#define CYDEV_ANAIF_CFG_SC0_CR1 0x40005801u
N#define CYDEV_ANAIF_CFG_SC0_CR2 0x40005802u
N#define CYDEV_ANAIF_CFG_SC1_BASE 0x40005804u
N#define CYDEV_ANAIF_CFG_SC1_SIZE 0x00000003u
N#define CYDEV_ANAIF_CFG_SC1_CR0 0x40005804u
N#define CYDEV_ANAIF_CFG_SC1_CR1 0x40005805u
N#define CYDEV_ANAIF_CFG_SC1_CR2 0x40005806u
N#define CYDEV_ANAIF_CFG_SC2_BASE 0x40005808u
N#define CYDEV_ANAIF_CFG_SC2_SIZE 0x00000003u
N#define CYDEV_ANAIF_CFG_SC2_CR0 0x40005808u
N#define CYDEV_ANAIF_CFG_SC2_CR1 0x40005809u
N#define CYDEV_ANAIF_CFG_SC2_CR2 0x4000580au
N#define CYDEV_ANAIF_CFG_SC3_BASE 0x4000580cu
N#define CYDEV_ANAIF_CFG_SC3_SIZE 0x00000003u
N#define CYDEV_ANAIF_CFG_SC3_CR0 0x4000580cu
N#define CYDEV_ANAIF_CFG_SC3_CR1 0x4000580du
N#define CYDEV_ANAIF_CFG_SC3_CR2 0x4000580eu
N#define CYDEV_ANAIF_CFG_DAC0_BASE 0x40005820u
N#define CYDEV_ANAIF_CFG_DAC0_SIZE 0x00000003u
N#define CYDEV_ANAIF_CFG_DAC0_CR0 0x40005820u
N#define CYDEV_ANAIF_CFG_DAC0_CR1 0x40005821u
N#define CYDEV_ANAIF_CFG_DAC0_TST 0x40005822u
N#define CYDEV_ANAIF_CFG_DAC1_BASE 0x40005824u
N#define CYDEV_ANAIF_CFG_DAC1_SIZE 0x00000003u
N#define CYDEV_ANAIF_CFG_DAC1_CR0 0x40005824u
N#define CYDEV_ANAIF_CFG_DAC1_CR1 0x40005825u
N#define CYDEV_ANAIF_CFG_DAC1_TST 0x40005826u
N#define CYDEV_ANAIF_CFG_DAC2_BASE 0x40005828u
N#define CYDEV_ANAIF_CFG_DAC2_SIZE 0x00000003u
N#define CYDEV_ANAIF_CFG_DAC2_CR0 0x40005828u
N#define CYDEV_ANAIF_CFG_DAC2_CR1 0x40005829u
N#define CYDEV_ANAIF_CFG_DAC2_TST 0x4000582au
N#define CYDEV_ANAIF_CFG_DAC3_BASE 0x4000582cu
N#define CYDEV_ANAIF_CFG_DAC3_SIZE 0x00000003u
N#define CYDEV_ANAIF_CFG_DAC3_CR0 0x4000582cu
N#define CYDEV_ANAIF_CFG_DAC3_CR1 0x4000582du
N#define CYDEV_ANAIF_CFG_DAC3_TST 0x4000582eu
N#define CYDEV_ANAIF_CFG_CMP0_BASE 0x40005840u
N#define CYDEV_ANAIF_CFG_CMP0_SIZE 0x00000001u
N#define CYDEV_ANAIF_CFG_CMP0_CR 0x40005840u
N#define CYDEV_ANAIF_CFG_CMP1_BASE 0x40005841u
N#define CYDEV_ANAIF_CFG_CMP1_SIZE 0x00000001u
N#define CYDEV_ANAIF_CFG_CMP1_CR 0x40005841u
N#define CYDEV_ANAIF_CFG_CMP2_BASE 0x40005842u
N#define CYDEV_ANAIF_CFG_CMP2_SIZE 0x00000001u
N#define CYDEV_ANAIF_CFG_CMP2_CR 0x40005842u
N#define CYDEV_ANAIF_CFG_CMP3_BASE 0x40005843u
N#define CYDEV_ANAIF_CFG_CMP3_SIZE 0x00000001u
N#define CYDEV_ANAIF_CFG_CMP3_CR 0x40005843u
N#define CYDEV_ANAIF_CFG_LUT0_BASE 0x40005848u
N#define CYDEV_ANAIF_CFG_LUT0_SIZE 0x00000002u
N#define CYDEV_ANAIF_CFG_LUT0_CR 0x40005848u
N#define CYDEV_ANAIF_CFG_LUT0_MX 0x40005849u
N#define CYDEV_ANAIF_CFG_LUT1_BASE 0x4000584au
N#define CYDEV_ANAIF_CFG_LUT1_SIZE 0x00000002u
N#define CYDEV_ANAIF_CFG_LUT1_CR 0x4000584au
N#define CYDEV_ANAIF_CFG_LUT1_MX 0x4000584bu
N#define CYDEV_ANAIF_CFG_LUT2_BASE 0x4000584cu
N#define CYDEV_ANAIF_CFG_LUT2_SIZE 0x00000002u
N#define CYDEV_ANAIF_CFG_LUT2_CR 0x4000584cu
N#define CYDEV_ANAIF_CFG_LUT2_MX 0x4000584du
N#define CYDEV_ANAIF_CFG_LUT3_BASE 0x4000584eu
N#define CYDEV_ANAIF_CFG_LUT3_SIZE 0x00000002u
N#define CYDEV_ANAIF_CFG_LUT3_CR 0x4000584eu
N#define CYDEV_ANAIF_CFG_LUT3_MX 0x4000584fu
N#define CYDEV_ANAIF_CFG_OPAMP0_BASE 0x40005858u
N#define CYDEV_ANAIF_CFG_OPAMP0_SIZE 0x00000002u
N#define CYDEV_ANAIF_CFG_OPAMP0_CR 0x40005858u
N#define CYDEV_ANAIF_CFG_OPAMP0_RSVD 0x40005859u
N#define CYDEV_ANAIF_CFG_OPAMP1_BASE 0x4000585au
N#define CYDEV_ANAIF_CFG_OPAMP1_SIZE 0x00000002u
N#define CYDEV_ANAIF_CFG_OPAMP1_CR 0x4000585au
N#define CYDEV_ANAIF_CFG_OPAMP1_RSVD 0x4000585bu
N#define CYDEV_ANAIF_CFG_OPAMP2_BASE 0x4000585cu
N#define CYDEV_ANAIF_CFG_OPAMP2_SIZE 0x00000002u
N#define CYDEV_ANAIF_CFG_OPAMP2_CR 0x4000585cu
N#define CYDEV_ANAIF_CFG_OPAMP2_RSVD 0x4000585du
N#define CYDEV_ANAIF_CFG_OPAMP3_BASE 0x4000585eu
N#define CYDEV_ANAIF_CFG_OPAMP3_SIZE 0x00000002u
N#define CYDEV_ANAIF_CFG_OPAMP3_CR 0x4000585eu
N#define CYDEV_ANAIF_CFG_OPAMP3_RSVD 0x4000585fu
N#define CYDEV_ANAIF_CFG_LCDDAC_BASE 0x40005868u
N#define CYDEV_ANAIF_CFG_LCDDAC_SIZE 0x00000002u
N#define CYDEV_ANAIF_CFG_LCDDAC_CR0 0x40005868u
N#define CYDEV_ANAIF_CFG_LCDDAC_CR1 0x40005869u
N#define CYDEV_ANAIF_CFG_LCDDRV_BASE 0x4000586au
N#define CYDEV_ANAIF_CFG_LCDDRV_SIZE 0x00000001u
N#define CYDEV_ANAIF_CFG_LCDDRV_CR 0x4000586au
N#define CYDEV_ANAIF_CFG_LCDTMR_BASE 0x4000586bu
N#define CYDEV_ANAIF_CFG_LCDTMR_SIZE 0x00000001u
N#define CYDEV_ANAIF_CFG_LCDTMR_CFG 0x4000586bu
N#define CYDEV_ANAIF_CFG_BG_BASE 0x4000586cu
N#define CYDEV_ANAIF_CFG_BG_SIZE 0x00000004u
N#define CYDEV_ANAIF_CFG_BG_CR0 0x4000586cu
N#define CYDEV_ANAIF_CFG_BG_RSVD 0x4000586du
N#define CYDEV_ANAIF_CFG_BG_DFT0 0x4000586eu
N#define CYDEV_ANAIF_CFG_BG_DFT1 0x4000586fu
N#define CYDEV_ANAIF_CFG_CAPSL_BASE 0x40005870u
N#define CYDEV_ANAIF_CFG_CAPSL_SIZE 0x00000002u
N#define CYDEV_ANAIF_CFG_CAPSL_CFG0 0x40005870u
N#define CYDEV_ANAIF_CFG_CAPSL_CFG1 0x40005871u
N#define CYDEV_ANAIF_CFG_CAPSR_BASE 0x40005872u
N#define CYDEV_ANAIF_CFG_CAPSR_SIZE 0x00000002u
N#define CYDEV_ANAIF_CFG_CAPSR_CFG0 0x40005872u
N#define CYDEV_ANAIF_CFG_CAPSR_CFG1 0x40005873u
N#define CYDEV_ANAIF_CFG_PUMP_BASE 0x40005876u
N#define CYDEV_ANAIF_CFG_PUMP_SIZE 0x00000002u
N#define CYDEV_ANAIF_CFG_PUMP_CR0 0x40005876u
N#define CYDEV_ANAIF_CFG_PUMP_CR1 0x40005877u
N#define CYDEV_ANAIF_CFG_LPF0_BASE 0x40005878u
N#define CYDEV_ANAIF_CFG_LPF0_SIZE 0x00000002u
N#define CYDEV_ANAIF_CFG_LPF0_CR0 0x40005878u
N#define CYDEV_ANAIF_CFG_LPF0_RSVD 0x40005879u
N#define CYDEV_ANAIF_CFG_LPF1_BASE 0x4000587au
N#define CYDEV_ANAIF_CFG_LPF1_SIZE 0x00000002u
N#define CYDEV_ANAIF_CFG_LPF1_CR0 0x4000587au
N#define CYDEV_ANAIF_CFG_LPF1_RSVD 0x4000587bu
N#define CYDEV_ANAIF_CFG_MISC_BASE 0x4000587cu
N#define CYDEV_ANAIF_CFG_MISC_SIZE 0x00000001u
N#define CYDEV_ANAIF_CFG_MISC_CR0 0x4000587cu
N#define CYDEV_ANAIF_CFG_DSM0_BASE 0x40005880u
N#define CYDEV_ANAIF_CFG_DSM0_SIZE 0x00000020u
N#define CYDEV_ANAIF_CFG_DSM0_CR0 0x40005880u
N#define CYDEV_ANAIF_CFG_DSM0_CR1 0x40005881u
N#define CYDEV_ANAIF_CFG_DSM0_CR2 0x40005882u
N#define CYDEV_ANAIF_CFG_DSM0_CR3 0x40005883u
N#define CYDEV_ANAIF_CFG_DSM0_CR4 0x40005884u
N#define CYDEV_ANAIF_CFG_DSM0_CR5 0x40005885u
N#define CYDEV_ANAIF_CFG_DSM0_CR6 0x40005886u
N#define CYDEV_ANAIF_CFG_DSM0_CR7 0x40005887u
N#define CYDEV_ANAIF_CFG_DSM0_CR8 0x40005888u
N#define CYDEV_ANAIF_CFG_DSM0_CR9 0x40005889u
N#define CYDEV_ANAIF_CFG_DSM0_CR10 0x4000588au
N#define CYDEV_ANAIF_CFG_DSM0_CR11 0x4000588bu
N#define CYDEV_ANAIF_CFG_DSM0_CR12 0x4000588cu
N#define CYDEV_ANAIF_CFG_DSM0_CR13 0x4000588du
N#define CYDEV_ANAIF_CFG_DSM0_CR14 0x4000588eu
N#define CYDEV_ANAIF_CFG_DSM0_CR15 0x4000588fu
N#define CYDEV_ANAIF_CFG_DSM0_CR16 0x40005890u
N#define CYDEV_ANAIF_CFG_DSM0_CR17 0x40005891u
N#define CYDEV_ANAIF_CFG_DSM0_REF0 0x40005892u
N#define CYDEV_ANAIF_CFG_DSM0_REF1 0x40005893u
N#define CYDEV_ANAIF_CFG_DSM0_REF2 0x40005894u
N#define CYDEV_ANAIF_CFG_DSM0_REF3 0x40005895u
N#define CYDEV_ANAIF_CFG_DSM0_DEM0 0x40005896u
N#define CYDEV_ANAIF_CFG_DSM0_DEM1 0x40005897u
N#define CYDEV_ANAIF_CFG_DSM0_TST0 0x40005898u
N#define CYDEV_ANAIF_CFG_DSM0_TST1 0x40005899u
N#define CYDEV_ANAIF_CFG_DSM0_BUF0 0x4000589au
N#define CYDEV_ANAIF_CFG_DSM0_BUF1 0x4000589bu
N#define CYDEV_ANAIF_CFG_DSM0_BUF2 0x4000589cu
N#define CYDEV_ANAIF_CFG_DSM0_BUF3 0x4000589du
N#define CYDEV_ANAIF_CFG_DSM0_MISC 0x4000589eu
N#define CYDEV_ANAIF_CFG_DSM0_RSVD1 0x4000589fu
N#define CYDEV_ANAIF_CFG_SAR0_BASE 0x40005900u
N#define CYDEV_ANAIF_CFG_SAR0_SIZE 0x00000007u
N#define CYDEV_ANAIF_CFG_SAR0_CSR0 0x40005900u
N#define CYDEV_ANAIF_CFG_SAR0_CSR1 0x40005901u
N#define CYDEV_ANAIF_CFG_SAR0_CSR2 0x40005902u
N#define CYDEV_ANAIF_CFG_SAR0_CSR3 0x40005903u
N#define CYDEV_ANAIF_CFG_SAR0_CSR4 0x40005904u
N#define CYDEV_ANAIF_CFG_SAR0_CSR5 0x40005905u
N#define CYDEV_ANAIF_CFG_SAR0_CSR6 0x40005906u
N#define CYDEV_ANAIF_CFG_SAR1_BASE 0x40005908u
N#define CYDEV_ANAIF_CFG_SAR1_SIZE 0x00000007u
N#define CYDEV_ANAIF_CFG_SAR1_CSR0 0x40005908u
N#define CYDEV_ANAIF_CFG_SAR1_CSR1 0x40005909u
N#define CYDEV_ANAIF_CFG_SAR1_CSR2 0x4000590au
N#define CYDEV_ANAIF_CFG_SAR1_CSR3 0x4000590bu
N#define CYDEV_ANAIF_CFG_SAR1_CSR4 0x4000590cu
N#define CYDEV_ANAIF_CFG_SAR1_CSR5 0x4000590du
N#define CYDEV_ANAIF_CFG_SAR1_CSR6 0x4000590eu
N#define CYDEV_ANAIF_RT_BASE 0x40005a00u
N#define CYDEV_ANAIF_RT_SIZE 0x00000162u
N#define CYDEV_ANAIF_RT_SC0_BASE 0x40005a00u
N#define CYDEV_ANAIF_RT_SC0_SIZE 0x0000000du
N#define CYDEV_ANAIF_RT_SC0_SW0 0x40005a00u
N#define CYDEV_ANAIF_RT_SC0_SW2 0x40005a02u
N#define CYDEV_ANAIF_RT_SC0_SW3 0x40005a03u
N#define CYDEV_ANAIF_RT_SC0_SW4 0x40005a04u
N#define CYDEV_ANAIF_RT_SC0_SW6 0x40005a06u
N#define CYDEV_ANAIF_RT_SC0_SW7 0x40005a07u
N#define CYDEV_ANAIF_RT_SC0_SW8 0x40005a08u
N#define CYDEV_ANAIF_RT_SC0_SW10 0x40005a0au
N#define CYDEV_ANAIF_RT_SC0_CLK 0x40005a0bu
N#define CYDEV_ANAIF_RT_SC0_BST 0x40005a0cu
N#define CYDEV_ANAIF_RT_SC1_BASE 0x40005a10u
N#define CYDEV_ANAIF_RT_SC1_SIZE 0x0000000du
N#define CYDEV_ANAIF_RT_SC1_SW0 0x40005a10u
N#define CYDEV_ANAIF_RT_SC1_SW2 0x40005a12u
N#define CYDEV_ANAIF_RT_SC1_SW3 0x40005a13u
N#define CYDEV_ANAIF_RT_SC1_SW4 0x40005a14u
N#define CYDEV_ANAIF_RT_SC1_SW6 0x40005a16u
N#define CYDEV_ANAIF_RT_SC1_SW7 0x40005a17u
N#define CYDEV_ANAIF_RT_SC1_SW8 0x40005a18u
N#define CYDEV_ANAIF_RT_SC1_SW10 0x40005a1au
N#define CYDEV_ANAIF_RT_SC1_CLK 0x40005a1bu
N#define CYDEV_ANAIF_RT_SC1_BST 0x40005a1cu
N#define CYDEV_ANAIF_RT_SC2_BASE 0x40005a20u
N#define CYDEV_ANAIF_RT_SC2_SIZE 0x0000000du
N#define CYDEV_ANAIF_RT_SC2_SW0 0x40005a20u
N#define CYDEV_ANAIF_RT_SC2_SW2 0x40005a22u
N#define CYDEV_ANAIF_RT_SC2_SW3 0x40005a23u
N#define CYDEV_ANAIF_RT_SC2_SW4 0x40005a24u
N#define CYDEV_ANAIF_RT_SC2_SW6 0x40005a26u
N#define CYDEV_ANAIF_RT_SC2_SW7 0x40005a27u
N#define CYDEV_ANAIF_RT_SC2_SW8 0x40005a28u
N#define CYDEV_ANAIF_RT_SC2_SW10 0x40005a2au
N#define CYDEV_ANAIF_RT_SC2_CLK 0x40005a2bu
N#define CYDEV_ANAIF_RT_SC2_BST 0x40005a2cu
N#define CYDEV_ANAIF_RT_SC3_BASE 0x40005a30u
N#define CYDEV_ANAIF_RT_SC3_SIZE 0x0000000du
N#define CYDEV_ANAIF_RT_SC3_SW0 0x40005a30u
N#define CYDEV_ANAIF_RT_SC3_SW2 0x40005a32u
N#define CYDEV_ANAIF_RT_SC3_SW3 0x40005a33u
N#define CYDEV_ANAIF_RT_SC3_SW4 0x40005a34u
N#define CYDEV_ANAIF_RT_SC3_SW6 0x40005a36u
N#define CYDEV_ANAIF_RT_SC3_SW7 0x40005a37u
N#define CYDEV_ANAIF_RT_SC3_SW8 0x40005a38u
N#define CYDEV_ANAIF_RT_SC3_SW10 0x40005a3au
N#define CYDEV_ANAIF_RT_SC3_CLK 0x40005a3bu
N#define CYDEV_ANAIF_RT_SC3_BST 0x40005a3cu
N#define CYDEV_ANAIF_RT_DAC0_BASE 0x40005a80u
N#define CYDEV_ANAIF_RT_DAC0_SIZE 0x00000008u
N#define CYDEV_ANAIF_RT_DAC0_SW0 0x40005a80u
N#define CYDEV_ANAIF_RT_DAC0_SW2 0x40005a82u
N#define CYDEV_ANAIF_RT_DAC0_SW3 0x40005a83u
N#define CYDEV_ANAIF_RT_DAC0_SW4 0x40005a84u
N#define CYDEV_ANAIF_RT_DAC0_STROBE 0x40005a87u
N#define CYDEV_ANAIF_RT_DAC1_BASE 0x40005a88u
N#define CYDEV_ANAIF_RT_DAC1_SIZE 0x00000008u
N#define CYDEV_ANAIF_RT_DAC1_SW0 0x40005a88u
N#define CYDEV_ANAIF_RT_DAC1_SW2 0x40005a8au
N#define CYDEV_ANAIF_RT_DAC1_SW3 0x40005a8bu
N#define CYDEV_ANAIF_RT_DAC1_SW4 0x40005a8cu
N#define CYDEV_ANAIF_RT_DAC1_STROBE 0x40005a8fu
N#define CYDEV_ANAIF_RT_DAC2_BASE 0x40005a90u
N#define CYDEV_ANAIF_RT_DAC2_SIZE 0x00000008u
N#define CYDEV_ANAIF_RT_DAC2_SW0 0x40005a90u
N#define CYDEV_ANAIF_RT_DAC2_SW2 0x40005a92u
N#define CYDEV_ANAIF_RT_DAC2_SW3 0x40005a93u
N#define CYDEV_ANAIF_RT_DAC2_SW4 0x40005a94u
N#define CYDEV_ANAIF_RT_DAC2_STROBE 0x40005a97u
N#define CYDEV_ANAIF_RT_DAC3_BASE 0x40005a98u
N#define CYDEV_ANAIF_RT_DAC3_SIZE 0x00000008u
N#define CYDEV_ANAIF_RT_DAC3_SW0 0x40005a98u
N#define CYDEV_ANAIF_RT_DAC3_SW2 0x40005a9au
N#define CYDEV_ANAIF_RT_DAC3_SW3 0x40005a9bu
N#define CYDEV_ANAIF_RT_DAC3_SW4 0x40005a9cu
N#define CYDEV_ANAIF_RT_DAC3_STROBE 0x40005a9fu
N#define CYDEV_ANAIF_RT_CMP0_BASE 0x40005ac0u
N#define CYDEV_ANAIF_RT_CMP0_SIZE 0x00000008u
N#define CYDEV_ANAIF_RT_CMP0_SW0 0x40005ac0u
N#define CYDEV_ANAIF_RT_CMP0_SW2 0x40005ac2u
N#define CYDEV_ANAIF_RT_CMP0_SW3 0x40005ac3u
N#define CYDEV_ANAIF_RT_CMP0_SW4 0x40005ac4u
N#define CYDEV_ANAIF_RT_CMP0_SW6 0x40005ac6u
N#define CYDEV_ANAIF_RT_CMP0_CLK 0x40005ac7u
N#define CYDEV_ANAIF_RT_CMP1_BASE 0x40005ac8u
N#define CYDEV_ANAIF_RT_CMP1_SIZE 0x00000008u
N#define CYDEV_ANAIF_RT_CMP1_SW0 0x40005ac8u
N#define CYDEV_ANAIF_RT_CMP1_SW2 0x40005acau
N#define CYDEV_ANAIF_RT_CMP1_SW3 0x40005acbu
N#define CYDEV_ANAIF_RT_CMP1_SW4 0x40005accu
N#define CYDEV_ANAIF_RT_CMP1_SW6 0x40005aceu
N#define CYDEV_ANAIF_RT_CMP1_CLK 0x40005acfu
N#define CYDEV_ANAIF_RT_CMP2_BASE 0x40005ad0u
N#define CYDEV_ANAIF_RT_CMP2_SIZE 0x00000008u
N#define CYDEV_ANAIF_RT_CMP2_SW0 0x40005ad0u
N#define CYDEV_ANAIF_RT_CMP2_SW2 0x40005ad2u
N#define CYDEV_ANAIF_RT_CMP2_SW3 0x40005ad3u
N#define CYDEV_ANAIF_RT_CMP2_SW4 0x40005ad4u
N#define CYDEV_ANAIF_RT_CMP2_SW6 0x40005ad6u
N#define CYDEV_ANAIF_RT_CMP2_CLK 0x40005ad7u
N#define CYDEV_ANAIF_RT_CMP3_BASE 0x40005ad8u
N#define CYDEV_ANAIF_RT_CMP3_SIZE 0x00000008u
N#define CYDEV_ANAIF_RT_CMP3_SW0 0x40005ad8u
N#define CYDEV_ANAIF_RT_CMP3_SW2 0x40005adau
N#define CYDEV_ANAIF_RT_CMP3_SW3 0x40005adbu
N#define CYDEV_ANAIF_RT_CMP3_SW4 0x40005adcu
N#define CYDEV_ANAIF_RT_CMP3_SW6 0x40005adeu
N#define CYDEV_ANAIF_RT_CMP3_CLK 0x40005adfu
N#define CYDEV_ANAIF_RT_DSM0_BASE 0x40005b00u
N#define CYDEV_ANAIF_RT_DSM0_SIZE 0x00000008u
N#define CYDEV_ANAIF_RT_DSM0_SW0 0x40005b00u
N#define CYDEV_ANAIF_RT_DSM0_SW2 0x40005b02u
N#define CYDEV_ANAIF_RT_DSM0_SW3 0x40005b03u
N#define CYDEV_ANAIF_RT_DSM0_SW4 0x40005b04u
N#define CYDEV_ANAIF_RT_DSM0_SW6 0x40005b06u
N#define CYDEV_ANAIF_RT_DSM0_CLK 0x40005b07u
N#define CYDEV_ANAIF_RT_SAR0_BASE 0x40005b20u
N#define CYDEV_ANAIF_RT_SAR0_SIZE 0x00000008u
N#define CYDEV_ANAIF_RT_SAR0_SW0 0x40005b20u
N#define CYDEV_ANAIF_RT_SAR0_SW2 0x40005b22u
N#define CYDEV_ANAIF_RT_SAR0_SW3 0x40005b23u
N#define CYDEV_ANAIF_RT_SAR0_SW4 0x40005b24u
N#define CYDEV_ANAIF_RT_SAR0_SW6 0x40005b26u
N#define CYDEV_ANAIF_RT_SAR0_CLK 0x40005b27u
N#define CYDEV_ANAIF_RT_SAR1_BASE 0x40005b28u
N#define CYDEV_ANAIF_RT_SAR1_SIZE 0x00000008u
N#define CYDEV_ANAIF_RT_SAR1_SW0 0x40005b28u
N#define CYDEV_ANAIF_RT_SAR1_SW2 0x40005b2au
N#define CYDEV_ANAIF_RT_SAR1_SW3 0x40005b2bu
N#define CYDEV_ANAIF_RT_SAR1_SW4 0x40005b2cu
N#define CYDEV_ANAIF_RT_SAR1_SW6 0x40005b2eu
N#define CYDEV_ANAIF_RT_SAR1_CLK 0x40005b2fu
N#define CYDEV_ANAIF_RT_OPAMP0_BASE 0x40005b40u
N#define CYDEV_ANAIF_RT_OPAMP0_SIZE 0x00000002u
N#define CYDEV_ANAIF_RT_OPAMP0_MX 0x40005b40u
N#define CYDEV_ANAIF_RT_OPAMP0_SW 0x40005b41u
N#define CYDEV_ANAIF_RT_OPAMP1_BASE 0x40005b42u
N#define CYDEV_ANAIF_RT_OPAMP1_SIZE 0x00000002u
N#define CYDEV_ANAIF_RT_OPAMP1_MX 0x40005b42u
N#define CYDEV_ANAIF_RT_OPAMP1_SW 0x40005b43u
N#define CYDEV_ANAIF_RT_OPAMP2_BASE 0x40005b44u
N#define CYDEV_ANAIF_RT_OPAMP2_SIZE 0x00000002u
N#define CYDEV_ANAIF_RT_OPAMP2_MX 0x40005b44u
N#define CYDEV_ANAIF_RT_OPAMP2_SW 0x40005b45u
N#define CYDEV_ANAIF_RT_OPAMP3_BASE 0x40005b46u
N#define CYDEV_ANAIF_RT_OPAMP3_SIZE 0x00000002u
N#define CYDEV_ANAIF_RT_OPAMP3_MX 0x40005b46u
N#define CYDEV_ANAIF_RT_OPAMP3_SW 0x40005b47u
N#define CYDEV_ANAIF_RT_LCDDAC_BASE 0x40005b50u
N#define CYDEV_ANAIF_RT_LCDDAC_SIZE 0x00000005u
N#define CYDEV_ANAIF_RT_LCDDAC_SW0 0x40005b50u
N#define CYDEV_ANAIF_RT_LCDDAC_SW1 0x40005b51u
N#define CYDEV_ANAIF_RT_LCDDAC_SW2 0x40005b52u
N#define CYDEV_ANAIF_RT_LCDDAC_SW3 0x40005b53u
N#define CYDEV_ANAIF_RT_LCDDAC_SW4 0x40005b54u
N#define CYDEV_ANAIF_RT_SC_BASE 0x40005b56u
N#define CYDEV_ANAIF_RT_SC_SIZE 0x00000001u
N#define CYDEV_ANAIF_RT_SC_MISC 0x40005b56u
N#define CYDEV_ANAIF_RT_BUS_BASE 0x40005b58u
N#define CYDEV_ANAIF_RT_BUS_SIZE 0x00000004u
N#define CYDEV_ANAIF_RT_BUS_SW0 0x40005b58u
N#define CYDEV_ANAIF_RT_BUS_SW2 0x40005b5au
N#define CYDEV_ANAIF_RT_BUS_SW3 0x40005b5bu
N#define CYDEV_ANAIF_RT_DFT_BASE 0x40005b5cu
N#define CYDEV_ANAIF_RT_DFT_SIZE 0x00000006u
N#define CYDEV_ANAIF_RT_DFT_CR0 0x40005b5cu
N#define CYDEV_ANAIF_RT_DFT_CR1 0x40005b5du
N#define CYDEV_ANAIF_RT_DFT_CR2 0x40005b5eu
N#define CYDEV_ANAIF_RT_DFT_CR3 0x40005b5fu
N#define CYDEV_ANAIF_RT_DFT_CR4 0x40005b60u
N#define CYDEV_ANAIF_RT_DFT_CR5 0x40005b61u
N#define CYDEV_ANAIF_WRK_BASE 0x40005b80u
N#define CYDEV_ANAIF_WRK_SIZE 0x00000029u
N#define CYDEV_ANAIF_WRK_DAC0_BASE 0x40005b80u
N#define CYDEV_ANAIF_WRK_DAC0_SIZE 0x00000001u
N#define CYDEV_ANAIF_WRK_DAC0_D 0x40005b80u
N#define CYDEV_ANAIF_WRK_DAC1_BASE 0x40005b81u
N#define CYDEV_ANAIF_WRK_DAC1_SIZE 0x00000001u
N#define CYDEV_ANAIF_WRK_DAC1_D 0x40005b81u
N#define CYDEV_ANAIF_WRK_DAC2_BASE 0x40005b82u
N#define CYDEV_ANAIF_WRK_DAC2_SIZE 0x00000001u
N#define CYDEV_ANAIF_WRK_DAC2_D 0x40005b82u
N#define CYDEV_ANAIF_WRK_DAC3_BASE 0x40005b83u
N#define CYDEV_ANAIF_WRK_DAC3_SIZE 0x00000001u
N#define CYDEV_ANAIF_WRK_DAC3_D 0x40005b83u
N#define CYDEV_ANAIF_WRK_DSM0_BASE 0x40005b88u
N#define CYDEV_ANAIF_WRK_DSM0_SIZE 0x00000002u
N#define CYDEV_ANAIF_WRK_DSM0_OUT0 0x40005b88u
N#define CYDEV_ANAIF_WRK_DSM0_OUT1 0x40005b89u
N#define CYDEV_ANAIF_WRK_LUT_BASE 0x40005b90u
N#define CYDEV_ANAIF_WRK_LUT_SIZE 0x00000005u
N#define CYDEV_ANAIF_WRK_LUT_SR 0x40005b90u
N#define CYDEV_ANAIF_WRK_LUT_WRK1 0x40005b91u
N#define CYDEV_ANAIF_WRK_LUT_MSK 0x40005b92u
N#define CYDEV_ANAIF_WRK_LUT_CLK 0x40005b93u
N#define CYDEV_ANAIF_WRK_LUT_CPTR 0x40005b94u
N#define CYDEV_ANAIF_WRK_CMP_BASE 0x40005b96u
N#define CYDEV_ANAIF_WRK_CMP_SIZE 0x00000002u
N#define CYDEV_ANAIF_WRK_CMP_WRK 0x40005b96u
N#define CYDEV_ANAIF_WRK_CMP_TST 0x40005b97u
N#define CYDEV_ANAIF_WRK_SC_BASE 0x40005b98u
N#define CYDEV_ANAIF_WRK_SC_SIZE 0x00000005u
N#define CYDEV_ANAIF_WRK_SC_SR 0x40005b98u
N#define CYDEV_ANAIF_WRK_SC_WRK1 0x40005b99u
N#define CYDEV_ANAIF_WRK_SC_MSK 0x40005b9au
N#define CYDEV_ANAIF_WRK_SC_CMPINV 0x40005b9bu
N#define CYDEV_ANAIF_WRK_SC_CPTR 0x40005b9cu
N#define CYDEV_ANAIF_WRK_SAR0_BASE 0x40005ba0u
N#define CYDEV_ANAIF_WRK_SAR0_SIZE 0x00000002u
N#define CYDEV_ANAIF_WRK_SAR0_WRK0 0x40005ba0u
N#define CYDEV_ANAIF_WRK_SAR0_WRK1 0x40005ba1u
N#define CYDEV_ANAIF_WRK_SAR1_BASE 0x40005ba2u
N#define CYDEV_ANAIF_WRK_SAR1_SIZE 0x00000002u
N#define CYDEV_ANAIF_WRK_SAR1_WRK0 0x40005ba2u
N#define CYDEV_ANAIF_WRK_SAR1_WRK1 0x40005ba3u
N#define CYDEV_ANAIF_WRK_SARS_BASE 0x40005ba8u
N#define CYDEV_ANAIF_WRK_SARS_SIZE 0x00000001u
N#define CYDEV_ANAIF_WRK_SARS_SOF 0x40005ba8u
N#define CYDEV_USB_BASE 0x40006000u
N#define CYDEV_USB_SIZE 0x00000300u
N#define CYDEV_USB_EP0_DR0 0x40006000u
N#define CYDEV_USB_EP0_DR1 0x40006001u
N#define CYDEV_USB_EP0_DR2 0x40006002u
N#define CYDEV_USB_EP0_DR3 0x40006003u
N#define CYDEV_USB_EP0_DR4 0x40006004u
N#define CYDEV_USB_EP0_DR5 0x40006005u
N#define CYDEV_USB_EP0_DR6 0x40006006u
N#define CYDEV_USB_EP0_DR7 0x40006007u
N#define CYDEV_USB_CR0 0x40006008u
N#define CYDEV_USB_CR1 0x40006009u
N#define CYDEV_USB_SIE_EP_INT_EN 0x4000600au
N#define CYDEV_USB_SIE_EP_INT_SR 0x4000600bu
N#define CYDEV_USB_SIE_EP1_BASE 0x4000600cu
N#define CYDEV_USB_SIE_EP1_SIZE 0x00000003u
N#define CYDEV_USB_SIE_EP1_CNT0 0x4000600cu
N#define CYDEV_USB_SIE_EP1_CNT1 0x4000600du
N#define CYDEV_USB_SIE_EP1_CR0 0x4000600eu
N#define CYDEV_USB_USBIO_CR0 0x40006010u
N#define CYDEV_USB_USBIO_CR1 0x40006012u
N#define CYDEV_USB_DYN_RECONFIG 0x40006014u
N#define CYDEV_USB_SOF0 0x40006018u
N#define CYDEV_USB_SOF1 0x40006019u
N#define CYDEV_USB_SIE_EP2_BASE 0x4000601cu
N#define CYDEV_USB_SIE_EP2_SIZE 0x00000003u
N#define CYDEV_USB_SIE_EP2_CNT0 0x4000601cu
N#define CYDEV_USB_SIE_EP2_CNT1 0x4000601du
N#define CYDEV_USB_SIE_EP2_CR0 0x4000601eu
N#define CYDEV_USB_EP0_CR 0x40006028u
N#define CYDEV_USB_EP0_CNT 0x40006029u
N#define CYDEV_USB_SIE_EP3_BASE 0x4000602cu
N#define CYDEV_USB_SIE_EP3_SIZE 0x00000003u
N#define CYDEV_USB_SIE_EP3_CNT0 0x4000602cu
N#define CYDEV_USB_SIE_EP3_CNT1 0x4000602du
N#define CYDEV_USB_SIE_EP3_CR0 0x4000602eu
N#define CYDEV_USB_SIE_EP4_BASE 0x4000603cu
N#define CYDEV_USB_SIE_EP4_SIZE 0x00000003u
N#define CYDEV_USB_SIE_EP4_CNT0 0x4000603cu
N#define CYDEV_USB_SIE_EP4_CNT1 0x4000603du
N#define CYDEV_USB_SIE_EP4_CR0 0x4000603eu
N#define CYDEV_USB_SIE_EP5_BASE 0x4000604cu
N#define CYDEV_USB_SIE_EP5_SIZE 0x00000003u
N#define CYDEV_USB_SIE_EP5_CNT0 0x4000604cu
N#define CYDEV_USB_SIE_EP5_CNT1 0x4000604du
N#define CYDEV_USB_SIE_EP5_CR0 0x4000604eu
N#define CYDEV_USB_SIE_EP6_BASE 0x4000605cu
N#define CYDEV_USB_SIE_EP6_SIZE 0x00000003u
N#define CYDEV_USB_SIE_EP6_CNT0 0x4000605cu
N#define CYDEV_USB_SIE_EP6_CNT1 0x4000605du
N#define CYDEV_USB_SIE_EP6_CR0 0x4000605eu
N#define CYDEV_USB_SIE_EP7_BASE 0x4000606cu
N#define CYDEV_USB_SIE_EP7_SIZE 0x00000003u
N#define CYDEV_USB_SIE_EP7_CNT0 0x4000606cu
N#define CYDEV_USB_SIE_EP7_CNT1 0x4000606du
N#define CYDEV_USB_SIE_EP7_CR0 0x4000606eu
N#define CYDEV_USB_SIE_EP8_BASE 0x4000607cu
N#define CYDEV_USB_SIE_EP8_SIZE 0x00000003u
N#define CYDEV_USB_SIE_EP8_CNT0 0x4000607cu
N#define CYDEV_USB_SIE_EP8_CNT1 0x4000607du
N#define CYDEV_USB_SIE_EP8_CR0 0x4000607eu
N#define CYDEV_USB_ARB_EP1_BASE 0x40006080u
N#define CYDEV_USB_ARB_EP1_SIZE 0x00000003u
N#define CYDEV_USB_ARB_EP1_CFG 0x40006080u
N#define CYDEV_USB_ARB_EP1_INT_EN 0x40006081u
N#define CYDEV_USB_ARB_EP1_SR 0x40006082u
N#define CYDEV_USB_ARB_RW1_BASE 0x40006084u
N#define CYDEV_USB_ARB_RW1_SIZE 0x00000005u
N#define CYDEV_USB_ARB_RW1_WA 0x40006084u
N#define CYDEV_USB_ARB_RW1_WA_MSB 0x40006085u
N#define CYDEV_USB_ARB_RW1_RA 0x40006086u
N#define CYDEV_USB_ARB_RW1_RA_MSB 0x40006087u
N#define CYDEV_USB_ARB_RW1_DR 0x40006088u
N#define CYDEV_USB_BUF_SIZE 0x4000608cu
N#define CYDEV_USB_EP_ACTIVE 0x4000608eu
N#define CYDEV_USB_EP_TYPE 0x4000608fu
N#define CYDEV_USB_ARB_EP2_BASE 0x40006090u
N#define CYDEV_USB_ARB_EP2_SIZE 0x00000003u
N#define CYDEV_USB_ARB_EP2_CFG 0x40006090u
N#define CYDEV_USB_ARB_EP2_INT_EN 0x40006091u
N#define CYDEV_USB_ARB_EP2_SR 0x40006092u
N#define CYDEV_USB_ARB_RW2_BASE 0x40006094u
N#define CYDEV_USB_ARB_RW2_SIZE 0x00000005u
N#define CYDEV_USB_ARB_RW2_WA 0x40006094u
N#define CYDEV_USB_ARB_RW2_WA_MSB 0x40006095u
N#define CYDEV_USB_ARB_RW2_RA 0x40006096u
N#define CYDEV_USB_ARB_RW2_RA_MSB 0x40006097u
N#define CYDEV_USB_ARB_RW2_DR 0x40006098u
N#define CYDEV_USB_ARB_CFG 0x4000609cu
N#define CYDEV_USB_USB_CLK_EN 0x4000609du
N#define CYDEV_USB_ARB_INT_EN 0x4000609eu
N#define CYDEV_USB_ARB_INT_SR 0x4000609fu
N#define CYDEV_USB_ARB_EP3_BASE 0x400060a0u
N#define CYDEV_USB_ARB_EP3_SIZE 0x00000003u
N#define CYDEV_USB_ARB_EP3_CFG 0x400060a0u
N#define CYDEV_USB_ARB_EP3_INT_EN 0x400060a1u
N#define CYDEV_USB_ARB_EP3_SR 0x400060a2u
N#define CYDEV_USB_ARB_RW3_BASE 0x400060a4u
N#define CYDEV_USB_ARB_RW3_SIZE 0x00000005u
N#define CYDEV_USB_ARB_RW3_WA 0x400060a4u
N#define CYDEV_USB_ARB_RW3_WA_MSB 0x400060a5u
N#define CYDEV_USB_ARB_RW3_RA 0x400060a6u
N#define CYDEV_USB_ARB_RW3_RA_MSB 0x400060a7u
N#define CYDEV_USB_ARB_RW3_DR 0x400060a8u
N#define CYDEV_USB_CWA 0x400060acu
N#define CYDEV_USB_CWA_MSB 0x400060adu
N#define CYDEV_USB_ARB_EP4_BASE 0x400060b0u
N#define CYDEV_USB_ARB_EP4_SIZE 0x00000003u
N#define CYDEV_USB_ARB_EP4_CFG 0x400060b0u
N#define CYDEV_USB_ARB_EP4_INT_EN 0x400060b1u
N#define CYDEV_USB_ARB_EP4_SR 0x400060b2u
N#define CYDEV_USB_ARB_RW4_BASE 0x400060b4u
N#define CYDEV_USB_ARB_RW4_SIZE 0x00000005u
N#define CYDEV_USB_ARB_RW4_WA 0x400060b4u
N#define CYDEV_USB_ARB_RW4_WA_MSB 0x400060b5u
N#define CYDEV_USB_ARB_RW4_RA 0x400060b6u
N#define CYDEV_USB_ARB_RW4_RA_MSB 0x400060b7u
N#define CYDEV_USB_ARB_RW4_DR 0x400060b8u
N#define CYDEV_USB_DMA_THRES 0x400060bcu
N#define CYDEV_USB_DMA_THRES_MSB 0x400060bdu
N#define CYDEV_USB_ARB_EP5_BASE 0x400060c0u
N#define CYDEV_USB_ARB_EP5_SIZE 0x00000003u
N#define CYDEV_USB_ARB_EP5_CFG 0x400060c0u
N#define CYDEV_USB_ARB_EP5_INT_EN 0x400060c1u
N#define CYDEV_USB_ARB_EP5_SR 0x400060c2u
N#define CYDEV_USB_ARB_RW5_BASE 0x400060c4u
N#define CYDEV_USB_ARB_RW5_SIZE 0x00000005u
N#define CYDEV_USB_ARB_RW5_WA 0x400060c4u
N#define CYDEV_USB_ARB_RW5_WA_MSB 0x400060c5u
N#define CYDEV_USB_ARB_RW5_RA 0x400060c6u
N#define CYDEV_USB_ARB_RW5_RA_MSB 0x400060c7u
N#define CYDEV_USB_ARB_RW5_DR 0x400060c8u
N#define CYDEV_USB_BUS_RST_CNT 0x400060ccu
N#define CYDEV_USB_ARB_EP6_BASE 0x400060d0u
N#define CYDEV_USB_ARB_EP6_SIZE 0x00000003u
N#define CYDEV_USB_ARB_EP6_CFG 0x400060d0u
N#define CYDEV_USB_ARB_EP6_INT_EN 0x400060d1u
N#define CYDEV_USB_ARB_EP6_SR 0x400060d2u
N#define CYDEV_USB_ARB_RW6_BASE 0x400060d4u
N#define CYDEV_USB_ARB_RW6_SIZE 0x00000005u
N#define CYDEV_USB_ARB_RW6_WA 0x400060d4u
N#define CYDEV_USB_ARB_RW6_WA_MSB 0x400060d5u
N#define CYDEV_USB_ARB_RW6_RA 0x400060d6u
N#define CYDEV_USB_ARB_RW6_RA_MSB 0x400060d7u
N#define CYDEV_USB_ARB_RW6_DR 0x400060d8u
N#define CYDEV_USB_ARB_EP7_BASE 0x400060e0u
N#define CYDEV_USB_ARB_EP7_SIZE 0x00000003u
N#define CYDEV_USB_ARB_EP7_CFG 0x400060e0u
N#define CYDEV_USB_ARB_EP7_INT_EN 0x400060e1u
N#define CYDEV_USB_ARB_EP7_SR 0x400060e2u
N#define CYDEV_USB_ARB_RW7_BASE 0x400060e4u
N#define CYDEV_USB_ARB_RW7_SIZE 0x00000005u
N#define CYDEV_USB_ARB_RW7_WA 0x400060e4u
N#define CYDEV_USB_ARB_RW7_WA_MSB 0x400060e5u
N#define CYDEV_USB_ARB_RW7_RA 0x400060e6u
N#define CYDEV_USB_ARB_RW7_RA_MSB 0x400060e7u
N#define CYDEV_USB_ARB_RW7_DR 0x400060e8u
N#define CYDEV_USB_ARB_EP8_BASE 0x400060f0u
N#define CYDEV_USB_ARB_EP8_SIZE 0x00000003u
N#define CYDEV_USB_ARB_EP8_CFG 0x400060f0u
N#define CYDEV_USB_ARB_EP8_INT_EN 0x400060f1u
N#define CYDEV_USB_ARB_EP8_SR 0x400060f2u
N#define CYDEV_USB_ARB_RW8_BASE 0x400060f4u
N#define CYDEV_USB_ARB_RW8_SIZE 0x00000005u
N#define CYDEV_USB_ARB_RW8_WA 0x400060f4u
N#define CYDEV_USB_ARB_RW8_WA_MSB 0x400060f5u
N#define CYDEV_USB_ARB_RW8_RA 0x400060f6u
N#define CYDEV_USB_ARB_RW8_RA_MSB 0x400060f7u
N#define CYDEV_USB_ARB_RW8_DR 0x400060f8u
N#define CYDEV_USB_MEM_BASE 0x40006100u
N#define CYDEV_USB_MEM_SIZE 0x00000200u
N#define CYDEV_USB_MEM_DATA_MBASE 0x40006100u
N#define CYDEV_USB_MEM_DATA_MSIZE 0x00000200u
N#define CYDEV_UWRK_BASE 0x40006400u
N#define CYDEV_UWRK_SIZE 0x00000b60u
N#define CYDEV_UWRK_UWRK8_BASE 0x40006400u
N#define CYDEV_UWRK_UWRK8_SIZE 0x000003b0u
N#define CYDEV_UWRK_UWRK8_B0_BASE 0x40006400u
N#define CYDEV_UWRK_UWRK8_B0_SIZE 0x000000b0u
N#define CYDEV_UWRK_UWRK8_B0_UDB00_A0 0x40006400u
N#define CYDEV_UWRK_UWRK8_B0_UDB01_A0 0x40006401u
N#define CYDEV_UWRK_UWRK8_B0_UDB02_A0 0x40006402u
N#define CYDEV_UWRK_UWRK8_B0_UDB03_A0 0x40006403u
N#define CYDEV_UWRK_UWRK8_B0_UDB04_A0 0x40006404u
N#define CYDEV_UWRK_UWRK8_B0_UDB05_A0 0x40006405u
N#define CYDEV_UWRK_UWRK8_B0_UDB06_A0 0x40006406u
N#define CYDEV_UWRK_UWRK8_B0_UDB07_A0 0x40006407u
N#define CYDEV_UWRK_UWRK8_B0_UDB08_A0 0x40006408u
N#define CYDEV_UWRK_UWRK8_B0_UDB09_A0 0x40006409u
N#define CYDEV_UWRK_UWRK8_B0_UDB10_A0 0x4000640au
N#define CYDEV_UWRK_UWRK8_B0_UDB11_A0 0x4000640bu
N#define CYDEV_UWRK_UWRK8_B0_UDB12_A0 0x4000640cu
N#define CYDEV_UWRK_UWRK8_B0_UDB13_A0 0x4000640du
N#define CYDEV_UWRK_UWRK8_B0_UDB14_A0 0x4000640eu
N#define CYDEV_UWRK_UWRK8_B0_UDB15_A0 0x4000640fu
N#define CYDEV_UWRK_UWRK8_B0_UDB00_A1 0x40006410u
N#define CYDEV_UWRK_UWRK8_B0_UDB01_A1 0x40006411u
N#define CYDEV_UWRK_UWRK8_B0_UDB02_A1 0x40006412u
N#define CYDEV_UWRK_UWRK8_B0_UDB03_A1 0x40006413u
N#define CYDEV_UWRK_UWRK8_B0_UDB04_A1 0x40006414u
N#define CYDEV_UWRK_UWRK8_B0_UDB05_A1 0x40006415u
N#define CYDEV_UWRK_UWRK8_B0_UDB06_A1 0x40006416u
N#define CYDEV_UWRK_UWRK8_B0_UDB07_A1 0x40006417u
N#define CYDEV_UWRK_UWRK8_B0_UDB08_A1 0x40006418u
N#define CYDEV_UWRK_UWRK8_B0_UDB09_A1 0x40006419u
N#define CYDEV_UWRK_UWRK8_B0_UDB10_A1 0x4000641au
N#define CYDEV_UWRK_UWRK8_B0_UDB11_A1 0x4000641bu
N#define CYDEV_UWRK_UWRK8_B0_UDB12_A1 0x4000641cu
N#define CYDEV_UWRK_UWRK8_B0_UDB13_A1 0x4000641du
N#define CYDEV_UWRK_UWRK8_B0_UDB14_A1 0x4000641eu
N#define CYDEV_UWRK_UWRK8_B0_UDB15_A1 0x4000641fu
N#define CYDEV_UWRK_UWRK8_B0_UDB00_D0 0x40006420u
N#define CYDEV_UWRK_UWRK8_B0_UDB01_D0 0x40006421u
N#define CYDEV_UWRK_UWRK8_B0_UDB02_D0 0x40006422u
N#define CYDEV_UWRK_UWRK8_B0_UDB03_D0 0x40006423u
N#define CYDEV_UWRK_UWRK8_B0_UDB04_D0 0x40006424u
N#define CYDEV_UWRK_UWRK8_B0_UDB05_D0 0x40006425u
N#define CYDEV_UWRK_UWRK8_B0_UDB06_D0 0x40006426u
N#define CYDEV_UWRK_UWRK8_B0_UDB07_D0 0x40006427u
N#define CYDEV_UWRK_UWRK8_B0_UDB08_D0 0x40006428u
N#define CYDEV_UWRK_UWRK8_B0_UDB09_D0 0x40006429u
N#define CYDEV_UWRK_UWRK8_B0_UDB10_D0 0x4000642au
N#define CYDEV_UWRK_UWRK8_B0_UDB11_D0 0x4000642bu
N#define CYDEV_UWRK_UWRK8_B0_UDB12_D0 0x4000642cu
N#define CYDEV_UWRK_UWRK8_B0_UDB13_D0 0x4000642du
N#define CYDEV_UWRK_UWRK8_B0_UDB14_D0 0x4000642eu
N#define CYDEV_UWRK_UWRK8_B0_UDB15_D0 0x4000642fu
N#define CYDEV_UWRK_UWRK8_B0_UDB00_D1 0x40006430u
N#define CYDEV_UWRK_UWRK8_B0_UDB01_D1 0x40006431u
N#define CYDEV_UWRK_UWRK8_B0_UDB02_D1 0x40006432u
N#define CYDEV_UWRK_UWRK8_B0_UDB03_D1 0x40006433u
N#define CYDEV_UWRK_UWRK8_B0_UDB04_D1 0x40006434u
N#define CYDEV_UWRK_UWRK8_B0_UDB05_D1 0x40006435u
N#define CYDEV_UWRK_UWRK8_B0_UDB06_D1 0x40006436u
N#define CYDEV_UWRK_UWRK8_B0_UDB07_D1 0x40006437u
N#define CYDEV_UWRK_UWRK8_B0_UDB08_D1 0x40006438u
N#define CYDEV_UWRK_UWRK8_B0_UDB09_D1 0x40006439u
N#define CYDEV_UWRK_UWRK8_B0_UDB10_D1 0x4000643au
N#define CYDEV_UWRK_UWRK8_B0_UDB11_D1 0x4000643bu
N#define CYDEV_UWRK_UWRK8_B0_UDB12_D1 0x4000643cu
N#define CYDEV_UWRK_UWRK8_B0_UDB13_D1 0x4000643du
N#define CYDEV_UWRK_UWRK8_B0_UDB14_D1 0x4000643eu
N#define CYDEV_UWRK_UWRK8_B0_UDB15_D1 0x4000643fu
N#define CYDEV_UWRK_UWRK8_B0_UDB00_F0 0x40006440u
N#define CYDEV_UWRK_UWRK8_B0_UDB01_F0 0x40006441u
N#define CYDEV_UWRK_UWRK8_B0_UDB02_F0 0x40006442u
N#define CYDEV_UWRK_UWRK8_B0_UDB03_F0 0x40006443u
N#define CYDEV_UWRK_UWRK8_B0_UDB04_F0 0x40006444u
N#define CYDEV_UWRK_UWRK8_B0_UDB05_F0 0x40006445u
N#define CYDEV_UWRK_UWRK8_B0_UDB06_F0 0x40006446u
N#define CYDEV_UWRK_UWRK8_B0_UDB07_F0 0x40006447u
N#define CYDEV_UWRK_UWRK8_B0_UDB08_F0 0x40006448u
N#define CYDEV_UWRK_UWRK8_B0_UDB09_F0 0x40006449u
N#define CYDEV_UWRK_UWRK8_B0_UDB10_F0 0x4000644au
N#define CYDEV_UWRK_UWRK8_B0_UDB11_F0 0x4000644bu
N#define CYDEV_UWRK_UWRK8_B0_UDB12_F0 0x4000644cu
N#define CYDEV_UWRK_UWRK8_B0_UDB13_F0 0x4000644du
N#define CYDEV_UWRK_UWRK8_B0_UDB14_F0 0x4000644eu
N#define CYDEV_UWRK_UWRK8_B0_UDB15_F0 0x4000644fu
N#define CYDEV_UWRK_UWRK8_B0_UDB00_F1 0x40006450u
N#define CYDEV_UWRK_UWRK8_B0_UDB01_F1 0x40006451u
N#define CYDEV_UWRK_UWRK8_B0_UDB02_F1 0x40006452u
N#define CYDEV_UWRK_UWRK8_B0_UDB03_F1 0x40006453u
N#define CYDEV_UWRK_UWRK8_B0_UDB04_F1 0x40006454u
N#define CYDEV_UWRK_UWRK8_B0_UDB05_F1 0x40006455u
N#define CYDEV_UWRK_UWRK8_B0_UDB06_F1 0x40006456u
N#define CYDEV_UWRK_UWRK8_B0_UDB07_F1 0x40006457u
N#define CYDEV_UWRK_UWRK8_B0_UDB08_F1 0x40006458u
N#define CYDEV_UWRK_UWRK8_B0_UDB09_F1 0x40006459u
N#define CYDEV_UWRK_UWRK8_B0_UDB10_F1 0x4000645au
N#define CYDEV_UWRK_UWRK8_B0_UDB11_F1 0x4000645bu
N#define CYDEV_UWRK_UWRK8_B0_UDB12_F1 0x4000645cu
N#define CYDEV_UWRK_UWRK8_B0_UDB13_F1 0x4000645du
N#define CYDEV_UWRK_UWRK8_B0_UDB14_F1 0x4000645eu
N#define CYDEV_UWRK_UWRK8_B0_UDB15_F1 0x4000645fu
N#define CYDEV_UWRK_UWRK8_B0_UDB00_ST 0x40006460u
N#define CYDEV_UWRK_UWRK8_B0_UDB01_ST 0x40006461u
N#define CYDEV_UWRK_UWRK8_B0_UDB02_ST 0x40006462u
N#define CYDEV_UWRK_UWRK8_B0_UDB03_ST 0x40006463u
N#define CYDEV_UWRK_UWRK8_B0_UDB04_ST 0x40006464u
N#define CYDEV_UWRK_UWRK8_B0_UDB05_ST 0x40006465u
N#define CYDEV_UWRK_UWRK8_B0_UDB06_ST 0x40006466u
N#define CYDEV_UWRK_UWRK8_B0_UDB07_ST 0x40006467u
N#define CYDEV_UWRK_UWRK8_B0_UDB08_ST 0x40006468u
N#define CYDEV_UWRK_UWRK8_B0_UDB09_ST 0x40006469u
N#define CYDEV_UWRK_UWRK8_B0_UDB10_ST 0x4000646au
N#define CYDEV_UWRK_UWRK8_B0_UDB11_ST 0x4000646bu
N#define CYDEV_UWRK_UWRK8_B0_UDB12_ST 0x4000646cu
N#define CYDEV_UWRK_UWRK8_B0_UDB13_ST 0x4000646du
N#define CYDEV_UWRK_UWRK8_B0_UDB14_ST 0x4000646eu
N#define CYDEV_UWRK_UWRK8_B0_UDB15_ST 0x4000646fu
N#define CYDEV_UWRK_UWRK8_B0_UDB00_CTL 0x40006470u
N#define CYDEV_UWRK_UWRK8_B0_UDB01_CTL 0x40006471u
N#define CYDEV_UWRK_UWRK8_B0_UDB02_CTL 0x40006472u
N#define CYDEV_UWRK_UWRK8_B0_UDB03_CTL 0x40006473u
N#define CYDEV_UWRK_UWRK8_B0_UDB04_CTL 0x40006474u
N#define CYDEV_UWRK_UWRK8_B0_UDB05_CTL 0x40006475u
N#define CYDEV_UWRK_UWRK8_B0_UDB06_CTL 0x40006476u
N#define CYDEV_UWRK_UWRK8_B0_UDB07_CTL 0x40006477u
N#define CYDEV_UWRK_UWRK8_B0_UDB08_CTL 0x40006478u
N#define CYDEV_UWRK_UWRK8_B0_UDB09_CTL 0x40006479u
N#define CYDEV_UWRK_UWRK8_B0_UDB10_CTL 0x4000647au
N#define CYDEV_UWRK_UWRK8_B0_UDB11_CTL 0x4000647bu
N#define CYDEV_UWRK_UWRK8_B0_UDB12_CTL 0x4000647cu
N#define CYDEV_UWRK_UWRK8_B0_UDB13_CTL 0x4000647du
N#define CYDEV_UWRK_UWRK8_B0_UDB14_CTL 0x4000647eu
N#define CYDEV_UWRK_UWRK8_B0_UDB15_CTL 0x4000647fu
N#define CYDEV_UWRK_UWRK8_B0_UDB00_MSK 0x40006480u
N#define CYDEV_UWRK_UWRK8_B0_UDB01_MSK 0x40006481u
N#define CYDEV_UWRK_UWRK8_B0_UDB02_MSK 0x40006482u
N#define CYDEV_UWRK_UWRK8_B0_UDB03_MSK 0x40006483u
N#define CYDEV_UWRK_UWRK8_B0_UDB04_MSK 0x40006484u
N#define CYDEV_UWRK_UWRK8_B0_UDB05_MSK 0x40006485u
N#define CYDEV_UWRK_UWRK8_B0_UDB06_MSK 0x40006486u
N#define CYDEV_UWRK_UWRK8_B0_UDB07_MSK 0x40006487u
N#define CYDEV_UWRK_UWRK8_B0_UDB08_MSK 0x40006488u
N#define CYDEV_UWRK_UWRK8_B0_UDB09_MSK 0x40006489u
N#define CYDEV_UWRK_UWRK8_B0_UDB10_MSK 0x4000648au
N#define CYDEV_UWRK_UWRK8_B0_UDB11_MSK 0x4000648bu
N#define CYDEV_UWRK_UWRK8_B0_UDB12_MSK 0x4000648cu
N#define CYDEV_UWRK_UWRK8_B0_UDB13_MSK 0x4000648du
N#define CYDEV_UWRK_UWRK8_B0_UDB14_MSK 0x4000648eu
N#define CYDEV_UWRK_UWRK8_B0_UDB15_MSK 0x4000648fu
N#define CYDEV_UWRK_UWRK8_B0_UDB00_ACTL 0x40006490u
N#define CYDEV_UWRK_UWRK8_B0_UDB01_ACTL 0x40006491u
N#define CYDEV_UWRK_UWRK8_B0_UDB02_ACTL 0x40006492u
N#define CYDEV_UWRK_UWRK8_B0_UDB03_ACTL 0x40006493u
N#define CYDEV_UWRK_UWRK8_B0_UDB04_ACTL 0x40006494u
N#define CYDEV_UWRK_UWRK8_B0_UDB05_ACTL 0x40006495u
N#define CYDEV_UWRK_UWRK8_B0_UDB06_ACTL 0x40006496u
N#define CYDEV_UWRK_UWRK8_B0_UDB07_ACTL 0x40006497u
N#define CYDEV_UWRK_UWRK8_B0_UDB08_ACTL 0x40006498u
N#define CYDEV_UWRK_UWRK8_B0_UDB09_ACTL 0x40006499u
N#define CYDEV_UWRK_UWRK8_B0_UDB10_ACTL 0x4000649au
N#define CYDEV_UWRK_UWRK8_B0_UDB11_ACTL 0x4000649bu
N#define CYDEV_UWRK_UWRK8_B0_UDB12_ACTL 0x4000649cu
N#define CYDEV_UWRK_UWRK8_B0_UDB13_ACTL 0x4000649du
N#define CYDEV_UWRK_UWRK8_B0_UDB14_ACTL 0x4000649eu
N#define CYDEV_UWRK_UWRK8_B0_UDB15_ACTL 0x4000649fu
N#define CYDEV_UWRK_UWRK8_B0_UDB00_MC 0x400064a0u
N#define CYDEV_UWRK_UWRK8_B0_UDB01_MC 0x400064a1u
N#define CYDEV_UWRK_UWRK8_B0_UDB02_MC 0x400064a2u
N#define CYDEV_UWRK_UWRK8_B0_UDB03_MC 0x400064a3u
N#define CYDEV_UWRK_UWRK8_B0_UDB04_MC 0x400064a4u
N#define CYDEV_UWRK_UWRK8_B0_UDB05_MC 0x400064a5u
N#define CYDEV_UWRK_UWRK8_B0_UDB06_MC 0x400064a6u
N#define CYDEV_UWRK_UWRK8_B0_UDB07_MC 0x400064a7u
N#define CYDEV_UWRK_UWRK8_B0_UDB08_MC 0x400064a8u
N#define CYDEV_UWRK_UWRK8_B0_UDB09_MC 0x400064a9u
N#define CYDEV_UWRK_UWRK8_B0_UDB10_MC 0x400064aau
N#define CYDEV_UWRK_UWRK8_B0_UDB11_MC 0x400064abu
N#define CYDEV_UWRK_UWRK8_B0_UDB12_MC 0x400064acu
N#define CYDEV_UWRK_UWRK8_B0_UDB13_MC 0x400064adu
N#define CYDEV_UWRK_UWRK8_B0_UDB14_MC 0x400064aeu
N#define CYDEV_UWRK_UWRK8_B0_UDB15_MC 0x400064afu
N#define CYDEV_UWRK_UWRK8_B1_BASE 0x40006500u
N#define CYDEV_UWRK_UWRK8_B1_SIZE 0x000000b0u
N#define CYDEV_UWRK_UWRK8_B1_UDB04_A0 0x40006504u
N#define CYDEV_UWRK_UWRK8_B1_UDB05_A0 0x40006505u
N#define CYDEV_UWRK_UWRK8_B1_UDB06_A0 0x40006506u
N#define CYDEV_UWRK_UWRK8_B1_UDB07_A0 0x40006507u
N#define CYDEV_UWRK_UWRK8_B1_UDB08_A0 0x40006508u
N#define CYDEV_UWRK_UWRK8_B1_UDB09_A0 0x40006509u
N#define CYDEV_UWRK_UWRK8_B1_UDB10_A0 0x4000650au
N#define CYDEV_UWRK_UWRK8_B1_UDB11_A0 0x4000650bu
N#define CYDEV_UWRK_UWRK8_B1_UDB04_A1 0x40006514u
N#define CYDEV_UWRK_UWRK8_B1_UDB05_A1 0x40006515u
N#define CYDEV_UWRK_UWRK8_B1_UDB06_A1 0x40006516u
N#define CYDEV_UWRK_UWRK8_B1_UDB07_A1 0x40006517u
N#define CYDEV_UWRK_UWRK8_B1_UDB08_A1 0x40006518u
N#define CYDEV_UWRK_UWRK8_B1_UDB09_A1 0x40006519u
N#define CYDEV_UWRK_UWRK8_B1_UDB10_A1 0x4000651au
N#define CYDEV_UWRK_UWRK8_B1_UDB11_A1 0x4000651bu
N#define CYDEV_UWRK_UWRK8_B1_UDB04_D0 0x40006524u
N#define CYDEV_UWRK_UWRK8_B1_UDB05_D0 0x40006525u
N#define CYDEV_UWRK_UWRK8_B1_UDB06_D0 0x40006526u
N#define CYDEV_UWRK_UWRK8_B1_UDB07_D0 0x40006527u
N#define CYDEV_UWRK_UWRK8_B1_UDB08_D0 0x40006528u
N#define CYDEV_UWRK_UWRK8_B1_UDB09_D0 0x40006529u
N#define CYDEV_UWRK_UWRK8_B1_UDB10_D0 0x4000652au
N#define CYDEV_UWRK_UWRK8_B1_UDB11_D0 0x4000652bu
N#define CYDEV_UWRK_UWRK8_B1_UDB04_D1 0x40006534u
N#define CYDEV_UWRK_UWRK8_B1_UDB05_D1 0x40006535u
N#define CYDEV_UWRK_UWRK8_B1_UDB06_D1 0x40006536u
N#define CYDEV_UWRK_UWRK8_B1_UDB07_D1 0x40006537u
N#define CYDEV_UWRK_UWRK8_B1_UDB08_D1 0x40006538u
N#define CYDEV_UWRK_UWRK8_B1_UDB09_D1 0x40006539u
N#define CYDEV_UWRK_UWRK8_B1_UDB10_D1 0x4000653au
N#define CYDEV_UWRK_UWRK8_B1_UDB11_D1 0x4000653bu
N#define CYDEV_UWRK_UWRK8_B1_UDB04_F0 0x40006544u
N#define CYDEV_UWRK_UWRK8_B1_UDB05_F0 0x40006545u
N#define CYDEV_UWRK_UWRK8_B1_UDB06_F0 0x40006546u
N#define CYDEV_UWRK_UWRK8_B1_UDB07_F0 0x40006547u
N#define CYDEV_UWRK_UWRK8_B1_UDB08_F0 0x40006548u
N#define CYDEV_UWRK_UWRK8_B1_UDB09_F0 0x40006549u
N#define CYDEV_UWRK_UWRK8_B1_UDB10_F0 0x4000654au
N#define CYDEV_UWRK_UWRK8_B1_UDB11_F0 0x4000654bu
N#define CYDEV_UWRK_UWRK8_B1_UDB04_F1 0x40006554u
N#define CYDEV_UWRK_UWRK8_B1_UDB05_F1 0x40006555u
N#define CYDEV_UWRK_UWRK8_B1_UDB06_F1 0x40006556u
N#define CYDEV_UWRK_UWRK8_B1_UDB07_F1 0x40006557u
N#define CYDEV_UWRK_UWRK8_B1_UDB08_F1 0x40006558u
N#define CYDEV_UWRK_UWRK8_B1_UDB09_F1 0x40006559u
N#define CYDEV_UWRK_UWRK8_B1_UDB10_F1 0x4000655au
N#define CYDEV_UWRK_UWRK8_B1_UDB11_F1 0x4000655bu
N#define CYDEV_UWRK_UWRK8_B1_UDB04_ST 0x40006564u
N#define CYDEV_UWRK_UWRK8_B1_UDB05_ST 0x40006565u
N#define CYDEV_UWRK_UWRK8_B1_UDB06_ST 0x40006566u
N#define CYDEV_UWRK_UWRK8_B1_UDB07_ST 0x40006567u
N#define CYDEV_UWRK_UWRK8_B1_UDB08_ST 0x40006568u
N#define CYDEV_UWRK_UWRK8_B1_UDB09_ST 0x40006569u
N#define CYDEV_UWRK_UWRK8_B1_UDB10_ST 0x4000656au
N#define CYDEV_UWRK_UWRK8_B1_UDB11_ST 0x4000656bu
N#define CYDEV_UWRK_UWRK8_B1_UDB04_CTL 0x40006574u
N#define CYDEV_UWRK_UWRK8_B1_UDB05_CTL 0x40006575u
N#define CYDEV_UWRK_UWRK8_B1_UDB06_CTL 0x40006576u
N#define CYDEV_UWRK_UWRK8_B1_UDB07_CTL 0x40006577u
N#define CYDEV_UWRK_UWRK8_B1_UDB08_CTL 0x40006578u
N#define CYDEV_UWRK_UWRK8_B1_UDB09_CTL 0x40006579u
N#define CYDEV_UWRK_UWRK8_B1_UDB10_CTL 0x4000657au
N#define CYDEV_UWRK_UWRK8_B1_UDB11_CTL 0x4000657bu
N#define CYDEV_UWRK_UWRK8_B1_UDB04_MSK 0x40006584u
N#define CYDEV_UWRK_UWRK8_B1_UDB05_MSK 0x40006585u
N#define CYDEV_UWRK_UWRK8_B1_UDB06_MSK 0x40006586u
N#define CYDEV_UWRK_UWRK8_B1_UDB07_MSK 0x40006587u
N#define CYDEV_UWRK_UWRK8_B1_UDB08_MSK 0x40006588u
N#define CYDEV_UWRK_UWRK8_B1_UDB09_MSK 0x40006589u
N#define CYDEV_UWRK_UWRK8_B1_UDB10_MSK 0x4000658au
N#define CYDEV_UWRK_UWRK8_B1_UDB11_MSK 0x4000658bu
N#define CYDEV_UWRK_UWRK8_B1_UDB04_ACTL 0x40006594u
N#define CYDEV_UWRK_UWRK8_B1_UDB05_ACTL 0x40006595u
N#define CYDEV_UWRK_UWRK8_B1_UDB06_ACTL 0x40006596u
N#define CYDEV_UWRK_UWRK8_B1_UDB07_ACTL 0x40006597u
N#define CYDEV_UWRK_UWRK8_B1_UDB08_ACTL 0x40006598u
N#define CYDEV_UWRK_UWRK8_B1_UDB09_ACTL 0x40006599u
N#define CYDEV_UWRK_UWRK8_B1_UDB10_ACTL 0x4000659au
N#define CYDEV_UWRK_UWRK8_B1_UDB11_ACTL 0x4000659bu
N#define CYDEV_UWRK_UWRK8_B1_UDB04_MC 0x400065a4u
N#define CYDEV_UWRK_UWRK8_B1_UDB05_MC 0x400065a5u
N#define CYDEV_UWRK_UWRK8_B1_UDB06_MC 0x400065a6u
N#define CYDEV_UWRK_UWRK8_B1_UDB07_MC 0x400065a7u
N#define CYDEV_UWRK_UWRK8_B1_UDB08_MC 0x400065a8u
N#define CYDEV_UWRK_UWRK8_B1_UDB09_MC 0x400065a9u
N#define CYDEV_UWRK_UWRK8_B1_UDB10_MC 0x400065aau
N#define CYDEV_UWRK_UWRK8_B1_UDB11_MC 0x400065abu
N#define CYDEV_UWRK_UWRK16_BASE 0x40006800u
N#define CYDEV_UWRK_UWRK16_SIZE 0x00000760u
N#define CYDEV_UWRK_UWRK16_CAT_BASE 0x40006800u
N#define CYDEV_UWRK_UWRK16_CAT_SIZE 0x00000760u
N#define CYDEV_UWRK_UWRK16_CAT_B0_BASE 0x40006800u
N#define CYDEV_UWRK_UWRK16_CAT_B0_SIZE 0x00000160u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB00_A0_A1 0x40006800u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB01_A0_A1 0x40006802u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB02_A0_A1 0x40006804u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB03_A0_A1 0x40006806u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB04_A0_A1 0x40006808u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB05_A0_A1 0x4000680au
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB06_A0_A1 0x4000680cu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB07_A0_A1 0x4000680eu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB08_A0_A1 0x40006810u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB09_A0_A1 0x40006812u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB10_A0_A1 0x40006814u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB11_A0_A1 0x40006816u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB12_A0_A1 0x40006818u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB13_A0_A1 0x4000681au
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB14_A0_A1 0x4000681cu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB15_A0_A1 0x4000681eu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB00_D0_D1 0x40006840u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB01_D0_D1 0x40006842u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB02_D0_D1 0x40006844u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB03_D0_D1 0x40006846u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB04_D0_D1 0x40006848u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB05_D0_D1 0x4000684au
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB06_D0_D1 0x4000684cu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB07_D0_D1 0x4000684eu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB08_D0_D1 0x40006850u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB09_D0_D1 0x40006852u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB10_D0_D1 0x40006854u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB11_D0_D1 0x40006856u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB12_D0_D1 0x40006858u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB13_D0_D1 0x4000685au
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB14_D0_D1 0x4000685cu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB15_D0_D1 0x4000685eu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB00_F0_F1 0x40006880u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB01_F0_F1 0x40006882u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB02_F0_F1 0x40006884u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB03_F0_F1 0x40006886u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB04_F0_F1 0x40006888u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB05_F0_F1 0x4000688au
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB06_F0_F1 0x4000688cu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB07_F0_F1 0x4000688eu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB08_F0_F1 0x40006890u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB09_F0_F1 0x40006892u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB10_F0_F1 0x40006894u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB11_F0_F1 0x40006896u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB12_F0_F1 0x40006898u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB13_F0_F1 0x4000689au
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB14_F0_F1 0x4000689cu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB15_F0_F1 0x4000689eu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB00_ST_CTL 0x400068c0u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB01_ST_CTL 0x400068c2u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB02_ST_CTL 0x400068c4u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB03_ST_CTL 0x400068c6u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB04_ST_CTL 0x400068c8u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB05_ST_CTL 0x400068cau
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB06_ST_CTL 0x400068ccu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB07_ST_CTL 0x400068ceu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB08_ST_CTL 0x400068d0u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB09_ST_CTL 0x400068d2u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB10_ST_CTL 0x400068d4u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB11_ST_CTL 0x400068d6u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB12_ST_CTL 0x400068d8u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB13_ST_CTL 0x400068dau
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB14_ST_CTL 0x400068dcu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB15_ST_CTL 0x400068deu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB00_MSK_ACTL 0x40006900u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB01_MSK_ACTL 0x40006902u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB02_MSK_ACTL 0x40006904u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB03_MSK_ACTL 0x40006906u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB04_MSK_ACTL 0x40006908u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB05_MSK_ACTL 0x4000690au
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB06_MSK_ACTL 0x4000690cu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB07_MSK_ACTL 0x4000690eu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB08_MSK_ACTL 0x40006910u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB09_MSK_ACTL 0x40006912u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB10_MSK_ACTL 0x40006914u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB11_MSK_ACTL 0x40006916u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB12_MSK_ACTL 0x40006918u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB13_MSK_ACTL 0x4000691au
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB14_MSK_ACTL 0x4000691cu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB15_MSK_ACTL 0x4000691eu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB00_MC_00 0x40006940u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB01_MC_00 0x40006942u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB02_MC_00 0x40006944u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB03_MC_00 0x40006946u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB04_MC_00 0x40006948u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB05_MC_00 0x4000694au
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB06_MC_00 0x4000694cu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB07_MC_00 0x4000694eu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB08_MC_00 0x40006950u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB09_MC_00 0x40006952u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB10_MC_00 0x40006954u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB11_MC_00 0x40006956u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB12_MC_00 0x40006958u
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB13_MC_00 0x4000695au
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB14_MC_00 0x4000695cu
N#define CYDEV_UWRK_UWRK16_CAT_B0_UDB15_MC_00 0x4000695eu
N#define CYDEV_UWRK_UWRK16_CAT_B1_BASE 0x40006a00u
N#define CYDEV_UWRK_UWRK16_CAT_B1_SIZE 0x00000160u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB04_A0_A1 0x40006a08u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB05_A0_A1 0x40006a0au
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB06_A0_A1 0x40006a0cu
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB07_A0_A1 0x40006a0eu
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB08_A0_A1 0x40006a10u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB09_A0_A1 0x40006a12u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB10_A0_A1 0x40006a14u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB11_A0_A1 0x40006a16u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB04_D0_D1 0x40006a48u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB05_D0_D1 0x40006a4au
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB06_D0_D1 0x40006a4cu
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB07_D0_D1 0x40006a4eu
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB08_D0_D1 0x40006a50u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB09_D0_D1 0x40006a52u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB10_D0_D1 0x40006a54u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB11_D0_D1 0x40006a56u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB04_F0_F1 0x40006a88u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB05_F0_F1 0x40006a8au
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB06_F0_F1 0x40006a8cu
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB07_F0_F1 0x40006a8eu
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB08_F0_F1 0x40006a90u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB09_F0_F1 0x40006a92u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB10_F0_F1 0x40006a94u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB11_F0_F1 0x40006a96u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB04_ST_CTL 0x40006ac8u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB05_ST_CTL 0x40006acau
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB06_ST_CTL 0x40006accu
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB07_ST_CTL 0x40006aceu
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB08_ST_CTL 0x40006ad0u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB09_ST_CTL 0x40006ad2u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB10_ST_CTL 0x40006ad4u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB11_ST_CTL 0x40006ad6u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB04_MSK_ACTL 0x40006b08u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB05_MSK_ACTL 0x40006b0au
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB06_MSK_ACTL 0x40006b0cu
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB07_MSK_ACTL 0x40006b0eu
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB08_MSK_ACTL 0x40006b10u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB09_MSK_ACTL 0x40006b12u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB10_MSK_ACTL 0x40006b14u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB11_MSK_ACTL 0x40006b16u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB04_MC_00 0x40006b48u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB05_MC_00 0x40006b4au
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB06_MC_00 0x40006b4cu
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB07_MC_00 0x40006b4eu
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB08_MC_00 0x40006b50u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB09_MC_00 0x40006b52u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB10_MC_00 0x40006b54u
N#define CYDEV_UWRK_UWRK16_CAT_B1_UDB11_MC_00 0x40006b56u
N#define CYDEV_UWRK_UWRK16_DEF_BASE 0x40006800u
N#define CYDEV_UWRK_UWRK16_DEF_SIZE 0x0000075eu
N#define CYDEV_UWRK_UWRK16_DEF_B0_BASE 0x40006800u
N#define CYDEV_UWRK_UWRK16_DEF_B0_SIZE 0x0000015eu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB00_01_A0 0x40006800u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB01_02_A0 0x40006802u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB02_03_A0 0x40006804u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB03_04_A0 0x40006806u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB04_05_A0 0x40006808u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB05_06_A0 0x4000680au
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB06_07_A0 0x4000680cu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB07_08_A0 0x4000680eu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB08_09_A0 0x40006810u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB09_10_A0 0x40006812u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB10_11_A0 0x40006814u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB11_12_A0 0x40006816u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB12_13_A0 0x40006818u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB13_14_A0 0x4000681au
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB14_15_A0 0x4000681cu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB00_01_A1 0x40006820u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB01_02_A1 0x40006822u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB02_03_A1 0x40006824u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB03_04_A1 0x40006826u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB04_05_A1 0x40006828u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB05_06_A1 0x4000682au
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB06_07_A1 0x4000682cu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB07_08_A1 0x4000682eu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB08_09_A1 0x40006830u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB09_10_A1 0x40006832u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB10_11_A1 0x40006834u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB11_12_A1 0x40006836u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB12_13_A1 0x40006838u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB13_14_A1 0x4000683au
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB14_15_A1 0x4000683cu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB00_01_D0 0x40006840u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB01_02_D0 0x40006842u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB02_03_D0 0x40006844u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB03_04_D0 0x40006846u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB04_05_D0 0x40006848u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB05_06_D0 0x4000684au
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB06_07_D0 0x4000684cu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB07_08_D0 0x4000684eu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB08_09_D0 0x40006850u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB09_10_D0 0x40006852u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB10_11_D0 0x40006854u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB11_12_D0 0x40006856u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB12_13_D0 0x40006858u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB13_14_D0 0x4000685au
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB14_15_D0 0x4000685cu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB00_01_D1 0x40006860u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB01_02_D1 0x40006862u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB02_03_D1 0x40006864u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB03_04_D1 0x40006866u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB04_05_D1 0x40006868u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB05_06_D1 0x4000686au
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB06_07_D1 0x4000686cu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB07_08_D1 0x4000686eu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB08_09_D1 0x40006870u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB09_10_D1 0x40006872u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB10_11_D1 0x40006874u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB11_12_D1 0x40006876u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB12_13_D1 0x40006878u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB13_14_D1 0x4000687au
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB14_15_D1 0x4000687cu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB00_01_F0 0x40006880u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB01_02_F0 0x40006882u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB02_03_F0 0x40006884u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB03_04_F0 0x40006886u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB04_05_F0 0x40006888u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB05_06_F0 0x4000688au
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB06_07_F0 0x4000688cu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB07_08_F0 0x4000688eu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB08_09_F0 0x40006890u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB09_10_F0 0x40006892u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB10_11_F0 0x40006894u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB11_12_F0 0x40006896u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB12_13_F0 0x40006898u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB13_14_F0 0x4000689au
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB14_15_F0 0x4000689cu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB00_01_F1 0x400068a0u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB01_02_F1 0x400068a2u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB02_03_F1 0x400068a4u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB03_04_F1 0x400068a6u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB04_05_F1 0x400068a8u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB05_06_F1 0x400068aau
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB06_07_F1 0x400068acu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB07_08_F1 0x400068aeu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB08_09_F1 0x400068b0u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB09_10_F1 0x400068b2u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB10_11_F1 0x400068b4u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB11_12_F1 0x400068b6u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB12_13_F1 0x400068b8u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB13_14_F1 0x400068bau
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB14_15_F1 0x400068bcu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB00_01_ST 0x400068c0u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB01_02_ST 0x400068c2u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB02_03_ST 0x400068c4u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB03_04_ST 0x400068c6u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB04_05_ST 0x400068c8u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB05_06_ST 0x400068cau
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB06_07_ST 0x400068ccu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB07_08_ST 0x400068ceu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB08_09_ST 0x400068d0u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB09_10_ST 0x400068d2u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB10_11_ST 0x400068d4u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB11_12_ST 0x400068d6u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB12_13_ST 0x400068d8u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB13_14_ST 0x400068dau
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB14_15_ST 0x400068dcu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB00_01_CTL 0x400068e0u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB01_02_CTL 0x400068e2u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB02_03_CTL 0x400068e4u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB03_04_CTL 0x400068e6u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB04_05_CTL 0x400068e8u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB05_06_CTL 0x400068eau
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB06_07_CTL 0x400068ecu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB07_08_CTL 0x400068eeu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB08_09_CTL 0x400068f0u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB09_10_CTL 0x400068f2u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB10_11_CTL 0x400068f4u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB11_12_CTL 0x400068f6u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB12_13_CTL 0x400068f8u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB13_14_CTL 0x400068fau
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB14_15_CTL 0x400068fcu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB00_01_MSK 0x40006900u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB01_02_MSK 0x40006902u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB02_03_MSK 0x40006904u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB03_04_MSK 0x40006906u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB04_05_MSK 0x40006908u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB05_06_MSK 0x4000690au
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB06_07_MSK 0x4000690cu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB07_08_MSK 0x4000690eu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB08_09_MSK 0x40006910u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB09_10_MSK 0x40006912u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB10_11_MSK 0x40006914u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB11_12_MSK 0x40006916u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB12_13_MSK 0x40006918u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB13_14_MSK 0x4000691au
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB14_15_MSK 0x4000691cu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB00_01_ACTL 0x40006920u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB01_02_ACTL 0x40006922u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB02_03_ACTL 0x40006924u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB03_04_ACTL 0x40006926u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB04_05_ACTL 0x40006928u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB05_06_ACTL 0x4000692au
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB06_07_ACTL 0x4000692cu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB07_08_ACTL 0x4000692eu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB08_09_ACTL 0x40006930u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB09_10_ACTL 0x40006932u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB10_11_ACTL 0x40006934u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB11_12_ACTL 0x40006936u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB12_13_ACTL 0x40006938u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB13_14_ACTL 0x4000693au
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB14_15_ACTL 0x4000693cu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB00_01_MC 0x40006940u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB01_02_MC 0x40006942u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB02_03_MC 0x40006944u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB03_04_MC 0x40006946u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB04_05_MC 0x40006948u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB05_06_MC 0x4000694au
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB06_07_MC 0x4000694cu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB07_08_MC 0x4000694eu
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB08_09_MC 0x40006950u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB09_10_MC 0x40006952u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB10_11_MC 0x40006954u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB11_12_MC 0x40006956u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB12_13_MC 0x40006958u
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB13_14_MC 0x4000695au
N#define CYDEV_UWRK_UWRK16_DEF_B0_UDB14_15_MC 0x4000695cu
N#define CYDEV_UWRK_UWRK16_DEF_B1_BASE 0x40006a00u
N#define CYDEV_UWRK_UWRK16_DEF_B1_SIZE 0x0000015eu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB04_05_A0 0x40006a08u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB05_06_A0 0x40006a0au
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB06_07_A0 0x40006a0cu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB07_08_A0 0x40006a0eu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB08_09_A0 0x40006a10u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB09_10_A0 0x40006a12u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB10_11_A0 0x40006a14u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB11_12_A0 0x40006a16u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB04_05_A1 0x40006a28u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB05_06_A1 0x40006a2au
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB06_07_A1 0x40006a2cu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB07_08_A1 0x40006a2eu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB08_09_A1 0x40006a30u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB09_10_A1 0x40006a32u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB10_11_A1 0x40006a34u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB11_12_A1 0x40006a36u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB04_05_D0 0x40006a48u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB05_06_D0 0x40006a4au
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB06_07_D0 0x40006a4cu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB07_08_D0 0x40006a4eu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB08_09_D0 0x40006a50u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB09_10_D0 0x40006a52u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB10_11_D0 0x40006a54u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB11_12_D0 0x40006a56u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB04_05_D1 0x40006a68u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB05_06_D1 0x40006a6au
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB06_07_D1 0x40006a6cu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB07_08_D1 0x40006a6eu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB08_09_D1 0x40006a70u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB09_10_D1 0x40006a72u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB10_11_D1 0x40006a74u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB11_12_D1 0x40006a76u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB04_05_F0 0x40006a88u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB05_06_F0 0x40006a8au
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB06_07_F0 0x40006a8cu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB07_08_F0 0x40006a8eu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB08_09_F0 0x40006a90u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB09_10_F0 0x40006a92u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB10_11_F0 0x40006a94u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB11_12_F0 0x40006a96u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB04_05_F1 0x40006aa8u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB05_06_F1 0x40006aaau
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB06_07_F1 0x40006aacu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB07_08_F1 0x40006aaeu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB08_09_F1 0x40006ab0u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB09_10_F1 0x40006ab2u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB10_11_F1 0x40006ab4u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB11_12_F1 0x40006ab6u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB04_05_ST 0x40006ac8u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB05_06_ST 0x40006acau
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB06_07_ST 0x40006accu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB07_08_ST 0x40006aceu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB08_09_ST 0x40006ad0u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB09_10_ST 0x40006ad2u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB10_11_ST 0x40006ad4u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB11_12_ST 0x40006ad6u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB04_05_CTL 0x40006ae8u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB05_06_CTL 0x40006aeau
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB06_07_CTL 0x40006aecu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB07_08_CTL 0x40006aeeu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB08_09_CTL 0x40006af0u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB09_10_CTL 0x40006af2u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB10_11_CTL 0x40006af4u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB11_12_CTL 0x40006af6u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB04_05_MSK 0x40006b08u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB05_06_MSK 0x40006b0au
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB06_07_MSK 0x40006b0cu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB07_08_MSK 0x40006b0eu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB08_09_MSK 0x40006b10u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB09_10_MSK 0x40006b12u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB10_11_MSK 0x40006b14u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB11_12_MSK 0x40006b16u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB04_05_ACTL 0x40006b28u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB05_06_ACTL 0x40006b2au
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB06_07_ACTL 0x40006b2cu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB07_08_ACTL 0x40006b2eu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB08_09_ACTL 0x40006b30u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB09_10_ACTL 0x40006b32u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB10_11_ACTL 0x40006b34u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB11_12_ACTL 0x40006b36u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB04_05_MC 0x40006b48u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB05_06_MC 0x40006b4au
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB06_07_MC 0x40006b4cu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB07_08_MC 0x40006b4eu
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB08_09_MC 0x40006b50u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB09_10_MC 0x40006b52u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB10_11_MC 0x40006b54u
N#define CYDEV_UWRK_UWRK16_DEF_B1_UDB11_12_MC 0x40006b56u
N#define CYDEV_PHUB_BASE 0x40007000u
N#define CYDEV_PHUB_SIZE 0x00000c00u
N#define CYDEV_PHUB_CFG 0x40007000u
N#define CYDEV_PHUB_ERR 0x40007004u
N#define CYDEV_PHUB_ERR_ADR 0x40007008u
N#define CYDEV_PHUB_CH0_BASE 0x40007010u
N#define CYDEV_PHUB_CH0_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH0_BASIC_CFG 0x40007010u
N#define CYDEV_PHUB_CH0_ACTION 0x40007014u
N#define CYDEV_PHUB_CH0_BASIC_STATUS 0x40007018u
N#define CYDEV_PHUB_CH1_BASE 0x40007020u
N#define CYDEV_PHUB_CH1_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH1_BASIC_CFG 0x40007020u
N#define CYDEV_PHUB_CH1_ACTION 0x40007024u
N#define CYDEV_PHUB_CH1_BASIC_STATUS 0x40007028u
N#define CYDEV_PHUB_CH2_BASE 0x40007030u
N#define CYDEV_PHUB_CH2_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH2_BASIC_CFG 0x40007030u
N#define CYDEV_PHUB_CH2_ACTION 0x40007034u
N#define CYDEV_PHUB_CH2_BASIC_STATUS 0x40007038u
N#define CYDEV_PHUB_CH3_BASE 0x40007040u
N#define CYDEV_PHUB_CH3_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH3_BASIC_CFG 0x40007040u
N#define CYDEV_PHUB_CH3_ACTION 0x40007044u
N#define CYDEV_PHUB_CH3_BASIC_STATUS 0x40007048u
N#define CYDEV_PHUB_CH4_BASE 0x40007050u
N#define CYDEV_PHUB_CH4_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH4_BASIC_CFG 0x40007050u
N#define CYDEV_PHUB_CH4_ACTION 0x40007054u
N#define CYDEV_PHUB_CH4_BASIC_STATUS 0x40007058u
N#define CYDEV_PHUB_CH5_BASE 0x40007060u
N#define CYDEV_PHUB_CH5_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH5_BASIC_CFG 0x40007060u
N#define CYDEV_PHUB_CH5_ACTION 0x40007064u
N#define CYDEV_PHUB_CH5_BASIC_STATUS 0x40007068u
N#define CYDEV_PHUB_CH6_BASE 0x40007070u
N#define CYDEV_PHUB_CH6_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH6_BASIC_CFG 0x40007070u
N#define CYDEV_PHUB_CH6_ACTION 0x40007074u
N#define CYDEV_PHUB_CH6_BASIC_STATUS 0x40007078u
N#define CYDEV_PHUB_CH7_BASE 0x40007080u
N#define CYDEV_PHUB_CH7_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH7_BASIC_CFG 0x40007080u
N#define CYDEV_PHUB_CH7_ACTION 0x40007084u
N#define CYDEV_PHUB_CH7_BASIC_STATUS 0x40007088u
N#define CYDEV_PHUB_CH8_BASE 0x40007090u
N#define CYDEV_PHUB_CH8_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH8_BASIC_CFG 0x40007090u
N#define CYDEV_PHUB_CH8_ACTION 0x40007094u
N#define CYDEV_PHUB_CH8_BASIC_STATUS 0x40007098u
N#define CYDEV_PHUB_CH9_BASE 0x400070a0u
N#define CYDEV_PHUB_CH9_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH9_BASIC_CFG 0x400070a0u
N#define CYDEV_PHUB_CH9_ACTION 0x400070a4u
N#define CYDEV_PHUB_CH9_BASIC_STATUS 0x400070a8u
N#define CYDEV_PHUB_CH10_BASE 0x400070b0u
N#define CYDEV_PHUB_CH10_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH10_BASIC_CFG 0x400070b0u
N#define CYDEV_PHUB_CH10_ACTION 0x400070b4u
N#define CYDEV_PHUB_CH10_BASIC_STATUS 0x400070b8u
N#define CYDEV_PHUB_CH11_BASE 0x400070c0u
N#define CYDEV_PHUB_CH11_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH11_BASIC_CFG 0x400070c0u
N#define CYDEV_PHUB_CH11_ACTION 0x400070c4u
N#define CYDEV_PHUB_CH11_BASIC_STATUS 0x400070c8u
N#define CYDEV_PHUB_CH12_BASE 0x400070d0u
N#define CYDEV_PHUB_CH12_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH12_BASIC_CFG 0x400070d0u
N#define CYDEV_PHUB_CH12_ACTION 0x400070d4u
N#define CYDEV_PHUB_CH12_BASIC_STATUS 0x400070d8u
N#define CYDEV_PHUB_CH13_BASE 0x400070e0u
N#define CYDEV_PHUB_CH13_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH13_BASIC_CFG 0x400070e0u
N#define CYDEV_PHUB_CH13_ACTION 0x400070e4u
N#define CYDEV_PHUB_CH13_BASIC_STATUS 0x400070e8u
N#define CYDEV_PHUB_CH14_BASE 0x400070f0u
N#define CYDEV_PHUB_CH14_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH14_BASIC_CFG 0x400070f0u
N#define CYDEV_PHUB_CH14_ACTION 0x400070f4u
N#define CYDEV_PHUB_CH14_BASIC_STATUS 0x400070f8u
N#define CYDEV_PHUB_CH15_BASE 0x40007100u
N#define CYDEV_PHUB_CH15_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH15_BASIC_CFG 0x40007100u
N#define CYDEV_PHUB_CH15_ACTION 0x40007104u
N#define CYDEV_PHUB_CH15_BASIC_STATUS 0x40007108u
N#define CYDEV_PHUB_CH16_BASE 0x40007110u
N#define CYDEV_PHUB_CH16_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH16_BASIC_CFG 0x40007110u
N#define CYDEV_PHUB_CH16_ACTION 0x40007114u
N#define CYDEV_PHUB_CH16_BASIC_STATUS 0x40007118u
N#define CYDEV_PHUB_CH17_BASE 0x40007120u
N#define CYDEV_PHUB_CH17_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH17_BASIC_CFG 0x40007120u
N#define CYDEV_PHUB_CH17_ACTION 0x40007124u
N#define CYDEV_PHUB_CH17_BASIC_STATUS 0x40007128u
N#define CYDEV_PHUB_CH18_BASE 0x40007130u
N#define CYDEV_PHUB_CH18_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH18_BASIC_CFG 0x40007130u
N#define CYDEV_PHUB_CH18_ACTION 0x40007134u
N#define CYDEV_PHUB_CH18_BASIC_STATUS 0x40007138u
N#define CYDEV_PHUB_CH19_BASE 0x40007140u
N#define CYDEV_PHUB_CH19_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH19_BASIC_CFG 0x40007140u
N#define CYDEV_PHUB_CH19_ACTION 0x40007144u
N#define CYDEV_PHUB_CH19_BASIC_STATUS 0x40007148u
N#define CYDEV_PHUB_CH20_BASE 0x40007150u
N#define CYDEV_PHUB_CH20_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH20_BASIC_CFG 0x40007150u
N#define CYDEV_PHUB_CH20_ACTION 0x40007154u
N#define CYDEV_PHUB_CH20_BASIC_STATUS 0x40007158u
N#define CYDEV_PHUB_CH21_BASE 0x40007160u
N#define CYDEV_PHUB_CH21_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH21_BASIC_CFG 0x40007160u
N#define CYDEV_PHUB_CH21_ACTION 0x40007164u
N#define CYDEV_PHUB_CH21_BASIC_STATUS 0x40007168u
N#define CYDEV_PHUB_CH22_BASE 0x40007170u
N#define CYDEV_PHUB_CH22_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH22_BASIC_CFG 0x40007170u
N#define CYDEV_PHUB_CH22_ACTION 0x40007174u
N#define CYDEV_PHUB_CH22_BASIC_STATUS 0x40007178u
N#define CYDEV_PHUB_CH23_BASE 0x40007180u
N#define CYDEV_PHUB_CH23_SIZE 0x0000000cu
N#define CYDEV_PHUB_CH23_BASIC_CFG 0x40007180u
N#define CYDEV_PHUB_CH23_ACTION 0x40007184u
N#define CYDEV_PHUB_CH23_BASIC_STATUS 0x40007188u
N#define CYDEV_PHUB_CFGMEM0_BASE 0x40007600u
N#define CYDEV_PHUB_CFGMEM0_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM0_CFG0 0x40007600u
N#define CYDEV_PHUB_CFGMEM0_CFG1 0x40007604u
N#define CYDEV_PHUB_CFGMEM1_BASE 0x40007608u
N#define CYDEV_PHUB_CFGMEM1_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM1_CFG0 0x40007608u
N#define CYDEV_PHUB_CFGMEM1_CFG1 0x4000760cu
N#define CYDEV_PHUB_CFGMEM2_BASE 0x40007610u
N#define CYDEV_PHUB_CFGMEM2_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM2_CFG0 0x40007610u
N#define CYDEV_PHUB_CFGMEM2_CFG1 0x40007614u
N#define CYDEV_PHUB_CFGMEM3_BASE 0x40007618u
N#define CYDEV_PHUB_CFGMEM3_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM3_CFG0 0x40007618u
N#define CYDEV_PHUB_CFGMEM3_CFG1 0x4000761cu
N#define CYDEV_PHUB_CFGMEM4_BASE 0x40007620u
N#define CYDEV_PHUB_CFGMEM4_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM4_CFG0 0x40007620u
N#define CYDEV_PHUB_CFGMEM4_CFG1 0x40007624u
N#define CYDEV_PHUB_CFGMEM5_BASE 0x40007628u
N#define CYDEV_PHUB_CFGMEM5_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM5_CFG0 0x40007628u
N#define CYDEV_PHUB_CFGMEM5_CFG1 0x4000762cu
N#define CYDEV_PHUB_CFGMEM6_BASE 0x40007630u
N#define CYDEV_PHUB_CFGMEM6_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM6_CFG0 0x40007630u
N#define CYDEV_PHUB_CFGMEM6_CFG1 0x40007634u
N#define CYDEV_PHUB_CFGMEM7_BASE 0x40007638u
N#define CYDEV_PHUB_CFGMEM7_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM7_CFG0 0x40007638u
N#define CYDEV_PHUB_CFGMEM7_CFG1 0x4000763cu
N#define CYDEV_PHUB_CFGMEM8_BASE 0x40007640u
N#define CYDEV_PHUB_CFGMEM8_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM8_CFG0 0x40007640u
N#define CYDEV_PHUB_CFGMEM8_CFG1 0x40007644u
N#define CYDEV_PHUB_CFGMEM9_BASE 0x40007648u
N#define CYDEV_PHUB_CFGMEM9_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM9_CFG0 0x40007648u
N#define CYDEV_PHUB_CFGMEM9_CFG1 0x4000764cu
N#define CYDEV_PHUB_CFGMEM10_BASE 0x40007650u
N#define CYDEV_PHUB_CFGMEM10_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM10_CFG0 0x40007650u
N#define CYDEV_PHUB_CFGMEM10_CFG1 0x40007654u
N#define CYDEV_PHUB_CFGMEM11_BASE 0x40007658u
N#define CYDEV_PHUB_CFGMEM11_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM11_CFG0 0x40007658u
N#define CYDEV_PHUB_CFGMEM11_CFG1 0x4000765cu
N#define CYDEV_PHUB_CFGMEM12_BASE 0x40007660u
N#define CYDEV_PHUB_CFGMEM12_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM12_CFG0 0x40007660u
N#define CYDEV_PHUB_CFGMEM12_CFG1 0x40007664u
N#define CYDEV_PHUB_CFGMEM13_BASE 0x40007668u
N#define CYDEV_PHUB_CFGMEM13_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM13_CFG0 0x40007668u
N#define CYDEV_PHUB_CFGMEM13_CFG1 0x4000766cu
N#define CYDEV_PHUB_CFGMEM14_BASE 0x40007670u
N#define CYDEV_PHUB_CFGMEM14_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM14_CFG0 0x40007670u
N#define CYDEV_PHUB_CFGMEM14_CFG1 0x40007674u
N#define CYDEV_PHUB_CFGMEM15_BASE 0x40007678u
N#define CYDEV_PHUB_CFGMEM15_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM15_CFG0 0x40007678u
N#define CYDEV_PHUB_CFGMEM15_CFG1 0x4000767cu
N#define CYDEV_PHUB_CFGMEM16_BASE 0x40007680u
N#define CYDEV_PHUB_CFGMEM16_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM16_CFG0 0x40007680u
N#define CYDEV_PHUB_CFGMEM16_CFG1 0x40007684u
N#define CYDEV_PHUB_CFGMEM17_BASE 0x40007688u
N#define CYDEV_PHUB_CFGMEM17_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM17_CFG0 0x40007688u
N#define CYDEV_PHUB_CFGMEM17_CFG1 0x4000768cu
N#define CYDEV_PHUB_CFGMEM18_BASE 0x40007690u
N#define CYDEV_PHUB_CFGMEM18_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM18_CFG0 0x40007690u
N#define CYDEV_PHUB_CFGMEM18_CFG1 0x40007694u
N#define CYDEV_PHUB_CFGMEM19_BASE 0x40007698u
N#define CYDEV_PHUB_CFGMEM19_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM19_CFG0 0x40007698u
N#define CYDEV_PHUB_CFGMEM19_CFG1 0x4000769cu
N#define CYDEV_PHUB_CFGMEM20_BASE 0x400076a0u
N#define CYDEV_PHUB_CFGMEM20_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM20_CFG0 0x400076a0u
N#define CYDEV_PHUB_CFGMEM20_CFG1 0x400076a4u
N#define CYDEV_PHUB_CFGMEM21_BASE 0x400076a8u
N#define CYDEV_PHUB_CFGMEM21_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM21_CFG0 0x400076a8u
N#define CYDEV_PHUB_CFGMEM21_CFG1 0x400076acu
N#define CYDEV_PHUB_CFGMEM22_BASE 0x400076b0u
N#define CYDEV_PHUB_CFGMEM22_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM22_CFG0 0x400076b0u
N#define CYDEV_PHUB_CFGMEM22_CFG1 0x400076b4u
N#define CYDEV_PHUB_CFGMEM23_BASE 0x400076b8u
N#define CYDEV_PHUB_CFGMEM23_SIZE 0x00000008u
N#define CYDEV_PHUB_CFGMEM23_CFG0 0x400076b8u
N#define CYDEV_PHUB_CFGMEM23_CFG1 0x400076bcu
N#define CYDEV_PHUB_TDMEM0_BASE 0x40007800u
N#define CYDEV_PHUB_TDMEM0_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM0_ORIG_TD0 0x40007800u
N#define CYDEV_PHUB_TDMEM0_ORIG_TD1 0x40007804u
N#define CYDEV_PHUB_TDMEM1_BASE 0x40007808u
N#define CYDEV_PHUB_TDMEM1_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM1_ORIG_TD0 0x40007808u
N#define CYDEV_PHUB_TDMEM1_ORIG_TD1 0x4000780cu
N#define CYDEV_PHUB_TDMEM2_BASE 0x40007810u
N#define CYDEV_PHUB_TDMEM2_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM2_ORIG_TD0 0x40007810u
N#define CYDEV_PHUB_TDMEM2_ORIG_TD1 0x40007814u
N#define CYDEV_PHUB_TDMEM3_BASE 0x40007818u
N#define CYDEV_PHUB_TDMEM3_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM3_ORIG_TD0 0x40007818u
N#define CYDEV_PHUB_TDMEM3_ORIG_TD1 0x4000781cu
N#define CYDEV_PHUB_TDMEM4_BASE 0x40007820u
N#define CYDEV_PHUB_TDMEM4_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM4_ORIG_TD0 0x40007820u
N#define CYDEV_PHUB_TDMEM4_ORIG_TD1 0x40007824u
N#define CYDEV_PHUB_TDMEM5_BASE 0x40007828u
N#define CYDEV_PHUB_TDMEM5_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM5_ORIG_TD0 0x40007828u
N#define CYDEV_PHUB_TDMEM5_ORIG_TD1 0x4000782cu
N#define CYDEV_PHUB_TDMEM6_BASE 0x40007830u
N#define CYDEV_PHUB_TDMEM6_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM6_ORIG_TD0 0x40007830u
N#define CYDEV_PHUB_TDMEM6_ORIG_TD1 0x40007834u
N#define CYDEV_PHUB_TDMEM7_BASE 0x40007838u
N#define CYDEV_PHUB_TDMEM7_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM7_ORIG_TD0 0x40007838u
N#define CYDEV_PHUB_TDMEM7_ORIG_TD1 0x4000783cu
N#define CYDEV_PHUB_TDMEM8_BASE 0x40007840u
N#define CYDEV_PHUB_TDMEM8_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM8_ORIG_TD0 0x40007840u
N#define CYDEV_PHUB_TDMEM8_ORIG_TD1 0x40007844u
N#define CYDEV_PHUB_TDMEM9_BASE 0x40007848u
N#define CYDEV_PHUB_TDMEM9_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM9_ORIG_TD0 0x40007848u
N#define CYDEV_PHUB_TDMEM9_ORIG_TD1 0x4000784cu
N#define CYDEV_PHUB_TDMEM10_BASE 0x40007850u
N#define CYDEV_PHUB_TDMEM10_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM10_ORIG_TD0 0x40007850u
N#define CYDEV_PHUB_TDMEM10_ORIG_TD1 0x40007854u
N#define CYDEV_PHUB_TDMEM11_BASE 0x40007858u
N#define CYDEV_PHUB_TDMEM11_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM11_ORIG_TD0 0x40007858u
N#define CYDEV_PHUB_TDMEM11_ORIG_TD1 0x4000785cu
N#define CYDEV_PHUB_TDMEM12_BASE 0x40007860u
N#define CYDEV_PHUB_TDMEM12_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM12_ORIG_TD0 0x40007860u
N#define CYDEV_PHUB_TDMEM12_ORIG_TD1 0x40007864u
N#define CYDEV_PHUB_TDMEM13_BASE 0x40007868u
N#define CYDEV_PHUB_TDMEM13_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM13_ORIG_TD0 0x40007868u
N#define CYDEV_PHUB_TDMEM13_ORIG_TD1 0x4000786cu
N#define CYDEV_PHUB_TDMEM14_BASE 0x40007870u
N#define CYDEV_PHUB_TDMEM14_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM14_ORIG_TD0 0x40007870u
N#define CYDEV_PHUB_TDMEM14_ORIG_TD1 0x40007874u
N#define CYDEV_PHUB_TDMEM15_BASE 0x40007878u
N#define CYDEV_PHUB_TDMEM15_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM15_ORIG_TD0 0x40007878u
N#define CYDEV_PHUB_TDMEM15_ORIG_TD1 0x4000787cu
N#define CYDEV_PHUB_TDMEM16_BASE 0x40007880u
N#define CYDEV_PHUB_TDMEM16_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM16_ORIG_TD0 0x40007880u
N#define CYDEV_PHUB_TDMEM16_ORIG_TD1 0x40007884u
N#define CYDEV_PHUB_TDMEM17_BASE 0x40007888u
N#define CYDEV_PHUB_TDMEM17_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM17_ORIG_TD0 0x40007888u
N#define CYDEV_PHUB_TDMEM17_ORIG_TD1 0x4000788cu
N#define CYDEV_PHUB_TDMEM18_BASE 0x40007890u
N#define CYDEV_PHUB_TDMEM18_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM18_ORIG_TD0 0x40007890u
N#define CYDEV_PHUB_TDMEM18_ORIG_TD1 0x40007894u
N#define CYDEV_PHUB_TDMEM19_BASE 0x40007898u
N#define CYDEV_PHUB_TDMEM19_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM19_ORIG_TD0 0x40007898u
N#define CYDEV_PHUB_TDMEM19_ORIG_TD1 0x4000789cu
N#define CYDEV_PHUB_TDMEM20_BASE 0x400078a0u
N#define CYDEV_PHUB_TDMEM20_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM20_ORIG_TD0 0x400078a0u
N#define CYDEV_PHUB_TDMEM20_ORIG_TD1 0x400078a4u
N#define CYDEV_PHUB_TDMEM21_BASE 0x400078a8u
N#define CYDEV_PHUB_TDMEM21_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM21_ORIG_TD0 0x400078a8u
N#define CYDEV_PHUB_TDMEM21_ORIG_TD1 0x400078acu
N#define CYDEV_PHUB_TDMEM22_BASE 0x400078b0u
N#define CYDEV_PHUB_TDMEM22_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM22_ORIG_TD0 0x400078b0u
N#define CYDEV_PHUB_TDMEM22_ORIG_TD1 0x400078b4u
N#define CYDEV_PHUB_TDMEM23_BASE 0x400078b8u
N#define CYDEV_PHUB_TDMEM23_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM23_ORIG_TD0 0x400078b8u
N#define CYDEV_PHUB_TDMEM23_ORIG_TD1 0x400078bcu
N#define CYDEV_PHUB_TDMEM24_BASE 0x400078c0u
N#define CYDEV_PHUB_TDMEM24_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM24_ORIG_TD0 0x400078c0u
N#define CYDEV_PHUB_TDMEM24_ORIG_TD1 0x400078c4u
N#define CYDEV_PHUB_TDMEM25_BASE 0x400078c8u
N#define CYDEV_PHUB_TDMEM25_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM25_ORIG_TD0 0x400078c8u
N#define CYDEV_PHUB_TDMEM25_ORIG_TD1 0x400078ccu
N#define CYDEV_PHUB_TDMEM26_BASE 0x400078d0u
N#define CYDEV_PHUB_TDMEM26_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM26_ORIG_TD0 0x400078d0u
N#define CYDEV_PHUB_TDMEM26_ORIG_TD1 0x400078d4u
N#define CYDEV_PHUB_TDMEM27_BASE 0x400078d8u
N#define CYDEV_PHUB_TDMEM27_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM27_ORIG_TD0 0x400078d8u
N#define CYDEV_PHUB_TDMEM27_ORIG_TD1 0x400078dcu
N#define CYDEV_PHUB_TDMEM28_BASE 0x400078e0u
N#define CYDEV_PHUB_TDMEM28_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM28_ORIG_TD0 0x400078e0u
N#define CYDEV_PHUB_TDMEM28_ORIG_TD1 0x400078e4u
N#define CYDEV_PHUB_TDMEM29_BASE 0x400078e8u
N#define CYDEV_PHUB_TDMEM29_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM29_ORIG_TD0 0x400078e8u
N#define CYDEV_PHUB_TDMEM29_ORIG_TD1 0x400078ecu
N#define CYDEV_PHUB_TDMEM30_BASE 0x400078f0u
N#define CYDEV_PHUB_TDMEM30_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM30_ORIG_TD0 0x400078f0u
N#define CYDEV_PHUB_TDMEM30_ORIG_TD1 0x400078f4u
N#define CYDEV_PHUB_TDMEM31_BASE 0x400078f8u
N#define CYDEV_PHUB_TDMEM31_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM31_ORIG_TD0 0x400078f8u
N#define CYDEV_PHUB_TDMEM31_ORIG_TD1 0x400078fcu
N#define CYDEV_PHUB_TDMEM32_BASE 0x40007900u
N#define CYDEV_PHUB_TDMEM32_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM32_ORIG_TD0 0x40007900u
N#define CYDEV_PHUB_TDMEM32_ORIG_TD1 0x40007904u
N#define CYDEV_PHUB_TDMEM33_BASE 0x40007908u
N#define CYDEV_PHUB_TDMEM33_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM33_ORIG_TD0 0x40007908u
N#define CYDEV_PHUB_TDMEM33_ORIG_TD1 0x4000790cu
N#define CYDEV_PHUB_TDMEM34_BASE 0x40007910u
N#define CYDEV_PHUB_TDMEM34_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM34_ORIG_TD0 0x40007910u
N#define CYDEV_PHUB_TDMEM34_ORIG_TD1 0x40007914u
N#define CYDEV_PHUB_TDMEM35_BASE 0x40007918u
N#define CYDEV_PHUB_TDMEM35_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM35_ORIG_TD0 0x40007918u
N#define CYDEV_PHUB_TDMEM35_ORIG_TD1 0x4000791cu
N#define CYDEV_PHUB_TDMEM36_BASE 0x40007920u
N#define CYDEV_PHUB_TDMEM36_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM36_ORIG_TD0 0x40007920u
N#define CYDEV_PHUB_TDMEM36_ORIG_TD1 0x40007924u
N#define CYDEV_PHUB_TDMEM37_BASE 0x40007928u
N#define CYDEV_PHUB_TDMEM37_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM37_ORIG_TD0 0x40007928u
N#define CYDEV_PHUB_TDMEM37_ORIG_TD1 0x4000792cu
N#define CYDEV_PHUB_TDMEM38_BASE 0x40007930u
N#define CYDEV_PHUB_TDMEM38_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM38_ORIG_TD0 0x40007930u
N#define CYDEV_PHUB_TDMEM38_ORIG_TD1 0x40007934u
N#define CYDEV_PHUB_TDMEM39_BASE 0x40007938u
N#define CYDEV_PHUB_TDMEM39_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM39_ORIG_TD0 0x40007938u
N#define CYDEV_PHUB_TDMEM39_ORIG_TD1 0x4000793cu
N#define CYDEV_PHUB_TDMEM40_BASE 0x40007940u
N#define CYDEV_PHUB_TDMEM40_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM40_ORIG_TD0 0x40007940u
N#define CYDEV_PHUB_TDMEM40_ORIG_TD1 0x40007944u
N#define CYDEV_PHUB_TDMEM41_BASE 0x40007948u
N#define CYDEV_PHUB_TDMEM41_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM41_ORIG_TD0 0x40007948u
N#define CYDEV_PHUB_TDMEM41_ORIG_TD1 0x4000794cu
N#define CYDEV_PHUB_TDMEM42_BASE 0x40007950u
N#define CYDEV_PHUB_TDMEM42_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM42_ORIG_TD0 0x40007950u
N#define CYDEV_PHUB_TDMEM42_ORIG_TD1 0x40007954u
N#define CYDEV_PHUB_TDMEM43_BASE 0x40007958u
N#define CYDEV_PHUB_TDMEM43_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM43_ORIG_TD0 0x40007958u
N#define CYDEV_PHUB_TDMEM43_ORIG_TD1 0x4000795cu
N#define CYDEV_PHUB_TDMEM44_BASE 0x40007960u
N#define CYDEV_PHUB_TDMEM44_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM44_ORIG_TD0 0x40007960u
N#define CYDEV_PHUB_TDMEM44_ORIG_TD1 0x40007964u
N#define CYDEV_PHUB_TDMEM45_BASE 0x40007968u
N#define CYDEV_PHUB_TDMEM45_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM45_ORIG_TD0 0x40007968u
N#define CYDEV_PHUB_TDMEM45_ORIG_TD1 0x4000796cu
N#define CYDEV_PHUB_TDMEM46_BASE 0x40007970u
N#define CYDEV_PHUB_TDMEM46_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM46_ORIG_TD0 0x40007970u
N#define CYDEV_PHUB_TDMEM46_ORIG_TD1 0x40007974u
N#define CYDEV_PHUB_TDMEM47_BASE 0x40007978u
N#define CYDEV_PHUB_TDMEM47_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM47_ORIG_TD0 0x40007978u
N#define CYDEV_PHUB_TDMEM47_ORIG_TD1 0x4000797cu
N#define CYDEV_PHUB_TDMEM48_BASE 0x40007980u
N#define CYDEV_PHUB_TDMEM48_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM48_ORIG_TD0 0x40007980u
N#define CYDEV_PHUB_TDMEM48_ORIG_TD1 0x40007984u
N#define CYDEV_PHUB_TDMEM49_BASE 0x40007988u
N#define CYDEV_PHUB_TDMEM49_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM49_ORIG_TD0 0x40007988u
N#define CYDEV_PHUB_TDMEM49_ORIG_TD1 0x4000798cu
N#define CYDEV_PHUB_TDMEM50_BASE 0x40007990u
N#define CYDEV_PHUB_TDMEM50_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM50_ORIG_TD0 0x40007990u
N#define CYDEV_PHUB_TDMEM50_ORIG_TD1 0x40007994u
N#define CYDEV_PHUB_TDMEM51_BASE 0x40007998u
N#define CYDEV_PHUB_TDMEM51_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM51_ORIG_TD0 0x40007998u
N#define CYDEV_PHUB_TDMEM51_ORIG_TD1 0x4000799cu
N#define CYDEV_PHUB_TDMEM52_BASE 0x400079a0u
N#define CYDEV_PHUB_TDMEM52_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM52_ORIG_TD0 0x400079a0u
N#define CYDEV_PHUB_TDMEM52_ORIG_TD1 0x400079a4u
N#define CYDEV_PHUB_TDMEM53_BASE 0x400079a8u
N#define CYDEV_PHUB_TDMEM53_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM53_ORIG_TD0 0x400079a8u
N#define CYDEV_PHUB_TDMEM53_ORIG_TD1 0x400079acu
N#define CYDEV_PHUB_TDMEM54_BASE 0x400079b0u
N#define CYDEV_PHUB_TDMEM54_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM54_ORIG_TD0 0x400079b0u
N#define CYDEV_PHUB_TDMEM54_ORIG_TD1 0x400079b4u
N#define CYDEV_PHUB_TDMEM55_BASE 0x400079b8u
N#define CYDEV_PHUB_TDMEM55_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM55_ORIG_TD0 0x400079b8u
N#define CYDEV_PHUB_TDMEM55_ORIG_TD1 0x400079bcu
N#define CYDEV_PHUB_TDMEM56_BASE 0x400079c0u
N#define CYDEV_PHUB_TDMEM56_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM56_ORIG_TD0 0x400079c0u
N#define CYDEV_PHUB_TDMEM56_ORIG_TD1 0x400079c4u
N#define CYDEV_PHUB_TDMEM57_BASE 0x400079c8u
N#define CYDEV_PHUB_TDMEM57_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM57_ORIG_TD0 0x400079c8u
N#define CYDEV_PHUB_TDMEM57_ORIG_TD1 0x400079ccu
N#define CYDEV_PHUB_TDMEM58_BASE 0x400079d0u
N#define CYDEV_PHUB_TDMEM58_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM58_ORIG_TD0 0x400079d0u
N#define CYDEV_PHUB_TDMEM58_ORIG_TD1 0x400079d4u
N#define CYDEV_PHUB_TDMEM59_BASE 0x400079d8u
N#define CYDEV_PHUB_TDMEM59_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM59_ORIG_TD0 0x400079d8u
N#define CYDEV_PHUB_TDMEM59_ORIG_TD1 0x400079dcu
N#define CYDEV_PHUB_TDMEM60_BASE 0x400079e0u
N#define CYDEV_PHUB_TDMEM60_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM60_ORIG_TD0 0x400079e0u
N#define CYDEV_PHUB_TDMEM60_ORIG_TD1 0x400079e4u
N#define CYDEV_PHUB_TDMEM61_BASE 0x400079e8u
N#define CYDEV_PHUB_TDMEM61_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM61_ORIG_TD0 0x400079e8u
N#define CYDEV_PHUB_TDMEM61_ORIG_TD1 0x400079ecu
N#define CYDEV_PHUB_TDMEM62_BASE 0x400079f0u
N#define CYDEV_PHUB_TDMEM62_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM62_ORIG_TD0 0x400079f0u
N#define CYDEV_PHUB_TDMEM62_ORIG_TD1 0x400079f4u
N#define CYDEV_PHUB_TDMEM63_BASE 0x400079f8u
N#define CYDEV_PHUB_TDMEM63_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM63_ORIG_TD0 0x400079f8u
N#define CYDEV_PHUB_TDMEM63_ORIG_TD1 0x400079fcu
N#define CYDEV_PHUB_TDMEM64_BASE 0x40007a00u
N#define CYDEV_PHUB_TDMEM64_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM64_ORIG_TD0 0x40007a00u
N#define CYDEV_PHUB_TDMEM64_ORIG_TD1 0x40007a04u
N#define CYDEV_PHUB_TDMEM65_BASE 0x40007a08u
N#define CYDEV_PHUB_TDMEM65_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM65_ORIG_TD0 0x40007a08u
N#define CYDEV_PHUB_TDMEM65_ORIG_TD1 0x40007a0cu
N#define CYDEV_PHUB_TDMEM66_BASE 0x40007a10u
N#define CYDEV_PHUB_TDMEM66_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM66_ORIG_TD0 0x40007a10u
N#define CYDEV_PHUB_TDMEM66_ORIG_TD1 0x40007a14u
N#define CYDEV_PHUB_TDMEM67_BASE 0x40007a18u
N#define CYDEV_PHUB_TDMEM67_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM67_ORIG_TD0 0x40007a18u
N#define CYDEV_PHUB_TDMEM67_ORIG_TD1 0x40007a1cu
N#define CYDEV_PHUB_TDMEM68_BASE 0x40007a20u
N#define CYDEV_PHUB_TDMEM68_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM68_ORIG_TD0 0x40007a20u
N#define CYDEV_PHUB_TDMEM68_ORIG_TD1 0x40007a24u
N#define CYDEV_PHUB_TDMEM69_BASE 0x40007a28u
N#define CYDEV_PHUB_TDMEM69_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM69_ORIG_TD0 0x40007a28u
N#define CYDEV_PHUB_TDMEM69_ORIG_TD1 0x40007a2cu
N#define CYDEV_PHUB_TDMEM70_BASE 0x40007a30u
N#define CYDEV_PHUB_TDMEM70_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM70_ORIG_TD0 0x40007a30u
N#define CYDEV_PHUB_TDMEM70_ORIG_TD1 0x40007a34u
N#define CYDEV_PHUB_TDMEM71_BASE 0x40007a38u
N#define CYDEV_PHUB_TDMEM71_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM71_ORIG_TD0 0x40007a38u
N#define CYDEV_PHUB_TDMEM71_ORIG_TD1 0x40007a3cu
N#define CYDEV_PHUB_TDMEM72_BASE 0x40007a40u
N#define CYDEV_PHUB_TDMEM72_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM72_ORIG_TD0 0x40007a40u
N#define CYDEV_PHUB_TDMEM72_ORIG_TD1 0x40007a44u
N#define CYDEV_PHUB_TDMEM73_BASE 0x40007a48u
N#define CYDEV_PHUB_TDMEM73_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM73_ORIG_TD0 0x40007a48u
N#define CYDEV_PHUB_TDMEM73_ORIG_TD1 0x40007a4cu
N#define CYDEV_PHUB_TDMEM74_BASE 0x40007a50u
N#define CYDEV_PHUB_TDMEM74_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM74_ORIG_TD0 0x40007a50u
N#define CYDEV_PHUB_TDMEM74_ORIG_TD1 0x40007a54u
N#define CYDEV_PHUB_TDMEM75_BASE 0x40007a58u
N#define CYDEV_PHUB_TDMEM75_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM75_ORIG_TD0 0x40007a58u
N#define CYDEV_PHUB_TDMEM75_ORIG_TD1 0x40007a5cu
N#define CYDEV_PHUB_TDMEM76_BASE 0x40007a60u
N#define CYDEV_PHUB_TDMEM76_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM76_ORIG_TD0 0x40007a60u
N#define CYDEV_PHUB_TDMEM76_ORIG_TD1 0x40007a64u
N#define CYDEV_PHUB_TDMEM77_BASE 0x40007a68u
N#define CYDEV_PHUB_TDMEM77_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM77_ORIG_TD0 0x40007a68u
N#define CYDEV_PHUB_TDMEM77_ORIG_TD1 0x40007a6cu
N#define CYDEV_PHUB_TDMEM78_BASE 0x40007a70u
N#define CYDEV_PHUB_TDMEM78_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM78_ORIG_TD0 0x40007a70u
N#define CYDEV_PHUB_TDMEM78_ORIG_TD1 0x40007a74u
N#define CYDEV_PHUB_TDMEM79_BASE 0x40007a78u
N#define CYDEV_PHUB_TDMEM79_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM79_ORIG_TD0 0x40007a78u
N#define CYDEV_PHUB_TDMEM79_ORIG_TD1 0x40007a7cu
N#define CYDEV_PHUB_TDMEM80_BASE 0x40007a80u
N#define CYDEV_PHUB_TDMEM80_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM80_ORIG_TD0 0x40007a80u
N#define CYDEV_PHUB_TDMEM80_ORIG_TD1 0x40007a84u
N#define CYDEV_PHUB_TDMEM81_BASE 0x40007a88u
N#define CYDEV_PHUB_TDMEM81_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM81_ORIG_TD0 0x40007a88u
N#define CYDEV_PHUB_TDMEM81_ORIG_TD1 0x40007a8cu
N#define CYDEV_PHUB_TDMEM82_BASE 0x40007a90u
N#define CYDEV_PHUB_TDMEM82_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM82_ORIG_TD0 0x40007a90u
N#define CYDEV_PHUB_TDMEM82_ORIG_TD1 0x40007a94u
N#define CYDEV_PHUB_TDMEM83_BASE 0x40007a98u
N#define CYDEV_PHUB_TDMEM83_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM83_ORIG_TD0 0x40007a98u
N#define CYDEV_PHUB_TDMEM83_ORIG_TD1 0x40007a9cu
N#define CYDEV_PHUB_TDMEM84_BASE 0x40007aa0u
N#define CYDEV_PHUB_TDMEM84_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM84_ORIG_TD0 0x40007aa0u
N#define CYDEV_PHUB_TDMEM84_ORIG_TD1 0x40007aa4u
N#define CYDEV_PHUB_TDMEM85_BASE 0x40007aa8u
N#define CYDEV_PHUB_TDMEM85_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM85_ORIG_TD0 0x40007aa8u
N#define CYDEV_PHUB_TDMEM85_ORIG_TD1 0x40007aacu
N#define CYDEV_PHUB_TDMEM86_BASE 0x40007ab0u
N#define CYDEV_PHUB_TDMEM86_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM86_ORIG_TD0 0x40007ab0u
N#define CYDEV_PHUB_TDMEM86_ORIG_TD1 0x40007ab4u
N#define CYDEV_PHUB_TDMEM87_BASE 0x40007ab8u
N#define CYDEV_PHUB_TDMEM87_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM87_ORIG_TD0 0x40007ab8u
N#define CYDEV_PHUB_TDMEM87_ORIG_TD1 0x40007abcu
N#define CYDEV_PHUB_TDMEM88_BASE 0x40007ac0u
N#define CYDEV_PHUB_TDMEM88_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM88_ORIG_TD0 0x40007ac0u
N#define CYDEV_PHUB_TDMEM88_ORIG_TD1 0x40007ac4u
N#define CYDEV_PHUB_TDMEM89_BASE 0x40007ac8u
N#define CYDEV_PHUB_TDMEM89_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM89_ORIG_TD0 0x40007ac8u
N#define CYDEV_PHUB_TDMEM89_ORIG_TD1 0x40007accu
N#define CYDEV_PHUB_TDMEM90_BASE 0x40007ad0u
N#define CYDEV_PHUB_TDMEM90_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM90_ORIG_TD0 0x40007ad0u
N#define CYDEV_PHUB_TDMEM90_ORIG_TD1 0x40007ad4u
N#define CYDEV_PHUB_TDMEM91_BASE 0x40007ad8u
N#define CYDEV_PHUB_TDMEM91_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM91_ORIG_TD0 0x40007ad8u
N#define CYDEV_PHUB_TDMEM91_ORIG_TD1 0x40007adcu
N#define CYDEV_PHUB_TDMEM92_BASE 0x40007ae0u
N#define CYDEV_PHUB_TDMEM92_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM92_ORIG_TD0 0x40007ae0u
N#define CYDEV_PHUB_TDMEM92_ORIG_TD1 0x40007ae4u
N#define CYDEV_PHUB_TDMEM93_BASE 0x40007ae8u
N#define CYDEV_PHUB_TDMEM93_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM93_ORIG_TD0 0x40007ae8u
N#define CYDEV_PHUB_TDMEM93_ORIG_TD1 0x40007aecu
N#define CYDEV_PHUB_TDMEM94_BASE 0x40007af0u
N#define CYDEV_PHUB_TDMEM94_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM94_ORIG_TD0 0x40007af0u
N#define CYDEV_PHUB_TDMEM94_ORIG_TD1 0x40007af4u
N#define CYDEV_PHUB_TDMEM95_BASE 0x40007af8u
N#define CYDEV_PHUB_TDMEM95_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM95_ORIG_TD0 0x40007af8u
N#define CYDEV_PHUB_TDMEM95_ORIG_TD1 0x40007afcu
N#define CYDEV_PHUB_TDMEM96_BASE 0x40007b00u
N#define CYDEV_PHUB_TDMEM96_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM96_ORIG_TD0 0x40007b00u
N#define CYDEV_PHUB_TDMEM96_ORIG_TD1 0x40007b04u
N#define CYDEV_PHUB_TDMEM97_BASE 0x40007b08u
N#define CYDEV_PHUB_TDMEM97_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM97_ORIG_TD0 0x40007b08u
N#define CYDEV_PHUB_TDMEM97_ORIG_TD1 0x40007b0cu
N#define CYDEV_PHUB_TDMEM98_BASE 0x40007b10u
N#define CYDEV_PHUB_TDMEM98_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM98_ORIG_TD0 0x40007b10u
N#define CYDEV_PHUB_TDMEM98_ORIG_TD1 0x40007b14u
N#define CYDEV_PHUB_TDMEM99_BASE 0x40007b18u
N#define CYDEV_PHUB_TDMEM99_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM99_ORIG_TD0 0x40007b18u
N#define CYDEV_PHUB_TDMEM99_ORIG_TD1 0x40007b1cu
N#define CYDEV_PHUB_TDMEM100_BASE 0x40007b20u
N#define CYDEV_PHUB_TDMEM100_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM100_ORIG_TD0 0x40007b20u
N#define CYDEV_PHUB_TDMEM100_ORIG_TD1 0x40007b24u
N#define CYDEV_PHUB_TDMEM101_BASE 0x40007b28u
N#define CYDEV_PHUB_TDMEM101_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM101_ORIG_TD0 0x40007b28u
N#define CYDEV_PHUB_TDMEM101_ORIG_TD1 0x40007b2cu
N#define CYDEV_PHUB_TDMEM102_BASE 0x40007b30u
N#define CYDEV_PHUB_TDMEM102_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM102_ORIG_TD0 0x40007b30u
N#define CYDEV_PHUB_TDMEM102_ORIG_TD1 0x40007b34u
N#define CYDEV_PHUB_TDMEM103_BASE 0x40007b38u
N#define CYDEV_PHUB_TDMEM103_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM103_ORIG_TD0 0x40007b38u
N#define CYDEV_PHUB_TDMEM103_ORIG_TD1 0x40007b3cu
N#define CYDEV_PHUB_TDMEM104_BASE 0x40007b40u
N#define CYDEV_PHUB_TDMEM104_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM104_ORIG_TD0 0x40007b40u
N#define CYDEV_PHUB_TDMEM104_ORIG_TD1 0x40007b44u
N#define CYDEV_PHUB_TDMEM105_BASE 0x40007b48u
N#define CYDEV_PHUB_TDMEM105_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM105_ORIG_TD0 0x40007b48u
N#define CYDEV_PHUB_TDMEM105_ORIG_TD1 0x40007b4cu
N#define CYDEV_PHUB_TDMEM106_BASE 0x40007b50u
N#define CYDEV_PHUB_TDMEM106_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM106_ORIG_TD0 0x40007b50u
N#define CYDEV_PHUB_TDMEM106_ORIG_TD1 0x40007b54u
N#define CYDEV_PHUB_TDMEM107_BASE 0x40007b58u
N#define CYDEV_PHUB_TDMEM107_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM107_ORIG_TD0 0x40007b58u
N#define CYDEV_PHUB_TDMEM107_ORIG_TD1 0x40007b5cu
N#define CYDEV_PHUB_TDMEM108_BASE 0x40007b60u
N#define CYDEV_PHUB_TDMEM108_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM108_ORIG_TD0 0x40007b60u
N#define CYDEV_PHUB_TDMEM108_ORIG_TD1 0x40007b64u
N#define CYDEV_PHUB_TDMEM109_BASE 0x40007b68u
N#define CYDEV_PHUB_TDMEM109_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM109_ORIG_TD0 0x40007b68u
N#define CYDEV_PHUB_TDMEM109_ORIG_TD1 0x40007b6cu
N#define CYDEV_PHUB_TDMEM110_BASE 0x40007b70u
N#define CYDEV_PHUB_TDMEM110_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM110_ORIG_TD0 0x40007b70u
N#define CYDEV_PHUB_TDMEM110_ORIG_TD1 0x40007b74u
N#define CYDEV_PHUB_TDMEM111_BASE 0x40007b78u
N#define CYDEV_PHUB_TDMEM111_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM111_ORIG_TD0 0x40007b78u
N#define CYDEV_PHUB_TDMEM111_ORIG_TD1 0x40007b7cu
N#define CYDEV_PHUB_TDMEM112_BASE 0x40007b80u
N#define CYDEV_PHUB_TDMEM112_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM112_ORIG_TD0 0x40007b80u
N#define CYDEV_PHUB_TDMEM112_ORIG_TD1 0x40007b84u
N#define CYDEV_PHUB_TDMEM113_BASE 0x40007b88u
N#define CYDEV_PHUB_TDMEM113_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM113_ORIG_TD0 0x40007b88u
N#define CYDEV_PHUB_TDMEM113_ORIG_TD1 0x40007b8cu
N#define CYDEV_PHUB_TDMEM114_BASE 0x40007b90u
N#define CYDEV_PHUB_TDMEM114_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM114_ORIG_TD0 0x40007b90u
N#define CYDEV_PHUB_TDMEM114_ORIG_TD1 0x40007b94u
N#define CYDEV_PHUB_TDMEM115_BASE 0x40007b98u
N#define CYDEV_PHUB_TDMEM115_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM115_ORIG_TD0 0x40007b98u
N#define CYDEV_PHUB_TDMEM115_ORIG_TD1 0x40007b9cu
N#define CYDEV_PHUB_TDMEM116_BASE 0x40007ba0u
N#define CYDEV_PHUB_TDMEM116_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM116_ORIG_TD0 0x40007ba0u
N#define CYDEV_PHUB_TDMEM116_ORIG_TD1 0x40007ba4u
N#define CYDEV_PHUB_TDMEM117_BASE 0x40007ba8u
N#define CYDEV_PHUB_TDMEM117_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM117_ORIG_TD0 0x40007ba8u
N#define CYDEV_PHUB_TDMEM117_ORIG_TD1 0x40007bacu
N#define CYDEV_PHUB_TDMEM118_BASE 0x40007bb0u
N#define CYDEV_PHUB_TDMEM118_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM118_ORIG_TD0 0x40007bb0u
N#define CYDEV_PHUB_TDMEM118_ORIG_TD1 0x40007bb4u
N#define CYDEV_PHUB_TDMEM119_BASE 0x40007bb8u
N#define CYDEV_PHUB_TDMEM119_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM119_ORIG_TD0 0x40007bb8u
N#define CYDEV_PHUB_TDMEM119_ORIG_TD1 0x40007bbcu
N#define CYDEV_PHUB_TDMEM120_BASE 0x40007bc0u
N#define CYDEV_PHUB_TDMEM120_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM120_ORIG_TD0 0x40007bc0u
N#define CYDEV_PHUB_TDMEM120_ORIG_TD1 0x40007bc4u
N#define CYDEV_PHUB_TDMEM121_BASE 0x40007bc8u
N#define CYDEV_PHUB_TDMEM121_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM121_ORIG_TD0 0x40007bc8u
N#define CYDEV_PHUB_TDMEM121_ORIG_TD1 0x40007bccu
N#define CYDEV_PHUB_TDMEM122_BASE 0x40007bd0u
N#define CYDEV_PHUB_TDMEM122_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM122_ORIG_TD0 0x40007bd0u
N#define CYDEV_PHUB_TDMEM122_ORIG_TD1 0x40007bd4u
N#define CYDEV_PHUB_TDMEM123_BASE 0x40007bd8u
N#define CYDEV_PHUB_TDMEM123_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM123_ORIG_TD0 0x40007bd8u
N#define CYDEV_PHUB_TDMEM123_ORIG_TD1 0x40007bdcu
N#define CYDEV_PHUB_TDMEM124_BASE 0x40007be0u
N#define CYDEV_PHUB_TDMEM124_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM124_ORIG_TD0 0x40007be0u
N#define CYDEV_PHUB_TDMEM124_ORIG_TD1 0x40007be4u
N#define CYDEV_PHUB_TDMEM125_BASE 0x40007be8u
N#define CYDEV_PHUB_TDMEM125_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM125_ORIG_TD0 0x40007be8u
N#define CYDEV_PHUB_TDMEM125_ORIG_TD1 0x40007becu
N#define CYDEV_PHUB_TDMEM126_BASE 0x40007bf0u
N#define CYDEV_PHUB_TDMEM126_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM126_ORIG_TD0 0x40007bf0u
N#define CYDEV_PHUB_TDMEM126_ORIG_TD1 0x40007bf4u
N#define CYDEV_PHUB_TDMEM127_BASE 0x40007bf8u
N#define CYDEV_PHUB_TDMEM127_SIZE 0x00000008u
N#define CYDEV_PHUB_TDMEM127_ORIG_TD0 0x40007bf8u
N#define CYDEV_PHUB_TDMEM127_ORIG_TD1 0x40007bfcu
N#define CYDEV_EE_BASE 0x40008000u
N#define CYDEV_EE_SIZE 0x00000800u
N#define CYDEV_EE_DATA_MBASE 0x40008000u
N#define CYDEV_EE_DATA_MSIZE 0x00000800u
N#define CYDEV_CAN0_BASE 0x4000a000u
N#define CYDEV_CAN0_SIZE 0x000002a0u
N#define CYDEV_CAN0_CSR_BASE 0x4000a000u
N#define CYDEV_CAN0_CSR_SIZE 0x00000018u
N#define CYDEV_CAN0_CSR_INT_SR 0x4000a000u
N#define CYDEV_CAN0_CSR_INT_EN 0x4000a004u
N#define CYDEV_CAN0_CSR_BUF_SR 0x4000a008u
N#define CYDEV_CAN0_CSR_ERR_SR 0x4000a00cu
N#define CYDEV_CAN0_CSR_CMD 0x4000a010u
N#define CYDEV_CAN0_CSR_CFG 0x4000a014u
N#define CYDEV_CAN0_TX0_BASE 0x4000a020u
N#define CYDEV_CAN0_TX0_SIZE 0x00000010u
N#define CYDEV_CAN0_TX0_CMD 0x4000a020u
N#define CYDEV_CAN0_TX0_ID 0x4000a024u
N#define CYDEV_CAN0_TX0_DH 0x4000a028u
N#define CYDEV_CAN0_TX0_DL 0x4000a02cu
N#define CYDEV_CAN0_TX1_BASE 0x4000a030u
N#define CYDEV_CAN0_TX1_SIZE 0x00000010u
N#define CYDEV_CAN0_TX1_CMD 0x4000a030u
N#define CYDEV_CAN0_TX1_ID 0x4000a034u
N#define CYDEV_CAN0_TX1_DH 0x4000a038u
N#define CYDEV_CAN0_TX1_DL 0x4000a03cu
N#define CYDEV_CAN0_TX2_BASE 0x4000a040u
N#define CYDEV_CAN0_TX2_SIZE 0x00000010u
N#define CYDEV_CAN0_TX2_CMD 0x4000a040u
N#define CYDEV_CAN0_TX2_ID 0x4000a044u
N#define CYDEV_CAN0_TX2_DH 0x4000a048u
N#define CYDEV_CAN0_TX2_DL 0x4000a04cu
N#define CYDEV_CAN0_TX3_BASE 0x4000a050u
N#define CYDEV_CAN0_TX3_SIZE 0x00000010u
N#define CYDEV_CAN0_TX3_CMD 0x4000a050u
N#define CYDEV_CAN0_TX3_ID 0x4000a054u
N#define CYDEV_CAN0_TX3_DH 0x4000a058u
N#define CYDEV_CAN0_TX3_DL 0x4000a05cu
N#define CYDEV_CAN0_TX4_BASE 0x4000a060u
N#define CYDEV_CAN0_TX4_SIZE 0x00000010u
N#define CYDEV_CAN0_TX4_CMD 0x4000a060u
N#define CYDEV_CAN0_TX4_ID 0x4000a064u
N#define CYDEV_CAN0_TX4_DH 0x4000a068u
N#define CYDEV_CAN0_TX4_DL 0x4000a06cu
N#define CYDEV_CAN0_TX5_BASE 0x4000a070u
N#define CYDEV_CAN0_TX5_SIZE 0x00000010u
N#define CYDEV_CAN0_TX5_CMD 0x4000a070u
N#define CYDEV_CAN0_TX5_ID 0x4000a074u
N#define CYDEV_CAN0_TX5_DH 0x4000a078u
N#define CYDEV_CAN0_TX5_DL 0x4000a07cu
N#define CYDEV_CAN0_TX6_BASE 0x4000a080u
N#define CYDEV_CAN0_TX6_SIZE 0x00000010u
N#define CYDEV_CAN0_TX6_CMD 0x4000a080u
N#define CYDEV_CAN0_TX6_ID 0x4000a084u
N#define CYDEV_CAN0_TX6_DH 0x4000a088u
N#define CYDEV_CAN0_TX6_DL 0x4000a08cu
N#define CYDEV_CAN0_TX7_BASE 0x4000a090u
N#define CYDEV_CAN0_TX7_SIZE 0x00000010u
N#define CYDEV_CAN0_TX7_CMD 0x4000a090u
N#define CYDEV_CAN0_TX7_ID 0x4000a094u
N#define CYDEV_CAN0_TX7_DH 0x4000a098u
N#define CYDEV_CAN0_TX7_DL 0x4000a09cu
N#define CYDEV_CAN0_RX0_BASE 0x4000a0a0u
N#define CYDEV_CAN0_RX0_SIZE 0x00000020u
N#define CYDEV_CAN0_RX0_CMD 0x4000a0a0u
N#define CYDEV_CAN0_RX0_ID 0x4000a0a4u
N#define CYDEV_CAN0_RX0_DH 0x4000a0a8u
N#define CYDEV_CAN0_RX0_DL 0x4000a0acu
N#define CYDEV_CAN0_RX0_AMR 0x4000a0b0u
N#define CYDEV_CAN0_RX0_ACR 0x4000a0b4u
N#define CYDEV_CAN0_RX0_AMRD 0x4000a0b8u
N#define CYDEV_CAN0_RX0_ACRD 0x4000a0bcu
N#define CYDEV_CAN0_RX1_BASE 0x4000a0c0u
N#define CYDEV_CAN0_RX1_SIZE 0x00000020u
N#define CYDEV_CAN0_RX1_CMD 0x4000a0c0u
N#define CYDEV_CAN0_RX1_ID 0x4000a0c4u
N#define CYDEV_CAN0_RX1_DH 0x4000a0c8u
N#define CYDEV_CAN0_RX1_DL 0x4000a0ccu
N#define CYDEV_CAN0_RX1_AMR 0x4000a0d0u
N#define CYDEV_CAN0_RX1_ACR 0x4000a0d4u
N#define CYDEV_CAN0_RX1_AMRD 0x4000a0d8u
N#define CYDEV_CAN0_RX1_ACRD 0x4000a0dcu
N#define CYDEV_CAN0_RX2_BASE 0x4000a0e0u
N#define CYDEV_CAN0_RX2_SIZE 0x00000020u
N#define CYDEV_CAN0_RX2_CMD 0x4000a0e0u
N#define CYDEV_CAN0_RX2_ID 0x4000a0e4u
N#define CYDEV_CAN0_RX2_DH 0x4000a0e8u
N#define CYDEV_CAN0_RX2_DL 0x4000a0ecu
N#define CYDEV_CAN0_RX2_AMR 0x4000a0f0u
N#define CYDEV_CAN0_RX2_ACR 0x4000a0f4u
N#define CYDEV_CAN0_RX2_AMRD 0x4000a0f8u
N#define CYDEV_CAN0_RX2_ACRD 0x4000a0fcu
N#define CYDEV_CAN0_RX3_BASE 0x4000a100u
N#define CYDEV_CAN0_RX3_SIZE 0x00000020u
N#define CYDEV_CAN0_RX3_CMD 0x4000a100u
N#define CYDEV_CAN0_RX3_ID 0x4000a104u
N#define CYDEV_CAN0_RX3_DH 0x4000a108u
N#define CYDEV_CAN0_RX3_DL 0x4000a10cu
N#define CYDEV_CAN0_RX3_AMR 0x4000a110u
N#define CYDEV_CAN0_RX3_ACR 0x4000a114u
N#define CYDEV_CAN0_RX3_AMRD 0x4000a118u
N#define CYDEV_CAN0_RX3_ACRD 0x4000a11cu
N#define CYDEV_CAN0_RX4_BASE 0x4000a120u
N#define CYDEV_CAN0_RX4_SIZE 0x00000020u
N#define CYDEV_CAN0_RX4_CMD 0x4000a120u
N#define CYDEV_CAN0_RX4_ID 0x4000a124u
N#define CYDEV_CAN0_RX4_DH 0x4000a128u
N#define CYDEV_CAN0_RX4_DL 0x4000a12cu
N#define CYDEV_CAN0_RX4_AMR 0x4000a130u
N#define CYDEV_CAN0_RX4_ACR 0x4000a134u
N#define CYDEV_CAN0_RX4_AMRD 0x4000a138u
N#define CYDEV_CAN0_RX4_ACRD 0x4000a13cu
N#define CYDEV_CAN0_RX5_BASE 0x4000a140u
N#define CYDEV_CAN0_RX5_SIZE 0x00000020u
N#define CYDEV_CAN0_RX5_CMD 0x4000a140u
N#define CYDEV_CAN0_RX5_ID 0x4000a144u
N#define CYDEV_CAN0_RX5_DH 0x4000a148u
N#define CYDEV_CAN0_RX5_DL 0x4000a14cu
N#define CYDEV_CAN0_RX5_AMR 0x4000a150u
N#define CYDEV_CAN0_RX5_ACR 0x4000a154u
N#define CYDEV_CAN0_RX5_AMRD 0x4000a158u
N#define CYDEV_CAN0_RX5_ACRD 0x4000a15cu
N#define CYDEV_CAN0_RX6_BASE 0x4000a160u
N#define CYDEV_CAN0_RX6_SIZE 0x00000020u
N#define CYDEV_CAN0_RX6_CMD 0x4000a160u
N#define CYDEV_CAN0_RX6_ID 0x4000a164u
N#define CYDEV_CAN0_RX6_DH 0x4000a168u
N#define CYDEV_CAN0_RX6_DL 0x4000a16cu
N#define CYDEV_CAN0_RX6_AMR 0x4000a170u
N#define CYDEV_CAN0_RX6_ACR 0x4000a174u
N#define CYDEV_CAN0_RX6_AMRD 0x4000a178u
N#define CYDEV_CAN0_RX6_ACRD 0x4000a17cu
N#define CYDEV_CAN0_RX7_BASE 0x4000a180u
N#define CYDEV_CAN0_RX7_SIZE 0x00000020u
N#define CYDEV_CAN0_RX7_CMD 0x4000a180u
N#define CYDEV_CAN0_RX7_ID 0x4000a184u
N#define CYDEV_CAN0_RX7_DH 0x4000a188u
N#define CYDEV_CAN0_RX7_DL 0x4000a18cu
N#define CYDEV_CAN0_RX7_AMR 0x4000a190u
N#define CYDEV_CAN0_RX7_ACR 0x4000a194u
N#define CYDEV_CAN0_RX7_AMRD 0x4000a198u
N#define CYDEV_CAN0_RX7_ACRD 0x4000a19cu
N#define CYDEV_CAN0_RX8_BASE 0x4000a1a0u
N#define CYDEV_CAN0_RX8_SIZE 0x00000020u
N#define CYDEV_CAN0_RX8_CMD 0x4000a1a0u
N#define CYDEV_CAN0_RX8_ID 0x4000a1a4u
N#define CYDEV_CAN0_RX8_DH 0x4000a1a8u
N#define CYDEV_CAN0_RX8_DL 0x4000a1acu
N#define CYDEV_CAN0_RX8_AMR 0x4000a1b0u
N#define CYDEV_CAN0_RX8_ACR 0x4000a1b4u
N#define CYDEV_CAN0_RX8_AMRD 0x4000a1b8u
N#define CYDEV_CAN0_RX8_ACRD 0x4000a1bcu
N#define CYDEV_CAN0_RX9_BASE 0x4000a1c0u
N#define CYDEV_CAN0_RX9_SIZE 0x00000020u
N#define CYDEV_CAN0_RX9_CMD 0x4000a1c0u
N#define CYDEV_CAN0_RX9_ID 0x4000a1c4u
N#define CYDEV_CAN0_RX9_DH 0x4000a1c8u
N#define CYDEV_CAN0_RX9_DL 0x4000a1ccu
N#define CYDEV_CAN0_RX9_AMR 0x4000a1d0u
N#define CYDEV_CAN0_RX9_ACR 0x4000a1d4u
N#define CYDEV_CAN0_RX9_AMRD 0x4000a1d8u
N#define CYDEV_CAN0_RX9_ACRD 0x4000a1dcu
N#define CYDEV_CAN0_RX10_BASE 0x4000a1e0u
N#define CYDEV_CAN0_RX10_SIZE 0x00000020u
N#define CYDEV_CAN0_RX10_CMD 0x4000a1e0u
N#define CYDEV_CAN0_RX10_ID 0x4000a1e4u
N#define CYDEV_CAN0_RX10_DH 0x4000a1e8u
N#define CYDEV_CAN0_RX10_DL 0x4000a1ecu
N#define CYDEV_CAN0_RX10_AMR 0x4000a1f0u
N#define CYDEV_CAN0_RX10_ACR 0x4000a1f4u
N#define CYDEV_CAN0_RX10_AMRD 0x4000a1f8u
N#define CYDEV_CAN0_RX10_ACRD 0x4000a1fcu
N#define CYDEV_CAN0_RX11_BASE 0x4000a200u
N#define CYDEV_CAN0_RX11_SIZE 0x00000020u
N#define CYDEV_CAN0_RX11_CMD 0x4000a200u
N#define CYDEV_CAN0_RX11_ID 0x4000a204u
N#define CYDEV_CAN0_RX11_DH 0x4000a208u
N#define CYDEV_CAN0_RX11_DL 0x4000a20cu
N#define CYDEV_CAN0_RX11_AMR 0x4000a210u
N#define CYDEV_CAN0_RX11_ACR 0x4000a214u
N#define CYDEV_CAN0_RX11_AMRD 0x4000a218u
N#define CYDEV_CAN0_RX11_ACRD 0x4000a21cu
N#define CYDEV_CAN0_RX12_BASE 0x4000a220u
N#define CYDEV_CAN0_RX12_SIZE 0x00000020u
N#define CYDEV_CAN0_RX12_CMD 0x4000a220u
N#define CYDEV_CAN0_RX12_ID 0x4000a224u
N#define CYDEV_CAN0_RX12_DH 0x4000a228u
N#define CYDEV_CAN0_RX12_DL 0x4000a22cu
N#define CYDEV_CAN0_RX12_AMR 0x4000a230u
N#define CYDEV_CAN0_RX12_ACR 0x4000a234u
N#define CYDEV_CAN0_RX12_AMRD 0x4000a238u
N#define CYDEV_CAN0_RX12_ACRD 0x4000a23cu
N#define CYDEV_CAN0_RX13_BASE 0x4000a240u
N#define CYDEV_CAN0_RX13_SIZE 0x00000020u
N#define CYDEV_CAN0_RX13_CMD 0x4000a240u
N#define CYDEV_CAN0_RX13_ID 0x4000a244u
N#define CYDEV_CAN0_RX13_DH 0x4000a248u
N#define CYDEV_CAN0_RX13_DL 0x4000a24cu
N#define CYDEV_CAN0_RX13_AMR 0x4000a250u
N#define CYDEV_CAN0_RX13_ACR 0x4000a254u
N#define CYDEV_CAN0_RX13_AMRD 0x4000a258u
N#define CYDEV_CAN0_RX13_ACRD 0x4000a25cu
N#define CYDEV_CAN0_RX14_BASE 0x4000a260u
N#define CYDEV_CAN0_RX14_SIZE 0x00000020u
N#define CYDEV_CAN0_RX14_CMD 0x4000a260u
N#define CYDEV_CAN0_RX14_ID 0x4000a264u
N#define CYDEV_CAN0_RX14_DH 0x4000a268u
N#define CYDEV_CAN0_RX14_DL 0x4000a26cu
N#define CYDEV_CAN0_RX14_AMR 0x4000a270u
N#define CYDEV_CAN0_RX14_ACR 0x4000a274u
N#define CYDEV_CAN0_RX14_AMRD 0x4000a278u
N#define CYDEV_CAN0_RX14_ACRD 0x4000a27cu
N#define CYDEV_CAN0_RX15_BASE 0x4000a280u
N#define CYDEV_CAN0_RX15_SIZE 0x00000020u
N#define CYDEV_CAN0_RX15_CMD 0x4000a280u
N#define CYDEV_CAN0_RX15_ID 0x4000a284u
N#define CYDEV_CAN0_RX15_DH 0x4000a288u
N#define CYDEV_CAN0_RX15_DL 0x4000a28cu
N#define CYDEV_CAN0_RX15_AMR 0x4000a290u
N#define CYDEV_CAN0_RX15_ACR 0x4000a294u
N#define CYDEV_CAN0_RX15_AMRD 0x4000a298u
N#define CYDEV_CAN0_RX15_ACRD 0x4000a29cu
N#define CYDEV_DFB0_BASE 0x4000c000u
N#define CYDEV_DFB0_SIZE 0x000007b5u
N#define CYDEV_DFB0_DPA_SRAM_BASE 0x4000c000u
N#define CYDEV_DFB0_DPA_SRAM_SIZE 0x00000200u
N#define CYDEV_DFB0_DPA_SRAM_DATA_MBASE 0x4000c000u
N#define CYDEV_DFB0_DPA_SRAM_DATA_MSIZE 0x00000200u
N#define CYDEV_DFB0_DPB_SRAM_BASE 0x4000c200u
N#define CYDEV_DFB0_DPB_SRAM_SIZE 0x00000200u
N#define CYDEV_DFB0_DPB_SRAM_DATA_MBASE 0x4000c200u
N#define CYDEV_DFB0_DPB_SRAM_DATA_MSIZE 0x00000200u
N#define CYDEV_DFB0_CSA_SRAM_BASE 0x4000c400u
N#define CYDEV_DFB0_CSA_SRAM_SIZE 0x00000100u
N#define CYDEV_DFB0_CSA_SRAM_DATA_MBASE 0x4000c400u
N#define CYDEV_DFB0_CSA_SRAM_DATA_MSIZE 0x00000100u
N#define CYDEV_DFB0_CSB_SRAM_BASE 0x4000c500u
N#define CYDEV_DFB0_CSB_SRAM_SIZE 0x00000100u
N#define CYDEV_DFB0_CSB_SRAM_DATA_MBASE 0x4000c500u
N#define CYDEV_DFB0_CSB_SRAM_DATA_MSIZE 0x00000100u
N#define CYDEV_DFB0_FSM_SRAM_BASE 0x4000c600u
N#define CYDEV_DFB0_FSM_SRAM_SIZE 0x00000100u
N#define CYDEV_DFB0_FSM_SRAM_DATA_MBASE 0x4000c600u
N#define CYDEV_DFB0_FSM_SRAM_DATA_MSIZE 0x00000100u
N#define CYDEV_DFB0_ACU_SRAM_BASE 0x4000c700u
N#define CYDEV_DFB0_ACU_SRAM_SIZE 0x00000040u
N#define CYDEV_DFB0_ACU_SRAM_DATA_MBASE 0x4000c700u
N#define CYDEV_DFB0_ACU_SRAM_DATA_MSIZE 0x00000040u
N#define CYDEV_DFB0_CR 0x4000c780u
N#define CYDEV_DFB0_SR 0x4000c784u
N#define CYDEV_DFB0_RAM_EN 0x4000c788u
N#define CYDEV_DFB0_RAM_DIR 0x4000c78cu
N#define CYDEV_DFB0_SEMA 0x4000c790u
N#define CYDEV_DFB0_DSI_CTRL 0x4000c794u
N#define CYDEV_DFB0_INT_CTRL 0x4000c798u
N#define CYDEV_DFB0_DMA_CTRL 0x4000c79cu
N#define CYDEV_DFB0_STAGEA 0x4000c7a0u
N#define CYDEV_DFB0_STAGEAM 0x4000c7a1u
N#define CYDEV_DFB0_STAGEAH 0x4000c7a2u
N#define CYDEV_DFB0_STAGEB 0x4000c7a4u
N#define CYDEV_DFB0_STAGEBM 0x4000c7a5u
N#define CYDEV_DFB0_STAGEBH 0x4000c7a6u
N#define CYDEV_DFB0_HOLDA 0x4000c7a8u
N#define CYDEV_DFB0_HOLDAM 0x4000c7a9u
N#define CYDEV_DFB0_HOLDAH 0x4000c7aau
N#define CYDEV_DFB0_HOLDAS 0x4000c7abu
N#define CYDEV_DFB0_HOLDB 0x4000c7acu
N#define CYDEV_DFB0_HOLDBM 0x4000c7adu
N#define CYDEV_DFB0_HOLDBH 0x4000c7aeu
N#define CYDEV_DFB0_HOLDBS 0x4000c7afu
N#define CYDEV_DFB0_COHER 0x4000c7b0u
N#define CYDEV_DFB0_DALIGN 0x4000c7b4u
N#define CYDEV_UCFG_BASE 0x40010000u
N#define CYDEV_UCFG_SIZE 0x00005040u
N#define CYDEV_UCFG_B0_BASE 0x40010000u
N#define CYDEV_UCFG_B0_SIZE 0x00000fefu
N#define CYDEV_UCFG_B0_P0_BASE 0x40010000u
N#define CYDEV_UCFG_B0_P0_SIZE 0x000001efu
N#define CYDEV_UCFG_B0_P0_U0_BASE 0x40010000u
N#define CYDEV_UCFG_B0_P0_U0_SIZE 0x00000070u
N#define CYDEV_UCFG_B0_P0_U0_PLD_IT0 0x40010000u
N#define CYDEV_UCFG_B0_P0_U0_PLD_IT1 0x40010004u
N#define CYDEV_UCFG_B0_P0_U0_PLD_IT2 0x40010008u
N#define CYDEV_UCFG_B0_P0_U0_PLD_IT3 0x4001000cu
N#define CYDEV_UCFG_B0_P0_U0_PLD_IT4 0x40010010u
N#define CYDEV_UCFG_B0_P0_U0_PLD_IT5 0x40010014u
N#define CYDEV_UCFG_B0_P0_U0_PLD_IT6 0x40010018u
N#define CYDEV_UCFG_B0_P0_U0_PLD_IT7 0x4001001cu
N#define CYDEV_UCFG_B0_P0_U0_PLD_IT8 0x40010020u
N#define CYDEV_UCFG_B0_P0_U0_PLD_IT9 0x40010024u
N#define CYDEV_UCFG_B0_P0_U0_PLD_IT10 0x40010028u
N#define CYDEV_UCFG_B0_P0_U0_PLD_IT11 0x4001002cu
N#define CYDEV_UCFG_B0_P0_U0_PLD_ORT0 0x40010030u
N#define CYDEV_UCFG_B0_P0_U0_PLD_ORT1 0x40010032u
N#define CYDEV_UCFG_B0_P0_U0_PLD_ORT2 0x40010034u
N#define CYDEV_UCFG_B0_P0_U0_PLD_ORT3 0x40010036u
N#define CYDEV_UCFG_B0_P0_U0_MC_CFG_CEN_CONST 0x40010038u
N#define CYDEV_UCFG_B0_P0_U0_MC_CFG_XORFB 0x4001003au
N#define CYDEV_UCFG_B0_P0_U0_MC_CFG_SET_RESET 0x4001003cu
N#define CYDEV_UCFG_B0_P0_U0_MC_CFG_BYPASS 0x4001003eu
N#define CYDEV_UCFG_B0_P0_U0_CFG0 0x40010040u
N#define CYDEV_UCFG_B0_P0_U0_CFG1 0x40010041u
N#define CYDEV_UCFG_B0_P0_U0_CFG2 0x40010042u
N#define CYDEV_UCFG_B0_P0_U0_CFG3 0x40010043u
N#define CYDEV_UCFG_B0_P0_U0_CFG4 0x40010044u
N#define CYDEV_UCFG_B0_P0_U0_CFG5 0x40010045u
N#define CYDEV_UCFG_B0_P0_U0_CFG6 0x40010046u
N#define CYDEV_UCFG_B0_P0_U0_CFG7 0x40010047u
N#define CYDEV_UCFG_B0_P0_U0_CFG8 0x40010048u
N#define CYDEV_UCFG_B0_P0_U0_CFG9 0x40010049u
N#define CYDEV_UCFG_B0_P0_U0_CFG10 0x4001004au
N#define CYDEV_UCFG_B0_P0_U0_CFG11 0x4001004bu
N#define CYDEV_UCFG_B0_P0_U0_CFG12 0x4001004cu
N#define CYDEV_UCFG_B0_P0_U0_CFG13 0x4001004du
N#define CYDEV_UCFG_B0_P0_U0_CFG14 0x4001004eu
N#define CYDEV_UCFG_B0_P0_U0_CFG15 0x4001004fu
N#define CYDEV_UCFG_B0_P0_U0_CFG16 0x40010050u
N#define CYDEV_UCFG_B0_P0_U0_CFG17 0x40010051u
N#define CYDEV_UCFG_B0_P0_U0_CFG18 0x40010052u
N#define CYDEV_UCFG_B0_P0_U0_CFG19 0x40010053u
N#define CYDEV_UCFG_B0_P0_U0_CFG20 0x40010054u
N#define CYDEV_UCFG_B0_P0_U0_CFG21 0x40010055u
N#define CYDEV_UCFG_B0_P0_U0_CFG22 0x40010056u
N#define CYDEV_UCFG_B0_P0_U0_CFG23 0x40010057u
N#define CYDEV_UCFG_B0_P0_U0_CFG24 0x40010058u
N#define CYDEV_UCFG_B0_P0_U0_CFG25 0x40010059u
N#define CYDEV_UCFG_B0_P0_U0_CFG26 0x4001005au
N#define CYDEV_UCFG_B0_P0_U0_CFG27 0x4001005bu
N#define CYDEV_UCFG_B0_P0_U0_CFG28 0x4001005cu
N#define CYDEV_UCFG_B0_P0_U0_CFG29 0x4001005du
N#define CYDEV_UCFG_B0_P0_U0_CFG30 0x4001005eu
N#define CYDEV_UCFG_B0_P0_U0_CFG31 0x4001005fu
N#define CYDEV_UCFG_B0_P0_U0_DCFG0 0x40010060u
N#define CYDEV_UCFG_B0_P0_U0_DCFG1 0x40010062u
N#define CYDEV_UCFG_B0_P0_U0_DCFG2 0x40010064u
N#define CYDEV_UCFG_B0_P0_U0_DCFG3 0x40010066u
N#define CYDEV_UCFG_B0_P0_U0_DCFG4 0x40010068u
N#define CYDEV_UCFG_B0_P0_U0_DCFG5 0x4001006au
N#define CYDEV_UCFG_B0_P0_U0_DCFG6 0x4001006cu
N#define CYDEV_UCFG_B0_P0_U0_DCFG7 0x4001006eu
N#define CYDEV_UCFG_B0_P0_U1_BASE 0x40010080u
N#define CYDEV_UCFG_B0_P0_U1_SIZE 0x00000070u
N#define CYDEV_UCFG_B0_P0_U1_PLD_IT0 0x40010080u
N#define CYDEV_UCFG_B0_P0_U1_PLD_IT1 0x40010084u
N#define CYDEV_UCFG_B0_P0_U1_PLD_IT2 0x40010088u
N#define CYDEV_UCFG_B0_P0_U1_PLD_IT3 0x4001008cu
N#define CYDEV_UCFG_B0_P0_U1_PLD_IT4 0x40010090u
N#define CYDEV_UCFG_B0_P0_U1_PLD_IT5 0x40010094u
N#define CYDEV_UCFG_B0_P0_U1_PLD_IT6 0x40010098u
N#define CYDEV_UCFG_B0_P0_U1_PLD_IT7 0x4001009cu
N#define CYDEV_UCFG_B0_P0_U1_PLD_IT8 0x400100a0u
N#define CYDEV_UCFG_B0_P0_U1_PLD_IT9 0x400100a4u
N#define CYDEV_UCFG_B0_P0_U1_PLD_IT10 0x400100a8u
N#define CYDEV_UCFG_B0_P0_U1_PLD_IT11 0x400100acu
N#define CYDEV_UCFG_B0_P0_U1_PLD_ORT0 0x400100b0u
N#define CYDEV_UCFG_B0_P0_U1_PLD_ORT1 0x400100b2u
N#define CYDEV_UCFG_B0_P0_U1_PLD_ORT2 0x400100b4u
N#define CYDEV_UCFG_B0_P0_U1_PLD_ORT3 0x400100b6u
N#define CYDEV_UCFG_B0_P0_U1_MC_CFG_CEN_CONST 0x400100b8u
N#define CYDEV_UCFG_B0_P0_U1_MC_CFG_XORFB 0x400100bau
N#define CYDEV_UCFG_B0_P0_U1_MC_CFG_SET_RESET 0x400100bcu
N#define CYDEV_UCFG_B0_P0_U1_MC_CFG_BYPASS 0x400100beu
N#define CYDEV_UCFG_B0_P0_U1_CFG0 0x400100c0u
N#define CYDEV_UCFG_B0_P0_U1_CFG1 0x400100c1u
N#define CYDEV_UCFG_B0_P0_U1_CFG2 0x400100c2u
N#define CYDEV_UCFG_B0_P0_U1_CFG3 0x400100c3u
N#define CYDEV_UCFG_B0_P0_U1_CFG4 0x400100c4u
N#define CYDEV_UCFG_B0_P0_U1_CFG5 0x400100c5u
N#define CYDEV_UCFG_B0_P0_U1_CFG6 0x400100c6u
N#define CYDEV_UCFG_B0_P0_U1_CFG7 0x400100c7u
N#define CYDEV_UCFG_B0_P0_U1_CFG8 0x400100c8u
N#define CYDEV_UCFG_B0_P0_U1_CFG9 0x400100c9u
N#define CYDEV_UCFG_B0_P0_U1_CFG10 0x400100cau
N#define CYDEV_UCFG_B0_P0_U1_CFG11 0x400100cbu
N#define CYDEV_UCFG_B0_P0_U1_CFG12 0x400100ccu
N#define CYDEV_UCFG_B0_P0_U1_CFG13 0x400100cdu
N#define CYDEV_UCFG_B0_P0_U1_CFG14 0x400100ceu
N#define CYDEV_UCFG_B0_P0_U1_CFG15 0x400100cfu
N#define CYDEV_UCFG_B0_P0_U1_CFG16 0x400100d0u
N#define CYDEV_UCFG_B0_P0_U1_CFG17 0x400100d1u
N#define CYDEV_UCFG_B0_P0_U1_CFG18 0x400100d2u
N#define CYDEV_UCFG_B0_P0_U1_CFG19 0x400100d3u
N#define CYDEV_UCFG_B0_P0_U1_CFG20 0x400100d4u
N#define CYDEV_UCFG_B0_P0_U1_CFG21 0x400100d5u
N#define CYDEV_UCFG_B0_P0_U1_CFG22 0x400100d6u
N#define CYDEV_UCFG_B0_P0_U1_CFG23 0x400100d7u
N#define CYDEV_UCFG_B0_P0_U1_CFG24 0x400100d8u
N#define CYDEV_UCFG_B0_P0_U1_CFG25 0x400100d9u
N#define CYDEV_UCFG_B0_P0_U1_CFG26 0x400100dau
N#define CYDEV_UCFG_B0_P0_U1_CFG27 0x400100dbu
N#define CYDEV_UCFG_B0_P0_U1_CFG28 0x400100dcu
N#define CYDEV_UCFG_B0_P0_U1_CFG29 0x400100ddu
N#define CYDEV_UCFG_B0_P0_U1_CFG30 0x400100deu
N#define CYDEV_UCFG_B0_P0_U1_CFG31 0x400100dfu
N#define CYDEV_UCFG_B0_P0_U1_DCFG0 0x400100e0u
N#define CYDEV_UCFG_B0_P0_U1_DCFG1 0x400100e2u
N#define CYDEV_UCFG_B0_P0_U1_DCFG2 0x400100e4u
N#define CYDEV_UCFG_B0_P0_U1_DCFG3 0x400100e6u
N#define CYDEV_UCFG_B0_P0_U1_DCFG4 0x400100e8u
N#define CYDEV_UCFG_B0_P0_U1_DCFG5 0x400100eau
N#define CYDEV_UCFG_B0_P0_U1_DCFG6 0x400100ecu
N#define CYDEV_UCFG_B0_P0_U1_DCFG7 0x400100eeu
N#define CYDEV_UCFG_B0_P0_ROUTE_BASE 0x40010100u
N#define CYDEV_UCFG_B0_P0_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B0_P1_BASE 0x40010200u
N#define CYDEV_UCFG_B0_P1_SIZE 0x000001efu
N#define CYDEV_UCFG_B0_P1_U0_BASE 0x40010200u
N#define CYDEV_UCFG_B0_P1_U0_SIZE 0x00000070u
N#define CYDEV_UCFG_B0_P1_U0_PLD_IT0 0x40010200u
N#define CYDEV_UCFG_B0_P1_U0_PLD_IT1 0x40010204u
N#define CYDEV_UCFG_B0_P1_U0_PLD_IT2 0x40010208u
N#define CYDEV_UCFG_B0_P1_U0_PLD_IT3 0x4001020cu
N#define CYDEV_UCFG_B0_P1_U0_PLD_IT4 0x40010210u
N#define CYDEV_UCFG_B0_P1_U0_PLD_IT5 0x40010214u
N#define CYDEV_UCFG_B0_P1_U0_PLD_IT6 0x40010218u
N#define CYDEV_UCFG_B0_P1_U0_PLD_IT7 0x4001021cu
N#define CYDEV_UCFG_B0_P1_U0_PLD_IT8 0x40010220u
N#define CYDEV_UCFG_B0_P1_U0_PLD_IT9 0x40010224u
N#define CYDEV_UCFG_B0_P1_U0_PLD_IT10 0x40010228u
N#define CYDEV_UCFG_B0_P1_U0_PLD_IT11 0x4001022cu
N#define CYDEV_UCFG_B0_P1_U0_PLD_ORT0 0x40010230u
N#define CYDEV_UCFG_B0_P1_U0_PLD_ORT1 0x40010232u
N#define CYDEV_UCFG_B0_P1_U0_PLD_ORT2 0x40010234u
N#define CYDEV_UCFG_B0_P1_U0_PLD_ORT3 0x40010236u
N#define CYDEV_UCFG_B0_P1_U0_MC_CFG_CEN_CONST 0x40010238u
N#define CYDEV_UCFG_B0_P1_U0_MC_CFG_XORFB 0x4001023au
N#define CYDEV_UCFG_B0_P1_U0_MC_CFG_SET_RESET 0x4001023cu
N#define CYDEV_UCFG_B0_P1_U0_MC_CFG_BYPASS 0x4001023eu
N#define CYDEV_UCFG_B0_P1_U0_CFG0 0x40010240u
N#define CYDEV_UCFG_B0_P1_U0_CFG1 0x40010241u
N#define CYDEV_UCFG_B0_P1_U0_CFG2 0x40010242u
N#define CYDEV_UCFG_B0_P1_U0_CFG3 0x40010243u
N#define CYDEV_UCFG_B0_P1_U0_CFG4 0x40010244u
N#define CYDEV_UCFG_B0_P1_U0_CFG5 0x40010245u
N#define CYDEV_UCFG_B0_P1_U0_CFG6 0x40010246u
N#define CYDEV_UCFG_B0_P1_U0_CFG7 0x40010247u
N#define CYDEV_UCFG_B0_P1_U0_CFG8 0x40010248u
N#define CYDEV_UCFG_B0_P1_U0_CFG9 0x40010249u
N#define CYDEV_UCFG_B0_P1_U0_CFG10 0x4001024au
N#define CYDEV_UCFG_B0_P1_U0_CFG11 0x4001024bu
N#define CYDEV_UCFG_B0_P1_U0_CFG12 0x4001024cu
N#define CYDEV_UCFG_B0_P1_U0_CFG13 0x4001024du
N#define CYDEV_UCFG_B0_P1_U0_CFG14 0x4001024eu
N#define CYDEV_UCFG_B0_P1_U0_CFG15 0x4001024fu
N#define CYDEV_UCFG_B0_P1_U0_CFG16 0x40010250u
N#define CYDEV_UCFG_B0_P1_U0_CFG17 0x40010251u
N#define CYDEV_UCFG_B0_P1_U0_CFG18 0x40010252u
N#define CYDEV_UCFG_B0_P1_U0_CFG19 0x40010253u
N#define CYDEV_UCFG_B0_P1_U0_CFG20 0x40010254u
N#define CYDEV_UCFG_B0_P1_U0_CFG21 0x40010255u
N#define CYDEV_UCFG_B0_P1_U0_CFG22 0x40010256u
N#define CYDEV_UCFG_B0_P1_U0_CFG23 0x40010257u
N#define CYDEV_UCFG_B0_P1_U0_CFG24 0x40010258u
N#define CYDEV_UCFG_B0_P1_U0_CFG25 0x40010259u
N#define CYDEV_UCFG_B0_P1_U0_CFG26 0x4001025au
N#define CYDEV_UCFG_B0_P1_U0_CFG27 0x4001025bu
N#define CYDEV_UCFG_B0_P1_U0_CFG28 0x4001025cu
N#define CYDEV_UCFG_B0_P1_U0_CFG29 0x4001025du
N#define CYDEV_UCFG_B0_P1_U0_CFG30 0x4001025eu
N#define CYDEV_UCFG_B0_P1_U0_CFG31 0x4001025fu
N#define CYDEV_UCFG_B0_P1_U0_DCFG0 0x40010260u
N#define CYDEV_UCFG_B0_P1_U0_DCFG1 0x40010262u
N#define CYDEV_UCFG_B0_P1_U0_DCFG2 0x40010264u
N#define CYDEV_UCFG_B0_P1_U0_DCFG3 0x40010266u
N#define CYDEV_UCFG_B0_P1_U0_DCFG4 0x40010268u
N#define CYDEV_UCFG_B0_P1_U0_DCFG5 0x4001026au
N#define CYDEV_UCFG_B0_P1_U0_DCFG6 0x4001026cu
N#define CYDEV_UCFG_B0_P1_U0_DCFG7 0x4001026eu
N#define CYDEV_UCFG_B0_P1_U1_BASE 0x40010280u
N#define CYDEV_UCFG_B0_P1_U1_SIZE 0x00000070u
N#define CYDEV_UCFG_B0_P1_U1_PLD_IT0 0x40010280u
N#define CYDEV_UCFG_B0_P1_U1_PLD_IT1 0x40010284u
N#define CYDEV_UCFG_B0_P1_U1_PLD_IT2 0x40010288u
N#define CYDEV_UCFG_B0_P1_U1_PLD_IT3 0x4001028cu
N#define CYDEV_UCFG_B0_P1_U1_PLD_IT4 0x40010290u
N#define CYDEV_UCFG_B0_P1_U1_PLD_IT5 0x40010294u
N#define CYDEV_UCFG_B0_P1_U1_PLD_IT6 0x40010298u
N#define CYDEV_UCFG_B0_P1_U1_PLD_IT7 0x4001029cu
N#define CYDEV_UCFG_B0_P1_U1_PLD_IT8 0x400102a0u
N#define CYDEV_UCFG_B0_P1_U1_PLD_IT9 0x400102a4u
N#define CYDEV_UCFG_B0_P1_U1_PLD_IT10 0x400102a8u
N#define CYDEV_UCFG_B0_P1_U1_PLD_IT11 0x400102acu
N#define CYDEV_UCFG_B0_P1_U1_PLD_ORT0 0x400102b0u
N#define CYDEV_UCFG_B0_P1_U1_PLD_ORT1 0x400102b2u
N#define CYDEV_UCFG_B0_P1_U1_PLD_ORT2 0x400102b4u
N#define CYDEV_UCFG_B0_P1_U1_PLD_ORT3 0x400102b6u
N#define CYDEV_UCFG_B0_P1_U1_MC_CFG_CEN_CONST 0x400102b8u
N#define CYDEV_UCFG_B0_P1_U1_MC_CFG_XORFB 0x400102bau
N#define CYDEV_UCFG_B0_P1_U1_MC_CFG_SET_RESET 0x400102bcu
N#define CYDEV_UCFG_B0_P1_U1_MC_CFG_BYPASS 0x400102beu
N#define CYDEV_UCFG_B0_P1_U1_CFG0 0x400102c0u
N#define CYDEV_UCFG_B0_P1_U1_CFG1 0x400102c1u
N#define CYDEV_UCFG_B0_P1_U1_CFG2 0x400102c2u
N#define CYDEV_UCFG_B0_P1_U1_CFG3 0x400102c3u
N#define CYDEV_UCFG_B0_P1_U1_CFG4 0x400102c4u
N#define CYDEV_UCFG_B0_P1_U1_CFG5 0x400102c5u
N#define CYDEV_UCFG_B0_P1_U1_CFG6 0x400102c6u
N#define CYDEV_UCFG_B0_P1_U1_CFG7 0x400102c7u
N#define CYDEV_UCFG_B0_P1_U1_CFG8 0x400102c8u
N#define CYDEV_UCFG_B0_P1_U1_CFG9 0x400102c9u
N#define CYDEV_UCFG_B0_P1_U1_CFG10 0x400102cau
N#define CYDEV_UCFG_B0_P1_U1_CFG11 0x400102cbu
N#define CYDEV_UCFG_B0_P1_U1_CFG12 0x400102ccu
N#define CYDEV_UCFG_B0_P1_U1_CFG13 0x400102cdu
N#define CYDEV_UCFG_B0_P1_U1_CFG14 0x400102ceu
N#define CYDEV_UCFG_B0_P1_U1_CFG15 0x400102cfu
N#define CYDEV_UCFG_B0_P1_U1_CFG16 0x400102d0u
N#define CYDEV_UCFG_B0_P1_U1_CFG17 0x400102d1u
N#define CYDEV_UCFG_B0_P1_U1_CFG18 0x400102d2u
N#define CYDEV_UCFG_B0_P1_U1_CFG19 0x400102d3u
N#define CYDEV_UCFG_B0_P1_U1_CFG20 0x400102d4u
N#define CYDEV_UCFG_B0_P1_U1_CFG21 0x400102d5u
N#define CYDEV_UCFG_B0_P1_U1_CFG22 0x400102d6u
N#define CYDEV_UCFG_B0_P1_U1_CFG23 0x400102d7u
N#define CYDEV_UCFG_B0_P1_U1_CFG24 0x400102d8u
N#define CYDEV_UCFG_B0_P1_U1_CFG25 0x400102d9u
N#define CYDEV_UCFG_B0_P1_U1_CFG26 0x400102dau
N#define CYDEV_UCFG_B0_P1_U1_CFG27 0x400102dbu
N#define CYDEV_UCFG_B0_P1_U1_CFG28 0x400102dcu
N#define CYDEV_UCFG_B0_P1_U1_CFG29 0x400102ddu
N#define CYDEV_UCFG_B0_P1_U1_CFG30 0x400102deu
N#define CYDEV_UCFG_B0_P1_U1_CFG31 0x400102dfu
N#define CYDEV_UCFG_B0_P1_U1_DCFG0 0x400102e0u
N#define CYDEV_UCFG_B0_P1_U1_DCFG1 0x400102e2u
N#define CYDEV_UCFG_B0_P1_U1_DCFG2 0x400102e4u
N#define CYDEV_UCFG_B0_P1_U1_DCFG3 0x400102e6u
N#define CYDEV_UCFG_B0_P1_U1_DCFG4 0x400102e8u
N#define CYDEV_UCFG_B0_P1_U1_DCFG5 0x400102eau
N#define CYDEV_UCFG_B0_P1_U1_DCFG6 0x400102ecu
N#define CYDEV_UCFG_B0_P1_U1_DCFG7 0x400102eeu
N#define CYDEV_UCFG_B0_P1_ROUTE_BASE 0x40010300u
N#define CYDEV_UCFG_B0_P1_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B0_P2_BASE 0x40010400u
N#define CYDEV_UCFG_B0_P2_SIZE 0x000001efu
N#define CYDEV_UCFG_B0_P2_U0_BASE 0x40010400u
N#define CYDEV_UCFG_B0_P2_U0_SIZE 0x00000070u
N#define CYDEV_UCFG_B0_P2_U0_PLD_IT0 0x40010400u
N#define CYDEV_UCFG_B0_P2_U0_PLD_IT1 0x40010404u
N#define CYDEV_UCFG_B0_P2_U0_PLD_IT2 0x40010408u
N#define CYDEV_UCFG_B0_P2_U0_PLD_IT3 0x4001040cu
N#define CYDEV_UCFG_B0_P2_U0_PLD_IT4 0x40010410u
N#define CYDEV_UCFG_B0_P2_U0_PLD_IT5 0x40010414u
N#define CYDEV_UCFG_B0_P2_U0_PLD_IT6 0x40010418u
N#define CYDEV_UCFG_B0_P2_U0_PLD_IT7 0x4001041cu
N#define CYDEV_UCFG_B0_P2_U0_PLD_IT8 0x40010420u
N#define CYDEV_UCFG_B0_P2_U0_PLD_IT9 0x40010424u
N#define CYDEV_UCFG_B0_P2_U0_PLD_IT10 0x40010428u
N#define CYDEV_UCFG_B0_P2_U0_PLD_IT11 0x4001042cu
N#define CYDEV_UCFG_B0_P2_U0_PLD_ORT0 0x40010430u
N#define CYDEV_UCFG_B0_P2_U0_PLD_ORT1 0x40010432u
N#define CYDEV_UCFG_B0_P2_U0_PLD_ORT2 0x40010434u
N#define CYDEV_UCFG_B0_P2_U0_PLD_ORT3 0x40010436u
N#define CYDEV_UCFG_B0_P2_U0_MC_CFG_CEN_CONST 0x40010438u
N#define CYDEV_UCFG_B0_P2_U0_MC_CFG_XORFB 0x4001043au
N#define CYDEV_UCFG_B0_P2_U0_MC_CFG_SET_RESET 0x4001043cu
N#define CYDEV_UCFG_B0_P2_U0_MC_CFG_BYPASS 0x4001043eu
N#define CYDEV_UCFG_B0_P2_U0_CFG0 0x40010440u
N#define CYDEV_UCFG_B0_P2_U0_CFG1 0x40010441u
N#define CYDEV_UCFG_B0_P2_U0_CFG2 0x40010442u
N#define CYDEV_UCFG_B0_P2_U0_CFG3 0x40010443u
N#define CYDEV_UCFG_B0_P2_U0_CFG4 0x40010444u
N#define CYDEV_UCFG_B0_P2_U0_CFG5 0x40010445u
N#define CYDEV_UCFG_B0_P2_U0_CFG6 0x40010446u
N#define CYDEV_UCFG_B0_P2_U0_CFG7 0x40010447u
N#define CYDEV_UCFG_B0_P2_U0_CFG8 0x40010448u
N#define CYDEV_UCFG_B0_P2_U0_CFG9 0x40010449u
N#define CYDEV_UCFG_B0_P2_U0_CFG10 0x4001044au
N#define CYDEV_UCFG_B0_P2_U0_CFG11 0x4001044bu
N#define CYDEV_UCFG_B0_P2_U0_CFG12 0x4001044cu
N#define CYDEV_UCFG_B0_P2_U0_CFG13 0x4001044du
N#define CYDEV_UCFG_B0_P2_U0_CFG14 0x4001044eu
N#define CYDEV_UCFG_B0_P2_U0_CFG15 0x4001044fu
N#define CYDEV_UCFG_B0_P2_U0_CFG16 0x40010450u
N#define CYDEV_UCFG_B0_P2_U0_CFG17 0x40010451u
N#define CYDEV_UCFG_B0_P2_U0_CFG18 0x40010452u
N#define CYDEV_UCFG_B0_P2_U0_CFG19 0x40010453u
N#define CYDEV_UCFG_B0_P2_U0_CFG20 0x40010454u
N#define CYDEV_UCFG_B0_P2_U0_CFG21 0x40010455u
N#define CYDEV_UCFG_B0_P2_U0_CFG22 0x40010456u
N#define CYDEV_UCFG_B0_P2_U0_CFG23 0x40010457u
N#define CYDEV_UCFG_B0_P2_U0_CFG24 0x40010458u
N#define CYDEV_UCFG_B0_P2_U0_CFG25 0x40010459u
N#define CYDEV_UCFG_B0_P2_U0_CFG26 0x4001045au
N#define CYDEV_UCFG_B0_P2_U0_CFG27 0x4001045bu
N#define CYDEV_UCFG_B0_P2_U0_CFG28 0x4001045cu
N#define CYDEV_UCFG_B0_P2_U0_CFG29 0x4001045du
N#define CYDEV_UCFG_B0_P2_U0_CFG30 0x4001045eu
N#define CYDEV_UCFG_B0_P2_U0_CFG31 0x4001045fu
N#define CYDEV_UCFG_B0_P2_U0_DCFG0 0x40010460u
N#define CYDEV_UCFG_B0_P2_U0_DCFG1 0x40010462u
N#define CYDEV_UCFG_B0_P2_U0_DCFG2 0x40010464u
N#define CYDEV_UCFG_B0_P2_U0_DCFG3 0x40010466u
N#define CYDEV_UCFG_B0_P2_U0_DCFG4 0x40010468u
N#define CYDEV_UCFG_B0_P2_U0_DCFG5 0x4001046au
N#define CYDEV_UCFG_B0_P2_U0_DCFG6 0x4001046cu
N#define CYDEV_UCFG_B0_P2_U0_DCFG7 0x4001046eu
N#define CYDEV_UCFG_B0_P2_U1_BASE 0x40010480u
N#define CYDEV_UCFG_B0_P2_U1_SIZE 0x00000070u
N#define CYDEV_UCFG_B0_P2_U1_PLD_IT0 0x40010480u
N#define CYDEV_UCFG_B0_P2_U1_PLD_IT1 0x40010484u
N#define CYDEV_UCFG_B0_P2_U1_PLD_IT2 0x40010488u
N#define CYDEV_UCFG_B0_P2_U1_PLD_IT3 0x4001048cu
N#define CYDEV_UCFG_B0_P2_U1_PLD_IT4 0x40010490u
N#define CYDEV_UCFG_B0_P2_U1_PLD_IT5 0x40010494u
N#define CYDEV_UCFG_B0_P2_U1_PLD_IT6 0x40010498u
N#define CYDEV_UCFG_B0_P2_U1_PLD_IT7 0x4001049cu
N#define CYDEV_UCFG_B0_P2_U1_PLD_IT8 0x400104a0u
N#define CYDEV_UCFG_B0_P2_U1_PLD_IT9 0x400104a4u
N#define CYDEV_UCFG_B0_P2_U1_PLD_IT10 0x400104a8u
N#define CYDEV_UCFG_B0_P2_U1_PLD_IT11 0x400104acu
N#define CYDEV_UCFG_B0_P2_U1_PLD_ORT0 0x400104b0u
N#define CYDEV_UCFG_B0_P2_U1_PLD_ORT1 0x400104b2u
N#define CYDEV_UCFG_B0_P2_U1_PLD_ORT2 0x400104b4u
N#define CYDEV_UCFG_B0_P2_U1_PLD_ORT3 0x400104b6u
N#define CYDEV_UCFG_B0_P2_U1_MC_CFG_CEN_CONST 0x400104b8u
N#define CYDEV_UCFG_B0_P2_U1_MC_CFG_XORFB 0x400104bau
N#define CYDEV_UCFG_B0_P2_U1_MC_CFG_SET_RESET 0x400104bcu
N#define CYDEV_UCFG_B0_P2_U1_MC_CFG_BYPASS 0x400104beu
N#define CYDEV_UCFG_B0_P2_U1_CFG0 0x400104c0u
N#define CYDEV_UCFG_B0_P2_U1_CFG1 0x400104c1u
N#define CYDEV_UCFG_B0_P2_U1_CFG2 0x400104c2u
N#define CYDEV_UCFG_B0_P2_U1_CFG3 0x400104c3u
N#define CYDEV_UCFG_B0_P2_U1_CFG4 0x400104c4u
N#define CYDEV_UCFG_B0_P2_U1_CFG5 0x400104c5u
N#define CYDEV_UCFG_B0_P2_U1_CFG6 0x400104c6u
N#define CYDEV_UCFG_B0_P2_U1_CFG7 0x400104c7u
N#define CYDEV_UCFG_B0_P2_U1_CFG8 0x400104c8u
N#define CYDEV_UCFG_B0_P2_U1_CFG9 0x400104c9u
N#define CYDEV_UCFG_B0_P2_U1_CFG10 0x400104cau
N#define CYDEV_UCFG_B0_P2_U1_CFG11 0x400104cbu
N#define CYDEV_UCFG_B0_P2_U1_CFG12 0x400104ccu
N#define CYDEV_UCFG_B0_P2_U1_CFG13 0x400104cdu
N#define CYDEV_UCFG_B0_P2_U1_CFG14 0x400104ceu
N#define CYDEV_UCFG_B0_P2_U1_CFG15 0x400104cfu
N#define CYDEV_UCFG_B0_P2_U1_CFG16 0x400104d0u
N#define CYDEV_UCFG_B0_P2_U1_CFG17 0x400104d1u
N#define CYDEV_UCFG_B0_P2_U1_CFG18 0x400104d2u
N#define CYDEV_UCFG_B0_P2_U1_CFG19 0x400104d3u
N#define CYDEV_UCFG_B0_P2_U1_CFG20 0x400104d4u
N#define CYDEV_UCFG_B0_P2_U1_CFG21 0x400104d5u
N#define CYDEV_UCFG_B0_P2_U1_CFG22 0x400104d6u
N#define CYDEV_UCFG_B0_P2_U1_CFG23 0x400104d7u
N#define CYDEV_UCFG_B0_P2_U1_CFG24 0x400104d8u
N#define CYDEV_UCFG_B0_P2_U1_CFG25 0x400104d9u
N#define CYDEV_UCFG_B0_P2_U1_CFG26 0x400104dau
N#define CYDEV_UCFG_B0_P2_U1_CFG27 0x400104dbu
N#define CYDEV_UCFG_B0_P2_U1_CFG28 0x400104dcu
N#define CYDEV_UCFG_B0_P2_U1_CFG29 0x400104ddu
N#define CYDEV_UCFG_B0_P2_U1_CFG30 0x400104deu
N#define CYDEV_UCFG_B0_P2_U1_CFG31 0x400104dfu
N#define CYDEV_UCFG_B0_P2_U1_DCFG0 0x400104e0u
N#define CYDEV_UCFG_B0_P2_U1_DCFG1 0x400104e2u
N#define CYDEV_UCFG_B0_P2_U1_DCFG2 0x400104e4u
N#define CYDEV_UCFG_B0_P2_U1_DCFG3 0x400104e6u
N#define CYDEV_UCFG_B0_P2_U1_DCFG4 0x400104e8u
N#define CYDEV_UCFG_B0_P2_U1_DCFG5 0x400104eau
N#define CYDEV_UCFG_B0_P2_U1_DCFG6 0x400104ecu
N#define CYDEV_UCFG_B0_P2_U1_DCFG7 0x400104eeu
N#define CYDEV_UCFG_B0_P2_ROUTE_BASE 0x40010500u
N#define CYDEV_UCFG_B0_P2_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B0_P3_BASE 0x40010600u
N#define CYDEV_UCFG_B0_P3_SIZE 0x000001efu
N#define CYDEV_UCFG_B0_P3_U0_BASE 0x40010600u
N#define CYDEV_UCFG_B0_P3_U0_SIZE 0x00000070u
N#define CYDEV_UCFG_B0_P3_U0_PLD_IT0 0x40010600u
N#define CYDEV_UCFG_B0_P3_U0_PLD_IT1 0x40010604u
N#define CYDEV_UCFG_B0_P3_U0_PLD_IT2 0x40010608u
N#define CYDEV_UCFG_B0_P3_U0_PLD_IT3 0x4001060cu
N#define CYDEV_UCFG_B0_P3_U0_PLD_IT4 0x40010610u
N#define CYDEV_UCFG_B0_P3_U0_PLD_IT5 0x40010614u
N#define CYDEV_UCFG_B0_P3_U0_PLD_IT6 0x40010618u
N#define CYDEV_UCFG_B0_P3_U0_PLD_IT7 0x4001061cu
N#define CYDEV_UCFG_B0_P3_U0_PLD_IT8 0x40010620u
N#define CYDEV_UCFG_B0_P3_U0_PLD_IT9 0x40010624u
N#define CYDEV_UCFG_B0_P3_U0_PLD_IT10 0x40010628u
N#define CYDEV_UCFG_B0_P3_U0_PLD_IT11 0x4001062cu
N#define CYDEV_UCFG_B0_P3_U0_PLD_ORT0 0x40010630u
N#define CYDEV_UCFG_B0_P3_U0_PLD_ORT1 0x40010632u
N#define CYDEV_UCFG_B0_P3_U0_PLD_ORT2 0x40010634u
N#define CYDEV_UCFG_B0_P3_U0_PLD_ORT3 0x40010636u
N#define CYDEV_UCFG_B0_P3_U0_MC_CFG_CEN_CONST 0x40010638u
N#define CYDEV_UCFG_B0_P3_U0_MC_CFG_XORFB 0x4001063au
N#define CYDEV_UCFG_B0_P3_U0_MC_CFG_SET_RESET 0x4001063cu
N#define CYDEV_UCFG_B0_P3_U0_MC_CFG_BYPASS 0x4001063eu
N#define CYDEV_UCFG_B0_P3_U0_CFG0 0x40010640u
N#define CYDEV_UCFG_B0_P3_U0_CFG1 0x40010641u
N#define CYDEV_UCFG_B0_P3_U0_CFG2 0x40010642u
N#define CYDEV_UCFG_B0_P3_U0_CFG3 0x40010643u
N#define CYDEV_UCFG_B0_P3_U0_CFG4 0x40010644u
N#define CYDEV_UCFG_B0_P3_U0_CFG5 0x40010645u
N#define CYDEV_UCFG_B0_P3_U0_CFG6 0x40010646u
N#define CYDEV_UCFG_B0_P3_U0_CFG7 0x40010647u
N#define CYDEV_UCFG_B0_P3_U0_CFG8 0x40010648u
N#define CYDEV_UCFG_B0_P3_U0_CFG9 0x40010649u
N#define CYDEV_UCFG_B0_P3_U0_CFG10 0x4001064au
N#define CYDEV_UCFG_B0_P3_U0_CFG11 0x4001064bu
N#define CYDEV_UCFG_B0_P3_U0_CFG12 0x4001064cu
N#define CYDEV_UCFG_B0_P3_U0_CFG13 0x4001064du
N#define CYDEV_UCFG_B0_P3_U0_CFG14 0x4001064eu
N#define CYDEV_UCFG_B0_P3_U0_CFG15 0x4001064fu
N#define CYDEV_UCFG_B0_P3_U0_CFG16 0x40010650u
N#define CYDEV_UCFG_B0_P3_U0_CFG17 0x40010651u
N#define CYDEV_UCFG_B0_P3_U0_CFG18 0x40010652u
N#define CYDEV_UCFG_B0_P3_U0_CFG19 0x40010653u
N#define CYDEV_UCFG_B0_P3_U0_CFG20 0x40010654u
N#define CYDEV_UCFG_B0_P3_U0_CFG21 0x40010655u
N#define CYDEV_UCFG_B0_P3_U0_CFG22 0x40010656u
N#define CYDEV_UCFG_B0_P3_U0_CFG23 0x40010657u
N#define CYDEV_UCFG_B0_P3_U0_CFG24 0x40010658u
N#define CYDEV_UCFG_B0_P3_U0_CFG25 0x40010659u
N#define CYDEV_UCFG_B0_P3_U0_CFG26 0x4001065au
N#define CYDEV_UCFG_B0_P3_U0_CFG27 0x4001065bu
N#define CYDEV_UCFG_B0_P3_U0_CFG28 0x4001065cu
N#define CYDEV_UCFG_B0_P3_U0_CFG29 0x4001065du
N#define CYDEV_UCFG_B0_P3_U0_CFG30 0x4001065eu
N#define CYDEV_UCFG_B0_P3_U0_CFG31 0x4001065fu
N#define CYDEV_UCFG_B0_P3_U0_DCFG0 0x40010660u
N#define CYDEV_UCFG_B0_P3_U0_DCFG1 0x40010662u
N#define CYDEV_UCFG_B0_P3_U0_DCFG2 0x40010664u
N#define CYDEV_UCFG_B0_P3_U0_DCFG3 0x40010666u
N#define CYDEV_UCFG_B0_P3_U0_DCFG4 0x40010668u
N#define CYDEV_UCFG_B0_P3_U0_DCFG5 0x4001066au
N#define CYDEV_UCFG_B0_P3_U0_DCFG6 0x4001066cu
N#define CYDEV_UCFG_B0_P3_U0_DCFG7 0x4001066eu
N#define CYDEV_UCFG_B0_P3_U1_BASE 0x40010680u
N#define CYDEV_UCFG_B0_P3_U1_SIZE 0x00000070u
N#define CYDEV_UCFG_B0_P3_U1_PLD_IT0 0x40010680u
N#define CYDEV_UCFG_B0_P3_U1_PLD_IT1 0x40010684u
N#define CYDEV_UCFG_B0_P3_U1_PLD_IT2 0x40010688u
N#define CYDEV_UCFG_B0_P3_U1_PLD_IT3 0x4001068cu
N#define CYDEV_UCFG_B0_P3_U1_PLD_IT4 0x40010690u
N#define CYDEV_UCFG_B0_P3_U1_PLD_IT5 0x40010694u
N#define CYDEV_UCFG_B0_P3_U1_PLD_IT6 0x40010698u
N#define CYDEV_UCFG_B0_P3_U1_PLD_IT7 0x4001069cu
N#define CYDEV_UCFG_B0_P3_U1_PLD_IT8 0x400106a0u
N#define CYDEV_UCFG_B0_P3_U1_PLD_IT9 0x400106a4u
N#define CYDEV_UCFG_B0_P3_U1_PLD_IT10 0x400106a8u
N#define CYDEV_UCFG_B0_P3_U1_PLD_IT11 0x400106acu
N#define CYDEV_UCFG_B0_P3_U1_PLD_ORT0 0x400106b0u
N#define CYDEV_UCFG_B0_P3_U1_PLD_ORT1 0x400106b2u
N#define CYDEV_UCFG_B0_P3_U1_PLD_ORT2 0x400106b4u
N#define CYDEV_UCFG_B0_P3_U1_PLD_ORT3 0x400106b6u
N#define CYDEV_UCFG_B0_P3_U1_MC_CFG_CEN_CONST 0x400106b8u
N#define CYDEV_UCFG_B0_P3_U1_MC_CFG_XORFB 0x400106bau
N#define CYDEV_UCFG_B0_P3_U1_MC_CFG_SET_RESET 0x400106bcu
N#define CYDEV_UCFG_B0_P3_U1_MC_CFG_BYPASS 0x400106beu
N#define CYDEV_UCFG_B0_P3_U1_CFG0 0x400106c0u
N#define CYDEV_UCFG_B0_P3_U1_CFG1 0x400106c1u
N#define CYDEV_UCFG_B0_P3_U1_CFG2 0x400106c2u
N#define CYDEV_UCFG_B0_P3_U1_CFG3 0x400106c3u
N#define CYDEV_UCFG_B0_P3_U1_CFG4 0x400106c4u
N#define CYDEV_UCFG_B0_P3_U1_CFG5 0x400106c5u
N#define CYDEV_UCFG_B0_P3_U1_CFG6 0x400106c6u
N#define CYDEV_UCFG_B0_P3_U1_CFG7 0x400106c7u
N#define CYDEV_UCFG_B0_P3_U1_CFG8 0x400106c8u
N#define CYDEV_UCFG_B0_P3_U1_CFG9 0x400106c9u
N#define CYDEV_UCFG_B0_P3_U1_CFG10 0x400106cau
N#define CYDEV_UCFG_B0_P3_U1_CFG11 0x400106cbu
N#define CYDEV_UCFG_B0_P3_U1_CFG12 0x400106ccu
N#define CYDEV_UCFG_B0_P3_U1_CFG13 0x400106cdu
N#define CYDEV_UCFG_B0_P3_U1_CFG14 0x400106ceu
N#define CYDEV_UCFG_B0_P3_U1_CFG15 0x400106cfu
N#define CYDEV_UCFG_B0_P3_U1_CFG16 0x400106d0u
N#define CYDEV_UCFG_B0_P3_U1_CFG17 0x400106d1u
N#define CYDEV_UCFG_B0_P3_U1_CFG18 0x400106d2u
N#define CYDEV_UCFG_B0_P3_U1_CFG19 0x400106d3u
N#define CYDEV_UCFG_B0_P3_U1_CFG20 0x400106d4u
N#define CYDEV_UCFG_B0_P3_U1_CFG21 0x400106d5u
N#define CYDEV_UCFG_B0_P3_U1_CFG22 0x400106d6u
N#define CYDEV_UCFG_B0_P3_U1_CFG23 0x400106d7u
N#define CYDEV_UCFG_B0_P3_U1_CFG24 0x400106d8u
N#define CYDEV_UCFG_B0_P3_U1_CFG25 0x400106d9u
N#define CYDEV_UCFG_B0_P3_U1_CFG26 0x400106dau
N#define CYDEV_UCFG_B0_P3_U1_CFG27 0x400106dbu
N#define CYDEV_UCFG_B0_P3_U1_CFG28 0x400106dcu
N#define CYDEV_UCFG_B0_P3_U1_CFG29 0x400106ddu
N#define CYDEV_UCFG_B0_P3_U1_CFG30 0x400106deu
N#define CYDEV_UCFG_B0_P3_U1_CFG31 0x400106dfu
N#define CYDEV_UCFG_B0_P3_U1_DCFG0 0x400106e0u
N#define CYDEV_UCFG_B0_P3_U1_DCFG1 0x400106e2u
N#define CYDEV_UCFG_B0_P3_U1_DCFG2 0x400106e4u
N#define CYDEV_UCFG_B0_P3_U1_DCFG3 0x400106e6u
N#define CYDEV_UCFG_B0_P3_U1_DCFG4 0x400106e8u
N#define CYDEV_UCFG_B0_P3_U1_DCFG5 0x400106eau
N#define CYDEV_UCFG_B0_P3_U1_DCFG6 0x400106ecu
N#define CYDEV_UCFG_B0_P3_U1_DCFG7 0x400106eeu
N#define CYDEV_UCFG_B0_P3_ROUTE_BASE 0x40010700u
N#define CYDEV_UCFG_B0_P3_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B0_P4_BASE 0x40010800u
N#define CYDEV_UCFG_B0_P4_SIZE 0x000001efu
N#define CYDEV_UCFG_B0_P4_U0_BASE 0x40010800u
N#define CYDEV_UCFG_B0_P4_U0_SIZE 0x00000070u
N#define CYDEV_UCFG_B0_P4_U0_PLD_IT0 0x40010800u
N#define CYDEV_UCFG_B0_P4_U0_PLD_IT1 0x40010804u
N#define CYDEV_UCFG_B0_P4_U0_PLD_IT2 0x40010808u
N#define CYDEV_UCFG_B0_P4_U0_PLD_IT3 0x4001080cu
N#define CYDEV_UCFG_B0_P4_U0_PLD_IT4 0x40010810u
N#define CYDEV_UCFG_B0_P4_U0_PLD_IT5 0x40010814u
N#define CYDEV_UCFG_B0_P4_U0_PLD_IT6 0x40010818u
N#define CYDEV_UCFG_B0_P4_U0_PLD_IT7 0x4001081cu
N#define CYDEV_UCFG_B0_P4_U0_PLD_IT8 0x40010820u
N#define CYDEV_UCFG_B0_P4_U0_PLD_IT9 0x40010824u
N#define CYDEV_UCFG_B0_P4_U0_PLD_IT10 0x40010828u
N#define CYDEV_UCFG_B0_P4_U0_PLD_IT11 0x4001082cu
N#define CYDEV_UCFG_B0_P4_U0_PLD_ORT0 0x40010830u
N#define CYDEV_UCFG_B0_P4_U0_PLD_ORT1 0x40010832u
N#define CYDEV_UCFG_B0_P4_U0_PLD_ORT2 0x40010834u
N#define CYDEV_UCFG_B0_P4_U0_PLD_ORT3 0x40010836u
N#define CYDEV_UCFG_B0_P4_U0_MC_CFG_CEN_CONST 0x40010838u
N#define CYDEV_UCFG_B0_P4_U0_MC_CFG_XORFB 0x4001083au
N#define CYDEV_UCFG_B0_P4_U0_MC_CFG_SET_RESET 0x4001083cu
N#define CYDEV_UCFG_B0_P4_U0_MC_CFG_BYPASS 0x4001083eu
N#define CYDEV_UCFG_B0_P4_U0_CFG0 0x40010840u
N#define CYDEV_UCFG_B0_P4_U0_CFG1 0x40010841u
N#define CYDEV_UCFG_B0_P4_U0_CFG2 0x40010842u
N#define CYDEV_UCFG_B0_P4_U0_CFG3 0x40010843u
N#define CYDEV_UCFG_B0_P4_U0_CFG4 0x40010844u
N#define CYDEV_UCFG_B0_P4_U0_CFG5 0x40010845u
N#define CYDEV_UCFG_B0_P4_U0_CFG6 0x40010846u
N#define CYDEV_UCFG_B0_P4_U0_CFG7 0x40010847u
N#define CYDEV_UCFG_B0_P4_U0_CFG8 0x40010848u
N#define CYDEV_UCFG_B0_P4_U0_CFG9 0x40010849u
N#define CYDEV_UCFG_B0_P4_U0_CFG10 0x4001084au
N#define CYDEV_UCFG_B0_P4_U0_CFG11 0x4001084bu
N#define CYDEV_UCFG_B0_P4_U0_CFG12 0x4001084cu
N#define CYDEV_UCFG_B0_P4_U0_CFG13 0x4001084du
N#define CYDEV_UCFG_B0_P4_U0_CFG14 0x4001084eu
N#define CYDEV_UCFG_B0_P4_U0_CFG15 0x4001084fu
N#define CYDEV_UCFG_B0_P4_U0_CFG16 0x40010850u
N#define CYDEV_UCFG_B0_P4_U0_CFG17 0x40010851u
N#define CYDEV_UCFG_B0_P4_U0_CFG18 0x40010852u
N#define CYDEV_UCFG_B0_P4_U0_CFG19 0x40010853u
N#define CYDEV_UCFG_B0_P4_U0_CFG20 0x40010854u
N#define CYDEV_UCFG_B0_P4_U0_CFG21 0x40010855u
N#define CYDEV_UCFG_B0_P4_U0_CFG22 0x40010856u
N#define CYDEV_UCFG_B0_P4_U0_CFG23 0x40010857u
N#define CYDEV_UCFG_B0_P4_U0_CFG24 0x40010858u
N#define CYDEV_UCFG_B0_P4_U0_CFG25 0x40010859u
N#define CYDEV_UCFG_B0_P4_U0_CFG26 0x4001085au
N#define CYDEV_UCFG_B0_P4_U0_CFG27 0x4001085bu
N#define CYDEV_UCFG_B0_P4_U0_CFG28 0x4001085cu
N#define CYDEV_UCFG_B0_P4_U0_CFG29 0x4001085du
N#define CYDEV_UCFG_B0_P4_U0_CFG30 0x4001085eu
N#define CYDEV_UCFG_B0_P4_U0_CFG31 0x4001085fu
N#define CYDEV_UCFG_B0_P4_U0_DCFG0 0x40010860u
N#define CYDEV_UCFG_B0_P4_U0_DCFG1 0x40010862u
N#define CYDEV_UCFG_B0_P4_U0_DCFG2 0x40010864u
N#define CYDEV_UCFG_B0_P4_U0_DCFG3 0x40010866u
N#define CYDEV_UCFG_B0_P4_U0_DCFG4 0x40010868u
N#define CYDEV_UCFG_B0_P4_U0_DCFG5 0x4001086au
N#define CYDEV_UCFG_B0_P4_U0_DCFG6 0x4001086cu
N#define CYDEV_UCFG_B0_P4_U0_DCFG7 0x4001086eu
N#define CYDEV_UCFG_B0_P4_U1_BASE 0x40010880u
N#define CYDEV_UCFG_B0_P4_U1_SIZE 0x00000070u
N#define CYDEV_UCFG_B0_P4_U1_PLD_IT0 0x40010880u
N#define CYDEV_UCFG_B0_P4_U1_PLD_IT1 0x40010884u
N#define CYDEV_UCFG_B0_P4_U1_PLD_IT2 0x40010888u
N#define CYDEV_UCFG_B0_P4_U1_PLD_IT3 0x4001088cu
N#define CYDEV_UCFG_B0_P4_U1_PLD_IT4 0x40010890u
N#define CYDEV_UCFG_B0_P4_U1_PLD_IT5 0x40010894u
N#define CYDEV_UCFG_B0_P4_U1_PLD_IT6 0x40010898u
N#define CYDEV_UCFG_B0_P4_U1_PLD_IT7 0x4001089cu
N#define CYDEV_UCFG_B0_P4_U1_PLD_IT8 0x400108a0u
N#define CYDEV_UCFG_B0_P4_U1_PLD_IT9 0x400108a4u
N#define CYDEV_UCFG_B0_P4_U1_PLD_IT10 0x400108a8u
N#define CYDEV_UCFG_B0_P4_U1_PLD_IT11 0x400108acu
N#define CYDEV_UCFG_B0_P4_U1_PLD_ORT0 0x400108b0u
N#define CYDEV_UCFG_B0_P4_U1_PLD_ORT1 0x400108b2u
N#define CYDEV_UCFG_B0_P4_U1_PLD_ORT2 0x400108b4u
N#define CYDEV_UCFG_B0_P4_U1_PLD_ORT3 0x400108b6u
N#define CYDEV_UCFG_B0_P4_U1_MC_CFG_CEN_CONST 0x400108b8u
N#define CYDEV_UCFG_B0_P4_U1_MC_CFG_XORFB 0x400108bau
N#define CYDEV_UCFG_B0_P4_U1_MC_CFG_SET_RESET 0x400108bcu
N#define CYDEV_UCFG_B0_P4_U1_MC_CFG_BYPASS 0x400108beu
N#define CYDEV_UCFG_B0_P4_U1_CFG0 0x400108c0u
N#define CYDEV_UCFG_B0_P4_U1_CFG1 0x400108c1u
N#define CYDEV_UCFG_B0_P4_U1_CFG2 0x400108c2u
N#define CYDEV_UCFG_B0_P4_U1_CFG3 0x400108c3u
N#define CYDEV_UCFG_B0_P4_U1_CFG4 0x400108c4u
N#define CYDEV_UCFG_B0_P4_U1_CFG5 0x400108c5u
N#define CYDEV_UCFG_B0_P4_U1_CFG6 0x400108c6u
N#define CYDEV_UCFG_B0_P4_U1_CFG7 0x400108c7u
N#define CYDEV_UCFG_B0_P4_U1_CFG8 0x400108c8u
N#define CYDEV_UCFG_B0_P4_U1_CFG9 0x400108c9u
N#define CYDEV_UCFG_B0_P4_U1_CFG10 0x400108cau
N#define CYDEV_UCFG_B0_P4_U1_CFG11 0x400108cbu
N#define CYDEV_UCFG_B0_P4_U1_CFG12 0x400108ccu
N#define CYDEV_UCFG_B0_P4_U1_CFG13 0x400108cdu
N#define CYDEV_UCFG_B0_P4_U1_CFG14 0x400108ceu
N#define CYDEV_UCFG_B0_P4_U1_CFG15 0x400108cfu
N#define CYDEV_UCFG_B0_P4_U1_CFG16 0x400108d0u
N#define CYDEV_UCFG_B0_P4_U1_CFG17 0x400108d1u
N#define CYDEV_UCFG_B0_P4_U1_CFG18 0x400108d2u
N#define CYDEV_UCFG_B0_P4_U1_CFG19 0x400108d3u
N#define CYDEV_UCFG_B0_P4_U1_CFG20 0x400108d4u
N#define CYDEV_UCFG_B0_P4_U1_CFG21 0x400108d5u
N#define CYDEV_UCFG_B0_P4_U1_CFG22 0x400108d6u
N#define CYDEV_UCFG_B0_P4_U1_CFG23 0x400108d7u
N#define CYDEV_UCFG_B0_P4_U1_CFG24 0x400108d8u
N#define CYDEV_UCFG_B0_P4_U1_CFG25 0x400108d9u
N#define CYDEV_UCFG_B0_P4_U1_CFG26 0x400108dau
N#define CYDEV_UCFG_B0_P4_U1_CFG27 0x400108dbu
N#define CYDEV_UCFG_B0_P4_U1_CFG28 0x400108dcu
N#define CYDEV_UCFG_B0_P4_U1_CFG29 0x400108ddu
N#define CYDEV_UCFG_B0_P4_U1_CFG30 0x400108deu
N#define CYDEV_UCFG_B0_P4_U1_CFG31 0x400108dfu
N#define CYDEV_UCFG_B0_P4_U1_DCFG0 0x400108e0u
N#define CYDEV_UCFG_B0_P4_U1_DCFG1 0x400108e2u
N#define CYDEV_UCFG_B0_P4_U1_DCFG2 0x400108e4u
N#define CYDEV_UCFG_B0_P4_U1_DCFG3 0x400108e6u
N#define CYDEV_UCFG_B0_P4_U1_DCFG4 0x400108e8u
N#define CYDEV_UCFG_B0_P4_U1_DCFG5 0x400108eau
N#define CYDEV_UCFG_B0_P4_U1_DCFG6 0x400108ecu
N#define CYDEV_UCFG_B0_P4_U1_DCFG7 0x400108eeu
N#define CYDEV_UCFG_B0_P4_ROUTE_BASE 0x40010900u
N#define CYDEV_UCFG_B0_P4_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B0_P5_BASE 0x40010a00u
N#define CYDEV_UCFG_B0_P5_SIZE 0x000001efu
N#define CYDEV_UCFG_B0_P5_U0_BASE 0x40010a00u
N#define CYDEV_UCFG_B0_P5_U0_SIZE 0x00000070u
N#define CYDEV_UCFG_B0_P5_U0_PLD_IT0 0x40010a00u
N#define CYDEV_UCFG_B0_P5_U0_PLD_IT1 0x40010a04u
N#define CYDEV_UCFG_B0_P5_U0_PLD_IT2 0x40010a08u
N#define CYDEV_UCFG_B0_P5_U0_PLD_IT3 0x40010a0cu
N#define CYDEV_UCFG_B0_P5_U0_PLD_IT4 0x40010a10u
N#define CYDEV_UCFG_B0_P5_U0_PLD_IT5 0x40010a14u
N#define CYDEV_UCFG_B0_P5_U0_PLD_IT6 0x40010a18u
N#define CYDEV_UCFG_B0_P5_U0_PLD_IT7 0x40010a1cu
N#define CYDEV_UCFG_B0_P5_U0_PLD_IT8 0x40010a20u
N#define CYDEV_UCFG_B0_P5_U0_PLD_IT9 0x40010a24u
N#define CYDEV_UCFG_B0_P5_U0_PLD_IT10 0x40010a28u
N#define CYDEV_UCFG_B0_P5_U0_PLD_IT11 0x40010a2cu
N#define CYDEV_UCFG_B0_P5_U0_PLD_ORT0 0x40010a30u
N#define CYDEV_UCFG_B0_P5_U0_PLD_ORT1 0x40010a32u
N#define CYDEV_UCFG_B0_P5_U0_PLD_ORT2 0x40010a34u
N#define CYDEV_UCFG_B0_P5_U0_PLD_ORT3 0x40010a36u
N#define CYDEV_UCFG_B0_P5_U0_MC_CFG_CEN_CONST 0x40010a38u
N#define CYDEV_UCFG_B0_P5_U0_MC_CFG_XORFB 0x40010a3au
N#define CYDEV_UCFG_B0_P5_U0_MC_CFG_SET_RESET 0x40010a3cu
N#define CYDEV_UCFG_B0_P5_U0_MC_CFG_BYPASS 0x40010a3eu
N#define CYDEV_UCFG_B0_P5_U0_CFG0 0x40010a40u
N#define CYDEV_UCFG_B0_P5_U0_CFG1 0x40010a41u
N#define CYDEV_UCFG_B0_P5_U0_CFG2 0x40010a42u
N#define CYDEV_UCFG_B0_P5_U0_CFG3 0x40010a43u
N#define CYDEV_UCFG_B0_P5_U0_CFG4 0x40010a44u
N#define CYDEV_UCFG_B0_P5_U0_CFG5 0x40010a45u
N#define CYDEV_UCFG_B0_P5_U0_CFG6 0x40010a46u
N#define CYDEV_UCFG_B0_P5_U0_CFG7 0x40010a47u
N#define CYDEV_UCFG_B0_P5_U0_CFG8 0x40010a48u
N#define CYDEV_UCFG_B0_P5_U0_CFG9 0x40010a49u
N#define CYDEV_UCFG_B0_P5_U0_CFG10 0x40010a4au
N#define CYDEV_UCFG_B0_P5_U0_CFG11 0x40010a4bu
N#define CYDEV_UCFG_B0_P5_U0_CFG12 0x40010a4cu
N#define CYDEV_UCFG_B0_P5_U0_CFG13 0x40010a4du
N#define CYDEV_UCFG_B0_P5_U0_CFG14 0x40010a4eu
N#define CYDEV_UCFG_B0_P5_U0_CFG15 0x40010a4fu
N#define CYDEV_UCFG_B0_P5_U0_CFG16 0x40010a50u
N#define CYDEV_UCFG_B0_P5_U0_CFG17 0x40010a51u
N#define CYDEV_UCFG_B0_P5_U0_CFG18 0x40010a52u
N#define CYDEV_UCFG_B0_P5_U0_CFG19 0x40010a53u
N#define CYDEV_UCFG_B0_P5_U0_CFG20 0x40010a54u
N#define CYDEV_UCFG_B0_P5_U0_CFG21 0x40010a55u
N#define CYDEV_UCFG_B0_P5_U0_CFG22 0x40010a56u
N#define CYDEV_UCFG_B0_P5_U0_CFG23 0x40010a57u
N#define CYDEV_UCFG_B0_P5_U0_CFG24 0x40010a58u
N#define CYDEV_UCFG_B0_P5_U0_CFG25 0x40010a59u
N#define CYDEV_UCFG_B0_P5_U0_CFG26 0x40010a5au
N#define CYDEV_UCFG_B0_P5_U0_CFG27 0x40010a5bu
N#define CYDEV_UCFG_B0_P5_U0_CFG28 0x40010a5cu
N#define CYDEV_UCFG_B0_P5_U0_CFG29 0x40010a5du
N#define CYDEV_UCFG_B0_P5_U0_CFG30 0x40010a5eu
N#define CYDEV_UCFG_B0_P5_U0_CFG31 0x40010a5fu
N#define CYDEV_UCFG_B0_P5_U0_DCFG0 0x40010a60u
N#define CYDEV_UCFG_B0_P5_U0_DCFG1 0x40010a62u
N#define CYDEV_UCFG_B0_P5_U0_DCFG2 0x40010a64u
N#define CYDEV_UCFG_B0_P5_U0_DCFG3 0x40010a66u
N#define CYDEV_UCFG_B0_P5_U0_DCFG4 0x40010a68u
N#define CYDEV_UCFG_B0_P5_U0_DCFG5 0x40010a6au
N#define CYDEV_UCFG_B0_P5_U0_DCFG6 0x40010a6cu
N#define CYDEV_UCFG_B0_P5_U0_DCFG7 0x40010a6eu
N#define CYDEV_UCFG_B0_P5_U1_BASE 0x40010a80u
N#define CYDEV_UCFG_B0_P5_U1_SIZE 0x00000070u
N#define CYDEV_UCFG_B0_P5_U1_PLD_IT0 0x40010a80u
N#define CYDEV_UCFG_B0_P5_U1_PLD_IT1 0x40010a84u
N#define CYDEV_UCFG_B0_P5_U1_PLD_IT2 0x40010a88u
N#define CYDEV_UCFG_B0_P5_U1_PLD_IT3 0x40010a8cu
N#define CYDEV_UCFG_B0_P5_U1_PLD_IT4 0x40010a90u
N#define CYDEV_UCFG_B0_P5_U1_PLD_IT5 0x40010a94u
N#define CYDEV_UCFG_B0_P5_U1_PLD_IT6 0x40010a98u
N#define CYDEV_UCFG_B0_P5_U1_PLD_IT7 0x40010a9cu
N#define CYDEV_UCFG_B0_P5_U1_PLD_IT8 0x40010aa0u
N#define CYDEV_UCFG_B0_P5_U1_PLD_IT9 0x40010aa4u
N#define CYDEV_UCFG_B0_P5_U1_PLD_IT10 0x40010aa8u
N#define CYDEV_UCFG_B0_P5_U1_PLD_IT11 0x40010aacu
N#define CYDEV_UCFG_B0_P5_U1_PLD_ORT0 0x40010ab0u
N#define CYDEV_UCFG_B0_P5_U1_PLD_ORT1 0x40010ab2u
N#define CYDEV_UCFG_B0_P5_U1_PLD_ORT2 0x40010ab4u
N#define CYDEV_UCFG_B0_P5_U1_PLD_ORT3 0x40010ab6u
N#define CYDEV_UCFG_B0_P5_U1_MC_CFG_CEN_CONST 0x40010ab8u
N#define CYDEV_UCFG_B0_P5_U1_MC_CFG_XORFB 0x40010abau
N#define CYDEV_UCFG_B0_P5_U1_MC_CFG_SET_RESET 0x40010abcu
N#define CYDEV_UCFG_B0_P5_U1_MC_CFG_BYPASS 0x40010abeu
N#define CYDEV_UCFG_B0_P5_U1_CFG0 0x40010ac0u
N#define CYDEV_UCFG_B0_P5_U1_CFG1 0x40010ac1u
N#define CYDEV_UCFG_B0_P5_U1_CFG2 0x40010ac2u
N#define CYDEV_UCFG_B0_P5_U1_CFG3 0x40010ac3u
N#define CYDEV_UCFG_B0_P5_U1_CFG4 0x40010ac4u
N#define CYDEV_UCFG_B0_P5_U1_CFG5 0x40010ac5u
N#define CYDEV_UCFG_B0_P5_U1_CFG6 0x40010ac6u
N#define CYDEV_UCFG_B0_P5_U1_CFG7 0x40010ac7u
N#define CYDEV_UCFG_B0_P5_U1_CFG8 0x40010ac8u
N#define CYDEV_UCFG_B0_P5_U1_CFG9 0x40010ac9u
N#define CYDEV_UCFG_B0_P5_U1_CFG10 0x40010acau
N#define CYDEV_UCFG_B0_P5_U1_CFG11 0x40010acbu
N#define CYDEV_UCFG_B0_P5_U1_CFG12 0x40010accu
N#define CYDEV_UCFG_B0_P5_U1_CFG13 0x40010acdu
N#define CYDEV_UCFG_B0_P5_U1_CFG14 0x40010aceu
N#define CYDEV_UCFG_B0_P5_U1_CFG15 0x40010acfu
N#define CYDEV_UCFG_B0_P5_U1_CFG16 0x40010ad0u
N#define CYDEV_UCFG_B0_P5_U1_CFG17 0x40010ad1u
N#define CYDEV_UCFG_B0_P5_U1_CFG18 0x40010ad2u
N#define CYDEV_UCFG_B0_P5_U1_CFG19 0x40010ad3u
N#define CYDEV_UCFG_B0_P5_U1_CFG20 0x40010ad4u
N#define CYDEV_UCFG_B0_P5_U1_CFG21 0x40010ad5u
N#define CYDEV_UCFG_B0_P5_U1_CFG22 0x40010ad6u
N#define CYDEV_UCFG_B0_P5_U1_CFG23 0x40010ad7u
N#define CYDEV_UCFG_B0_P5_U1_CFG24 0x40010ad8u
N#define CYDEV_UCFG_B0_P5_U1_CFG25 0x40010ad9u
N#define CYDEV_UCFG_B0_P5_U1_CFG26 0x40010adau
N#define CYDEV_UCFG_B0_P5_U1_CFG27 0x40010adbu
N#define CYDEV_UCFG_B0_P5_U1_CFG28 0x40010adcu
N#define CYDEV_UCFG_B0_P5_U1_CFG29 0x40010addu
N#define CYDEV_UCFG_B0_P5_U1_CFG30 0x40010adeu
N#define CYDEV_UCFG_B0_P5_U1_CFG31 0x40010adfu
N#define CYDEV_UCFG_B0_P5_U1_DCFG0 0x40010ae0u
N#define CYDEV_UCFG_B0_P5_U1_DCFG1 0x40010ae2u
N#define CYDEV_UCFG_B0_P5_U1_DCFG2 0x40010ae4u
N#define CYDEV_UCFG_B0_P5_U1_DCFG3 0x40010ae6u
N#define CYDEV_UCFG_B0_P5_U1_DCFG4 0x40010ae8u
N#define CYDEV_UCFG_B0_P5_U1_DCFG5 0x40010aeau
N#define CYDEV_UCFG_B0_P5_U1_DCFG6 0x40010aecu
N#define CYDEV_UCFG_B0_P5_U1_DCFG7 0x40010aeeu
N#define CYDEV_UCFG_B0_P5_ROUTE_BASE 0x40010b00u
N#define CYDEV_UCFG_B0_P5_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B0_P6_BASE 0x40010c00u
N#define CYDEV_UCFG_B0_P6_SIZE 0x000001efu
N#define CYDEV_UCFG_B0_P6_U0_BASE 0x40010c00u
N#define CYDEV_UCFG_B0_P6_U0_SIZE 0x00000070u
N#define CYDEV_UCFG_B0_P6_U0_PLD_IT0 0x40010c00u
N#define CYDEV_UCFG_B0_P6_U0_PLD_IT1 0x40010c04u
N#define CYDEV_UCFG_B0_P6_U0_PLD_IT2 0x40010c08u
N#define CYDEV_UCFG_B0_P6_U0_PLD_IT3 0x40010c0cu
N#define CYDEV_UCFG_B0_P6_U0_PLD_IT4 0x40010c10u
N#define CYDEV_UCFG_B0_P6_U0_PLD_IT5 0x40010c14u
N#define CYDEV_UCFG_B0_P6_U0_PLD_IT6 0x40010c18u
N#define CYDEV_UCFG_B0_P6_U0_PLD_IT7 0x40010c1cu
N#define CYDEV_UCFG_B0_P6_U0_PLD_IT8 0x40010c20u
N#define CYDEV_UCFG_B0_P6_U0_PLD_IT9 0x40010c24u
N#define CYDEV_UCFG_B0_P6_U0_PLD_IT10 0x40010c28u
N#define CYDEV_UCFG_B0_P6_U0_PLD_IT11 0x40010c2cu
N#define CYDEV_UCFG_B0_P6_U0_PLD_ORT0 0x40010c30u
N#define CYDEV_UCFG_B0_P6_U0_PLD_ORT1 0x40010c32u
N#define CYDEV_UCFG_B0_P6_U0_PLD_ORT2 0x40010c34u
N#define CYDEV_UCFG_B0_P6_U0_PLD_ORT3 0x40010c36u
N#define CYDEV_UCFG_B0_P6_U0_MC_CFG_CEN_CONST 0x40010c38u
N#define CYDEV_UCFG_B0_P6_U0_MC_CFG_XORFB 0x40010c3au
N#define CYDEV_UCFG_B0_P6_U0_MC_CFG_SET_RESET 0x40010c3cu
N#define CYDEV_UCFG_B0_P6_U0_MC_CFG_BYPASS 0x40010c3eu
N#define CYDEV_UCFG_B0_P6_U0_CFG0 0x40010c40u
N#define CYDEV_UCFG_B0_P6_U0_CFG1 0x40010c41u
N#define CYDEV_UCFG_B0_P6_U0_CFG2 0x40010c42u
N#define CYDEV_UCFG_B0_P6_U0_CFG3 0x40010c43u
N#define CYDEV_UCFG_B0_P6_U0_CFG4 0x40010c44u
N#define CYDEV_UCFG_B0_P6_U0_CFG5 0x40010c45u
N#define CYDEV_UCFG_B0_P6_U0_CFG6 0x40010c46u
N#define CYDEV_UCFG_B0_P6_U0_CFG7 0x40010c47u
N#define CYDEV_UCFG_B0_P6_U0_CFG8 0x40010c48u
N#define CYDEV_UCFG_B0_P6_U0_CFG9 0x40010c49u
N#define CYDEV_UCFG_B0_P6_U0_CFG10 0x40010c4au
N#define CYDEV_UCFG_B0_P6_U0_CFG11 0x40010c4bu
N#define CYDEV_UCFG_B0_P6_U0_CFG12 0x40010c4cu
N#define CYDEV_UCFG_B0_P6_U0_CFG13 0x40010c4du
N#define CYDEV_UCFG_B0_P6_U0_CFG14 0x40010c4eu
N#define CYDEV_UCFG_B0_P6_U0_CFG15 0x40010c4fu
N#define CYDEV_UCFG_B0_P6_U0_CFG16 0x40010c50u
N#define CYDEV_UCFG_B0_P6_U0_CFG17 0x40010c51u
N#define CYDEV_UCFG_B0_P6_U0_CFG18 0x40010c52u
N#define CYDEV_UCFG_B0_P6_U0_CFG19 0x40010c53u
N#define CYDEV_UCFG_B0_P6_U0_CFG20 0x40010c54u
N#define CYDEV_UCFG_B0_P6_U0_CFG21 0x40010c55u
N#define CYDEV_UCFG_B0_P6_U0_CFG22 0x40010c56u
N#define CYDEV_UCFG_B0_P6_U0_CFG23 0x40010c57u
N#define CYDEV_UCFG_B0_P6_U0_CFG24 0x40010c58u
N#define CYDEV_UCFG_B0_P6_U0_CFG25 0x40010c59u
N#define CYDEV_UCFG_B0_P6_U0_CFG26 0x40010c5au
N#define CYDEV_UCFG_B0_P6_U0_CFG27 0x40010c5bu
N#define CYDEV_UCFG_B0_P6_U0_CFG28 0x40010c5cu
N#define CYDEV_UCFG_B0_P6_U0_CFG29 0x40010c5du
N#define CYDEV_UCFG_B0_P6_U0_CFG30 0x40010c5eu
N#define CYDEV_UCFG_B0_P6_U0_CFG31 0x40010c5fu
N#define CYDEV_UCFG_B0_P6_U0_DCFG0 0x40010c60u
N#define CYDEV_UCFG_B0_P6_U0_DCFG1 0x40010c62u
N#define CYDEV_UCFG_B0_P6_U0_DCFG2 0x40010c64u
N#define CYDEV_UCFG_B0_P6_U0_DCFG3 0x40010c66u
N#define CYDEV_UCFG_B0_P6_U0_DCFG4 0x40010c68u
N#define CYDEV_UCFG_B0_P6_U0_DCFG5 0x40010c6au
N#define CYDEV_UCFG_B0_P6_U0_DCFG6 0x40010c6cu
N#define CYDEV_UCFG_B0_P6_U0_DCFG7 0x40010c6eu
N#define CYDEV_UCFG_B0_P6_U1_BASE 0x40010c80u
N#define CYDEV_UCFG_B0_P6_U1_SIZE 0x00000070u
N#define CYDEV_UCFG_B0_P6_U1_PLD_IT0 0x40010c80u
N#define CYDEV_UCFG_B0_P6_U1_PLD_IT1 0x40010c84u
N#define CYDEV_UCFG_B0_P6_U1_PLD_IT2 0x40010c88u
N#define CYDEV_UCFG_B0_P6_U1_PLD_IT3 0x40010c8cu
N#define CYDEV_UCFG_B0_P6_U1_PLD_IT4 0x40010c90u
N#define CYDEV_UCFG_B0_P6_U1_PLD_IT5 0x40010c94u
N#define CYDEV_UCFG_B0_P6_U1_PLD_IT6 0x40010c98u
N#define CYDEV_UCFG_B0_P6_U1_PLD_IT7 0x40010c9cu
N#define CYDEV_UCFG_B0_P6_U1_PLD_IT8 0x40010ca0u
N#define CYDEV_UCFG_B0_P6_U1_PLD_IT9 0x40010ca4u
N#define CYDEV_UCFG_B0_P6_U1_PLD_IT10 0x40010ca8u
N#define CYDEV_UCFG_B0_P6_U1_PLD_IT11 0x40010cacu
N#define CYDEV_UCFG_B0_P6_U1_PLD_ORT0 0x40010cb0u
N#define CYDEV_UCFG_B0_P6_U1_PLD_ORT1 0x40010cb2u
N#define CYDEV_UCFG_B0_P6_U1_PLD_ORT2 0x40010cb4u
N#define CYDEV_UCFG_B0_P6_U1_PLD_ORT3 0x40010cb6u
N#define CYDEV_UCFG_B0_P6_U1_MC_CFG_CEN_CONST 0x40010cb8u
N#define CYDEV_UCFG_B0_P6_U1_MC_CFG_XORFB 0x40010cbau
N#define CYDEV_UCFG_B0_P6_U1_MC_CFG_SET_RESET 0x40010cbcu
N#define CYDEV_UCFG_B0_P6_U1_MC_CFG_BYPASS 0x40010cbeu
N#define CYDEV_UCFG_B0_P6_U1_CFG0 0x40010cc0u
N#define CYDEV_UCFG_B0_P6_U1_CFG1 0x40010cc1u
N#define CYDEV_UCFG_B0_P6_U1_CFG2 0x40010cc2u
N#define CYDEV_UCFG_B0_P6_U1_CFG3 0x40010cc3u
N#define CYDEV_UCFG_B0_P6_U1_CFG4 0x40010cc4u
N#define CYDEV_UCFG_B0_P6_U1_CFG5 0x40010cc5u
N#define CYDEV_UCFG_B0_P6_U1_CFG6 0x40010cc6u
N#define CYDEV_UCFG_B0_P6_U1_CFG7 0x40010cc7u
N#define CYDEV_UCFG_B0_P6_U1_CFG8 0x40010cc8u
N#define CYDEV_UCFG_B0_P6_U1_CFG9 0x40010cc9u
N#define CYDEV_UCFG_B0_P6_U1_CFG10 0x40010ccau
N#define CYDEV_UCFG_B0_P6_U1_CFG11 0x40010ccbu
N#define CYDEV_UCFG_B0_P6_U1_CFG12 0x40010cccu
N#define CYDEV_UCFG_B0_P6_U1_CFG13 0x40010ccdu
N#define CYDEV_UCFG_B0_P6_U1_CFG14 0x40010cceu
N#define CYDEV_UCFG_B0_P6_U1_CFG15 0x40010ccfu
N#define CYDEV_UCFG_B0_P6_U1_CFG16 0x40010cd0u
N#define CYDEV_UCFG_B0_P6_U1_CFG17 0x40010cd1u
N#define CYDEV_UCFG_B0_P6_U1_CFG18 0x40010cd2u
N#define CYDEV_UCFG_B0_P6_U1_CFG19 0x40010cd3u
N#define CYDEV_UCFG_B0_P6_U1_CFG20 0x40010cd4u
N#define CYDEV_UCFG_B0_P6_U1_CFG21 0x40010cd5u
N#define CYDEV_UCFG_B0_P6_U1_CFG22 0x40010cd6u
N#define CYDEV_UCFG_B0_P6_U1_CFG23 0x40010cd7u
N#define CYDEV_UCFG_B0_P6_U1_CFG24 0x40010cd8u
N#define CYDEV_UCFG_B0_P6_U1_CFG25 0x40010cd9u
N#define CYDEV_UCFG_B0_P6_U1_CFG26 0x40010cdau
N#define CYDEV_UCFG_B0_P6_U1_CFG27 0x40010cdbu
N#define CYDEV_UCFG_B0_P6_U1_CFG28 0x40010cdcu
N#define CYDEV_UCFG_B0_P6_U1_CFG29 0x40010cddu
N#define CYDEV_UCFG_B0_P6_U1_CFG30 0x40010cdeu
N#define CYDEV_UCFG_B0_P6_U1_CFG31 0x40010cdfu
N#define CYDEV_UCFG_B0_P6_U1_DCFG0 0x40010ce0u
N#define CYDEV_UCFG_B0_P6_U1_DCFG1 0x40010ce2u
N#define CYDEV_UCFG_B0_P6_U1_DCFG2 0x40010ce4u
N#define CYDEV_UCFG_B0_P6_U1_DCFG3 0x40010ce6u
N#define CYDEV_UCFG_B0_P6_U1_DCFG4 0x40010ce8u
N#define CYDEV_UCFG_B0_P6_U1_DCFG5 0x40010ceau
N#define CYDEV_UCFG_B0_P6_U1_DCFG6 0x40010cecu
N#define CYDEV_UCFG_B0_P6_U1_DCFG7 0x40010ceeu
N#define CYDEV_UCFG_B0_P6_ROUTE_BASE 0x40010d00u
N#define CYDEV_UCFG_B0_P6_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B0_P7_BASE 0x40010e00u
N#define CYDEV_UCFG_B0_P7_SIZE 0x000001efu
N#define CYDEV_UCFG_B0_P7_U0_BASE 0x40010e00u
N#define CYDEV_UCFG_B0_P7_U0_SIZE 0x00000070u
N#define CYDEV_UCFG_B0_P7_U0_PLD_IT0 0x40010e00u
N#define CYDEV_UCFG_B0_P7_U0_PLD_IT1 0x40010e04u
N#define CYDEV_UCFG_B0_P7_U0_PLD_IT2 0x40010e08u
N#define CYDEV_UCFG_B0_P7_U0_PLD_IT3 0x40010e0cu
N#define CYDEV_UCFG_B0_P7_U0_PLD_IT4 0x40010e10u
N#define CYDEV_UCFG_B0_P7_U0_PLD_IT5 0x40010e14u
N#define CYDEV_UCFG_B0_P7_U0_PLD_IT6 0x40010e18u
N#define CYDEV_UCFG_B0_P7_U0_PLD_IT7 0x40010e1cu
N#define CYDEV_UCFG_B0_P7_U0_PLD_IT8 0x40010e20u
N#define CYDEV_UCFG_B0_P7_U0_PLD_IT9 0x40010e24u
N#define CYDEV_UCFG_B0_P7_U0_PLD_IT10 0x40010e28u
N#define CYDEV_UCFG_B0_P7_U0_PLD_IT11 0x40010e2cu
N#define CYDEV_UCFG_B0_P7_U0_PLD_ORT0 0x40010e30u
N#define CYDEV_UCFG_B0_P7_U0_PLD_ORT1 0x40010e32u
N#define CYDEV_UCFG_B0_P7_U0_PLD_ORT2 0x40010e34u
N#define CYDEV_UCFG_B0_P7_U0_PLD_ORT3 0x40010e36u
N#define CYDEV_UCFG_B0_P7_U0_MC_CFG_CEN_CONST 0x40010e38u
N#define CYDEV_UCFG_B0_P7_U0_MC_CFG_XORFB 0x40010e3au
N#define CYDEV_UCFG_B0_P7_U0_MC_CFG_SET_RESET 0x40010e3cu
N#define CYDEV_UCFG_B0_P7_U0_MC_CFG_BYPASS 0x40010e3eu
N#define CYDEV_UCFG_B0_P7_U0_CFG0 0x40010e40u
N#define CYDEV_UCFG_B0_P7_U0_CFG1 0x40010e41u
N#define CYDEV_UCFG_B0_P7_U0_CFG2 0x40010e42u
N#define CYDEV_UCFG_B0_P7_U0_CFG3 0x40010e43u
N#define CYDEV_UCFG_B0_P7_U0_CFG4 0x40010e44u
N#define CYDEV_UCFG_B0_P7_U0_CFG5 0x40010e45u
N#define CYDEV_UCFG_B0_P7_U0_CFG6 0x40010e46u
N#define CYDEV_UCFG_B0_P7_U0_CFG7 0x40010e47u
N#define CYDEV_UCFG_B0_P7_U0_CFG8 0x40010e48u
N#define CYDEV_UCFG_B0_P7_U0_CFG9 0x40010e49u
N#define CYDEV_UCFG_B0_P7_U0_CFG10 0x40010e4au
N#define CYDEV_UCFG_B0_P7_U0_CFG11 0x40010e4bu
N#define CYDEV_UCFG_B0_P7_U0_CFG12 0x40010e4cu
N#define CYDEV_UCFG_B0_P7_U0_CFG13 0x40010e4du
N#define CYDEV_UCFG_B0_P7_U0_CFG14 0x40010e4eu
N#define CYDEV_UCFG_B0_P7_U0_CFG15 0x40010e4fu
N#define CYDEV_UCFG_B0_P7_U0_CFG16 0x40010e50u
N#define CYDEV_UCFG_B0_P7_U0_CFG17 0x40010e51u
N#define CYDEV_UCFG_B0_P7_U0_CFG18 0x40010e52u
N#define CYDEV_UCFG_B0_P7_U0_CFG19 0x40010e53u
N#define CYDEV_UCFG_B0_P7_U0_CFG20 0x40010e54u
N#define CYDEV_UCFG_B0_P7_U0_CFG21 0x40010e55u
N#define CYDEV_UCFG_B0_P7_U0_CFG22 0x40010e56u
N#define CYDEV_UCFG_B0_P7_U0_CFG23 0x40010e57u
N#define CYDEV_UCFG_B0_P7_U0_CFG24 0x40010e58u
N#define CYDEV_UCFG_B0_P7_U0_CFG25 0x40010e59u
N#define CYDEV_UCFG_B0_P7_U0_CFG26 0x40010e5au
N#define CYDEV_UCFG_B0_P7_U0_CFG27 0x40010e5bu
N#define CYDEV_UCFG_B0_P7_U0_CFG28 0x40010e5cu
N#define CYDEV_UCFG_B0_P7_U0_CFG29 0x40010e5du
N#define CYDEV_UCFG_B0_P7_U0_CFG30 0x40010e5eu
N#define CYDEV_UCFG_B0_P7_U0_CFG31 0x40010e5fu
N#define CYDEV_UCFG_B0_P7_U0_DCFG0 0x40010e60u
N#define CYDEV_UCFG_B0_P7_U0_DCFG1 0x40010e62u
N#define CYDEV_UCFG_B0_P7_U0_DCFG2 0x40010e64u
N#define CYDEV_UCFG_B0_P7_U0_DCFG3 0x40010e66u
N#define CYDEV_UCFG_B0_P7_U0_DCFG4 0x40010e68u
N#define CYDEV_UCFG_B0_P7_U0_DCFG5 0x40010e6au
N#define CYDEV_UCFG_B0_P7_U0_DCFG6 0x40010e6cu
N#define CYDEV_UCFG_B0_P7_U0_DCFG7 0x40010e6eu
N#define CYDEV_UCFG_B0_P7_U1_BASE 0x40010e80u
N#define CYDEV_UCFG_B0_P7_U1_SIZE 0x00000070u
N#define CYDEV_UCFG_B0_P7_U1_PLD_IT0 0x40010e80u
N#define CYDEV_UCFG_B0_P7_U1_PLD_IT1 0x40010e84u
N#define CYDEV_UCFG_B0_P7_U1_PLD_IT2 0x40010e88u
N#define CYDEV_UCFG_B0_P7_U1_PLD_IT3 0x40010e8cu
N#define CYDEV_UCFG_B0_P7_U1_PLD_IT4 0x40010e90u
N#define CYDEV_UCFG_B0_P7_U1_PLD_IT5 0x40010e94u
N#define CYDEV_UCFG_B0_P7_U1_PLD_IT6 0x40010e98u
N#define CYDEV_UCFG_B0_P7_U1_PLD_IT7 0x40010e9cu
N#define CYDEV_UCFG_B0_P7_U1_PLD_IT8 0x40010ea0u
N#define CYDEV_UCFG_B0_P7_U1_PLD_IT9 0x40010ea4u
N#define CYDEV_UCFG_B0_P7_U1_PLD_IT10 0x40010ea8u
N#define CYDEV_UCFG_B0_P7_U1_PLD_IT11 0x40010eacu
N#define CYDEV_UCFG_B0_P7_U1_PLD_ORT0 0x40010eb0u
N#define CYDEV_UCFG_B0_P7_U1_PLD_ORT1 0x40010eb2u
N#define CYDEV_UCFG_B0_P7_U1_PLD_ORT2 0x40010eb4u
N#define CYDEV_UCFG_B0_P7_U1_PLD_ORT3 0x40010eb6u
N#define CYDEV_UCFG_B0_P7_U1_MC_CFG_CEN_CONST 0x40010eb8u
N#define CYDEV_UCFG_B0_P7_U1_MC_CFG_XORFB 0x40010ebau
N#define CYDEV_UCFG_B0_P7_U1_MC_CFG_SET_RESET 0x40010ebcu
N#define CYDEV_UCFG_B0_P7_U1_MC_CFG_BYPASS 0x40010ebeu
N#define CYDEV_UCFG_B0_P7_U1_CFG0 0x40010ec0u
N#define CYDEV_UCFG_B0_P7_U1_CFG1 0x40010ec1u
N#define CYDEV_UCFG_B0_P7_U1_CFG2 0x40010ec2u
N#define CYDEV_UCFG_B0_P7_U1_CFG3 0x40010ec3u
N#define CYDEV_UCFG_B0_P7_U1_CFG4 0x40010ec4u
N#define CYDEV_UCFG_B0_P7_U1_CFG5 0x40010ec5u
N#define CYDEV_UCFG_B0_P7_U1_CFG6 0x40010ec6u
N#define CYDEV_UCFG_B0_P7_U1_CFG7 0x40010ec7u
N#define CYDEV_UCFG_B0_P7_U1_CFG8 0x40010ec8u
N#define CYDEV_UCFG_B0_P7_U1_CFG9 0x40010ec9u
N#define CYDEV_UCFG_B0_P7_U1_CFG10 0x40010ecau
N#define CYDEV_UCFG_B0_P7_U1_CFG11 0x40010ecbu
N#define CYDEV_UCFG_B0_P7_U1_CFG12 0x40010eccu
N#define CYDEV_UCFG_B0_P7_U1_CFG13 0x40010ecdu
N#define CYDEV_UCFG_B0_P7_U1_CFG14 0x40010eceu
N#define CYDEV_UCFG_B0_P7_U1_CFG15 0x40010ecfu
N#define CYDEV_UCFG_B0_P7_U1_CFG16 0x40010ed0u
N#define CYDEV_UCFG_B0_P7_U1_CFG17 0x40010ed1u
N#define CYDEV_UCFG_B0_P7_U1_CFG18 0x40010ed2u
N#define CYDEV_UCFG_B0_P7_U1_CFG19 0x40010ed3u
N#define CYDEV_UCFG_B0_P7_U1_CFG20 0x40010ed4u
N#define CYDEV_UCFG_B0_P7_U1_CFG21 0x40010ed5u
N#define CYDEV_UCFG_B0_P7_U1_CFG22 0x40010ed6u
N#define CYDEV_UCFG_B0_P7_U1_CFG23 0x40010ed7u
N#define CYDEV_UCFG_B0_P7_U1_CFG24 0x40010ed8u
N#define CYDEV_UCFG_B0_P7_U1_CFG25 0x40010ed9u
N#define CYDEV_UCFG_B0_P7_U1_CFG26 0x40010edau
N#define CYDEV_UCFG_B0_P7_U1_CFG27 0x40010edbu
N#define CYDEV_UCFG_B0_P7_U1_CFG28 0x40010edcu
N#define CYDEV_UCFG_B0_P7_U1_CFG29 0x40010eddu
N#define CYDEV_UCFG_B0_P7_U1_CFG30 0x40010edeu
N#define CYDEV_UCFG_B0_P7_U1_CFG31 0x40010edfu
N#define CYDEV_UCFG_B0_P7_U1_DCFG0 0x40010ee0u
N#define CYDEV_UCFG_B0_P7_U1_DCFG1 0x40010ee2u
N#define CYDEV_UCFG_B0_P7_U1_DCFG2 0x40010ee4u
N#define CYDEV_UCFG_B0_P7_U1_DCFG3 0x40010ee6u
N#define CYDEV_UCFG_B0_P7_U1_DCFG4 0x40010ee8u
N#define CYDEV_UCFG_B0_P7_U1_DCFG5 0x40010eeau
N#define CYDEV_UCFG_B0_P7_U1_DCFG6 0x40010eecu
N#define CYDEV_UCFG_B0_P7_U1_DCFG7 0x40010eeeu
N#define CYDEV_UCFG_B0_P7_ROUTE_BASE 0x40010f00u
N#define CYDEV_UCFG_B0_P7_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B1_BASE 0x40011000u
N#define CYDEV_UCFG_B1_SIZE 0x00000fefu
N#define CYDEV_UCFG_B1_P2_BASE 0x40011400u
N#define CYDEV_UCFG_B1_P2_SIZE 0x000001efu
N#define CYDEV_UCFG_B1_P2_U0_BASE 0x40011400u
N#define CYDEV_UCFG_B1_P2_U0_SIZE 0x00000070u
N#define CYDEV_UCFG_B1_P2_U0_PLD_IT0 0x40011400u
N#define CYDEV_UCFG_B1_P2_U0_PLD_IT1 0x40011404u
N#define CYDEV_UCFG_B1_P2_U0_PLD_IT2 0x40011408u
N#define CYDEV_UCFG_B1_P2_U0_PLD_IT3 0x4001140cu
N#define CYDEV_UCFG_B1_P2_U0_PLD_IT4 0x40011410u
N#define CYDEV_UCFG_B1_P2_U0_PLD_IT5 0x40011414u
N#define CYDEV_UCFG_B1_P2_U0_PLD_IT6 0x40011418u
N#define CYDEV_UCFG_B1_P2_U0_PLD_IT7 0x4001141cu
N#define CYDEV_UCFG_B1_P2_U0_PLD_IT8 0x40011420u
N#define CYDEV_UCFG_B1_P2_U0_PLD_IT9 0x40011424u
N#define CYDEV_UCFG_B1_P2_U0_PLD_IT10 0x40011428u
N#define CYDEV_UCFG_B1_P2_U0_PLD_IT11 0x4001142cu
N#define CYDEV_UCFG_B1_P2_U0_PLD_ORT0 0x40011430u
N#define CYDEV_UCFG_B1_P2_U0_PLD_ORT1 0x40011432u
N#define CYDEV_UCFG_B1_P2_U0_PLD_ORT2 0x40011434u
N#define CYDEV_UCFG_B1_P2_U0_PLD_ORT3 0x40011436u
N#define CYDEV_UCFG_B1_P2_U0_MC_CFG_CEN_CONST 0x40011438u
N#define CYDEV_UCFG_B1_P2_U0_MC_CFG_XORFB 0x4001143au
N#define CYDEV_UCFG_B1_P2_U0_MC_CFG_SET_RESET 0x4001143cu
N#define CYDEV_UCFG_B1_P2_U0_MC_CFG_BYPASS 0x4001143eu
N#define CYDEV_UCFG_B1_P2_U0_CFG0 0x40011440u
N#define CYDEV_UCFG_B1_P2_U0_CFG1 0x40011441u
N#define CYDEV_UCFG_B1_P2_U0_CFG2 0x40011442u
N#define CYDEV_UCFG_B1_P2_U0_CFG3 0x40011443u
N#define CYDEV_UCFG_B1_P2_U0_CFG4 0x40011444u
N#define CYDEV_UCFG_B1_P2_U0_CFG5 0x40011445u
N#define CYDEV_UCFG_B1_P2_U0_CFG6 0x40011446u
N#define CYDEV_UCFG_B1_P2_U0_CFG7 0x40011447u
N#define CYDEV_UCFG_B1_P2_U0_CFG8 0x40011448u
N#define CYDEV_UCFG_B1_P2_U0_CFG9 0x40011449u
N#define CYDEV_UCFG_B1_P2_U0_CFG10 0x4001144au
N#define CYDEV_UCFG_B1_P2_U0_CFG11 0x4001144bu
N#define CYDEV_UCFG_B1_P2_U0_CFG12 0x4001144cu
N#define CYDEV_UCFG_B1_P2_U0_CFG13 0x4001144du
N#define CYDEV_UCFG_B1_P2_U0_CFG14 0x4001144eu
N#define CYDEV_UCFG_B1_P2_U0_CFG15 0x4001144fu
N#define CYDEV_UCFG_B1_P2_U0_CFG16 0x40011450u
N#define CYDEV_UCFG_B1_P2_U0_CFG17 0x40011451u
N#define CYDEV_UCFG_B1_P2_U0_CFG18 0x40011452u
N#define CYDEV_UCFG_B1_P2_U0_CFG19 0x40011453u
N#define CYDEV_UCFG_B1_P2_U0_CFG20 0x40011454u
N#define CYDEV_UCFG_B1_P2_U0_CFG21 0x40011455u
N#define CYDEV_UCFG_B1_P2_U0_CFG22 0x40011456u
N#define CYDEV_UCFG_B1_P2_U0_CFG23 0x40011457u
N#define CYDEV_UCFG_B1_P2_U0_CFG24 0x40011458u
N#define CYDEV_UCFG_B1_P2_U0_CFG25 0x40011459u
N#define CYDEV_UCFG_B1_P2_U0_CFG26 0x4001145au
N#define CYDEV_UCFG_B1_P2_U0_CFG27 0x4001145bu
N#define CYDEV_UCFG_B1_P2_U0_CFG28 0x4001145cu
N#define CYDEV_UCFG_B1_P2_U0_CFG29 0x4001145du
N#define CYDEV_UCFG_B1_P2_U0_CFG30 0x4001145eu
N#define CYDEV_UCFG_B1_P2_U0_CFG31 0x4001145fu
N#define CYDEV_UCFG_B1_P2_U0_DCFG0 0x40011460u
N#define CYDEV_UCFG_B1_P2_U0_DCFG1 0x40011462u
N#define CYDEV_UCFG_B1_P2_U0_DCFG2 0x40011464u
N#define CYDEV_UCFG_B1_P2_U0_DCFG3 0x40011466u
N#define CYDEV_UCFG_B1_P2_U0_DCFG4 0x40011468u
N#define CYDEV_UCFG_B1_P2_U0_DCFG5 0x4001146au
N#define CYDEV_UCFG_B1_P2_U0_DCFG6 0x4001146cu
N#define CYDEV_UCFG_B1_P2_U0_DCFG7 0x4001146eu
N#define CYDEV_UCFG_B1_P2_U1_BASE 0x40011480u
N#define CYDEV_UCFG_B1_P2_U1_SIZE 0x00000070u
N#define CYDEV_UCFG_B1_P2_U1_PLD_IT0 0x40011480u
N#define CYDEV_UCFG_B1_P2_U1_PLD_IT1 0x40011484u
N#define CYDEV_UCFG_B1_P2_U1_PLD_IT2 0x40011488u
N#define CYDEV_UCFG_B1_P2_U1_PLD_IT3 0x4001148cu
N#define CYDEV_UCFG_B1_P2_U1_PLD_IT4 0x40011490u
N#define CYDEV_UCFG_B1_P2_U1_PLD_IT5 0x40011494u
N#define CYDEV_UCFG_B1_P2_U1_PLD_IT6 0x40011498u
N#define CYDEV_UCFG_B1_P2_U1_PLD_IT7 0x4001149cu
N#define CYDEV_UCFG_B1_P2_U1_PLD_IT8 0x400114a0u
N#define CYDEV_UCFG_B1_P2_U1_PLD_IT9 0x400114a4u
N#define CYDEV_UCFG_B1_P2_U1_PLD_IT10 0x400114a8u
N#define CYDEV_UCFG_B1_P2_U1_PLD_IT11 0x400114acu
N#define CYDEV_UCFG_B1_P2_U1_PLD_ORT0 0x400114b0u
N#define CYDEV_UCFG_B1_P2_U1_PLD_ORT1 0x400114b2u
N#define CYDEV_UCFG_B1_P2_U1_PLD_ORT2 0x400114b4u
N#define CYDEV_UCFG_B1_P2_U1_PLD_ORT3 0x400114b6u
N#define CYDEV_UCFG_B1_P2_U1_MC_CFG_CEN_CONST 0x400114b8u
N#define CYDEV_UCFG_B1_P2_U1_MC_CFG_XORFB 0x400114bau
N#define CYDEV_UCFG_B1_P2_U1_MC_CFG_SET_RESET 0x400114bcu
N#define CYDEV_UCFG_B1_P2_U1_MC_CFG_BYPASS 0x400114beu
N#define CYDEV_UCFG_B1_P2_U1_CFG0 0x400114c0u
N#define CYDEV_UCFG_B1_P2_U1_CFG1 0x400114c1u
N#define CYDEV_UCFG_B1_P2_U1_CFG2 0x400114c2u
N#define CYDEV_UCFG_B1_P2_U1_CFG3 0x400114c3u
N#define CYDEV_UCFG_B1_P2_U1_CFG4 0x400114c4u
N#define CYDEV_UCFG_B1_P2_U1_CFG5 0x400114c5u
N#define CYDEV_UCFG_B1_P2_U1_CFG6 0x400114c6u
N#define CYDEV_UCFG_B1_P2_U1_CFG7 0x400114c7u
N#define CYDEV_UCFG_B1_P2_U1_CFG8 0x400114c8u
N#define CYDEV_UCFG_B1_P2_U1_CFG9 0x400114c9u
N#define CYDEV_UCFG_B1_P2_U1_CFG10 0x400114cau
N#define CYDEV_UCFG_B1_P2_U1_CFG11 0x400114cbu
N#define CYDEV_UCFG_B1_P2_U1_CFG12 0x400114ccu
N#define CYDEV_UCFG_B1_P2_U1_CFG13 0x400114cdu
N#define CYDEV_UCFG_B1_P2_U1_CFG14 0x400114ceu
N#define CYDEV_UCFG_B1_P2_U1_CFG15 0x400114cfu
N#define CYDEV_UCFG_B1_P2_U1_CFG16 0x400114d0u
N#define CYDEV_UCFG_B1_P2_U1_CFG17 0x400114d1u
N#define CYDEV_UCFG_B1_P2_U1_CFG18 0x400114d2u
N#define CYDEV_UCFG_B1_P2_U1_CFG19 0x400114d3u
N#define CYDEV_UCFG_B1_P2_U1_CFG20 0x400114d4u
N#define CYDEV_UCFG_B1_P2_U1_CFG21 0x400114d5u
N#define CYDEV_UCFG_B1_P2_U1_CFG22 0x400114d6u
N#define CYDEV_UCFG_B1_P2_U1_CFG23 0x400114d7u
N#define CYDEV_UCFG_B1_P2_U1_CFG24 0x400114d8u
N#define CYDEV_UCFG_B1_P2_U1_CFG25 0x400114d9u
N#define CYDEV_UCFG_B1_P2_U1_CFG26 0x400114dau
N#define CYDEV_UCFG_B1_P2_U1_CFG27 0x400114dbu
N#define CYDEV_UCFG_B1_P2_U1_CFG28 0x400114dcu
N#define CYDEV_UCFG_B1_P2_U1_CFG29 0x400114ddu
N#define CYDEV_UCFG_B1_P2_U1_CFG30 0x400114deu
N#define CYDEV_UCFG_B1_P2_U1_CFG31 0x400114dfu
N#define CYDEV_UCFG_B1_P2_U1_DCFG0 0x400114e0u
N#define CYDEV_UCFG_B1_P2_U1_DCFG1 0x400114e2u
N#define CYDEV_UCFG_B1_P2_U1_DCFG2 0x400114e4u
N#define CYDEV_UCFG_B1_P2_U1_DCFG3 0x400114e6u
N#define CYDEV_UCFG_B1_P2_U1_DCFG4 0x400114e8u
N#define CYDEV_UCFG_B1_P2_U1_DCFG5 0x400114eau
N#define CYDEV_UCFG_B1_P2_U1_DCFG6 0x400114ecu
N#define CYDEV_UCFG_B1_P2_U1_DCFG7 0x400114eeu
N#define CYDEV_UCFG_B1_P2_ROUTE_BASE 0x40011500u
N#define CYDEV_UCFG_B1_P2_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B1_P3_BASE 0x40011600u
N#define CYDEV_UCFG_B1_P3_SIZE 0x000001efu
N#define CYDEV_UCFG_B1_P3_U0_BASE 0x40011600u
N#define CYDEV_UCFG_B1_P3_U0_SIZE 0x00000070u
N#define CYDEV_UCFG_B1_P3_U0_PLD_IT0 0x40011600u
N#define CYDEV_UCFG_B1_P3_U0_PLD_IT1 0x40011604u
N#define CYDEV_UCFG_B1_P3_U0_PLD_IT2 0x40011608u
N#define CYDEV_UCFG_B1_P3_U0_PLD_IT3 0x4001160cu
N#define CYDEV_UCFG_B1_P3_U0_PLD_IT4 0x40011610u
N#define CYDEV_UCFG_B1_P3_U0_PLD_IT5 0x40011614u
N#define CYDEV_UCFG_B1_P3_U0_PLD_IT6 0x40011618u
N#define CYDEV_UCFG_B1_P3_U0_PLD_IT7 0x4001161cu
N#define CYDEV_UCFG_B1_P3_U0_PLD_IT8 0x40011620u
N#define CYDEV_UCFG_B1_P3_U0_PLD_IT9 0x40011624u
N#define CYDEV_UCFG_B1_P3_U0_PLD_IT10 0x40011628u
N#define CYDEV_UCFG_B1_P3_U0_PLD_IT11 0x4001162cu
N#define CYDEV_UCFG_B1_P3_U0_PLD_ORT0 0x40011630u
N#define CYDEV_UCFG_B1_P3_U0_PLD_ORT1 0x40011632u
N#define CYDEV_UCFG_B1_P3_U0_PLD_ORT2 0x40011634u
N#define CYDEV_UCFG_B1_P3_U0_PLD_ORT3 0x40011636u
N#define CYDEV_UCFG_B1_P3_U0_MC_CFG_CEN_CONST 0x40011638u
N#define CYDEV_UCFG_B1_P3_U0_MC_CFG_XORFB 0x4001163au
N#define CYDEV_UCFG_B1_P3_U0_MC_CFG_SET_RESET 0x4001163cu
N#define CYDEV_UCFG_B1_P3_U0_MC_CFG_BYPASS 0x4001163eu
N#define CYDEV_UCFG_B1_P3_U0_CFG0 0x40011640u
N#define CYDEV_UCFG_B1_P3_U0_CFG1 0x40011641u
N#define CYDEV_UCFG_B1_P3_U0_CFG2 0x40011642u
N#define CYDEV_UCFG_B1_P3_U0_CFG3 0x40011643u
N#define CYDEV_UCFG_B1_P3_U0_CFG4 0x40011644u
N#define CYDEV_UCFG_B1_P3_U0_CFG5 0x40011645u
N#define CYDEV_UCFG_B1_P3_U0_CFG6 0x40011646u
N#define CYDEV_UCFG_B1_P3_U0_CFG7 0x40011647u
N#define CYDEV_UCFG_B1_P3_U0_CFG8 0x40011648u
N#define CYDEV_UCFG_B1_P3_U0_CFG9 0x40011649u
N#define CYDEV_UCFG_B1_P3_U0_CFG10 0x4001164au
N#define CYDEV_UCFG_B1_P3_U0_CFG11 0x4001164bu
N#define CYDEV_UCFG_B1_P3_U0_CFG12 0x4001164cu
N#define CYDEV_UCFG_B1_P3_U0_CFG13 0x4001164du
N#define CYDEV_UCFG_B1_P3_U0_CFG14 0x4001164eu
N#define CYDEV_UCFG_B1_P3_U0_CFG15 0x4001164fu
N#define CYDEV_UCFG_B1_P3_U0_CFG16 0x40011650u
N#define CYDEV_UCFG_B1_P3_U0_CFG17 0x40011651u
N#define CYDEV_UCFG_B1_P3_U0_CFG18 0x40011652u
N#define CYDEV_UCFG_B1_P3_U0_CFG19 0x40011653u
N#define CYDEV_UCFG_B1_P3_U0_CFG20 0x40011654u
N#define CYDEV_UCFG_B1_P3_U0_CFG21 0x40011655u
N#define CYDEV_UCFG_B1_P3_U0_CFG22 0x40011656u
N#define CYDEV_UCFG_B1_P3_U0_CFG23 0x40011657u
N#define CYDEV_UCFG_B1_P3_U0_CFG24 0x40011658u
N#define CYDEV_UCFG_B1_P3_U0_CFG25 0x40011659u
N#define CYDEV_UCFG_B1_P3_U0_CFG26 0x4001165au
N#define CYDEV_UCFG_B1_P3_U0_CFG27 0x4001165bu
N#define CYDEV_UCFG_B1_P3_U0_CFG28 0x4001165cu
N#define CYDEV_UCFG_B1_P3_U0_CFG29 0x4001165du
N#define CYDEV_UCFG_B1_P3_U0_CFG30 0x4001165eu
N#define CYDEV_UCFG_B1_P3_U0_CFG31 0x4001165fu
N#define CYDEV_UCFG_B1_P3_U0_DCFG0 0x40011660u
N#define CYDEV_UCFG_B1_P3_U0_DCFG1 0x40011662u
N#define CYDEV_UCFG_B1_P3_U0_DCFG2 0x40011664u
N#define CYDEV_UCFG_B1_P3_U0_DCFG3 0x40011666u
N#define CYDEV_UCFG_B1_P3_U0_DCFG4 0x40011668u
N#define CYDEV_UCFG_B1_P3_U0_DCFG5 0x4001166au
N#define CYDEV_UCFG_B1_P3_U0_DCFG6 0x4001166cu
N#define CYDEV_UCFG_B1_P3_U0_DCFG7 0x4001166eu
N#define CYDEV_UCFG_B1_P3_U1_BASE 0x40011680u
N#define CYDEV_UCFG_B1_P3_U1_SIZE 0x00000070u
N#define CYDEV_UCFG_B1_P3_U1_PLD_IT0 0x40011680u
N#define CYDEV_UCFG_B1_P3_U1_PLD_IT1 0x40011684u
N#define CYDEV_UCFG_B1_P3_U1_PLD_IT2 0x40011688u
N#define CYDEV_UCFG_B1_P3_U1_PLD_IT3 0x4001168cu
N#define CYDEV_UCFG_B1_P3_U1_PLD_IT4 0x40011690u
N#define CYDEV_UCFG_B1_P3_U1_PLD_IT5 0x40011694u
N#define CYDEV_UCFG_B1_P3_U1_PLD_IT6 0x40011698u
N#define CYDEV_UCFG_B1_P3_U1_PLD_IT7 0x4001169cu
N#define CYDEV_UCFG_B1_P3_U1_PLD_IT8 0x400116a0u
N#define CYDEV_UCFG_B1_P3_U1_PLD_IT9 0x400116a4u
N#define CYDEV_UCFG_B1_P3_U1_PLD_IT10 0x400116a8u
N#define CYDEV_UCFG_B1_P3_U1_PLD_IT11 0x400116acu
N#define CYDEV_UCFG_B1_P3_U1_PLD_ORT0 0x400116b0u
N#define CYDEV_UCFG_B1_P3_U1_PLD_ORT1 0x400116b2u
N#define CYDEV_UCFG_B1_P3_U1_PLD_ORT2 0x400116b4u
N#define CYDEV_UCFG_B1_P3_U1_PLD_ORT3 0x400116b6u
N#define CYDEV_UCFG_B1_P3_U1_MC_CFG_CEN_CONST 0x400116b8u
N#define CYDEV_UCFG_B1_P3_U1_MC_CFG_XORFB 0x400116bau
N#define CYDEV_UCFG_B1_P3_U1_MC_CFG_SET_RESET 0x400116bcu
N#define CYDEV_UCFG_B1_P3_U1_MC_CFG_BYPASS 0x400116beu
N#define CYDEV_UCFG_B1_P3_U1_CFG0 0x400116c0u
N#define CYDEV_UCFG_B1_P3_U1_CFG1 0x400116c1u
N#define CYDEV_UCFG_B1_P3_U1_CFG2 0x400116c2u
N#define CYDEV_UCFG_B1_P3_U1_CFG3 0x400116c3u
N#define CYDEV_UCFG_B1_P3_U1_CFG4 0x400116c4u
N#define CYDEV_UCFG_B1_P3_U1_CFG5 0x400116c5u
N#define CYDEV_UCFG_B1_P3_U1_CFG6 0x400116c6u
N#define CYDEV_UCFG_B1_P3_U1_CFG7 0x400116c7u
N#define CYDEV_UCFG_B1_P3_U1_CFG8 0x400116c8u
N#define CYDEV_UCFG_B1_P3_U1_CFG9 0x400116c9u
N#define CYDEV_UCFG_B1_P3_U1_CFG10 0x400116cau
N#define CYDEV_UCFG_B1_P3_U1_CFG11 0x400116cbu
N#define CYDEV_UCFG_B1_P3_U1_CFG12 0x400116ccu
N#define CYDEV_UCFG_B1_P3_U1_CFG13 0x400116cdu
N#define CYDEV_UCFG_B1_P3_U1_CFG14 0x400116ceu
N#define CYDEV_UCFG_B1_P3_U1_CFG15 0x400116cfu
N#define CYDEV_UCFG_B1_P3_U1_CFG16 0x400116d0u
N#define CYDEV_UCFG_B1_P3_U1_CFG17 0x400116d1u
N#define CYDEV_UCFG_B1_P3_U1_CFG18 0x400116d2u
N#define CYDEV_UCFG_B1_P3_U1_CFG19 0x400116d3u
N#define CYDEV_UCFG_B1_P3_U1_CFG20 0x400116d4u
N#define CYDEV_UCFG_B1_P3_U1_CFG21 0x400116d5u
N#define CYDEV_UCFG_B1_P3_U1_CFG22 0x400116d6u
N#define CYDEV_UCFG_B1_P3_U1_CFG23 0x400116d7u
N#define CYDEV_UCFG_B1_P3_U1_CFG24 0x400116d8u
N#define CYDEV_UCFG_B1_P3_U1_CFG25 0x400116d9u
N#define CYDEV_UCFG_B1_P3_U1_CFG26 0x400116dau
N#define CYDEV_UCFG_B1_P3_U1_CFG27 0x400116dbu
N#define CYDEV_UCFG_B1_P3_U1_CFG28 0x400116dcu
N#define CYDEV_UCFG_B1_P3_U1_CFG29 0x400116ddu
N#define CYDEV_UCFG_B1_P3_U1_CFG30 0x400116deu
N#define CYDEV_UCFG_B1_P3_U1_CFG31 0x400116dfu
N#define CYDEV_UCFG_B1_P3_U1_DCFG0 0x400116e0u
N#define CYDEV_UCFG_B1_P3_U1_DCFG1 0x400116e2u
N#define CYDEV_UCFG_B1_P3_U1_DCFG2 0x400116e4u
N#define CYDEV_UCFG_B1_P3_U1_DCFG3 0x400116e6u
N#define CYDEV_UCFG_B1_P3_U1_DCFG4 0x400116e8u
N#define CYDEV_UCFG_B1_P3_U1_DCFG5 0x400116eau
N#define CYDEV_UCFG_B1_P3_U1_DCFG6 0x400116ecu
N#define CYDEV_UCFG_B1_P3_U1_DCFG7 0x400116eeu
N#define CYDEV_UCFG_B1_P3_ROUTE_BASE 0x40011700u
N#define CYDEV_UCFG_B1_P3_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B1_P4_BASE 0x40011800u
N#define CYDEV_UCFG_B1_P4_SIZE 0x000001efu
N#define CYDEV_UCFG_B1_P4_U0_BASE 0x40011800u
N#define CYDEV_UCFG_B1_P4_U0_SIZE 0x00000070u
N#define CYDEV_UCFG_B1_P4_U0_PLD_IT0 0x40011800u
N#define CYDEV_UCFG_B1_P4_U0_PLD_IT1 0x40011804u
N#define CYDEV_UCFG_B1_P4_U0_PLD_IT2 0x40011808u
N#define CYDEV_UCFG_B1_P4_U0_PLD_IT3 0x4001180cu
N#define CYDEV_UCFG_B1_P4_U0_PLD_IT4 0x40011810u
N#define CYDEV_UCFG_B1_P4_U0_PLD_IT5 0x40011814u
N#define CYDEV_UCFG_B1_P4_U0_PLD_IT6 0x40011818u
N#define CYDEV_UCFG_B1_P4_U0_PLD_IT7 0x4001181cu
N#define CYDEV_UCFG_B1_P4_U0_PLD_IT8 0x40011820u
N#define CYDEV_UCFG_B1_P4_U0_PLD_IT9 0x40011824u
N#define CYDEV_UCFG_B1_P4_U0_PLD_IT10 0x40011828u
N#define CYDEV_UCFG_B1_P4_U0_PLD_IT11 0x4001182cu
N#define CYDEV_UCFG_B1_P4_U0_PLD_ORT0 0x40011830u
N#define CYDEV_UCFG_B1_P4_U0_PLD_ORT1 0x40011832u
N#define CYDEV_UCFG_B1_P4_U0_PLD_ORT2 0x40011834u
N#define CYDEV_UCFG_B1_P4_U0_PLD_ORT3 0x40011836u
N#define CYDEV_UCFG_B1_P4_U0_MC_CFG_CEN_CONST 0x40011838u
N#define CYDEV_UCFG_B1_P4_U0_MC_CFG_XORFB 0x4001183au
N#define CYDEV_UCFG_B1_P4_U0_MC_CFG_SET_RESET 0x4001183cu
N#define CYDEV_UCFG_B1_P4_U0_MC_CFG_BYPASS 0x4001183eu
N#define CYDEV_UCFG_B1_P4_U0_CFG0 0x40011840u
N#define CYDEV_UCFG_B1_P4_U0_CFG1 0x40011841u
N#define CYDEV_UCFG_B1_P4_U0_CFG2 0x40011842u
N#define CYDEV_UCFG_B1_P4_U0_CFG3 0x40011843u
N#define CYDEV_UCFG_B1_P4_U0_CFG4 0x40011844u
N#define CYDEV_UCFG_B1_P4_U0_CFG5 0x40011845u
N#define CYDEV_UCFG_B1_P4_U0_CFG6 0x40011846u
N#define CYDEV_UCFG_B1_P4_U0_CFG7 0x40011847u
N#define CYDEV_UCFG_B1_P4_U0_CFG8 0x40011848u
N#define CYDEV_UCFG_B1_P4_U0_CFG9 0x40011849u
N#define CYDEV_UCFG_B1_P4_U0_CFG10 0x4001184au
N#define CYDEV_UCFG_B1_P4_U0_CFG11 0x4001184bu
N#define CYDEV_UCFG_B1_P4_U0_CFG12 0x4001184cu
N#define CYDEV_UCFG_B1_P4_U0_CFG13 0x4001184du
N#define CYDEV_UCFG_B1_P4_U0_CFG14 0x4001184eu
N#define CYDEV_UCFG_B1_P4_U0_CFG15 0x4001184fu
N#define CYDEV_UCFG_B1_P4_U0_CFG16 0x40011850u
N#define CYDEV_UCFG_B1_P4_U0_CFG17 0x40011851u
N#define CYDEV_UCFG_B1_P4_U0_CFG18 0x40011852u
N#define CYDEV_UCFG_B1_P4_U0_CFG19 0x40011853u
N#define CYDEV_UCFG_B1_P4_U0_CFG20 0x40011854u
N#define CYDEV_UCFG_B1_P4_U0_CFG21 0x40011855u
N#define CYDEV_UCFG_B1_P4_U0_CFG22 0x40011856u
N#define CYDEV_UCFG_B1_P4_U0_CFG23 0x40011857u
N#define CYDEV_UCFG_B1_P4_U0_CFG24 0x40011858u
N#define CYDEV_UCFG_B1_P4_U0_CFG25 0x40011859u
N#define CYDEV_UCFG_B1_P4_U0_CFG26 0x4001185au
N#define CYDEV_UCFG_B1_P4_U0_CFG27 0x4001185bu
N#define CYDEV_UCFG_B1_P4_U0_CFG28 0x4001185cu
N#define CYDEV_UCFG_B1_P4_U0_CFG29 0x4001185du
N#define CYDEV_UCFG_B1_P4_U0_CFG30 0x4001185eu
N#define CYDEV_UCFG_B1_P4_U0_CFG31 0x4001185fu
N#define CYDEV_UCFG_B1_P4_U0_DCFG0 0x40011860u
N#define CYDEV_UCFG_B1_P4_U0_DCFG1 0x40011862u
N#define CYDEV_UCFG_B1_P4_U0_DCFG2 0x40011864u
N#define CYDEV_UCFG_B1_P4_U0_DCFG3 0x40011866u
N#define CYDEV_UCFG_B1_P4_U0_DCFG4 0x40011868u
N#define CYDEV_UCFG_B1_P4_U0_DCFG5 0x4001186au
N#define CYDEV_UCFG_B1_P4_U0_DCFG6 0x4001186cu
N#define CYDEV_UCFG_B1_P4_U0_DCFG7 0x4001186eu
N#define CYDEV_UCFG_B1_P4_U1_BASE 0x40011880u
N#define CYDEV_UCFG_B1_P4_U1_SIZE 0x00000070u
N#define CYDEV_UCFG_B1_P4_U1_PLD_IT0 0x40011880u
N#define CYDEV_UCFG_B1_P4_U1_PLD_IT1 0x40011884u
N#define CYDEV_UCFG_B1_P4_U1_PLD_IT2 0x40011888u
N#define CYDEV_UCFG_B1_P4_U1_PLD_IT3 0x4001188cu
N#define CYDEV_UCFG_B1_P4_U1_PLD_IT4 0x40011890u
N#define CYDEV_UCFG_B1_P4_U1_PLD_IT5 0x40011894u
N#define CYDEV_UCFG_B1_P4_U1_PLD_IT6 0x40011898u
N#define CYDEV_UCFG_B1_P4_U1_PLD_IT7 0x4001189cu
N#define CYDEV_UCFG_B1_P4_U1_PLD_IT8 0x400118a0u
N#define CYDEV_UCFG_B1_P4_U1_PLD_IT9 0x400118a4u
N#define CYDEV_UCFG_B1_P4_U1_PLD_IT10 0x400118a8u
N#define CYDEV_UCFG_B1_P4_U1_PLD_IT11 0x400118acu
N#define CYDEV_UCFG_B1_P4_U1_PLD_ORT0 0x400118b0u
N#define CYDEV_UCFG_B1_P4_U1_PLD_ORT1 0x400118b2u
N#define CYDEV_UCFG_B1_P4_U1_PLD_ORT2 0x400118b4u
N#define CYDEV_UCFG_B1_P4_U1_PLD_ORT3 0x400118b6u
N#define CYDEV_UCFG_B1_P4_U1_MC_CFG_CEN_CONST 0x400118b8u
N#define CYDEV_UCFG_B1_P4_U1_MC_CFG_XORFB 0x400118bau
N#define CYDEV_UCFG_B1_P4_U1_MC_CFG_SET_RESET 0x400118bcu
N#define CYDEV_UCFG_B1_P4_U1_MC_CFG_BYPASS 0x400118beu
N#define CYDEV_UCFG_B1_P4_U1_CFG0 0x400118c0u
N#define CYDEV_UCFG_B1_P4_U1_CFG1 0x400118c1u
N#define CYDEV_UCFG_B1_P4_U1_CFG2 0x400118c2u
N#define CYDEV_UCFG_B1_P4_U1_CFG3 0x400118c3u
N#define CYDEV_UCFG_B1_P4_U1_CFG4 0x400118c4u
N#define CYDEV_UCFG_B1_P4_U1_CFG5 0x400118c5u
N#define CYDEV_UCFG_B1_P4_U1_CFG6 0x400118c6u
N#define CYDEV_UCFG_B1_P4_U1_CFG7 0x400118c7u
N#define CYDEV_UCFG_B1_P4_U1_CFG8 0x400118c8u
N#define CYDEV_UCFG_B1_P4_U1_CFG9 0x400118c9u
N#define CYDEV_UCFG_B1_P4_U1_CFG10 0x400118cau
N#define CYDEV_UCFG_B1_P4_U1_CFG11 0x400118cbu
N#define CYDEV_UCFG_B1_P4_U1_CFG12 0x400118ccu
N#define CYDEV_UCFG_B1_P4_U1_CFG13 0x400118cdu
N#define CYDEV_UCFG_B1_P4_U1_CFG14 0x400118ceu
N#define CYDEV_UCFG_B1_P4_U1_CFG15 0x400118cfu
N#define CYDEV_UCFG_B1_P4_U1_CFG16 0x400118d0u
N#define CYDEV_UCFG_B1_P4_U1_CFG17 0x400118d1u
N#define CYDEV_UCFG_B1_P4_U1_CFG18 0x400118d2u
N#define CYDEV_UCFG_B1_P4_U1_CFG19 0x400118d3u
N#define CYDEV_UCFG_B1_P4_U1_CFG20 0x400118d4u
N#define CYDEV_UCFG_B1_P4_U1_CFG21 0x400118d5u
N#define CYDEV_UCFG_B1_P4_U1_CFG22 0x400118d6u
N#define CYDEV_UCFG_B1_P4_U1_CFG23 0x400118d7u
N#define CYDEV_UCFG_B1_P4_U1_CFG24 0x400118d8u
N#define CYDEV_UCFG_B1_P4_U1_CFG25 0x400118d9u
N#define CYDEV_UCFG_B1_P4_U1_CFG26 0x400118dau
N#define CYDEV_UCFG_B1_P4_U1_CFG27 0x400118dbu
N#define CYDEV_UCFG_B1_P4_U1_CFG28 0x400118dcu
N#define CYDEV_UCFG_B1_P4_U1_CFG29 0x400118ddu
N#define CYDEV_UCFG_B1_P4_U1_CFG30 0x400118deu
N#define CYDEV_UCFG_B1_P4_U1_CFG31 0x400118dfu
N#define CYDEV_UCFG_B1_P4_U1_DCFG0 0x400118e0u
N#define CYDEV_UCFG_B1_P4_U1_DCFG1 0x400118e2u
N#define CYDEV_UCFG_B1_P4_U1_DCFG2 0x400118e4u
N#define CYDEV_UCFG_B1_P4_U1_DCFG3 0x400118e6u
N#define CYDEV_UCFG_B1_P4_U1_DCFG4 0x400118e8u
N#define CYDEV_UCFG_B1_P4_U1_DCFG5 0x400118eau
N#define CYDEV_UCFG_B1_P4_U1_DCFG6 0x400118ecu
N#define CYDEV_UCFG_B1_P4_U1_DCFG7 0x400118eeu
N#define CYDEV_UCFG_B1_P4_ROUTE_BASE 0x40011900u
N#define CYDEV_UCFG_B1_P4_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B1_P5_BASE 0x40011a00u
N#define CYDEV_UCFG_B1_P5_SIZE 0x000001efu
N#define CYDEV_UCFG_B1_P5_U0_BASE 0x40011a00u
N#define CYDEV_UCFG_B1_P5_U0_SIZE 0x00000070u
N#define CYDEV_UCFG_B1_P5_U0_PLD_IT0 0x40011a00u
N#define CYDEV_UCFG_B1_P5_U0_PLD_IT1 0x40011a04u
N#define CYDEV_UCFG_B1_P5_U0_PLD_IT2 0x40011a08u
N#define CYDEV_UCFG_B1_P5_U0_PLD_IT3 0x40011a0cu
N#define CYDEV_UCFG_B1_P5_U0_PLD_IT4 0x40011a10u
N#define CYDEV_UCFG_B1_P5_U0_PLD_IT5 0x40011a14u
N#define CYDEV_UCFG_B1_P5_U0_PLD_IT6 0x40011a18u
N#define CYDEV_UCFG_B1_P5_U0_PLD_IT7 0x40011a1cu
N#define CYDEV_UCFG_B1_P5_U0_PLD_IT8 0x40011a20u
N#define CYDEV_UCFG_B1_P5_U0_PLD_IT9 0x40011a24u
N#define CYDEV_UCFG_B1_P5_U0_PLD_IT10 0x40011a28u
N#define CYDEV_UCFG_B1_P5_U0_PLD_IT11 0x40011a2cu
N#define CYDEV_UCFG_B1_P5_U0_PLD_ORT0 0x40011a30u
N#define CYDEV_UCFG_B1_P5_U0_PLD_ORT1 0x40011a32u
N#define CYDEV_UCFG_B1_P5_U0_PLD_ORT2 0x40011a34u
N#define CYDEV_UCFG_B1_P5_U0_PLD_ORT3 0x40011a36u
N#define CYDEV_UCFG_B1_P5_U0_MC_CFG_CEN_CONST 0x40011a38u
N#define CYDEV_UCFG_B1_P5_U0_MC_CFG_XORFB 0x40011a3au
N#define CYDEV_UCFG_B1_P5_U0_MC_CFG_SET_RESET 0x40011a3cu
N#define CYDEV_UCFG_B1_P5_U0_MC_CFG_BYPASS 0x40011a3eu
N#define CYDEV_UCFG_B1_P5_U0_CFG0 0x40011a40u
N#define CYDEV_UCFG_B1_P5_U0_CFG1 0x40011a41u
N#define CYDEV_UCFG_B1_P5_U0_CFG2 0x40011a42u
N#define CYDEV_UCFG_B1_P5_U0_CFG3 0x40011a43u
N#define CYDEV_UCFG_B1_P5_U0_CFG4 0x40011a44u
N#define CYDEV_UCFG_B1_P5_U0_CFG5 0x40011a45u
N#define CYDEV_UCFG_B1_P5_U0_CFG6 0x40011a46u
N#define CYDEV_UCFG_B1_P5_U0_CFG7 0x40011a47u
N#define CYDEV_UCFG_B1_P5_U0_CFG8 0x40011a48u
N#define CYDEV_UCFG_B1_P5_U0_CFG9 0x40011a49u
N#define CYDEV_UCFG_B1_P5_U0_CFG10 0x40011a4au
N#define CYDEV_UCFG_B1_P5_U0_CFG11 0x40011a4bu
N#define CYDEV_UCFG_B1_P5_U0_CFG12 0x40011a4cu
N#define CYDEV_UCFG_B1_P5_U0_CFG13 0x40011a4du
N#define CYDEV_UCFG_B1_P5_U0_CFG14 0x40011a4eu
N#define CYDEV_UCFG_B1_P5_U0_CFG15 0x40011a4fu
N#define CYDEV_UCFG_B1_P5_U0_CFG16 0x40011a50u
N#define CYDEV_UCFG_B1_P5_U0_CFG17 0x40011a51u
N#define CYDEV_UCFG_B1_P5_U0_CFG18 0x40011a52u
N#define CYDEV_UCFG_B1_P5_U0_CFG19 0x40011a53u
N#define CYDEV_UCFG_B1_P5_U0_CFG20 0x40011a54u
N#define CYDEV_UCFG_B1_P5_U0_CFG21 0x40011a55u
N#define CYDEV_UCFG_B1_P5_U0_CFG22 0x40011a56u
N#define CYDEV_UCFG_B1_P5_U0_CFG23 0x40011a57u
N#define CYDEV_UCFG_B1_P5_U0_CFG24 0x40011a58u
N#define CYDEV_UCFG_B1_P5_U0_CFG25 0x40011a59u
N#define CYDEV_UCFG_B1_P5_U0_CFG26 0x40011a5au
N#define CYDEV_UCFG_B1_P5_U0_CFG27 0x40011a5bu
N#define CYDEV_UCFG_B1_P5_U0_CFG28 0x40011a5cu
N#define CYDEV_UCFG_B1_P5_U0_CFG29 0x40011a5du
N#define CYDEV_UCFG_B1_P5_U0_CFG30 0x40011a5eu
N#define CYDEV_UCFG_B1_P5_U0_CFG31 0x40011a5fu
N#define CYDEV_UCFG_B1_P5_U0_DCFG0 0x40011a60u
N#define CYDEV_UCFG_B1_P5_U0_DCFG1 0x40011a62u
N#define CYDEV_UCFG_B1_P5_U0_DCFG2 0x40011a64u
N#define CYDEV_UCFG_B1_P5_U0_DCFG3 0x40011a66u
N#define CYDEV_UCFG_B1_P5_U0_DCFG4 0x40011a68u
N#define CYDEV_UCFG_B1_P5_U0_DCFG5 0x40011a6au
N#define CYDEV_UCFG_B1_P5_U0_DCFG6 0x40011a6cu
N#define CYDEV_UCFG_B1_P5_U0_DCFG7 0x40011a6eu
N#define CYDEV_UCFG_B1_P5_U1_BASE 0x40011a80u
N#define CYDEV_UCFG_B1_P5_U1_SIZE 0x00000070u
N#define CYDEV_UCFG_B1_P5_U1_PLD_IT0 0x40011a80u
N#define CYDEV_UCFG_B1_P5_U1_PLD_IT1 0x40011a84u
N#define CYDEV_UCFG_B1_P5_U1_PLD_IT2 0x40011a88u
N#define CYDEV_UCFG_B1_P5_U1_PLD_IT3 0x40011a8cu
N#define CYDEV_UCFG_B1_P5_U1_PLD_IT4 0x40011a90u
N#define CYDEV_UCFG_B1_P5_U1_PLD_IT5 0x40011a94u
N#define CYDEV_UCFG_B1_P5_U1_PLD_IT6 0x40011a98u
N#define CYDEV_UCFG_B1_P5_U1_PLD_IT7 0x40011a9cu
N#define CYDEV_UCFG_B1_P5_U1_PLD_IT8 0x40011aa0u
N#define CYDEV_UCFG_B1_P5_U1_PLD_IT9 0x40011aa4u
N#define CYDEV_UCFG_B1_P5_U1_PLD_IT10 0x40011aa8u
N#define CYDEV_UCFG_B1_P5_U1_PLD_IT11 0x40011aacu
N#define CYDEV_UCFG_B1_P5_U1_PLD_ORT0 0x40011ab0u
N#define CYDEV_UCFG_B1_P5_U1_PLD_ORT1 0x40011ab2u
N#define CYDEV_UCFG_B1_P5_U1_PLD_ORT2 0x40011ab4u
N#define CYDEV_UCFG_B1_P5_U1_PLD_ORT3 0x40011ab6u
N#define CYDEV_UCFG_B1_P5_U1_MC_CFG_CEN_CONST 0x40011ab8u
N#define CYDEV_UCFG_B1_P5_U1_MC_CFG_XORFB 0x40011abau
N#define CYDEV_UCFG_B1_P5_U1_MC_CFG_SET_RESET 0x40011abcu
N#define CYDEV_UCFG_B1_P5_U1_MC_CFG_BYPASS 0x40011abeu
N#define CYDEV_UCFG_B1_P5_U1_CFG0 0x40011ac0u
N#define CYDEV_UCFG_B1_P5_U1_CFG1 0x40011ac1u
N#define CYDEV_UCFG_B1_P5_U1_CFG2 0x40011ac2u
N#define CYDEV_UCFG_B1_P5_U1_CFG3 0x40011ac3u
N#define CYDEV_UCFG_B1_P5_U1_CFG4 0x40011ac4u
N#define CYDEV_UCFG_B1_P5_U1_CFG5 0x40011ac5u
N#define CYDEV_UCFG_B1_P5_U1_CFG6 0x40011ac6u
N#define CYDEV_UCFG_B1_P5_U1_CFG7 0x40011ac7u
N#define CYDEV_UCFG_B1_P5_U1_CFG8 0x40011ac8u
N#define CYDEV_UCFG_B1_P5_U1_CFG9 0x40011ac9u
N#define CYDEV_UCFG_B1_P5_U1_CFG10 0x40011acau
N#define CYDEV_UCFG_B1_P5_U1_CFG11 0x40011acbu
N#define CYDEV_UCFG_B1_P5_U1_CFG12 0x40011accu
N#define CYDEV_UCFG_B1_P5_U1_CFG13 0x40011acdu
N#define CYDEV_UCFG_B1_P5_U1_CFG14 0x40011aceu
N#define CYDEV_UCFG_B1_P5_U1_CFG15 0x40011acfu
N#define CYDEV_UCFG_B1_P5_U1_CFG16 0x40011ad0u
N#define CYDEV_UCFG_B1_P5_U1_CFG17 0x40011ad1u
N#define CYDEV_UCFG_B1_P5_U1_CFG18 0x40011ad2u
N#define CYDEV_UCFG_B1_P5_U1_CFG19 0x40011ad3u
N#define CYDEV_UCFG_B1_P5_U1_CFG20 0x40011ad4u
N#define CYDEV_UCFG_B1_P5_U1_CFG21 0x40011ad5u
N#define CYDEV_UCFG_B1_P5_U1_CFG22 0x40011ad6u
N#define CYDEV_UCFG_B1_P5_U1_CFG23 0x40011ad7u
N#define CYDEV_UCFG_B1_P5_U1_CFG24 0x40011ad8u
N#define CYDEV_UCFG_B1_P5_U1_CFG25 0x40011ad9u
N#define CYDEV_UCFG_B1_P5_U1_CFG26 0x40011adau
N#define CYDEV_UCFG_B1_P5_U1_CFG27 0x40011adbu
N#define CYDEV_UCFG_B1_P5_U1_CFG28 0x40011adcu
N#define CYDEV_UCFG_B1_P5_U1_CFG29 0x40011addu
N#define CYDEV_UCFG_B1_P5_U1_CFG30 0x40011adeu
N#define CYDEV_UCFG_B1_P5_U1_CFG31 0x40011adfu
N#define CYDEV_UCFG_B1_P5_U1_DCFG0 0x40011ae0u
N#define CYDEV_UCFG_B1_P5_U1_DCFG1 0x40011ae2u
N#define CYDEV_UCFG_B1_P5_U1_DCFG2 0x40011ae4u
N#define CYDEV_UCFG_B1_P5_U1_DCFG3 0x40011ae6u
N#define CYDEV_UCFG_B1_P5_U1_DCFG4 0x40011ae8u
N#define CYDEV_UCFG_B1_P5_U1_DCFG5 0x40011aeau
N#define CYDEV_UCFG_B1_P5_U1_DCFG6 0x40011aecu
N#define CYDEV_UCFG_B1_P5_U1_DCFG7 0x40011aeeu
N#define CYDEV_UCFG_B1_P5_ROUTE_BASE 0x40011b00u
N#define CYDEV_UCFG_B1_P5_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI0_BASE 0x40014000u
N#define CYDEV_UCFG_DSI0_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI1_BASE 0x40014100u
N#define CYDEV_UCFG_DSI1_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI2_BASE 0x40014200u
N#define CYDEV_UCFG_DSI2_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI3_BASE 0x40014300u
N#define CYDEV_UCFG_DSI3_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI4_BASE 0x40014400u
N#define CYDEV_UCFG_DSI4_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI5_BASE 0x40014500u
N#define CYDEV_UCFG_DSI5_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI6_BASE 0x40014600u
N#define CYDEV_UCFG_DSI6_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI7_BASE 0x40014700u
N#define CYDEV_UCFG_DSI7_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI8_BASE 0x40014800u
N#define CYDEV_UCFG_DSI8_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI9_BASE 0x40014900u
N#define CYDEV_UCFG_DSI9_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI12_BASE 0x40014c00u
N#define CYDEV_UCFG_DSI12_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI13_BASE 0x40014d00u
N#define CYDEV_UCFG_DSI13_SIZE 0x000000efu
N#define CYDEV_UCFG_BCTL0_BASE 0x40015000u
N#define CYDEV_UCFG_BCTL0_SIZE 0x00000010u
N#define CYDEV_UCFG_BCTL0_MDCLK_EN 0x40015000u
N#define CYDEV_UCFG_BCTL0_MBCLK_EN 0x40015001u
N#define CYDEV_UCFG_BCTL0_WAIT_CFG 0x40015002u
N#define CYDEV_UCFG_BCTL0_BANK_CTL 0x40015003u
N#define CYDEV_UCFG_BCTL0_UDB_TEST_3 0x40015007u
N#define CYDEV_UCFG_BCTL0_DCLK_EN0 0x40015008u
N#define CYDEV_UCFG_BCTL0_BCLK_EN0 0x40015009u
N#define CYDEV_UCFG_BCTL0_DCLK_EN1 0x4001500au
N#define CYDEV_UCFG_BCTL0_BCLK_EN1 0x4001500bu
N#define CYDEV_UCFG_BCTL0_DCLK_EN2 0x4001500cu
N#define CYDEV_UCFG_BCTL0_BCLK_EN2 0x4001500du
N#define CYDEV_UCFG_BCTL0_DCLK_EN3 0x4001500eu
N#define CYDEV_UCFG_BCTL0_BCLK_EN3 0x4001500fu
N#define CYDEV_UCFG_BCTL1_BASE 0x40015010u
N#define CYDEV_UCFG_BCTL1_SIZE 0x00000010u
N#define CYDEV_UCFG_BCTL1_MDCLK_EN 0x40015010u
N#define CYDEV_UCFG_BCTL1_MBCLK_EN 0x40015011u
N#define CYDEV_UCFG_BCTL1_WAIT_CFG 0x40015012u
N#define CYDEV_UCFG_BCTL1_BANK_CTL 0x40015013u
N#define CYDEV_UCFG_BCTL1_UDB_TEST_3 0x40015017u
N#define CYDEV_UCFG_BCTL1_DCLK_EN0 0x40015018u
N#define CYDEV_UCFG_BCTL1_BCLK_EN0 0x40015019u
N#define CYDEV_UCFG_BCTL1_DCLK_EN1 0x4001501au
N#define CYDEV_UCFG_BCTL1_BCLK_EN1 0x4001501bu
N#define CYDEV_UCFG_BCTL1_DCLK_EN2 0x4001501cu
N#define CYDEV_UCFG_BCTL1_BCLK_EN2 0x4001501du
N#define CYDEV_UCFG_BCTL1_DCLK_EN3 0x4001501eu
N#define CYDEV_UCFG_BCTL1_BCLK_EN3 0x4001501fu
N#define CYDEV_IDMUX_BASE 0x40015100u
N#define CYDEV_IDMUX_SIZE 0x00000016u
N#define CYDEV_IDMUX_IRQ_CTL0 0x40015100u
N#define CYDEV_IDMUX_IRQ_CTL1 0x40015101u
N#define CYDEV_IDMUX_IRQ_CTL2 0x40015102u
N#define CYDEV_IDMUX_IRQ_CTL3 0x40015103u
N#define CYDEV_IDMUX_IRQ_CTL4 0x40015104u
N#define CYDEV_IDMUX_IRQ_CTL5 0x40015105u
N#define CYDEV_IDMUX_IRQ_CTL6 0x40015106u
N#define CYDEV_IDMUX_IRQ_CTL7 0x40015107u
N#define CYDEV_IDMUX_DRQ_CTL0 0x40015110u
N#define CYDEV_IDMUX_DRQ_CTL1 0x40015111u
N#define CYDEV_IDMUX_DRQ_CTL2 0x40015112u
N#define CYDEV_IDMUX_DRQ_CTL3 0x40015113u
N#define CYDEV_IDMUX_DRQ_CTL4 0x40015114u
N#define CYDEV_IDMUX_DRQ_CTL5 0x40015115u
N#define CYDEV_CACHERAM_BASE 0x40030000u
N#define CYDEV_CACHERAM_SIZE 0x00000400u
N#define CYDEV_CACHERAM_DATA_MBASE 0x40030000u
N#define CYDEV_CACHERAM_DATA_MSIZE 0x00000400u
N#define CYDEV_SFR_BASE 0x40050100u
N#define CYDEV_SFR_SIZE 0x000000fbu
N#define CYDEV_SFR_GPIO0 0x40050180u
N#define CYDEV_SFR_GPIRD0 0x40050189u
N#define CYDEV_SFR_GPIO0_SEL 0x4005018au
N#define CYDEV_SFR_GPIO1 0x40050190u
N#define CYDEV_SFR_GPIRD1 0x40050191u
N#define CYDEV_SFR_GPIO2 0x40050198u
N#define CYDEV_SFR_GPIRD2 0x40050199u
N#define CYDEV_SFR_GPIO2_SEL 0x4005019au
N#define CYDEV_SFR_GPIO1_SEL 0x400501a2u
N#define CYDEV_SFR_GPIO3 0x400501b0u
N#define CYDEV_SFR_GPIRD3 0x400501b1u
N#define CYDEV_SFR_GPIO3_SEL 0x400501b2u
N#define CYDEV_SFR_GPIO4 0x400501c0u
N#define CYDEV_SFR_GPIRD4 0x400501c1u
N#define CYDEV_SFR_GPIO4_SEL 0x400501c2u
N#define CYDEV_SFR_GPIO5 0x400501c8u
N#define CYDEV_SFR_GPIRD5 0x400501c9u
N#define CYDEV_SFR_GPIO5_SEL 0x400501cau
N#define CYDEV_SFR_GPIO6 0x400501d8u
N#define CYDEV_SFR_GPIRD6 0x400501d9u
N#define CYDEV_SFR_GPIO6_SEL 0x400501dau
N#define CYDEV_SFR_GPIO12 0x400501e8u
N#define CYDEV_SFR_GPIRD12 0x400501e9u
N#define CYDEV_SFR_GPIO12_SEL 0x400501f2u
N#define CYDEV_SFR_GPIO15 0x400501f8u
N#define CYDEV_SFR_GPIRD15 0x400501f9u
N#define CYDEV_SFR_GPIO15_SEL 0x400501fau
N#define CYDEV_P3BA_BASE 0x40050300u
N#define CYDEV_P3BA_SIZE 0x0000002bu
N#define CYDEV_P3BA_Y_START 0x40050300u
N#define CYDEV_P3BA_YROLL 0x40050301u
N#define CYDEV_P3BA_YCFG 0x40050302u
N#define CYDEV_P3BA_X_START1 0x40050303u
N#define CYDEV_P3BA_X_START2 0x40050304u
N#define CYDEV_P3BA_XROLL1 0x40050305u
N#define CYDEV_P3BA_XROLL2 0x40050306u
N#define CYDEV_P3BA_XINC 0x40050307u
N#define CYDEV_P3BA_XCFG 0x40050308u
N#define CYDEV_P3BA_OFFSETADDR1 0x40050309u
N#define CYDEV_P3BA_OFFSETADDR2 0x4005030au
N#define CYDEV_P3BA_OFFSETADDR3 0x4005030bu
N#define CYDEV_P3BA_ABSADDR1 0x4005030cu
N#define CYDEV_P3BA_ABSADDR2 0x4005030du
N#define CYDEV_P3BA_ABSADDR3 0x4005030eu
N#define CYDEV_P3BA_ABSADDR4 0x4005030fu
N#define CYDEV_P3BA_DATCFG1 0x40050310u
N#define CYDEV_P3BA_DATCFG2 0x40050311u
N#define CYDEV_P3BA_CMP_RSLT1 0x40050314u
N#define CYDEV_P3BA_CMP_RSLT2 0x40050315u
N#define CYDEV_P3BA_CMP_RSLT3 0x40050316u
N#define CYDEV_P3BA_CMP_RSLT4 0x40050317u
N#define CYDEV_P3BA_DATA_REG1 0x40050318u
N#define CYDEV_P3BA_DATA_REG2 0x40050319u
N#define CYDEV_P3BA_DATA_REG3 0x4005031au
N#define CYDEV_P3BA_DATA_REG4 0x4005031bu
N#define CYDEV_P3BA_EXP_DATA1 0x4005031cu
N#define CYDEV_P3BA_EXP_DATA2 0x4005031du
N#define CYDEV_P3BA_EXP_DATA3 0x4005031eu
N#define CYDEV_P3BA_EXP_DATA4 0x4005031fu
N#define CYDEV_P3BA_MSTR_HRDATA1 0x40050320u
N#define CYDEV_P3BA_MSTR_HRDATA2 0x40050321u
N#define CYDEV_P3BA_MSTR_HRDATA3 0x40050322u
N#define CYDEV_P3BA_MSTR_HRDATA4 0x40050323u
N#define CYDEV_P3BA_BIST_EN 0x40050324u
N#define CYDEV_P3BA_PHUB_MASTER_SSR 0x40050325u
N#define CYDEV_P3BA_SEQCFG1 0x40050326u
N#define CYDEV_P3BA_SEQCFG2 0x40050327u
N#define CYDEV_P3BA_Y_CURR 0x40050328u
N#define CYDEV_P3BA_X_CURR1 0x40050329u
N#define CYDEV_P3BA_X_CURR2 0x4005032au
N#define CYDEV_PANTHER_BASE 0x40080000u
N#define CYDEV_PANTHER_SIZE 0x00000020u
N#define CYDEV_PANTHER_STCALIB_CFG 0x40080000u
N#define CYDEV_PANTHER_WAITPIPE 0x40080004u
N#define CYDEV_PANTHER_TRACE_CFG 0x40080008u
N#define CYDEV_PANTHER_DBG_CFG 0x4008000cu
N#define CYDEV_PANTHER_CM3_LCKRST_STAT 0x40080018u
N#define CYDEV_PANTHER_DEVICE_ID 0x4008001cu
N#define CYDEV_FLSECC_BASE 0x48000000u
N#define CYDEV_FLSECC_SIZE 0x00008000u
N#define CYDEV_FLSECC_DATA_MBASE 0x48000000u
N#define CYDEV_FLSECC_DATA_MSIZE 0x00008000u
N#define CYDEV_FLSHID_BASE 0x49000000u
N#define CYDEV_FLSHID_SIZE 0x00000200u
N#define CYDEV_FLSHID_RSVD_MBASE 0x49000000u
N#define CYDEV_FLSHID_RSVD_MSIZE 0x00000080u
N#define CYDEV_FLSHID_CUST_MDATA_MBASE 0x49000080u
N#define CYDEV_FLSHID_CUST_MDATA_MSIZE 0x00000080u
N#define CYDEV_FLSHID_CUST_TABLES_BASE 0x49000100u
N#define CYDEV_FLSHID_CUST_TABLES_SIZE 0x00000040u
N#define CYDEV_FLSHID_CUST_TABLES_Y_LOC 0x49000100u
N#define CYDEV_FLSHID_CUST_TABLES_X_LOC 0x49000101u
N#define CYDEV_FLSHID_CUST_TABLES_WAFER_NUM 0x49000102u
N#define CYDEV_FLSHID_CUST_TABLES_LOT_LSB 0x49000103u
N#define CYDEV_FLSHID_CUST_TABLES_LOT_MSB 0x49000104u
N#define CYDEV_FLSHID_CUST_TABLES_WRK_WK 0x49000105u
N#define CYDEV_FLSHID_CUST_TABLES_FAB_YR 0x49000106u
N#define CYDEV_FLSHID_CUST_TABLES_MINOR 0x49000107u
N#define CYDEV_FLSHID_CUST_TABLES_IMO_3MHZ 0x49000108u
N#define CYDEV_FLSHID_CUST_TABLES_IMO_6MHZ 0x49000109u
N#define CYDEV_FLSHID_CUST_TABLES_IMO_12MHZ 0x4900010au
N#define CYDEV_FLSHID_CUST_TABLES_IMO_24MHZ 0x4900010bu
N#define CYDEV_FLSHID_CUST_TABLES_IMO_67MHZ 0x4900010cu
N#define CYDEV_FLSHID_CUST_TABLES_IMO_80MHZ 0x4900010du
N#define CYDEV_FLSHID_CUST_TABLES_IMO_92MHZ 0x4900010eu
N#define CYDEV_FLSHID_CUST_TABLES_IMO_USB 0x4900010fu
N#define CYDEV_FLSHID_CUST_TABLES_CMP0_TR0_HS 0x49000110u
N#define CYDEV_FLSHID_CUST_TABLES_CMP1_TR0_HS 0x49000111u
N#define CYDEV_FLSHID_CUST_TABLES_CMP2_TR0_HS 0x49000112u
N#define CYDEV_FLSHID_CUST_TABLES_CMP3_TR0_HS 0x49000113u
N#define CYDEV_FLSHID_CUST_TABLES_CMP0_TR1_HS 0x49000114u
N#define CYDEV_FLSHID_CUST_TABLES_CMP1_TR1_HS 0x49000115u
N#define CYDEV_FLSHID_CUST_TABLES_CMP2_TR1_HS 0x49000116u
N#define CYDEV_FLSHID_CUST_TABLES_CMP3_TR1_HS 0x49000117u
N#define CYDEV_FLSHID_CUST_TABLES_DEC_M1 0x49000118u
N#define CYDEV_FLSHID_CUST_TABLES_DEC_M2 0x49000119u
N#define CYDEV_FLSHID_CUST_TABLES_DEC_M3 0x4900011au
N#define CYDEV_FLSHID_CUST_TABLES_DEC_M4 0x4900011bu
N#define CYDEV_FLSHID_CUST_TABLES_DEC_M5 0x4900011cu
N#define CYDEV_FLSHID_CUST_TABLES_DEC_M6 0x4900011du
N#define CYDEV_FLSHID_CUST_TABLES_DEC_M7 0x4900011eu
N#define CYDEV_FLSHID_CUST_TABLES_DEC_M8 0x4900011fu
N#define CYDEV_FLSHID_CUST_TABLES_DAC0_M1 0x49000120u
N#define CYDEV_FLSHID_CUST_TABLES_DAC0_M2 0x49000121u
N#define CYDEV_FLSHID_CUST_TABLES_DAC0_M3 0x49000122u
N#define CYDEV_FLSHID_CUST_TABLES_DAC0_M4 0x49000123u
N#define CYDEV_FLSHID_CUST_TABLES_DAC0_M5 0x49000124u
N#define CYDEV_FLSHID_CUST_TABLES_DAC0_M6 0x49000125u
N#define CYDEV_FLSHID_CUST_TABLES_DAC0_M7 0x49000126u
N#define CYDEV_FLSHID_CUST_TABLES_DAC0_M8 0x49000127u
N#define CYDEV_FLSHID_CUST_TABLES_DAC2_M1 0x49000128u
N#define CYDEV_FLSHID_CUST_TABLES_DAC2_M2 0x49000129u
N#define CYDEV_FLSHID_CUST_TABLES_DAC2_M3 0x4900012au
N#define CYDEV_FLSHID_CUST_TABLES_DAC2_M4 0x4900012bu
N#define CYDEV_FLSHID_CUST_TABLES_DAC2_M5 0x4900012cu
N#define CYDEV_FLSHID_CUST_TABLES_DAC2_M6 0x4900012du
N#define CYDEV_FLSHID_CUST_TABLES_DAC2_M7 0x4900012eu
N#define CYDEV_FLSHID_CUST_TABLES_DAC2_M8 0x4900012fu
N#define CYDEV_FLSHID_CUST_TABLES_DAC1_M1 0x49000130u
N#define CYDEV_FLSHID_CUST_TABLES_DAC1_M2 0x49000131u
N#define CYDEV_FLSHID_CUST_TABLES_DAC1_M3 0x49000132u
N#define CYDEV_FLSHID_CUST_TABLES_DAC1_M4 0x49000133u
N#define CYDEV_FLSHID_CUST_TABLES_DAC1_M5 0x49000134u
N#define CYDEV_FLSHID_CUST_TABLES_DAC1_M6 0x49000135u
N#define CYDEV_FLSHID_CUST_TABLES_DAC1_M7 0x49000136u
N#define CYDEV_FLSHID_CUST_TABLES_DAC1_M8 0x49000137u
N#define CYDEV_FLSHID_CUST_TABLES_DAC3_M1 0x49000138u
N#define CYDEV_FLSHID_CUST_TABLES_DAC3_M2 0x49000139u
N#define CYDEV_FLSHID_CUST_TABLES_DAC3_M3 0x4900013au
N#define CYDEV_FLSHID_CUST_TABLES_DAC3_M4 0x4900013bu
N#define CYDEV_FLSHID_CUST_TABLES_DAC3_M5 0x4900013cu
N#define CYDEV_FLSHID_CUST_TABLES_DAC3_M6 0x4900013du
N#define CYDEV_FLSHID_CUST_TABLES_DAC3_M7 0x4900013eu
N#define CYDEV_FLSHID_CUST_TABLES_DAC3_M8 0x4900013fu
N#define CYDEV_FLSHID_MFG_CFG_BASE 0x49000180u
N#define CYDEV_FLSHID_MFG_CFG_SIZE 0x00000080u
N#define CYDEV_FLSHID_MFG_CFG_IMO_TR1 0x49000188u
N#define CYDEV_FLSHID_MFG_CFG_CMP0_TR0 0x490001acu
N#define CYDEV_FLSHID_MFG_CFG_CMP1_TR0 0x490001aeu
N#define CYDEV_FLSHID_MFG_CFG_CMP2_TR0 0x490001b0u
N#define CYDEV_FLSHID_MFG_CFG_CMP3_TR0 0x490001b2u
N#define CYDEV_FLSHID_MFG_CFG_CMP0_TR1 0x490001b4u
N#define CYDEV_FLSHID_MFG_CFG_CMP1_TR1 0x490001b6u
N#define CYDEV_FLSHID_MFG_CFG_CMP2_TR1 0x490001b8u
N#define CYDEV_FLSHID_MFG_CFG_CMP3_TR1 0x490001bau
N#define CYDEV_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM 0x490001ceu
N#define CYDEV_EXTMEM_BASE 0x60000000u
N#define CYDEV_EXTMEM_SIZE 0x00800000u
N#define CYDEV_EXTMEM_DATA_MBASE 0x60000000u
N#define CYDEV_EXTMEM_DATA_MSIZE 0x00800000u
N#define CYDEV_ITM_BASE 0xe0000000u
N#define CYDEV_ITM_SIZE 0x00001000u
N#define CYDEV_ITM_TRACE_EN 0xe0000e00u
N#define CYDEV_ITM_TRACE_PRIVILEGE 0xe0000e40u
N#define CYDEV_ITM_TRACE_CTRL 0xe0000e80u
N#define CYDEV_ITM_LOCK_ACCESS 0xe0000fb0u
N#define CYDEV_ITM_LOCK_STATUS 0xe0000fb4u
N#define CYDEV_ITM_PID4 0xe0000fd0u
N#define CYDEV_ITM_PID5 0xe0000fd4u
N#define CYDEV_ITM_PID6 0xe0000fd8u
N#define CYDEV_ITM_PID7 0xe0000fdcu
N#define CYDEV_ITM_PID0 0xe0000fe0u
N#define CYDEV_ITM_PID1 0xe0000fe4u
N#define CYDEV_ITM_PID2 0xe0000fe8u
N#define CYDEV_ITM_PID3 0xe0000fecu
N#define CYDEV_ITM_CID0 0xe0000ff0u
N#define CYDEV_ITM_CID1 0xe0000ff4u
N#define CYDEV_ITM_CID2 0xe0000ff8u
N#define CYDEV_ITM_CID3 0xe0000ffcu
N#define CYDEV_DWT_BASE 0xe0001000u
N#define CYDEV_DWT_SIZE 0x0000005cu
N#define CYDEV_DWT_CTRL 0xe0001000u
N#define CYDEV_DWT_CYCLE_COUNT 0xe0001004u
N#define CYDEV_DWT_CPI_COUNT 0xe0001008u
N#define CYDEV_DWT_EXC_OVHD_COUNT 0xe000100cu
N#define CYDEV_DWT_SLEEP_COUNT 0xe0001010u
N#define CYDEV_DWT_LSU_COUNT 0xe0001014u
N#define CYDEV_DWT_FOLD_COUNT 0xe0001018u
N#define CYDEV_DWT_PC_SAMPLE 0xe000101cu
N#define CYDEV_DWT_COMP_0 0xe0001020u
N#define CYDEV_DWT_MASK_0 0xe0001024u
N#define CYDEV_DWT_FUNCTION_0 0xe0001028u
N#define CYDEV_DWT_COMP_1 0xe0001030u
N#define CYDEV_DWT_MASK_1 0xe0001034u
N#define CYDEV_DWT_FUNCTION_1 0xe0001038u
N#define CYDEV_DWT_COMP_2 0xe0001040u
N#define CYDEV_DWT_MASK_2 0xe0001044u
N#define CYDEV_DWT_FUNCTION_2 0xe0001048u
N#define CYDEV_DWT_COMP_3 0xe0001050u
N#define CYDEV_DWT_MASK_3 0xe0001054u
N#define CYDEV_DWT_FUNCTION_3 0xe0001058u
N#define CYDEV_FPB_BASE 0xe0002000u
N#define CYDEV_FPB_SIZE 0x00001000u
N#define CYDEV_FPB_CTRL 0xe0002000u
N#define CYDEV_FPB_REMAP 0xe0002004u
N#define CYDEV_FPB_FP_COMP_0 0xe0002008u
N#define CYDEV_FPB_FP_COMP_1 0xe000200cu
N#define CYDEV_FPB_FP_COMP_2 0xe0002010u
N#define CYDEV_FPB_FP_COMP_3 0xe0002014u
N#define CYDEV_FPB_FP_COMP_4 0xe0002018u
N#define CYDEV_FPB_FP_COMP_5 0xe000201cu
N#define CYDEV_FPB_FP_COMP_6 0xe0002020u
N#define CYDEV_FPB_FP_COMP_7 0xe0002024u
N#define CYDEV_FPB_PID4 0xe0002fd0u
N#define CYDEV_FPB_PID5 0xe0002fd4u
N#define CYDEV_FPB_PID6 0xe0002fd8u
N#define CYDEV_FPB_PID7 0xe0002fdcu
N#define CYDEV_FPB_PID0 0xe0002fe0u
N#define CYDEV_FPB_PID1 0xe0002fe4u
N#define CYDEV_FPB_PID2 0xe0002fe8u
N#define CYDEV_FPB_PID3 0xe0002fecu
N#define CYDEV_FPB_CID0 0xe0002ff0u
N#define CYDEV_FPB_CID1 0xe0002ff4u
N#define CYDEV_FPB_CID2 0xe0002ff8u
N#define CYDEV_FPB_CID3 0xe0002ffcu
N#define CYDEV_NVIC_BASE 0xe000e000u
N#define CYDEV_NVIC_SIZE 0x00000d3cu
N#define CYDEV_NVIC_INT_CTL_TYPE 0xe000e004u
N#define CYDEV_NVIC_SYSTICK_CTL 0xe000e010u
N#define CYDEV_NVIC_SYSTICK_RELOAD 0xe000e014u
N#define CYDEV_NVIC_SYSTICK_CURRENT 0xe000e018u
N#define CYDEV_NVIC_SYSTICK_CAL 0xe000e01cu
N#define CYDEV_NVIC_SETENA0 0xe000e100u
N#define CYDEV_NVIC_CLRENA0 0xe000e180u
N#define CYDEV_NVIC_SETPEND0 0xe000e200u
N#define CYDEV_NVIC_CLRPEND0 0xe000e280u
N#define CYDEV_NVIC_ACTIVE0 0xe000e300u
N#define CYDEV_NVIC_PRI_0 0xe000e400u
N#define CYDEV_NVIC_PRI_1 0xe000e401u
N#define CYDEV_NVIC_PRI_2 0xe000e402u
N#define CYDEV_NVIC_PRI_3 0xe000e403u
N#define CYDEV_NVIC_PRI_4 0xe000e404u
N#define CYDEV_NVIC_PRI_5 0xe000e405u
N#define CYDEV_NVIC_PRI_6 0xe000e406u
N#define CYDEV_NVIC_PRI_7 0xe000e407u
N#define CYDEV_NVIC_PRI_8 0xe000e408u
N#define CYDEV_NVIC_PRI_9 0xe000e409u
N#define CYDEV_NVIC_PRI_10 0xe000e40au
N#define CYDEV_NVIC_PRI_11 0xe000e40bu
N#define CYDEV_NVIC_PRI_12 0xe000e40cu
N#define CYDEV_NVIC_PRI_13 0xe000e40du
N#define CYDEV_NVIC_PRI_14 0xe000e40eu
N#define CYDEV_NVIC_PRI_15 0xe000e40fu
N#define CYDEV_NVIC_PRI_16 0xe000e410u
N#define CYDEV_NVIC_PRI_17 0xe000e411u
N#define CYDEV_NVIC_PRI_18 0xe000e412u
N#define CYDEV_NVIC_PRI_19 0xe000e413u
N#define CYDEV_NVIC_PRI_20 0xe000e414u
N#define CYDEV_NVIC_PRI_21 0xe000e415u
N#define CYDEV_NVIC_PRI_22 0xe000e416u
N#define CYDEV_NVIC_PRI_23 0xe000e417u
N#define CYDEV_NVIC_PRI_24 0xe000e418u
N#define CYDEV_NVIC_PRI_25 0xe000e419u
N#define CYDEV_NVIC_PRI_26 0xe000e41au
N#define CYDEV_NVIC_PRI_27 0xe000e41bu
N#define CYDEV_NVIC_PRI_28 0xe000e41cu
N#define CYDEV_NVIC_PRI_29 0xe000e41du
N#define CYDEV_NVIC_PRI_30 0xe000e41eu
N#define CYDEV_NVIC_PRI_31 0xe000e41fu
N#define CYDEV_NVIC_CPUID_BASE 0xe000ed00u
N#define CYDEV_NVIC_INTR_CTRL_STATE 0xe000ed04u
N#define CYDEV_NVIC_VECT_OFFSET 0xe000ed08u
N#define CYDEV_NVIC_APPLN_INTR 0xe000ed0cu
N#define CYDEV_NVIC_SYSTEM_CONTROL 0xe000ed10u
N#define CYDEV_NVIC_CFG_CONTROL 0xe000ed14u
N#define CYDEV_NVIC_SYS_PRIO_HANDLER_4_7 0xe000ed18u
N#define CYDEV_NVIC_SYS_PRIO_HANDLER_8_11 0xe000ed1cu
N#define CYDEV_NVIC_SYS_PRIO_HANDLER_12_15 0xe000ed20u
N#define CYDEV_NVIC_SYS_HANDLER_CSR 0xe000ed24u
N#define CYDEV_NVIC_MEMMAN_FAULT_STATUS 0xe000ed28u
N#define CYDEV_NVIC_BUS_FAULT_STATUS 0xe000ed29u
N#define CYDEV_NVIC_USAGE_FAULT_STATUS 0xe000ed2au
N#define CYDEV_NVIC_HARD_FAULT_STATUS 0xe000ed2cu
N#define CYDEV_NVIC_DEBUG_FAULT_STATUS 0xe000ed30u
N#define CYDEV_NVIC_MEMMAN_FAULT_ADD 0xe000ed34u
N#define CYDEV_NVIC_BUS_FAULT_ADD 0xe000ed38u
N#define CYDEV_CORE_DBG_BASE 0xe000edf0u
N#define CYDEV_CORE_DBG_SIZE 0x00000010u
N#define CYDEV_CORE_DBG_DBG_HLT_CS 0xe000edf0u
N#define CYDEV_CORE_DBG_DBG_REG_SEL 0xe000edf4u
N#define CYDEV_CORE_DBG_DBG_REG_DATA 0xe000edf8u
N#define CYDEV_CORE_DBG_EXC_MON_CTL 0xe000edfcu
N#define CYDEV_TPIU_BASE 0xe0040000u
N#define CYDEV_TPIU_SIZE 0x00001000u
N#define CYDEV_TPIU_SUPPORTED_SYNC_PRT_SZ 0xe0040000u
N#define CYDEV_TPIU_CURRENT_SYNC_PRT_SZ 0xe0040004u
N#define CYDEV_TPIU_ASYNC_CLK_PRESCALER 0xe0040010u
N#define CYDEV_TPIU_PROTOCOL 0xe00400f0u
N#define CYDEV_TPIU_FORM_FLUSH_STAT 0xe0040300u
N#define CYDEV_TPIU_FORM_FLUSH_CTRL 0xe0040304u
N#define CYDEV_TPIU_TRIGGER 0xe0040ee8u
N#define CYDEV_TPIU_ITETMDATA 0xe0040eecu
N#define CYDEV_TPIU_ITATBCTR2 0xe0040ef0u
N#define CYDEV_TPIU_ITATBCTR0 0xe0040ef8u
N#define CYDEV_TPIU_ITITMDATA 0xe0040efcu
N#define CYDEV_TPIU_ITCTRL 0xe0040f00u
N#define CYDEV_TPIU_DEVID 0xe0040fc8u
N#define CYDEV_TPIU_DEVTYPE 0xe0040fccu
N#define CYDEV_TPIU_PID4 0xe0040fd0u
N#define CYDEV_TPIU_PID5 0xe0040fd4u
N#define CYDEV_TPIU_PID6 0xe0040fd8u
N#define CYDEV_TPIU_PID7 0xe0040fdcu
N#define CYDEV_TPIU_PID0 0xe0040fe0u
N#define CYDEV_TPIU_PID1 0xe0040fe4u
N#define CYDEV_TPIU_PID2 0xe0040fe8u
N#define CYDEV_TPIU_PID3 0xe0040fecu
N#define CYDEV_TPIU_CID0 0xe0040ff0u
N#define CYDEV_TPIU_CID1 0xe0040ff4u
N#define CYDEV_TPIU_CID2 0xe0040ff8u
N#define CYDEV_TPIU_CID3 0xe0040ffcu
N#define CYDEV_ETM_BASE 0xe0041000u
N#define CYDEV_ETM_SIZE 0x00001000u
N#define CYDEV_ETM_CTL 0xe0041000u
N#define CYDEV_ETM_CFG_CODE 0xe0041004u
N#define CYDEV_ETM_TRIG_EVENT 0xe0041008u
N#define CYDEV_ETM_STATUS 0xe0041010u
N#define CYDEV_ETM_SYS_CFG 0xe0041014u
N#define CYDEV_ETM_TRACE_ENB_EVENT 0xe0041020u
N#define CYDEV_ETM_TRACE_EN_CTRL1 0xe0041024u
N#define CYDEV_ETM_FIFOFULL_LEVEL 0xe004102cu
N#define CYDEV_ETM_SYNC_FREQ 0xe00411e0u
N#define CYDEV_ETM_ETM_ID 0xe00411e4u
N#define CYDEV_ETM_CFG_CODE_EXT 0xe00411e8u
N#define CYDEV_ETM_TR_SS_EMBICE_CTRL 0xe00411f0u
N#define CYDEV_ETM_CS_TRACE_ID 0xe0041200u
N#define CYDEV_ETM_OS_LOCK_ACCESS 0xe0041300u
N#define CYDEV_ETM_OS_LOCK_STATUS 0xe0041304u
N#define CYDEV_ETM_PDSR 0xe0041314u
N#define CYDEV_ETM_ITMISCIN 0xe0041ee0u
N#define CYDEV_ETM_ITTRIGOUT 0xe0041ee8u
N#define CYDEV_ETM_ITATBCTR2 0xe0041ef0u
N#define CYDEV_ETM_ITATBCTR0 0xe0041ef8u
N#define CYDEV_ETM_INT_MODE_CTRL 0xe0041f00u
N#define CYDEV_ETM_CLM_TAG_SET 0xe0041fa0u
N#define CYDEV_ETM_CLM_TAG_CLR 0xe0041fa4u
N#define CYDEV_ETM_LOCK_ACCESS 0xe0041fb0u
N#define CYDEV_ETM_LOCK_STATUS 0xe0041fb4u
N#define CYDEV_ETM_AUTH_STATUS 0xe0041fb8u
N#define CYDEV_ETM_DEV_TYPE 0xe0041fccu
N#define CYDEV_ETM_PID4 0xe0041fd0u
N#define CYDEV_ETM_PID5 0xe0041fd4u
N#define CYDEV_ETM_PID6 0xe0041fd8u
N#define CYDEV_ETM_PID7 0xe0041fdcu
N#define CYDEV_ETM_PID0 0xe0041fe0u
N#define CYDEV_ETM_PID1 0xe0041fe4u
N#define CYDEV_ETM_PID2 0xe0041fe8u
N#define CYDEV_ETM_PID3 0xe0041fecu
N#define CYDEV_ETM_CID0 0xe0041ff0u
N#define CYDEV_ETM_CID1 0xe0041ff4u
N#define CYDEV_ETM_CID2 0xe0041ff8u
N#define CYDEV_ETM_CID3 0xe0041ffcu
N#define CYDEV_ROM_TABLE_BASE 0xe00ff000u
N#define CYDEV_ROM_TABLE_SIZE 0x00001000u
N#define CYDEV_ROM_TABLE_NVIC 0xe00ff000u
N#define CYDEV_ROM_TABLE_DWT 0xe00ff004u
N#define CYDEV_ROM_TABLE_FPB 0xe00ff008u
N#define CYDEV_ROM_TABLE_ITM 0xe00ff00cu
N#define CYDEV_ROM_TABLE_TPIU 0xe00ff010u
N#define CYDEV_ROM_TABLE_ETM 0xe00ff014u
N#define CYDEV_ROM_TABLE_END 0xe00ff018u
N#define CYDEV_ROM_TABLE_MEMTYPE 0xe00fffccu
N#define CYDEV_ROM_TABLE_PID4 0xe00fffd0u
N#define CYDEV_ROM_TABLE_PID5 0xe00fffd4u
N#define CYDEV_ROM_TABLE_PID6 0xe00fffd8u
N#define CYDEV_ROM_TABLE_PID7 0xe00fffdcu
N#define CYDEV_ROM_TABLE_PID0 0xe00fffe0u
N#define CYDEV_ROM_TABLE_PID1 0xe00fffe4u
N#define CYDEV_ROM_TABLE_PID2 0xe00fffe8u
N#define CYDEV_ROM_TABLE_PID3 0xe00fffecu
N#define CYDEV_ROM_TABLE_CID0 0xe00ffff0u
N#define CYDEV_ROM_TABLE_CID1 0xe00ffff4u
N#define CYDEV_ROM_TABLE_CID2 0xe00ffff8u
N#define CYDEV_ROM_TABLE_CID3 0xe00ffffcu
N#define CYDEV_FLS_SIZE CYDEV_FLASH_SIZE
N#define CYDEV_ECC_BASE CYDEV_FLSECC_BASE
N#define CYDEV_FLS_SECTOR_SIZE 0x00010000u
N#define CYDEV_FLS_ROW_SIZE 0x00000100u
N#define CYDEV_ECC_SECTOR_SIZE 0x00002000u
N#define CYDEV_ECC_ROW_SIZE 0x00000020u
N#define CYDEV_EEPROM_SECTOR_SIZE 0x00000400u
N#define CYDEV_EEPROM_ROW_SIZE 0x00000010u
N#define CYDEV_PERIPH_BASE CYDEV_CLKDIST_BASE
N#define CYCLK_LD_DISABLE 0x00000004u
N#define CYCLK_LD_SYNC_EN 0x00000002u
N#define CYCLK_LD_LOAD 0x00000001u
N#define CYCLK_PIPE 0x00000080u
N#define CYCLK_SSS 0x00000040u
N#define CYCLK_EARLY 0x00000020u
N#define CYCLK_DUTY 0x00000010u
N#define CYCLK_SYNC 0x00000008u
N#define CYCLK_SRC_SEL_CLK_SYNC_D 0
N#define CYCLK_SRC_SEL_SYNC_DIG 0
N#define CYCLK_SRC_SEL_IMO 1
N#define CYCLK_SRC_SEL_XTAL_MHZ 2
N#define CYCLK_SRC_SEL_XTALM 2
N#define CYCLK_SRC_SEL_ILO 3
N#define CYCLK_SRC_SEL_PLL 4
N#define CYCLK_SRC_SEL_XTAL_KHZ 5
N#define CYCLK_SRC_SEL_XTALK 5
N#define CYCLK_SRC_SEL_DSI_G 6
N#define CYCLK_SRC_SEL_DSI_D 7
N#define CYCLK_SRC_SEL_CLK_SYNC_A 0
N#define CYCLK_SRC_SEL_DSI_A 7
N#endif /* CYDEVICE_H */
L 20 "Generated_Source\PSoC5\cyfitter.h" 2
N#include "cydevice_trm.h"
L 1 "Generated_Source\PSoC5\cydevice_trm.h" 1
N/*******************************************************************************
N* File Name: cydevice_trm.h
N* 
N* PSoC Creator  4.4
N*
N* Description:
N* This file provides all of the address values for the entire PSoC device.
N* This file is automatically generated by PSoC Creator.
N*
N********************************************************************************
N* Copyright (c) 2007-2020 Cypress Semiconductor.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions, 
N* disclaimers, and limitations in the end user license agreement accompanying 
N* the software package with which this file was provided.
N********************************************************************************/
N
N#if !defined(CYDEVICE_TRM_H)
X#if !0L
N#define CYDEVICE_TRM_H
N#define CYDEV_FLASH_BASE 0x00000000u
N#define CYDEV_FLASH_SIZE 0x00040000u
N#define CYREG_FLASH_DATA_MBASE 0x00000000u
N#define CYREG_FLASH_DATA_MSIZE 0x00040000u
N#define CYDEV_SRAM_BASE 0x1fff8000u
N#define CYDEV_SRAM_SIZE 0x00010000u
N#define CYREG_SRAM_CODE64K_MBASE 0x1fff8000u
N#define CYREG_SRAM_CODE64K_MSIZE 0x00004000u
N#define CYREG_SRAM_CODE32K_MBASE 0x1fffc000u
N#define CYREG_SRAM_CODE32K_MSIZE 0x00002000u
N#define CYREG_SRAM_CODE16K_MBASE 0x1fffe000u
N#define CYREG_SRAM_CODE16K_MSIZE 0x00001000u
N#define CYREG_SRAM_CODE_MBASE 0x1fff8000u
N#define CYREG_SRAM_CODE_MSIZE 0x00008000u
N#define CYREG_SRAM_DATA_MBASE 0x20000000u
N#define CYREG_SRAM_DATA_MSIZE 0x00008000u
N#define CYREG_SRAM_DATA16K_MBASE 0x20001000u
N#define CYREG_SRAM_DATA16K_MSIZE 0x00001000u
N#define CYREG_SRAM_DATA32K_MBASE 0x20002000u
N#define CYREG_SRAM_DATA32K_MSIZE 0x00002000u
N#define CYREG_SRAM_DATA64K_MBASE 0x20004000u
N#define CYREG_SRAM_DATA64K_MSIZE 0x00004000u
N#define CYDEV_DMA_BASE 0x20008000u
N#define CYDEV_DMA_SIZE 0x00008000u
N#define CYREG_DMA_SRAM64K_MBASE 0x20008000u
N#define CYREG_DMA_SRAM64K_MSIZE 0x00004000u
N#define CYREG_DMA_SRAM32K_MBASE 0x2000c000u
N#define CYREG_DMA_SRAM32K_MSIZE 0x00002000u
N#define CYREG_DMA_SRAM16K_MBASE 0x2000e000u
N#define CYREG_DMA_SRAM16K_MSIZE 0x00001000u
N#define CYREG_DMA_SRAM_MBASE 0x2000f000u
N#define CYREG_DMA_SRAM_MSIZE 0x00001000u
N#define CYDEV_CLKDIST_BASE 0x40004000u
N#define CYDEV_CLKDIST_SIZE 0x00000110u
N#define CYREG_CLKDIST_CR 0x40004000u
N#define CYREG_CLKDIST_LD 0x40004001u
N#define CYREG_CLKDIST_WRK0 0x40004002u
N#define CYREG_CLKDIST_WRK1 0x40004003u
N#define CYREG_CLKDIST_MSTR0 0x40004004u
N#define CYREG_CLKDIST_MSTR1 0x40004005u
N#define CYREG_CLKDIST_BCFG0 0x40004006u
N#define CYREG_CLKDIST_BCFG1 0x40004007u
N#define CYREG_CLKDIST_BCFG2 0x40004008u
N#define CYREG_CLKDIST_UCFG 0x40004009u
N#define CYREG_CLKDIST_DLY0 0x4000400au
N#define CYREG_CLKDIST_DLY1 0x4000400bu
N#define CYREG_CLKDIST_DMASK 0x40004010u
N#define CYREG_CLKDIST_AMASK 0x40004014u
N#define CYDEV_CLKDIST_DCFG0_BASE 0x40004080u
N#define CYDEV_CLKDIST_DCFG0_SIZE 0x00000003u
N#define CYREG_CLKDIST_DCFG0_CFG0 0x40004080u
N#define CYREG_CLKDIST_DCFG0_CFG1 0x40004081u
N#define CYREG_CLKDIST_DCFG0_CFG2 0x40004082u
N#define CYDEV_CLKDIST_DCFG1_BASE 0x40004084u
N#define CYDEV_CLKDIST_DCFG1_SIZE 0x00000003u
N#define CYREG_CLKDIST_DCFG1_CFG0 0x40004084u
N#define CYREG_CLKDIST_DCFG1_CFG1 0x40004085u
N#define CYREG_CLKDIST_DCFG1_CFG2 0x40004086u
N#define CYDEV_CLKDIST_DCFG2_BASE 0x40004088u
N#define CYDEV_CLKDIST_DCFG2_SIZE 0x00000003u
N#define CYREG_CLKDIST_DCFG2_CFG0 0x40004088u
N#define CYREG_CLKDIST_DCFG2_CFG1 0x40004089u
N#define CYREG_CLKDIST_DCFG2_CFG2 0x4000408au
N#define CYDEV_CLKDIST_DCFG3_BASE 0x4000408cu
N#define CYDEV_CLKDIST_DCFG3_SIZE 0x00000003u
N#define CYREG_CLKDIST_DCFG3_CFG0 0x4000408cu
N#define CYREG_CLKDIST_DCFG3_CFG1 0x4000408du
N#define CYREG_CLKDIST_DCFG3_CFG2 0x4000408eu
N#define CYDEV_CLKDIST_DCFG4_BASE 0x40004090u
N#define CYDEV_CLKDIST_DCFG4_SIZE 0x00000003u
N#define CYREG_CLKDIST_DCFG4_CFG0 0x40004090u
N#define CYREG_CLKDIST_DCFG4_CFG1 0x40004091u
N#define CYREG_CLKDIST_DCFG4_CFG2 0x40004092u
N#define CYDEV_CLKDIST_DCFG5_BASE 0x40004094u
N#define CYDEV_CLKDIST_DCFG5_SIZE 0x00000003u
N#define CYREG_CLKDIST_DCFG5_CFG0 0x40004094u
N#define CYREG_CLKDIST_DCFG5_CFG1 0x40004095u
N#define CYREG_CLKDIST_DCFG5_CFG2 0x40004096u
N#define CYDEV_CLKDIST_DCFG6_BASE 0x40004098u
N#define CYDEV_CLKDIST_DCFG6_SIZE 0x00000003u
N#define CYREG_CLKDIST_DCFG6_CFG0 0x40004098u
N#define CYREG_CLKDIST_DCFG6_CFG1 0x40004099u
N#define CYREG_CLKDIST_DCFG6_CFG2 0x4000409au
N#define CYDEV_CLKDIST_DCFG7_BASE 0x4000409cu
N#define CYDEV_CLKDIST_DCFG7_SIZE 0x00000003u
N#define CYREG_CLKDIST_DCFG7_CFG0 0x4000409cu
N#define CYREG_CLKDIST_DCFG7_CFG1 0x4000409du
N#define CYREG_CLKDIST_DCFG7_CFG2 0x4000409eu
N#define CYDEV_CLKDIST_ACFG0_BASE 0x40004100u
N#define CYDEV_CLKDIST_ACFG0_SIZE 0x00000004u
N#define CYREG_CLKDIST_ACFG0_CFG0 0x40004100u
N#define CYREG_CLKDIST_ACFG0_CFG1 0x40004101u
N#define CYREG_CLKDIST_ACFG0_CFG2 0x40004102u
N#define CYREG_CLKDIST_ACFG0_CFG3 0x40004103u
N#define CYDEV_CLKDIST_ACFG1_BASE 0x40004104u
N#define CYDEV_CLKDIST_ACFG1_SIZE 0x00000004u
N#define CYREG_CLKDIST_ACFG1_CFG0 0x40004104u
N#define CYREG_CLKDIST_ACFG1_CFG1 0x40004105u
N#define CYREG_CLKDIST_ACFG1_CFG2 0x40004106u
N#define CYREG_CLKDIST_ACFG1_CFG3 0x40004107u
N#define CYDEV_CLKDIST_ACFG2_BASE 0x40004108u
N#define CYDEV_CLKDIST_ACFG2_SIZE 0x00000004u
N#define CYREG_CLKDIST_ACFG2_CFG0 0x40004108u
N#define CYREG_CLKDIST_ACFG2_CFG1 0x40004109u
N#define CYREG_CLKDIST_ACFG2_CFG2 0x4000410au
N#define CYREG_CLKDIST_ACFG2_CFG3 0x4000410bu
N#define CYDEV_CLKDIST_ACFG3_BASE 0x4000410cu
N#define CYDEV_CLKDIST_ACFG3_SIZE 0x00000004u
N#define CYREG_CLKDIST_ACFG3_CFG0 0x4000410cu
N#define CYREG_CLKDIST_ACFG3_CFG1 0x4000410du
N#define CYREG_CLKDIST_ACFG3_CFG2 0x4000410eu
N#define CYREG_CLKDIST_ACFG3_CFG3 0x4000410fu
N#define CYDEV_FASTCLK_BASE 0x40004200u
N#define CYDEV_FASTCLK_SIZE 0x00000026u
N#define CYDEV_FASTCLK_IMO_BASE 0x40004200u
N#define CYDEV_FASTCLK_IMO_SIZE 0x00000001u
N#define CYREG_FASTCLK_IMO_CR 0x40004200u
N#define CYDEV_FASTCLK_XMHZ_BASE 0x40004210u
N#define CYDEV_FASTCLK_XMHZ_SIZE 0x00000004u
N#define CYREG_FASTCLK_XMHZ_CSR 0x40004210u
N#define CYREG_FASTCLK_XMHZ_CFG0 0x40004212u
N#define CYREG_FASTCLK_XMHZ_CFG1 0x40004213u
N#define CYDEV_FASTCLK_PLL_BASE 0x40004220u
N#define CYDEV_FASTCLK_PLL_SIZE 0x00000006u
N#define CYREG_FASTCLK_PLL_CFG0 0x40004220u
N#define CYREG_FASTCLK_PLL_CFG1 0x40004221u
N#define CYREG_FASTCLK_PLL_P 0x40004222u
N#define CYREG_FASTCLK_PLL_Q 0x40004223u
N#define CYREG_FASTCLK_PLL_SR 0x40004225u
N#define CYDEV_SLOWCLK_BASE 0x40004300u
N#define CYDEV_SLOWCLK_SIZE 0x0000000bu
N#define CYDEV_SLOWCLK_ILO_BASE 0x40004300u
N#define CYDEV_SLOWCLK_ILO_SIZE 0x00000002u
N#define CYREG_SLOWCLK_ILO_CR0 0x40004300u
N#define CYREG_SLOWCLK_ILO_CR1 0x40004301u
N#define CYDEV_SLOWCLK_X32_BASE 0x40004308u
N#define CYDEV_SLOWCLK_X32_SIZE 0x00000003u
N#define CYREG_SLOWCLK_X32_CR 0x40004308u
N#define CYREG_SLOWCLK_X32_CFG 0x40004309u
N#define CYREG_SLOWCLK_X32_TST 0x4000430au
N#define CYDEV_BOOST_BASE 0x40004320u
N#define CYDEV_BOOST_SIZE 0x00000007u
N#define CYREG_BOOST_CR0 0x40004320u
N#define CYREG_BOOST_CR1 0x40004321u
N#define CYREG_BOOST_CR2 0x40004322u
N#define CYREG_BOOST_CR3 0x40004323u
N#define CYREG_BOOST_SR 0x40004324u
N#define CYREG_BOOST_CR4 0x40004325u
N#define CYREG_BOOST_SR2 0x40004326u
N#define CYDEV_PWRSYS_BASE 0x40004330u
N#define CYDEV_PWRSYS_SIZE 0x00000002u
N#define CYREG_PWRSYS_CR0 0x40004330u
N#define CYREG_PWRSYS_CR1 0x40004331u
N#define CYDEV_PM_BASE 0x40004380u
N#define CYDEV_PM_SIZE 0x00000057u
N#define CYREG_PM_TW_CFG0 0x40004380u
N#define CYREG_PM_TW_CFG1 0x40004381u
N#define CYREG_PM_TW_CFG2 0x40004382u
N#define CYREG_PM_WDT_CFG 0x40004383u
N#define CYREG_PM_WDT_CR 0x40004384u
N#define CYREG_PM_INT_SR 0x40004390u
N#define CYREG_PM_MODE_CFG0 0x40004391u
N#define CYREG_PM_MODE_CFG1 0x40004392u
N#define CYREG_PM_MODE_CSR 0x40004393u
N#define CYREG_PM_USB_CR0 0x40004394u
N#define CYREG_PM_WAKEUP_CFG0 0x40004398u
N#define CYREG_PM_WAKEUP_CFG1 0x40004399u
N#define CYREG_PM_WAKEUP_CFG2 0x4000439au
N#define CYDEV_PM_ACT_BASE 0x400043a0u
N#define CYDEV_PM_ACT_SIZE 0x0000000eu
N#define CYREG_PM_ACT_CFG0 0x400043a0u
N#define CYREG_PM_ACT_CFG1 0x400043a1u
N#define CYREG_PM_ACT_CFG2 0x400043a2u
N#define CYREG_PM_ACT_CFG3 0x400043a3u
N#define CYREG_PM_ACT_CFG4 0x400043a4u
N#define CYREG_PM_ACT_CFG5 0x400043a5u
N#define CYREG_PM_ACT_CFG6 0x400043a6u
N#define CYREG_PM_ACT_CFG7 0x400043a7u
N#define CYREG_PM_ACT_CFG8 0x400043a8u
N#define CYREG_PM_ACT_CFG9 0x400043a9u
N#define CYREG_PM_ACT_CFG10 0x400043aau
N#define CYREG_PM_ACT_CFG11 0x400043abu
N#define CYREG_PM_ACT_CFG12 0x400043acu
N#define CYREG_PM_ACT_CFG13 0x400043adu
N#define CYDEV_PM_STBY_BASE 0x400043b0u
N#define CYDEV_PM_STBY_SIZE 0x0000000eu
N#define CYREG_PM_STBY_CFG0 0x400043b0u
N#define CYREG_PM_STBY_CFG1 0x400043b1u
N#define CYREG_PM_STBY_CFG2 0x400043b2u
N#define CYREG_PM_STBY_CFG3 0x400043b3u
N#define CYREG_PM_STBY_CFG4 0x400043b4u
N#define CYREG_PM_STBY_CFG5 0x400043b5u
N#define CYREG_PM_STBY_CFG6 0x400043b6u
N#define CYREG_PM_STBY_CFG7 0x400043b7u
N#define CYREG_PM_STBY_CFG8 0x400043b8u
N#define CYREG_PM_STBY_CFG9 0x400043b9u
N#define CYREG_PM_STBY_CFG10 0x400043bau
N#define CYREG_PM_STBY_CFG11 0x400043bbu
N#define CYREG_PM_STBY_CFG12 0x400043bcu
N#define CYREG_PM_STBY_CFG13 0x400043bdu
N#define CYDEV_PM_AVAIL_BASE 0x400043c0u
N#define CYDEV_PM_AVAIL_SIZE 0x00000017u
N#define CYREG_PM_AVAIL_CR0 0x400043c0u
N#define CYREG_PM_AVAIL_CR1 0x400043c1u
N#define CYREG_PM_AVAIL_CR2 0x400043c2u
N#define CYREG_PM_AVAIL_CR3 0x400043c3u
N#define CYREG_PM_AVAIL_CR4 0x400043c4u
N#define CYREG_PM_AVAIL_CR5 0x400043c5u
N#define CYREG_PM_AVAIL_CR6 0x400043c6u
N#define CYREG_PM_AVAIL_SR0 0x400043d0u
N#define CYREG_PM_AVAIL_SR1 0x400043d1u
N#define CYREG_PM_AVAIL_SR2 0x400043d2u
N#define CYREG_PM_AVAIL_SR3 0x400043d3u
N#define CYREG_PM_AVAIL_SR4 0x400043d4u
N#define CYREG_PM_AVAIL_SR5 0x400043d5u
N#define CYREG_PM_AVAIL_SR6 0x400043d6u
N#define CYDEV_PICU_BASE 0x40004500u
N#define CYDEV_PICU_SIZE 0x000000b0u
N#define CYDEV_PICU_INTTYPE_BASE 0x40004500u
N#define CYDEV_PICU_INTTYPE_SIZE 0x00000080u
N#define CYDEV_PICU_INTTYPE_PICU0_BASE 0x40004500u
N#define CYDEV_PICU_INTTYPE_PICU0_SIZE 0x00000008u
N#define CYREG_PICU0_INTTYPE0 0x40004500u
N#define CYREG_PICU0_INTTYPE1 0x40004501u
N#define CYREG_PICU0_INTTYPE2 0x40004502u
N#define CYREG_PICU0_INTTYPE3 0x40004503u
N#define CYREG_PICU0_INTTYPE4 0x40004504u
N#define CYREG_PICU0_INTTYPE5 0x40004505u
N#define CYREG_PICU0_INTTYPE6 0x40004506u
N#define CYREG_PICU0_INTTYPE7 0x40004507u
N#define CYDEV_PICU_INTTYPE_PICU1_BASE 0x40004508u
N#define CYDEV_PICU_INTTYPE_PICU1_SIZE 0x00000008u
N#define CYREG_PICU1_INTTYPE0 0x40004508u
N#define CYREG_PICU1_INTTYPE1 0x40004509u
N#define CYREG_PICU1_INTTYPE2 0x4000450au
N#define CYREG_PICU1_INTTYPE3 0x4000450bu
N#define CYREG_PICU1_INTTYPE4 0x4000450cu
N#define CYREG_PICU1_INTTYPE5 0x4000450du
N#define CYREG_PICU1_INTTYPE6 0x4000450eu
N#define CYREG_PICU1_INTTYPE7 0x4000450fu
N#define CYDEV_PICU_INTTYPE_PICU2_BASE 0x40004510u
N#define CYDEV_PICU_INTTYPE_PICU2_SIZE 0x00000008u
N#define CYREG_PICU2_INTTYPE0 0x40004510u
N#define CYREG_PICU2_INTTYPE1 0x40004511u
N#define CYREG_PICU2_INTTYPE2 0x40004512u
N#define CYREG_PICU2_INTTYPE3 0x40004513u
N#define CYREG_PICU2_INTTYPE4 0x40004514u
N#define CYREG_PICU2_INTTYPE5 0x40004515u
N#define CYREG_PICU2_INTTYPE6 0x40004516u
N#define CYREG_PICU2_INTTYPE7 0x40004517u
N#define CYDEV_PICU_INTTYPE_PICU3_BASE 0x40004518u
N#define CYDEV_PICU_INTTYPE_PICU3_SIZE 0x00000008u
N#define CYREG_PICU3_INTTYPE0 0x40004518u
N#define CYREG_PICU3_INTTYPE1 0x40004519u
N#define CYREG_PICU3_INTTYPE2 0x4000451au
N#define CYREG_PICU3_INTTYPE3 0x4000451bu
N#define CYREG_PICU3_INTTYPE4 0x4000451cu
N#define CYREG_PICU3_INTTYPE5 0x4000451du
N#define CYREG_PICU3_INTTYPE6 0x4000451eu
N#define CYREG_PICU3_INTTYPE7 0x4000451fu
N#define CYDEV_PICU_INTTYPE_PICU4_BASE 0x40004520u
N#define CYDEV_PICU_INTTYPE_PICU4_SIZE 0x00000008u
N#define CYREG_PICU4_INTTYPE0 0x40004520u
N#define CYREG_PICU4_INTTYPE1 0x40004521u
N#define CYREG_PICU4_INTTYPE2 0x40004522u
N#define CYREG_PICU4_INTTYPE3 0x40004523u
N#define CYREG_PICU4_INTTYPE4 0x40004524u
N#define CYREG_PICU4_INTTYPE5 0x40004525u
N#define CYREG_PICU4_INTTYPE6 0x40004526u
N#define CYREG_PICU4_INTTYPE7 0x40004527u
N#define CYDEV_PICU_INTTYPE_PICU5_BASE 0x40004528u
N#define CYDEV_PICU_INTTYPE_PICU5_SIZE 0x00000008u
N#define CYREG_PICU5_INTTYPE0 0x40004528u
N#define CYREG_PICU5_INTTYPE1 0x40004529u
N#define CYREG_PICU5_INTTYPE2 0x4000452au
N#define CYREG_PICU5_INTTYPE3 0x4000452bu
N#define CYREG_PICU5_INTTYPE4 0x4000452cu
N#define CYREG_PICU5_INTTYPE5 0x4000452du
N#define CYREG_PICU5_INTTYPE6 0x4000452eu
N#define CYREG_PICU5_INTTYPE7 0x4000452fu
N#define CYDEV_PICU_INTTYPE_PICU6_BASE 0x40004530u
N#define CYDEV_PICU_INTTYPE_PICU6_SIZE 0x00000008u
N#define CYREG_PICU6_INTTYPE0 0x40004530u
N#define CYREG_PICU6_INTTYPE1 0x40004531u
N#define CYREG_PICU6_INTTYPE2 0x40004532u
N#define CYREG_PICU6_INTTYPE3 0x40004533u
N#define CYREG_PICU6_INTTYPE4 0x40004534u
N#define CYREG_PICU6_INTTYPE5 0x40004535u
N#define CYREG_PICU6_INTTYPE6 0x40004536u
N#define CYREG_PICU6_INTTYPE7 0x40004537u
N#define CYDEV_PICU_INTTYPE_PICU12_BASE 0x40004560u
N#define CYDEV_PICU_INTTYPE_PICU12_SIZE 0x00000008u
N#define CYREG_PICU12_INTTYPE0 0x40004560u
N#define CYREG_PICU12_INTTYPE1 0x40004561u
N#define CYREG_PICU12_INTTYPE2 0x40004562u
N#define CYREG_PICU12_INTTYPE3 0x40004563u
N#define CYREG_PICU12_INTTYPE4 0x40004564u
N#define CYREG_PICU12_INTTYPE5 0x40004565u
N#define CYREG_PICU12_INTTYPE6 0x40004566u
N#define CYREG_PICU12_INTTYPE7 0x40004567u
N#define CYDEV_PICU_INTTYPE_PICU15_BASE 0x40004578u
N#define CYDEV_PICU_INTTYPE_PICU15_SIZE 0x00000008u
N#define CYREG_PICU15_INTTYPE0 0x40004578u
N#define CYREG_PICU15_INTTYPE1 0x40004579u
N#define CYREG_PICU15_INTTYPE2 0x4000457au
N#define CYREG_PICU15_INTTYPE3 0x4000457bu
N#define CYREG_PICU15_INTTYPE4 0x4000457cu
N#define CYREG_PICU15_INTTYPE5 0x4000457du
N#define CYREG_PICU15_INTTYPE6 0x4000457eu
N#define CYREG_PICU15_INTTYPE7 0x4000457fu
N#define CYDEV_PICU_STAT_BASE 0x40004580u
N#define CYDEV_PICU_STAT_SIZE 0x00000010u
N#define CYDEV_PICU_STAT_PICU0_BASE 0x40004580u
N#define CYDEV_PICU_STAT_PICU0_SIZE 0x00000001u
N#define CYREG_PICU0_INTSTAT 0x40004580u
N#define CYDEV_PICU_STAT_PICU1_BASE 0x40004581u
N#define CYDEV_PICU_STAT_PICU1_SIZE 0x00000001u
N#define CYREG_PICU1_INTSTAT 0x40004581u
N#define CYDEV_PICU_STAT_PICU2_BASE 0x40004582u
N#define CYDEV_PICU_STAT_PICU2_SIZE 0x00000001u
N#define CYREG_PICU2_INTSTAT 0x40004582u
N#define CYDEV_PICU_STAT_PICU3_BASE 0x40004583u
N#define CYDEV_PICU_STAT_PICU3_SIZE 0x00000001u
N#define CYREG_PICU3_INTSTAT 0x40004583u
N#define CYDEV_PICU_STAT_PICU4_BASE 0x40004584u
N#define CYDEV_PICU_STAT_PICU4_SIZE 0x00000001u
N#define CYREG_PICU4_INTSTAT 0x40004584u
N#define CYDEV_PICU_STAT_PICU5_BASE 0x40004585u
N#define CYDEV_PICU_STAT_PICU5_SIZE 0x00000001u
N#define CYREG_PICU5_INTSTAT 0x40004585u
N#define CYDEV_PICU_STAT_PICU6_BASE 0x40004586u
N#define CYDEV_PICU_STAT_PICU6_SIZE 0x00000001u
N#define CYREG_PICU6_INTSTAT 0x40004586u
N#define CYDEV_PICU_STAT_PICU12_BASE 0x4000458cu
N#define CYDEV_PICU_STAT_PICU12_SIZE 0x00000001u
N#define CYREG_PICU12_INTSTAT 0x4000458cu
N#define CYDEV_PICU_STAT_PICU15_BASE 0x4000458fu
N#define CYDEV_PICU_STAT_PICU15_SIZE 0x00000001u
N#define CYREG_PICU15_INTSTAT 0x4000458fu
N#define CYDEV_PICU_SNAP_BASE 0x40004590u
N#define CYDEV_PICU_SNAP_SIZE 0x00000010u
N#define CYDEV_PICU_SNAP_PICU0_BASE 0x40004590u
N#define CYDEV_PICU_SNAP_PICU0_SIZE 0x00000001u
N#define CYREG_PICU0_SNAP 0x40004590u
N#define CYDEV_PICU_SNAP_PICU1_BASE 0x40004591u
N#define CYDEV_PICU_SNAP_PICU1_SIZE 0x00000001u
N#define CYREG_PICU1_SNAP 0x40004591u
N#define CYDEV_PICU_SNAP_PICU2_BASE 0x40004592u
N#define CYDEV_PICU_SNAP_PICU2_SIZE 0x00000001u
N#define CYREG_PICU2_SNAP 0x40004592u
N#define CYDEV_PICU_SNAP_PICU3_BASE 0x40004593u
N#define CYDEV_PICU_SNAP_PICU3_SIZE 0x00000001u
N#define CYREG_PICU3_SNAP 0x40004593u
N#define CYDEV_PICU_SNAP_PICU4_BASE 0x40004594u
N#define CYDEV_PICU_SNAP_PICU4_SIZE 0x00000001u
N#define CYREG_PICU4_SNAP 0x40004594u
N#define CYDEV_PICU_SNAP_PICU5_BASE 0x40004595u
N#define CYDEV_PICU_SNAP_PICU5_SIZE 0x00000001u
N#define CYREG_PICU5_SNAP 0x40004595u
N#define CYDEV_PICU_SNAP_PICU6_BASE 0x40004596u
N#define CYDEV_PICU_SNAP_PICU6_SIZE 0x00000001u
N#define CYREG_PICU6_SNAP 0x40004596u
N#define CYDEV_PICU_SNAP_PICU12_BASE 0x4000459cu
N#define CYDEV_PICU_SNAP_PICU12_SIZE 0x00000001u
N#define CYREG_PICU12_SNAP 0x4000459cu
N#define CYDEV_PICU_SNAP_PICU_15_BASE 0x4000459fu
N#define CYDEV_PICU_SNAP_PICU_15_SIZE 0x00000001u
N#define CYREG_PICU_15_SNAP_15 0x4000459fu
N#define CYDEV_PICU_DISABLE_COR_BASE 0x400045a0u
N#define CYDEV_PICU_DISABLE_COR_SIZE 0x00000010u
N#define CYDEV_PICU_DISABLE_COR_PICU0_BASE 0x400045a0u
N#define CYDEV_PICU_DISABLE_COR_PICU0_SIZE 0x00000001u
N#define CYREG_PICU0_DISABLE_COR 0x400045a0u
N#define CYDEV_PICU_DISABLE_COR_PICU1_BASE 0x400045a1u
N#define CYDEV_PICU_DISABLE_COR_PICU1_SIZE 0x00000001u
N#define CYREG_PICU1_DISABLE_COR 0x400045a1u
N#define CYDEV_PICU_DISABLE_COR_PICU2_BASE 0x400045a2u
N#define CYDEV_PICU_DISABLE_COR_PICU2_SIZE 0x00000001u
N#define CYREG_PICU2_DISABLE_COR 0x400045a2u
N#define CYDEV_PICU_DISABLE_COR_PICU3_BASE 0x400045a3u
N#define CYDEV_PICU_DISABLE_COR_PICU3_SIZE 0x00000001u
N#define CYREG_PICU3_DISABLE_COR 0x400045a3u
N#define CYDEV_PICU_DISABLE_COR_PICU4_BASE 0x400045a4u
N#define CYDEV_PICU_DISABLE_COR_PICU4_SIZE 0x00000001u
N#define CYREG_PICU4_DISABLE_COR 0x400045a4u
N#define CYDEV_PICU_DISABLE_COR_PICU5_BASE 0x400045a5u
N#define CYDEV_PICU_DISABLE_COR_PICU5_SIZE 0x00000001u
N#define CYREG_PICU5_DISABLE_COR 0x400045a5u
N#define CYDEV_PICU_DISABLE_COR_PICU6_BASE 0x400045a6u
N#define CYDEV_PICU_DISABLE_COR_PICU6_SIZE 0x00000001u
N#define CYREG_PICU6_DISABLE_COR 0x400045a6u
N#define CYDEV_PICU_DISABLE_COR_PICU12_BASE 0x400045acu
N#define CYDEV_PICU_DISABLE_COR_PICU12_SIZE 0x00000001u
N#define CYREG_PICU12_DISABLE_COR 0x400045acu
N#define CYDEV_PICU_DISABLE_COR_PICU15_BASE 0x400045afu
N#define CYDEV_PICU_DISABLE_COR_PICU15_SIZE 0x00000001u
N#define CYREG_PICU15_DISABLE_COR 0x400045afu
N#define CYDEV_MFGCFG_BASE 0x40004600u
N#define CYDEV_MFGCFG_SIZE 0x000000edu
N#define CYDEV_MFGCFG_ANAIF_BASE 0x40004600u
N#define CYDEV_MFGCFG_ANAIF_SIZE 0x00000038u
N#define CYDEV_MFGCFG_ANAIF_DAC0_BASE 0x40004608u
N#define CYDEV_MFGCFG_ANAIF_DAC0_SIZE 0x00000001u
N#define CYREG_DAC0_TR 0x40004608u
N#define CYDEV_MFGCFG_ANAIF_DAC1_BASE 0x40004609u
N#define CYDEV_MFGCFG_ANAIF_DAC1_SIZE 0x00000001u
N#define CYREG_DAC1_TR 0x40004609u
N#define CYDEV_MFGCFG_ANAIF_DAC2_BASE 0x4000460au
N#define CYDEV_MFGCFG_ANAIF_DAC2_SIZE 0x00000001u
N#define CYREG_DAC2_TR 0x4000460au
N#define CYDEV_MFGCFG_ANAIF_DAC3_BASE 0x4000460bu
N#define CYDEV_MFGCFG_ANAIF_DAC3_SIZE 0x00000001u
N#define CYREG_DAC3_TR 0x4000460bu
N#define CYDEV_MFGCFG_ANAIF_NPUMP_DSM_BASE 0x40004610u
N#define CYDEV_MFGCFG_ANAIF_NPUMP_DSM_SIZE 0x00000001u
N#define CYREG_NPUMP_DSM_TR0 0x40004610u
N#define CYDEV_MFGCFG_ANAIF_NPUMP_SC_BASE 0x40004611u
N#define CYDEV_MFGCFG_ANAIF_NPUMP_SC_SIZE 0x00000001u
N#define CYREG_NPUMP_SC_TR0 0x40004611u
N#define CYDEV_MFGCFG_ANAIF_NPUMP_OPAMP_BASE 0x40004612u
N#define CYDEV_MFGCFG_ANAIF_NPUMP_OPAMP_SIZE 0x00000001u
N#define CYREG_NPUMP_OPAMP_TR0 0x40004612u
N#define CYDEV_MFGCFG_ANAIF_SAR0_BASE 0x40004614u
N#define CYDEV_MFGCFG_ANAIF_SAR0_SIZE 0x00000001u
N#define CYREG_SAR0_TR0 0x40004614u
N#define CYDEV_MFGCFG_ANAIF_SAR1_BASE 0x40004616u
N#define CYDEV_MFGCFG_ANAIF_SAR1_SIZE 0x00000001u
N#define CYREG_SAR1_TR0 0x40004616u
N#define CYDEV_MFGCFG_ANAIF_OPAMP0_BASE 0x40004620u
N#define CYDEV_MFGCFG_ANAIF_OPAMP0_SIZE 0x00000002u
N#define CYREG_OPAMP0_TR0 0x40004620u
N#define CYREG_OPAMP0_TR1 0x40004621u
N#define CYDEV_MFGCFG_ANAIF_OPAMP1_BASE 0x40004622u
N#define CYDEV_MFGCFG_ANAIF_OPAMP1_SIZE 0x00000002u
N#define CYREG_OPAMP1_TR0 0x40004622u
N#define CYREG_OPAMP1_TR1 0x40004623u
N#define CYDEV_MFGCFG_ANAIF_OPAMP2_BASE 0x40004624u
N#define CYDEV_MFGCFG_ANAIF_OPAMP2_SIZE 0x00000002u
N#define CYREG_OPAMP2_TR0 0x40004624u
N#define CYREG_OPAMP2_TR1 0x40004625u
N#define CYDEV_MFGCFG_ANAIF_OPAMP3_BASE 0x40004626u
N#define CYDEV_MFGCFG_ANAIF_OPAMP3_SIZE 0x00000002u
N#define CYREG_OPAMP3_TR0 0x40004626u
N#define CYREG_OPAMP3_TR1 0x40004627u
N#define CYDEV_MFGCFG_ANAIF_CMP0_BASE 0x40004630u
N#define CYDEV_MFGCFG_ANAIF_CMP0_SIZE 0x00000002u
N#define CYREG_CMP0_TR0 0x40004630u
N#define CYREG_CMP0_TR1 0x40004631u
N#define CYDEV_MFGCFG_ANAIF_CMP1_BASE 0x40004632u
N#define CYDEV_MFGCFG_ANAIF_CMP1_SIZE 0x00000002u
N#define CYREG_CMP1_TR0 0x40004632u
N#define CYREG_CMP1_TR1 0x40004633u
N#define CYDEV_MFGCFG_ANAIF_CMP2_BASE 0x40004634u
N#define CYDEV_MFGCFG_ANAIF_CMP2_SIZE 0x00000002u
N#define CYREG_CMP2_TR0 0x40004634u
N#define CYREG_CMP2_TR1 0x40004635u
N#define CYDEV_MFGCFG_ANAIF_CMP3_BASE 0x40004636u
N#define CYDEV_MFGCFG_ANAIF_CMP3_SIZE 0x00000002u
N#define CYREG_CMP3_TR0 0x40004636u
N#define CYREG_CMP3_TR1 0x40004637u
N#define CYDEV_MFGCFG_PWRSYS_BASE 0x40004680u
N#define CYDEV_MFGCFG_PWRSYS_SIZE 0x0000000bu
N#define CYREG_PWRSYS_HIB_TR0 0x40004680u
N#define CYREG_PWRSYS_HIB_TR1 0x40004681u
N#define CYREG_PWRSYS_I2C_TR 0x40004682u
N#define CYREG_PWRSYS_SLP_TR 0x40004683u
N#define CYREG_PWRSYS_BUZZ_TR 0x40004684u
N#define CYREG_PWRSYS_WAKE_TR0 0x40004685u
N#define CYREG_PWRSYS_WAKE_TR1 0x40004686u
N#define CYREG_PWRSYS_BREF_TR 0x40004687u
N#define CYREG_PWRSYS_BG_TR 0x40004688u
N#define CYREG_PWRSYS_WAKE_TR2 0x40004689u
N#define CYREG_PWRSYS_WAKE_TR3 0x4000468au
N#define CYDEV_MFGCFG_ILO_BASE 0x40004690u
N#define CYDEV_MFGCFG_ILO_SIZE 0x00000002u
N#define CYREG_ILO_TR0 0x40004690u
N#define CYREG_ILO_TR1 0x40004691u
N#define CYDEV_MFGCFG_X32_BASE 0x40004698u
N#define CYDEV_MFGCFG_X32_SIZE 0x00000001u
N#define CYREG_X32_TR 0x40004698u
N#define CYDEV_MFGCFG_IMO_BASE 0x400046a0u
N#define CYDEV_MFGCFG_IMO_SIZE 0x00000005u
N#define CYREG_IMO_TR0 0x400046a0u
N#define CYREG_IMO_TR1 0x400046a1u
N#define CYREG_IMO_GAIN 0x400046a2u
N#define CYREG_IMO_C36M 0x400046a3u
N#define CYREG_IMO_TR2 0x400046a4u
N#define CYDEV_MFGCFG_XMHZ_BASE 0x400046a8u
N#define CYDEV_MFGCFG_XMHZ_SIZE 0x00000001u
N#define CYREG_XMHZ_TR 0x400046a8u
N#define CYREG_MFGCFG_DLY 0x400046c0u
N#define CYDEV_MFGCFG_MLOGIC_BASE 0x400046e0u
N#define CYDEV_MFGCFG_MLOGIC_SIZE 0x0000000du
N#define CYREG_MLOGIC_DMPSTR 0x400046e2u
N#define CYDEV_MFGCFG_MLOGIC_SEG_BASE 0x400046e4u
N#define CYDEV_MFGCFG_MLOGIC_SEG_SIZE 0x00000002u
N#define CYREG_MLOGIC_SEG_CR 0x400046e4u
N#define CYREG_MLOGIC_SEG_CFG0 0x400046e5u
N#define CYREG_MLOGIC_DEBUG 0x400046e8u
N#define CYDEV_MFGCFG_MLOGIC_CPU_SCR_BASE 0x400046eau
N#define CYDEV_MFGCFG_MLOGIC_CPU_SCR_SIZE 0x00000001u
N#define CYREG_MLOGIC_CPU_SCR_CPU_SCR 0x400046eau
N#define CYREG_MLOGIC_REV_ID 0x400046ecu
N#define CYDEV_RESET_BASE 0x400046f0u
N#define CYDEV_RESET_SIZE 0x0000000fu
N#define CYREG_RESET_IPOR_CR0 0x400046f0u
N#define CYREG_RESET_IPOR_CR1 0x400046f1u
N#define CYREG_RESET_IPOR_CR2 0x400046f2u
N#define CYREG_RESET_IPOR_CR3 0x400046f3u
N#define CYREG_RESET_CR0 0x400046f4u
N#define CYREG_RESET_CR1 0x400046f5u
N#define CYREG_RESET_CR2 0x400046f6u
N#define CYREG_RESET_CR3 0x400046f7u
N#define CYREG_RESET_CR4 0x400046f8u
N#define CYREG_RESET_CR5 0x400046f9u
N#define CYREG_RESET_SR0 0x400046fau
N#define CYREG_RESET_SR1 0x400046fbu
N#define CYREG_RESET_SR2 0x400046fcu
N#define CYREG_RESET_SR3 0x400046fdu
N#define CYREG_RESET_TR 0x400046feu
N#define CYDEV_SPC_BASE 0x40004700u
N#define CYDEV_SPC_SIZE 0x00000100u
N#define CYREG_SPC_FM_EE_CR 0x40004700u
N#define CYREG_SPC_FM_EE_WAKE_CNT 0x40004701u
N#define CYREG_SPC_EE_SCR 0x40004702u
N#define CYREG_SPC_EE_ERR 0x40004703u
N#define CYREG_SPC_CPU_DATA 0x40004720u
N#define CYREG_SPC_DMA_DATA 0x40004721u
N#define CYREG_SPC_SR 0x40004722u
N#define CYREG_SPC_CR 0x40004723u
N#define CYDEV_SPC_DMM_MAP_BASE 0x40004780u
N#define CYDEV_SPC_DMM_MAP_SIZE 0x00000080u
N#define CYREG_SPC_DMM_MAP_SRAM_MBASE 0x40004780u
N#define CYREG_SPC_DMM_MAP_SRAM_MSIZE 0x00000080u
N#define CYDEV_CACHE_BASE 0x40004800u
N#define CYDEV_CACHE_SIZE 0x0000009cu
N#define CYREG_CACHE_CC_CTL 0x40004800u
N#define CYREG_CACHE_ECC_CORR 0x40004880u
N#define CYREG_CACHE_ECC_ERR 0x40004888u
N#define CYREG_CACHE_FLASH_ERR 0x40004890u
N#define CYREG_CACHE_HITMISS 0x40004898u
N#define CYDEV_I2C_BASE 0x40004900u
N#define CYDEV_I2C_SIZE 0x000000e1u
N#define CYREG_I2C_XCFG 0x400049c8u
N#define CYREG_I2C_ADR 0x400049cau
N#define CYREG_I2C_CFG 0x400049d6u
N#define CYREG_I2C_CSR 0x400049d7u
N#define CYREG_I2C_D 0x400049d8u
N#define CYREG_I2C_MCSR 0x400049d9u
N#define CYREG_I2C_CLK_DIV1 0x400049dbu
N#define CYREG_I2C_CLK_DIV2 0x400049dcu
N#define CYREG_I2C_TMOUT_CSR 0x400049ddu
N#define CYREG_I2C_TMOUT_SR 0x400049deu
N#define CYREG_I2C_TMOUT_CFG0 0x400049dfu
N#define CYREG_I2C_TMOUT_CFG1 0x400049e0u
N#define CYDEV_DEC_BASE 0x40004e00u
N#define CYDEV_DEC_SIZE 0x00000015u
N#define CYREG_DEC_CR 0x40004e00u
N#define CYREG_DEC_SR 0x40004e01u
N#define CYREG_DEC_SHIFT1 0x40004e02u
N#define CYREG_DEC_SHIFT2 0x40004e03u
N#define CYREG_DEC_DR2 0x40004e04u
N#define CYREG_DEC_DR2H 0x40004e05u
N#define CYREG_DEC_DR1 0x40004e06u
N#define CYREG_DEC_OCOR 0x40004e08u
N#define CYREG_DEC_OCORM 0x40004e09u
N#define CYREG_DEC_OCORH 0x40004e0au
N#define CYREG_DEC_GCOR 0x40004e0cu
N#define CYREG_DEC_GCORH 0x40004e0du
N#define CYREG_DEC_GVAL 0x40004e0eu
N#define CYREG_DEC_OUTSAMP 0x40004e10u
N#define CYREG_DEC_OUTSAMPM 0x40004e11u
N#define CYREG_DEC_OUTSAMPH 0x40004e12u
N#define CYREG_DEC_OUTSAMPS 0x40004e13u
N#define CYREG_DEC_COHER 0x40004e14u
N#define CYDEV_TMR0_BASE 0x40004f00u
N#define CYDEV_TMR0_SIZE 0x0000000cu
N#define CYREG_TMR0_CFG0 0x40004f00u
N#define CYREG_TMR0_CFG1 0x40004f01u
N#define CYREG_TMR0_CFG2 0x40004f02u
N#define CYREG_TMR0_SR0 0x40004f03u
N#define CYREG_TMR0_PER0 0x40004f04u
N#define CYREG_TMR0_PER1 0x40004f05u
N#define CYREG_TMR0_CNT_CMP0 0x40004f06u
N#define CYREG_TMR0_CNT_CMP1 0x40004f07u
N#define CYREG_TMR0_CAP0 0x40004f08u
N#define CYREG_TMR0_CAP1 0x40004f09u
N#define CYREG_TMR0_RT0 0x40004f0au
N#define CYREG_TMR0_RT1 0x40004f0bu
N#define CYDEV_TMR1_BASE 0x40004f0cu
N#define CYDEV_TMR1_SIZE 0x0000000cu
N#define CYREG_TMR1_CFG0 0x40004f0cu
N#define CYREG_TMR1_CFG1 0x40004f0du
N#define CYREG_TMR1_CFG2 0x40004f0eu
N#define CYREG_TMR1_SR0 0x40004f0fu
N#define CYREG_TMR1_PER0 0x40004f10u
N#define CYREG_TMR1_PER1 0x40004f11u
N#define CYREG_TMR1_CNT_CMP0 0x40004f12u
N#define CYREG_TMR1_CNT_CMP1 0x40004f13u
N#define CYREG_TMR1_CAP0 0x40004f14u
N#define CYREG_TMR1_CAP1 0x40004f15u
N#define CYREG_TMR1_RT0 0x40004f16u
N#define CYREG_TMR1_RT1 0x40004f17u
N#define CYDEV_TMR2_BASE 0x40004f18u
N#define CYDEV_TMR2_SIZE 0x0000000cu
N#define CYREG_TMR2_CFG0 0x40004f18u
N#define CYREG_TMR2_CFG1 0x40004f19u
N#define CYREG_TMR2_CFG2 0x40004f1au
N#define CYREG_TMR2_SR0 0x40004f1bu
N#define CYREG_TMR2_PER0 0x40004f1cu
N#define CYREG_TMR2_PER1 0x40004f1du
N#define CYREG_TMR2_CNT_CMP0 0x40004f1eu
N#define CYREG_TMR2_CNT_CMP1 0x40004f1fu
N#define CYREG_TMR2_CAP0 0x40004f20u
N#define CYREG_TMR2_CAP1 0x40004f21u
N#define CYREG_TMR2_RT0 0x40004f22u
N#define CYREG_TMR2_RT1 0x40004f23u
N#define CYDEV_TMR3_BASE 0x40004f24u
N#define CYDEV_TMR3_SIZE 0x0000000cu
N#define CYREG_TMR3_CFG0 0x40004f24u
N#define CYREG_TMR3_CFG1 0x40004f25u
N#define CYREG_TMR3_CFG2 0x40004f26u
N#define CYREG_TMR3_SR0 0x40004f27u
N#define CYREG_TMR3_PER0 0x40004f28u
N#define CYREG_TMR3_PER1 0x40004f29u
N#define CYREG_TMR3_CNT_CMP0 0x40004f2au
N#define CYREG_TMR3_CNT_CMP1 0x40004f2bu
N#define CYREG_TMR3_CAP0 0x40004f2cu
N#define CYREG_TMR3_CAP1 0x40004f2du
N#define CYREG_TMR3_RT0 0x40004f2eu
N#define CYREG_TMR3_RT1 0x40004f2fu
N#define CYDEV_IO_BASE 0x40005000u
N#define CYDEV_IO_SIZE 0x00000200u
N#define CYDEV_IO_PC_BASE 0x40005000u
N#define CYDEV_IO_PC_SIZE 0x00000080u
N#define CYDEV_IO_PC_PRT0_BASE 0x40005000u
N#define CYDEV_IO_PC_PRT0_SIZE 0x00000008u
N#define CYREG_PRT0_PC0 0x40005000u
N#define CYREG_PRT0_PC1 0x40005001u
N#define CYREG_PRT0_PC2 0x40005002u
N#define CYREG_PRT0_PC3 0x40005003u
N#define CYREG_PRT0_PC4 0x40005004u
N#define CYREG_PRT0_PC5 0x40005005u
N#define CYREG_PRT0_PC6 0x40005006u
N#define CYREG_PRT0_PC7 0x40005007u
N#define CYDEV_IO_PC_PRT1_BASE 0x40005008u
N#define CYDEV_IO_PC_PRT1_SIZE 0x00000008u
N#define CYREG_PRT1_PC0 0x40005008u
N#define CYREG_PRT1_PC1 0x40005009u
N#define CYREG_PRT1_PC2 0x4000500au
N#define CYREG_PRT1_PC3 0x4000500bu
N#define CYREG_PRT1_PC4 0x4000500cu
N#define CYREG_PRT1_PC5 0x4000500du
N#define CYREG_PRT1_PC6 0x4000500eu
N#define CYREG_PRT1_PC7 0x4000500fu
N#define CYDEV_IO_PC_PRT2_BASE 0x40005010u
N#define CYDEV_IO_PC_PRT2_SIZE 0x00000008u
N#define CYREG_PRT2_PC0 0x40005010u
N#define CYREG_PRT2_PC1 0x40005011u
N#define CYREG_PRT2_PC2 0x40005012u
N#define CYREG_PRT2_PC3 0x40005013u
N#define CYREG_PRT2_PC4 0x40005014u
N#define CYREG_PRT2_PC5 0x40005015u
N#define CYREG_PRT2_PC6 0x40005016u
N#define CYREG_PRT2_PC7 0x40005017u
N#define CYDEV_IO_PC_PRT3_BASE 0x40005018u
N#define CYDEV_IO_PC_PRT3_SIZE 0x00000008u
N#define CYREG_PRT3_PC0 0x40005018u
N#define CYREG_PRT3_PC1 0x40005019u
N#define CYREG_PRT3_PC2 0x4000501au
N#define CYREG_PRT3_PC3 0x4000501bu
N#define CYREG_PRT3_PC4 0x4000501cu
N#define CYREG_PRT3_PC5 0x4000501du
N#define CYREG_PRT3_PC6 0x4000501eu
N#define CYREG_PRT3_PC7 0x4000501fu
N#define CYDEV_IO_PC_PRT4_BASE 0x40005020u
N#define CYDEV_IO_PC_PRT4_SIZE 0x00000008u
N#define CYREG_PRT4_PC0 0x40005020u
N#define CYREG_PRT4_PC1 0x40005021u
N#define CYREG_PRT4_PC2 0x40005022u
N#define CYREG_PRT4_PC3 0x40005023u
N#define CYREG_PRT4_PC4 0x40005024u
N#define CYREG_PRT4_PC5 0x40005025u
N#define CYREG_PRT4_PC6 0x40005026u
N#define CYREG_PRT4_PC7 0x40005027u
N#define CYDEV_IO_PC_PRT5_BASE 0x40005028u
N#define CYDEV_IO_PC_PRT5_SIZE 0x00000008u
N#define CYREG_PRT5_PC0 0x40005028u
N#define CYREG_PRT5_PC1 0x40005029u
N#define CYREG_PRT5_PC2 0x4000502au
N#define CYREG_PRT5_PC3 0x4000502bu
N#define CYREG_PRT5_PC4 0x4000502cu
N#define CYREG_PRT5_PC5 0x4000502du
N#define CYREG_PRT5_PC6 0x4000502eu
N#define CYREG_PRT5_PC7 0x4000502fu
N#define CYDEV_IO_PC_PRT6_BASE 0x40005030u
N#define CYDEV_IO_PC_PRT6_SIZE 0x00000008u
N#define CYREG_PRT6_PC0 0x40005030u
N#define CYREG_PRT6_PC1 0x40005031u
N#define CYREG_PRT6_PC2 0x40005032u
N#define CYREG_PRT6_PC3 0x40005033u
N#define CYREG_PRT6_PC4 0x40005034u
N#define CYREG_PRT6_PC5 0x40005035u
N#define CYREG_PRT6_PC6 0x40005036u
N#define CYREG_PRT6_PC7 0x40005037u
N#define CYDEV_IO_PC_PRT12_BASE 0x40005060u
N#define CYDEV_IO_PC_PRT12_SIZE 0x00000008u
N#define CYREG_PRT12_PC0 0x40005060u
N#define CYREG_PRT12_PC1 0x40005061u
N#define CYREG_PRT12_PC2 0x40005062u
N#define CYREG_PRT12_PC3 0x40005063u
N#define CYREG_PRT12_PC4 0x40005064u
N#define CYREG_PRT12_PC5 0x40005065u
N#define CYREG_PRT12_PC6 0x40005066u
N#define CYREG_PRT12_PC7 0x40005067u
N#define CYDEV_IO_PC_PRT15_BASE 0x40005078u
N#define CYDEV_IO_PC_PRT15_SIZE 0x00000006u
N#define CYREG_IO_PC_PRT15_PC0 0x40005078u
N#define CYREG_IO_PC_PRT15_PC1 0x40005079u
N#define CYREG_IO_PC_PRT15_PC2 0x4000507au
N#define CYREG_IO_PC_PRT15_PC3 0x4000507bu
N#define CYREG_IO_PC_PRT15_PC4 0x4000507cu
N#define CYREG_IO_PC_PRT15_PC5 0x4000507du
N#define CYDEV_IO_PC_PRT15_7_6_BASE 0x4000507eu
N#define CYDEV_IO_PC_PRT15_7_6_SIZE 0x00000002u
N#define CYREG_IO_PC_PRT15_7_6_PC0 0x4000507eu
N#define CYREG_IO_PC_PRT15_7_6_PC1 0x4000507fu
N#define CYDEV_IO_DR_BASE 0x40005080u
N#define CYDEV_IO_DR_SIZE 0x00000010u
N#define CYDEV_IO_DR_PRT0_BASE 0x40005080u
N#define CYDEV_IO_DR_PRT0_SIZE 0x00000001u
N#define CYREG_PRT0_DR_ALIAS 0x40005080u
N#define CYDEV_IO_DR_PRT1_BASE 0x40005081u
N#define CYDEV_IO_DR_PRT1_SIZE 0x00000001u
N#define CYREG_PRT1_DR_ALIAS 0x40005081u
N#define CYDEV_IO_DR_PRT2_BASE 0x40005082u
N#define CYDEV_IO_DR_PRT2_SIZE 0x00000001u
N#define CYREG_PRT2_DR_ALIAS 0x40005082u
N#define CYDEV_IO_DR_PRT3_BASE 0x40005083u
N#define CYDEV_IO_DR_PRT3_SIZE 0x00000001u
N#define CYREG_PRT3_DR_ALIAS 0x40005083u
N#define CYDEV_IO_DR_PRT4_BASE 0x40005084u
N#define CYDEV_IO_DR_PRT4_SIZE 0x00000001u
N#define CYREG_PRT4_DR_ALIAS 0x40005084u
N#define CYDEV_IO_DR_PRT5_BASE 0x40005085u
N#define CYDEV_IO_DR_PRT5_SIZE 0x00000001u
N#define CYREG_PRT5_DR_ALIAS 0x40005085u
N#define CYDEV_IO_DR_PRT6_BASE 0x40005086u
N#define CYDEV_IO_DR_PRT6_SIZE 0x00000001u
N#define CYREG_PRT6_DR_ALIAS 0x40005086u
N#define CYDEV_IO_DR_PRT12_BASE 0x4000508cu
N#define CYDEV_IO_DR_PRT12_SIZE 0x00000001u
N#define CYREG_PRT12_DR_ALIAS 0x4000508cu
N#define CYDEV_IO_DR_PRT15_BASE 0x4000508fu
N#define CYDEV_IO_DR_PRT15_SIZE 0x00000001u
N#define CYREG_PRT15_DR_15_ALIAS 0x4000508fu
N#define CYDEV_IO_PS_BASE 0x40005090u
N#define CYDEV_IO_PS_SIZE 0x00000010u
N#define CYDEV_IO_PS_PRT0_BASE 0x40005090u
N#define CYDEV_IO_PS_PRT0_SIZE 0x00000001u
N#define CYREG_PRT0_PS_ALIAS 0x40005090u
N#define CYDEV_IO_PS_PRT1_BASE 0x40005091u
N#define CYDEV_IO_PS_PRT1_SIZE 0x00000001u
N#define CYREG_PRT1_PS_ALIAS 0x40005091u
N#define CYDEV_IO_PS_PRT2_BASE 0x40005092u
N#define CYDEV_IO_PS_PRT2_SIZE 0x00000001u
N#define CYREG_PRT2_PS_ALIAS 0x40005092u
N#define CYDEV_IO_PS_PRT3_BASE 0x40005093u
N#define CYDEV_IO_PS_PRT3_SIZE 0x00000001u
N#define CYREG_PRT3_PS_ALIAS 0x40005093u
N#define CYDEV_IO_PS_PRT4_BASE 0x40005094u
N#define CYDEV_IO_PS_PRT4_SIZE 0x00000001u
N#define CYREG_PRT4_PS_ALIAS 0x40005094u
N#define CYDEV_IO_PS_PRT5_BASE 0x40005095u
N#define CYDEV_IO_PS_PRT5_SIZE 0x00000001u
N#define CYREG_PRT5_PS_ALIAS 0x40005095u
N#define CYDEV_IO_PS_PRT6_BASE 0x40005096u
N#define CYDEV_IO_PS_PRT6_SIZE 0x00000001u
N#define CYREG_PRT6_PS_ALIAS 0x40005096u
N#define CYDEV_IO_PS_PRT12_BASE 0x4000509cu
N#define CYDEV_IO_PS_PRT12_SIZE 0x00000001u
N#define CYREG_PRT12_PS_ALIAS 0x4000509cu
N#define CYDEV_IO_PS_PRT15_BASE 0x4000509fu
N#define CYDEV_IO_PS_PRT15_SIZE 0x00000001u
N#define CYREG_PRT15_PS15_ALIAS 0x4000509fu
N#define CYDEV_IO_PRT_BASE 0x40005100u
N#define CYDEV_IO_PRT_SIZE 0x00000100u
N#define CYDEV_IO_PRT_PRT0_BASE 0x40005100u
N#define CYDEV_IO_PRT_PRT0_SIZE 0x00000010u
N#define CYREG_PRT0_DR 0x40005100u
N#define CYREG_PRT0_PS 0x40005101u
N#define CYREG_PRT0_DM0 0x40005102u
N#define CYREG_PRT0_DM1 0x40005103u
N#define CYREG_PRT0_DM2 0x40005104u
N#define CYREG_PRT0_SLW 0x40005105u
N#define CYREG_PRT0_BYP 0x40005106u
N#define CYREG_PRT0_BIE 0x40005107u
N#define CYREG_PRT0_INP_DIS 0x40005108u
N#define CYREG_PRT0_CTL 0x40005109u
N#define CYREG_PRT0_PRT 0x4000510au
N#define CYREG_PRT0_BIT_MASK 0x4000510bu
N#define CYREG_PRT0_AMUX 0x4000510cu
N#define CYREG_PRT0_AG 0x4000510du
N#define CYREG_PRT0_LCD_COM_SEG 0x4000510eu
N#define CYREG_PRT0_LCD_EN 0x4000510fu
N#define CYDEV_IO_PRT_PRT1_BASE 0x40005110u
N#define CYDEV_IO_PRT_PRT1_SIZE 0x00000010u
N#define CYREG_PRT1_DR 0x40005110u
N#define CYREG_PRT1_PS 0x40005111u
N#define CYREG_PRT1_DM0 0x40005112u
N#define CYREG_PRT1_DM1 0x40005113u
N#define CYREG_PRT1_DM2 0x40005114u
N#define CYREG_PRT1_SLW 0x40005115u
N#define CYREG_PRT1_BYP 0x40005116u
N#define CYREG_PRT1_BIE 0x40005117u
N#define CYREG_PRT1_INP_DIS 0x40005118u
N#define CYREG_PRT1_CTL 0x40005119u
N#define CYREG_PRT1_PRT 0x4000511au
N#define CYREG_PRT1_BIT_MASK 0x4000511bu
N#define CYREG_PRT1_AMUX 0x4000511cu
N#define CYREG_PRT1_AG 0x4000511du
N#define CYREG_PRT1_LCD_COM_SEG 0x4000511eu
N#define CYREG_PRT1_LCD_EN 0x4000511fu
N#define CYDEV_IO_PRT_PRT2_BASE 0x40005120u
N#define CYDEV_IO_PRT_PRT2_SIZE 0x00000010u
N#define CYREG_PRT2_DR 0x40005120u
N#define CYREG_PRT2_PS 0x40005121u
N#define CYREG_PRT2_DM0 0x40005122u
N#define CYREG_PRT2_DM1 0x40005123u
N#define CYREG_PRT2_DM2 0x40005124u
N#define CYREG_PRT2_SLW 0x40005125u
N#define CYREG_PRT2_BYP 0x40005126u
N#define CYREG_PRT2_BIE 0x40005127u
N#define CYREG_PRT2_INP_DIS 0x40005128u
N#define CYREG_PRT2_CTL 0x40005129u
N#define CYREG_PRT2_PRT 0x4000512au
N#define CYREG_PRT2_BIT_MASK 0x4000512bu
N#define CYREG_PRT2_AMUX 0x4000512cu
N#define CYREG_PRT2_AG 0x4000512du
N#define CYREG_PRT2_LCD_COM_SEG 0x4000512eu
N#define CYREG_PRT2_LCD_EN 0x4000512fu
N#define CYDEV_IO_PRT_PRT3_BASE 0x40005130u
N#define CYDEV_IO_PRT_PRT3_SIZE 0x00000010u
N#define CYREG_PRT3_DR 0x40005130u
N#define CYREG_PRT3_PS 0x40005131u
N#define CYREG_PRT3_DM0 0x40005132u
N#define CYREG_PRT3_DM1 0x40005133u
N#define CYREG_PRT3_DM2 0x40005134u
N#define CYREG_PRT3_SLW 0x40005135u
N#define CYREG_PRT3_BYP 0x40005136u
N#define CYREG_PRT3_BIE 0x40005137u
N#define CYREG_PRT3_INP_DIS 0x40005138u
N#define CYREG_PRT3_CTL 0x40005139u
N#define CYREG_PRT3_PRT 0x4000513au
N#define CYREG_PRT3_BIT_MASK 0x4000513bu
N#define CYREG_PRT3_AMUX 0x4000513cu
N#define CYREG_PRT3_AG 0x4000513du
N#define CYREG_PRT3_LCD_COM_SEG 0x4000513eu
N#define CYREG_PRT3_LCD_EN 0x4000513fu
N#define CYDEV_IO_PRT_PRT4_BASE 0x40005140u
N#define CYDEV_IO_PRT_PRT4_SIZE 0x00000010u
N#define CYREG_PRT4_DR 0x40005140u
N#define CYREG_PRT4_PS 0x40005141u
N#define CYREG_PRT4_DM0 0x40005142u
N#define CYREG_PRT4_DM1 0x40005143u
N#define CYREG_PRT4_DM2 0x40005144u
N#define CYREG_PRT4_SLW 0x40005145u
N#define CYREG_PRT4_BYP 0x40005146u
N#define CYREG_PRT4_BIE 0x40005147u
N#define CYREG_PRT4_INP_DIS 0x40005148u
N#define CYREG_PRT4_CTL 0x40005149u
N#define CYREG_PRT4_PRT 0x4000514au
N#define CYREG_PRT4_BIT_MASK 0x4000514bu
N#define CYREG_PRT4_AMUX 0x4000514cu
N#define CYREG_PRT4_AG 0x4000514du
N#define CYREG_PRT4_LCD_COM_SEG 0x4000514eu
N#define CYREG_PRT4_LCD_EN 0x4000514fu
N#define CYDEV_IO_PRT_PRT5_BASE 0x40005150u
N#define CYDEV_IO_PRT_PRT5_SIZE 0x00000010u
N#define CYREG_PRT5_DR 0x40005150u
N#define CYREG_PRT5_PS 0x40005151u
N#define CYREG_PRT5_DM0 0x40005152u
N#define CYREG_PRT5_DM1 0x40005153u
N#define CYREG_PRT5_DM2 0x40005154u
N#define CYREG_PRT5_SLW 0x40005155u
N#define CYREG_PRT5_BYP 0x40005156u
N#define CYREG_PRT5_BIE 0x40005157u
N#define CYREG_PRT5_INP_DIS 0x40005158u
N#define CYREG_PRT5_CTL 0x40005159u
N#define CYREG_PRT5_PRT 0x4000515au
N#define CYREG_PRT5_BIT_MASK 0x4000515bu
N#define CYREG_PRT5_AMUX 0x4000515cu
N#define CYREG_PRT5_AG 0x4000515du
N#define CYREG_PRT5_LCD_COM_SEG 0x4000515eu
N#define CYREG_PRT5_LCD_EN 0x4000515fu
N#define CYDEV_IO_PRT_PRT6_BASE 0x40005160u
N#define CYDEV_IO_PRT_PRT6_SIZE 0x00000010u
N#define CYREG_PRT6_DR 0x40005160u
N#define CYREG_PRT6_PS 0x40005161u
N#define CYREG_PRT6_DM0 0x40005162u
N#define CYREG_PRT6_DM1 0x40005163u
N#define CYREG_PRT6_DM2 0x40005164u
N#define CYREG_PRT6_SLW 0x40005165u
N#define CYREG_PRT6_BYP 0x40005166u
N#define CYREG_PRT6_BIE 0x40005167u
N#define CYREG_PRT6_INP_DIS 0x40005168u
N#define CYREG_PRT6_CTL 0x40005169u
N#define CYREG_PRT6_PRT 0x4000516au
N#define CYREG_PRT6_BIT_MASK 0x4000516bu
N#define CYREG_PRT6_AMUX 0x4000516cu
N#define CYREG_PRT6_AG 0x4000516du
N#define CYREG_PRT6_LCD_COM_SEG 0x4000516eu
N#define CYREG_PRT6_LCD_EN 0x4000516fu
N#define CYDEV_IO_PRT_PRT12_BASE 0x400051c0u
N#define CYDEV_IO_PRT_PRT12_SIZE 0x00000010u
N#define CYREG_PRT12_DR 0x400051c0u
N#define CYREG_PRT12_PS 0x400051c1u
N#define CYREG_PRT12_DM0 0x400051c2u
N#define CYREG_PRT12_DM1 0x400051c3u
N#define CYREG_PRT12_DM2 0x400051c4u
N#define CYREG_PRT12_SLW 0x400051c5u
N#define CYREG_PRT12_BYP 0x400051c6u
N#define CYREG_PRT12_BIE 0x400051c7u
N#define CYREG_PRT12_INP_DIS 0x400051c8u
N#define CYREG_PRT12_SIO_HYST_EN 0x400051c9u
N#define CYREG_PRT12_PRT 0x400051cau
N#define CYREG_PRT12_BIT_MASK 0x400051cbu
N#define CYREG_PRT12_SIO_REG_HIFREQ 0x400051ccu
N#define CYREG_PRT12_AG 0x400051cdu
N#define CYREG_PRT12_SIO_CFG 0x400051ceu
N#define CYREG_PRT12_SIO_DIFF 0x400051cfu
N#define CYDEV_IO_PRT_PRT15_BASE 0x400051f0u
N#define CYDEV_IO_PRT_PRT15_SIZE 0x00000010u
N#define CYREG_PRT15_DR 0x400051f0u
N#define CYREG_PRT15_PS 0x400051f1u
N#define CYREG_PRT15_DM0 0x400051f2u
N#define CYREG_PRT15_DM1 0x400051f3u
N#define CYREG_PRT15_DM2 0x400051f4u
N#define CYREG_PRT15_SLW 0x400051f5u
N#define CYREG_PRT15_BYP 0x400051f6u
N#define CYREG_PRT15_BIE 0x400051f7u
N#define CYREG_PRT15_INP_DIS 0x400051f8u
N#define CYREG_PRT15_CTL 0x400051f9u
N#define CYREG_PRT15_PRT 0x400051fau
N#define CYREG_PRT15_BIT_MASK 0x400051fbu
N#define CYREG_PRT15_AMUX 0x400051fcu
N#define CYREG_PRT15_AG 0x400051fdu
N#define CYREG_PRT15_LCD_COM_SEG 0x400051feu
N#define CYREG_PRT15_LCD_EN 0x400051ffu
N#define CYDEV_PRTDSI_BASE 0x40005200u
N#define CYDEV_PRTDSI_SIZE 0x0000007fu
N#define CYDEV_PRTDSI_PRT0_BASE 0x40005200u
N#define CYDEV_PRTDSI_PRT0_SIZE 0x00000007u
N#define CYREG_PRT0_OUT_SEL0 0x40005200u
N#define CYREG_PRT0_OUT_SEL1 0x40005201u
N#define CYREG_PRT0_OE_SEL0 0x40005202u
N#define CYREG_PRT0_OE_SEL1 0x40005203u
N#define CYREG_PRT0_DBL_SYNC_IN 0x40005204u
N#define CYREG_PRT0_SYNC_OUT 0x40005205u
N#define CYREG_PRT0_CAPS_SEL 0x40005206u
N#define CYDEV_PRTDSI_PRT1_BASE 0x40005208u
N#define CYDEV_PRTDSI_PRT1_SIZE 0x00000007u
N#define CYREG_PRT1_OUT_SEL0 0x40005208u
N#define CYREG_PRT1_OUT_SEL1 0x40005209u
N#define CYREG_PRT1_OE_SEL0 0x4000520au
N#define CYREG_PRT1_OE_SEL1 0x4000520bu
N#define CYREG_PRT1_DBL_SYNC_IN 0x4000520cu
N#define CYREG_PRT1_SYNC_OUT 0x4000520du
N#define CYREG_PRT1_CAPS_SEL 0x4000520eu
N#define CYDEV_PRTDSI_PRT2_BASE 0x40005210u
N#define CYDEV_PRTDSI_PRT2_SIZE 0x00000007u
N#define CYREG_PRT2_OUT_SEL0 0x40005210u
N#define CYREG_PRT2_OUT_SEL1 0x40005211u
N#define CYREG_PRT2_OE_SEL0 0x40005212u
N#define CYREG_PRT2_OE_SEL1 0x40005213u
N#define CYREG_PRT2_DBL_SYNC_IN 0x40005214u
N#define CYREG_PRT2_SYNC_OUT 0x40005215u
N#define CYREG_PRT2_CAPS_SEL 0x40005216u
N#define CYDEV_PRTDSI_PRT3_BASE 0x40005218u
N#define CYDEV_PRTDSI_PRT3_SIZE 0x00000007u
N#define CYREG_PRT3_OUT_SEL0 0x40005218u
N#define CYREG_PRT3_OUT_SEL1 0x40005219u
N#define CYREG_PRT3_OE_SEL0 0x4000521au
N#define CYREG_PRT3_OE_SEL1 0x4000521bu
N#define CYREG_PRT3_DBL_SYNC_IN 0x4000521cu
N#define CYREG_PRT3_SYNC_OUT 0x4000521du
N#define CYREG_PRT3_CAPS_SEL 0x4000521eu
N#define CYDEV_PRTDSI_PRT4_BASE 0x40005220u
N#define CYDEV_PRTDSI_PRT4_SIZE 0x00000007u
N#define CYREG_PRT4_OUT_SEL0 0x40005220u
N#define CYREG_PRT4_OUT_SEL1 0x40005221u
N#define CYREG_PRT4_OE_SEL0 0x40005222u
N#define CYREG_PRT4_OE_SEL1 0x40005223u
N#define CYREG_PRT4_DBL_SYNC_IN 0x40005224u
N#define CYREG_PRT4_SYNC_OUT 0x40005225u
N#define CYREG_PRT4_CAPS_SEL 0x40005226u
N#define CYDEV_PRTDSI_PRT5_BASE 0x40005228u
N#define CYDEV_PRTDSI_PRT5_SIZE 0x00000007u
N#define CYREG_PRT5_OUT_SEL0 0x40005228u
N#define CYREG_PRT5_OUT_SEL1 0x40005229u
N#define CYREG_PRT5_OE_SEL0 0x4000522au
N#define CYREG_PRT5_OE_SEL1 0x4000522bu
N#define CYREG_PRT5_DBL_SYNC_IN 0x4000522cu
N#define CYREG_PRT5_SYNC_OUT 0x4000522du
N#define CYREG_PRT5_CAPS_SEL 0x4000522eu
N#define CYDEV_PRTDSI_PRT6_BASE 0x40005230u
N#define CYDEV_PRTDSI_PRT6_SIZE 0x00000007u
N#define CYREG_PRT6_OUT_SEL0 0x40005230u
N#define CYREG_PRT6_OUT_SEL1 0x40005231u
N#define CYREG_PRT6_OE_SEL0 0x40005232u
N#define CYREG_PRT6_OE_SEL1 0x40005233u
N#define CYREG_PRT6_DBL_SYNC_IN 0x40005234u
N#define CYREG_PRT6_SYNC_OUT 0x40005235u
N#define CYREG_PRT6_CAPS_SEL 0x40005236u
N#define CYDEV_PRTDSI_PRT12_BASE 0x40005260u
N#define CYDEV_PRTDSI_PRT12_SIZE 0x00000006u
N#define CYREG_PRT12_OUT_SEL0 0x40005260u
N#define CYREG_PRT12_OUT_SEL1 0x40005261u
N#define CYREG_PRT12_OE_SEL0 0x40005262u
N#define CYREG_PRT12_OE_SEL1 0x40005263u
N#define CYREG_PRT12_DBL_SYNC_IN 0x40005264u
N#define CYREG_PRT12_SYNC_OUT 0x40005265u
N#define CYDEV_PRTDSI_PRT15_BASE 0x40005278u
N#define CYDEV_PRTDSI_PRT15_SIZE 0x00000007u
N#define CYREG_PRT15_OUT_SEL0 0x40005278u
N#define CYREG_PRT15_OUT_SEL1 0x40005279u
N#define CYREG_PRT15_OE_SEL0 0x4000527au
N#define CYREG_PRT15_OE_SEL1 0x4000527bu
N#define CYREG_PRT15_DBL_SYNC_IN 0x4000527cu
N#define CYREG_PRT15_SYNC_OUT 0x4000527du
N#define CYREG_PRT15_CAPS_SEL 0x4000527eu
N#define CYDEV_EMIF_BASE 0x40005400u
N#define CYDEV_EMIF_SIZE 0x00000007u
N#define CYREG_EMIF_NO_UDB 0x40005400u
N#define CYREG_EMIF_RP_WAIT_STATES 0x40005401u
N#define CYREG_EMIF_MEM_DWN 0x40005402u
N#define CYREG_EMIF_MEMCLK_DIV 0x40005403u
N#define CYREG_EMIF_CLOCK_EN 0x40005404u
N#define CYREG_EMIF_EM_TYPE 0x40005405u
N#define CYREG_EMIF_WP_WAIT_STATES 0x40005406u
N#define CYDEV_ANAIF_BASE 0x40005800u
N#define CYDEV_ANAIF_SIZE 0x000003a9u
N#define CYDEV_ANAIF_CFG_BASE 0x40005800u
N#define CYDEV_ANAIF_CFG_SIZE 0x0000010fu
N#define CYDEV_ANAIF_CFG_SC0_BASE 0x40005800u
N#define CYDEV_ANAIF_CFG_SC0_SIZE 0x00000003u
N#define CYREG_SC0_CR0 0x40005800u
N#define CYREG_SC0_CR1 0x40005801u
N#define CYREG_SC0_CR2 0x40005802u
N#define CYDEV_ANAIF_CFG_SC1_BASE 0x40005804u
N#define CYDEV_ANAIF_CFG_SC1_SIZE 0x00000003u
N#define CYREG_SC1_CR0 0x40005804u
N#define CYREG_SC1_CR1 0x40005805u
N#define CYREG_SC1_CR2 0x40005806u
N#define CYDEV_ANAIF_CFG_SC2_BASE 0x40005808u
N#define CYDEV_ANAIF_CFG_SC2_SIZE 0x00000003u
N#define CYREG_SC2_CR0 0x40005808u
N#define CYREG_SC2_CR1 0x40005809u
N#define CYREG_SC2_CR2 0x4000580au
N#define CYDEV_ANAIF_CFG_SC3_BASE 0x4000580cu
N#define CYDEV_ANAIF_CFG_SC3_SIZE 0x00000003u
N#define CYREG_SC3_CR0 0x4000580cu
N#define CYREG_SC3_CR1 0x4000580du
N#define CYREG_SC3_CR2 0x4000580eu
N#define CYDEV_ANAIF_CFG_DAC0_BASE 0x40005820u
N#define CYDEV_ANAIF_CFG_DAC0_SIZE 0x00000003u
N#define CYREG_DAC0_CR0 0x40005820u
N#define CYREG_DAC0_CR1 0x40005821u
N#define CYREG_DAC0_TST 0x40005822u
N#define CYDEV_ANAIF_CFG_DAC1_BASE 0x40005824u
N#define CYDEV_ANAIF_CFG_DAC1_SIZE 0x00000003u
N#define CYREG_DAC1_CR0 0x40005824u
N#define CYREG_DAC1_CR1 0x40005825u
N#define CYREG_DAC1_TST 0x40005826u
N#define CYDEV_ANAIF_CFG_DAC2_BASE 0x40005828u
N#define CYDEV_ANAIF_CFG_DAC2_SIZE 0x00000003u
N#define CYREG_DAC2_CR0 0x40005828u
N#define CYREG_DAC2_CR1 0x40005829u
N#define CYREG_DAC2_TST 0x4000582au
N#define CYDEV_ANAIF_CFG_DAC3_BASE 0x4000582cu
N#define CYDEV_ANAIF_CFG_DAC3_SIZE 0x00000003u
N#define CYREG_DAC3_CR0 0x4000582cu
N#define CYREG_DAC3_CR1 0x4000582du
N#define CYREG_DAC3_TST 0x4000582eu
N#define CYDEV_ANAIF_CFG_CMP0_BASE 0x40005840u
N#define CYDEV_ANAIF_CFG_CMP0_SIZE 0x00000001u
N#define CYREG_CMP0_CR 0x40005840u
N#define CYDEV_ANAIF_CFG_CMP1_BASE 0x40005841u
N#define CYDEV_ANAIF_CFG_CMP1_SIZE 0x00000001u
N#define CYREG_CMP1_CR 0x40005841u
N#define CYDEV_ANAIF_CFG_CMP2_BASE 0x40005842u
N#define CYDEV_ANAIF_CFG_CMP2_SIZE 0x00000001u
N#define CYREG_CMP2_CR 0x40005842u
N#define CYDEV_ANAIF_CFG_CMP3_BASE 0x40005843u
N#define CYDEV_ANAIF_CFG_CMP3_SIZE 0x00000001u
N#define CYREG_CMP3_CR 0x40005843u
N#define CYDEV_ANAIF_CFG_LUT0_BASE 0x40005848u
N#define CYDEV_ANAIF_CFG_LUT0_SIZE 0x00000002u
N#define CYREG_LUT0_CR 0x40005848u
N#define CYREG_LUT0_MX 0x40005849u
N#define CYDEV_ANAIF_CFG_LUT1_BASE 0x4000584au
N#define CYDEV_ANAIF_CFG_LUT1_SIZE 0x00000002u
N#define CYREG_LUT1_CR 0x4000584au
N#define CYREG_LUT1_MX 0x4000584bu
N#define CYDEV_ANAIF_CFG_LUT2_BASE 0x4000584cu
N#define CYDEV_ANAIF_CFG_LUT2_SIZE 0x00000002u
N#define CYREG_LUT2_CR 0x4000584cu
N#define CYREG_LUT2_MX 0x4000584du
N#define CYDEV_ANAIF_CFG_LUT3_BASE 0x4000584eu
N#define CYDEV_ANAIF_CFG_LUT3_SIZE 0x00000002u
N#define CYREG_LUT3_CR 0x4000584eu
N#define CYREG_LUT3_MX 0x4000584fu
N#define CYDEV_ANAIF_CFG_OPAMP0_BASE 0x40005858u
N#define CYDEV_ANAIF_CFG_OPAMP0_SIZE 0x00000002u
N#define CYREG_OPAMP0_CR 0x40005858u
N#define CYREG_OPAMP0_RSVD 0x40005859u
N#define CYDEV_ANAIF_CFG_OPAMP1_BASE 0x4000585au
N#define CYDEV_ANAIF_CFG_OPAMP1_SIZE 0x00000002u
N#define CYREG_OPAMP1_CR 0x4000585au
N#define CYREG_OPAMP1_RSVD 0x4000585bu
N#define CYDEV_ANAIF_CFG_OPAMP2_BASE 0x4000585cu
N#define CYDEV_ANAIF_CFG_OPAMP2_SIZE 0x00000002u
N#define CYREG_OPAMP2_CR 0x4000585cu
N#define CYREG_OPAMP2_RSVD 0x4000585du
N#define CYDEV_ANAIF_CFG_OPAMP3_BASE 0x4000585eu
N#define CYDEV_ANAIF_CFG_OPAMP3_SIZE 0x00000002u
N#define CYREG_OPAMP3_CR 0x4000585eu
N#define CYREG_OPAMP3_RSVD 0x4000585fu
N#define CYDEV_ANAIF_CFG_LCDDAC_BASE 0x40005868u
N#define CYDEV_ANAIF_CFG_LCDDAC_SIZE 0x00000002u
N#define CYREG_LCDDAC_CR0 0x40005868u
N#define CYREG_LCDDAC_CR1 0x40005869u
N#define CYDEV_ANAIF_CFG_LCDDRV_BASE 0x4000586au
N#define CYDEV_ANAIF_CFG_LCDDRV_SIZE 0x00000001u
N#define CYREG_LCDDRV_CR 0x4000586au
N#define CYDEV_ANAIF_CFG_LCDTMR_BASE 0x4000586bu
N#define CYDEV_ANAIF_CFG_LCDTMR_SIZE 0x00000001u
N#define CYREG_LCDTMR_CFG 0x4000586bu
N#define CYDEV_ANAIF_CFG_BG_BASE 0x4000586cu
N#define CYDEV_ANAIF_CFG_BG_SIZE 0x00000004u
N#define CYREG_BG_CR0 0x4000586cu
N#define CYREG_BG_RSVD 0x4000586du
N#define CYREG_BG_DFT0 0x4000586eu
N#define CYREG_BG_DFT1 0x4000586fu
N#define CYDEV_ANAIF_CFG_CAPSL_BASE 0x40005870u
N#define CYDEV_ANAIF_CFG_CAPSL_SIZE 0x00000002u
N#define CYREG_CAPSL_CFG0 0x40005870u
N#define CYREG_CAPSL_CFG1 0x40005871u
N#define CYDEV_ANAIF_CFG_CAPSR_BASE 0x40005872u
N#define CYDEV_ANAIF_CFG_CAPSR_SIZE 0x00000002u
N#define CYREG_CAPSR_CFG0 0x40005872u
N#define CYREG_CAPSR_CFG1 0x40005873u
N#define CYDEV_ANAIF_CFG_PUMP_BASE 0x40005876u
N#define CYDEV_ANAIF_CFG_PUMP_SIZE 0x00000002u
N#define CYREG_PUMP_CR0 0x40005876u
N#define CYREG_PUMP_CR1 0x40005877u
N#define CYDEV_ANAIF_CFG_LPF0_BASE 0x40005878u
N#define CYDEV_ANAIF_CFG_LPF0_SIZE 0x00000002u
N#define CYREG_LPF0_CR0 0x40005878u
N#define CYREG_LPF0_RSVD 0x40005879u
N#define CYDEV_ANAIF_CFG_LPF1_BASE 0x4000587au
N#define CYDEV_ANAIF_CFG_LPF1_SIZE 0x00000002u
N#define CYREG_LPF1_CR0 0x4000587au
N#define CYREG_LPF1_RSVD 0x4000587bu
N#define CYDEV_ANAIF_CFG_MISC_BASE 0x4000587cu
N#define CYDEV_ANAIF_CFG_MISC_SIZE 0x00000001u
N#define CYREG_ANAIF_CFG_MISC_CR0 0x4000587cu
N#define CYDEV_ANAIF_CFG_DSM0_BASE 0x40005880u
N#define CYDEV_ANAIF_CFG_DSM0_SIZE 0x00000020u
N#define CYREG_DSM0_CR0 0x40005880u
N#define CYREG_DSM0_CR1 0x40005881u
N#define CYREG_DSM0_CR2 0x40005882u
N#define CYREG_DSM0_CR3 0x40005883u
N#define CYREG_DSM0_CR4 0x40005884u
N#define CYREG_DSM0_CR5 0x40005885u
N#define CYREG_DSM0_CR6 0x40005886u
N#define CYREG_DSM0_CR7 0x40005887u
N#define CYREG_DSM0_CR8 0x40005888u
N#define CYREG_DSM0_CR9 0x40005889u
N#define CYREG_DSM0_CR10 0x4000588au
N#define CYREG_DSM0_CR11 0x4000588bu
N#define CYREG_DSM0_CR12 0x4000588cu
N#define CYREG_DSM0_CR13 0x4000588du
N#define CYREG_DSM0_CR14 0x4000588eu
N#define CYREG_DSM0_CR15 0x4000588fu
N#define CYREG_DSM0_CR16 0x40005890u
N#define CYREG_DSM0_CR17 0x40005891u
N#define CYREG_DSM0_REF0 0x40005892u
N#define CYREG_DSM0_REF1 0x40005893u
N#define CYREG_DSM0_REF2 0x40005894u
N#define CYREG_DSM0_REF3 0x40005895u
N#define CYREG_DSM0_DEM0 0x40005896u
N#define CYREG_DSM0_DEM1 0x40005897u
N#define CYREG_DSM0_TST0 0x40005898u
N#define CYREG_DSM0_TST1 0x40005899u
N#define CYREG_DSM0_BUF0 0x4000589au
N#define CYREG_DSM0_BUF1 0x4000589bu
N#define CYREG_DSM0_BUF2 0x4000589cu
N#define CYREG_DSM0_BUF3 0x4000589du
N#define CYREG_DSM0_MISC 0x4000589eu
N#define CYREG_DSM0_RSVD1 0x4000589fu
N#define CYDEV_ANAIF_CFG_SAR0_BASE 0x40005900u
N#define CYDEV_ANAIF_CFG_SAR0_SIZE 0x00000007u
N#define CYREG_SAR0_CSR0 0x40005900u
N#define CYREG_SAR0_CSR1 0x40005901u
N#define CYREG_SAR0_CSR2 0x40005902u
N#define CYREG_SAR0_CSR3 0x40005903u
N#define CYREG_SAR0_CSR4 0x40005904u
N#define CYREG_SAR0_CSR5 0x40005905u
N#define CYREG_SAR0_CSR6 0x40005906u
N#define CYDEV_ANAIF_CFG_SAR1_BASE 0x40005908u
N#define CYDEV_ANAIF_CFG_SAR1_SIZE 0x00000007u
N#define CYREG_SAR1_CSR0 0x40005908u
N#define CYREG_SAR1_CSR1 0x40005909u
N#define CYREG_SAR1_CSR2 0x4000590au
N#define CYREG_SAR1_CSR3 0x4000590bu
N#define CYREG_SAR1_CSR4 0x4000590cu
N#define CYREG_SAR1_CSR5 0x4000590du
N#define CYREG_SAR1_CSR6 0x4000590eu
N#define CYDEV_ANAIF_RT_BASE 0x40005a00u
N#define CYDEV_ANAIF_RT_SIZE 0x00000162u
N#define CYDEV_ANAIF_RT_SC0_BASE 0x40005a00u
N#define CYDEV_ANAIF_RT_SC0_SIZE 0x0000000du
N#define CYREG_SC0_SW0 0x40005a00u
N#define CYREG_SC0_SW2 0x40005a02u
N#define CYREG_SC0_SW3 0x40005a03u
N#define CYREG_SC0_SW4 0x40005a04u
N#define CYREG_SC0_SW6 0x40005a06u
N#define CYREG_SC0_SW7 0x40005a07u
N#define CYREG_SC0_SW8 0x40005a08u
N#define CYREG_SC0_SW10 0x40005a0au
N#define CYREG_SC0_CLK 0x40005a0bu
N#define CYREG_SC0_BST 0x40005a0cu
N#define CYDEV_ANAIF_RT_SC1_BASE 0x40005a10u
N#define CYDEV_ANAIF_RT_SC1_SIZE 0x0000000du
N#define CYREG_SC1_SW0 0x40005a10u
N#define CYREG_SC1_SW2 0x40005a12u
N#define CYREG_SC1_SW3 0x40005a13u
N#define CYREG_SC1_SW4 0x40005a14u
N#define CYREG_SC1_SW6 0x40005a16u
N#define CYREG_SC1_SW7 0x40005a17u
N#define CYREG_SC1_SW8 0x40005a18u
N#define CYREG_SC1_SW10 0x40005a1au
N#define CYREG_SC1_CLK 0x40005a1bu
N#define CYREG_SC1_BST 0x40005a1cu
N#define CYDEV_ANAIF_RT_SC2_BASE 0x40005a20u
N#define CYDEV_ANAIF_RT_SC2_SIZE 0x0000000du
N#define CYREG_SC2_SW0 0x40005a20u
N#define CYREG_SC2_SW2 0x40005a22u
N#define CYREG_SC2_SW3 0x40005a23u
N#define CYREG_SC2_SW4 0x40005a24u
N#define CYREG_SC2_SW6 0x40005a26u
N#define CYREG_SC2_SW7 0x40005a27u
N#define CYREG_SC2_SW8 0x40005a28u
N#define CYREG_SC2_SW10 0x40005a2au
N#define CYREG_SC2_CLK 0x40005a2bu
N#define CYREG_SC2_BST 0x40005a2cu
N#define CYDEV_ANAIF_RT_SC3_BASE 0x40005a30u
N#define CYDEV_ANAIF_RT_SC3_SIZE 0x0000000du
N#define CYREG_SC3_SW0 0x40005a30u
N#define CYREG_SC3_SW2 0x40005a32u
N#define CYREG_SC3_SW3 0x40005a33u
N#define CYREG_SC3_SW4 0x40005a34u
N#define CYREG_SC3_SW6 0x40005a36u
N#define CYREG_SC3_SW7 0x40005a37u
N#define CYREG_SC3_SW8 0x40005a38u
N#define CYREG_SC3_SW10 0x40005a3au
N#define CYREG_SC3_CLK 0x40005a3bu
N#define CYREG_SC3_BST 0x40005a3cu
N#define CYDEV_ANAIF_RT_DAC0_BASE 0x40005a80u
N#define CYDEV_ANAIF_RT_DAC0_SIZE 0x00000008u
N#define CYREG_DAC0_SW0 0x40005a80u
N#define CYREG_DAC0_SW2 0x40005a82u
N#define CYREG_DAC0_SW3 0x40005a83u
N#define CYREG_DAC0_SW4 0x40005a84u
N#define CYREG_DAC0_STROBE 0x40005a87u
N#define CYDEV_ANAIF_RT_DAC1_BASE 0x40005a88u
N#define CYDEV_ANAIF_RT_DAC1_SIZE 0x00000008u
N#define CYREG_DAC1_SW0 0x40005a88u
N#define CYREG_DAC1_SW2 0x40005a8au
N#define CYREG_DAC1_SW3 0x40005a8bu
N#define CYREG_DAC1_SW4 0x40005a8cu
N#define CYREG_DAC1_STROBE 0x40005a8fu
N#define CYDEV_ANAIF_RT_DAC2_BASE 0x40005a90u
N#define CYDEV_ANAIF_RT_DAC2_SIZE 0x00000008u
N#define CYREG_DAC2_SW0 0x40005a90u
N#define CYREG_DAC2_SW2 0x40005a92u
N#define CYREG_DAC2_SW3 0x40005a93u
N#define CYREG_DAC2_SW4 0x40005a94u
N#define CYREG_DAC2_STROBE 0x40005a97u
N#define CYDEV_ANAIF_RT_DAC3_BASE 0x40005a98u
N#define CYDEV_ANAIF_RT_DAC3_SIZE 0x00000008u
N#define CYREG_DAC3_SW0 0x40005a98u
N#define CYREG_DAC3_SW2 0x40005a9au
N#define CYREG_DAC3_SW3 0x40005a9bu
N#define CYREG_DAC3_SW4 0x40005a9cu
N#define CYREG_DAC3_STROBE 0x40005a9fu
N#define CYDEV_ANAIF_RT_CMP0_BASE 0x40005ac0u
N#define CYDEV_ANAIF_RT_CMP0_SIZE 0x00000008u
N#define CYREG_CMP0_SW0 0x40005ac0u
N#define CYREG_CMP0_SW2 0x40005ac2u
N#define CYREG_CMP0_SW3 0x40005ac3u
N#define CYREG_CMP0_SW4 0x40005ac4u
N#define CYREG_CMP0_SW6 0x40005ac6u
N#define CYREG_CMP0_CLK 0x40005ac7u
N#define CYDEV_ANAIF_RT_CMP1_BASE 0x40005ac8u
N#define CYDEV_ANAIF_RT_CMP1_SIZE 0x00000008u
N#define CYREG_CMP1_SW0 0x40005ac8u
N#define CYREG_CMP1_SW2 0x40005acau
N#define CYREG_CMP1_SW3 0x40005acbu
N#define CYREG_CMP1_SW4 0x40005accu
N#define CYREG_CMP1_SW6 0x40005aceu
N#define CYREG_CMP1_CLK 0x40005acfu
N#define CYDEV_ANAIF_RT_CMP2_BASE 0x40005ad0u
N#define CYDEV_ANAIF_RT_CMP2_SIZE 0x00000008u
N#define CYREG_CMP2_SW0 0x40005ad0u
N#define CYREG_CMP2_SW2 0x40005ad2u
N#define CYREG_CMP2_SW3 0x40005ad3u
N#define CYREG_CMP2_SW4 0x40005ad4u
N#define CYREG_CMP2_SW6 0x40005ad6u
N#define CYREG_CMP2_CLK 0x40005ad7u
N#define CYDEV_ANAIF_RT_CMP3_BASE 0x40005ad8u
N#define CYDEV_ANAIF_RT_CMP3_SIZE 0x00000008u
N#define CYREG_CMP3_SW0 0x40005ad8u
N#define CYREG_CMP3_SW2 0x40005adau
N#define CYREG_CMP3_SW3 0x40005adbu
N#define CYREG_CMP3_SW4 0x40005adcu
N#define CYREG_CMP3_SW6 0x40005adeu
N#define CYREG_CMP3_CLK 0x40005adfu
N#define CYDEV_ANAIF_RT_DSM0_BASE 0x40005b00u
N#define CYDEV_ANAIF_RT_DSM0_SIZE 0x00000008u
N#define CYREG_DSM0_SW0 0x40005b00u
N#define CYREG_DSM0_SW2 0x40005b02u
N#define CYREG_DSM0_SW3 0x40005b03u
N#define CYREG_DSM0_SW4 0x40005b04u
N#define CYREG_DSM0_SW6 0x40005b06u
N#define CYREG_DSM0_CLK 0x40005b07u
N#define CYDEV_ANAIF_RT_SAR0_BASE 0x40005b20u
N#define CYDEV_ANAIF_RT_SAR0_SIZE 0x00000008u
N#define CYREG_SAR0_SW0 0x40005b20u
N#define CYREG_SAR0_SW2 0x40005b22u
N#define CYREG_SAR0_SW3 0x40005b23u
N#define CYREG_SAR0_SW4 0x40005b24u
N#define CYREG_SAR0_SW6 0x40005b26u
N#define CYREG_SAR0_CLK 0x40005b27u
N#define CYDEV_ANAIF_RT_SAR1_BASE 0x40005b28u
N#define CYDEV_ANAIF_RT_SAR1_SIZE 0x00000008u
N#define CYREG_SAR1_SW0 0x40005b28u
N#define CYREG_SAR1_SW2 0x40005b2au
N#define CYREG_SAR1_SW3 0x40005b2bu
N#define CYREG_SAR1_SW4 0x40005b2cu
N#define CYREG_SAR1_SW6 0x40005b2eu
N#define CYREG_SAR1_CLK 0x40005b2fu
N#define CYDEV_ANAIF_RT_OPAMP0_BASE 0x40005b40u
N#define CYDEV_ANAIF_RT_OPAMP0_SIZE 0x00000002u
N#define CYREG_OPAMP0_MX 0x40005b40u
N#define CYREG_OPAMP0_SW 0x40005b41u
N#define CYDEV_ANAIF_RT_OPAMP1_BASE 0x40005b42u
N#define CYDEV_ANAIF_RT_OPAMP1_SIZE 0x00000002u
N#define CYREG_OPAMP1_MX 0x40005b42u
N#define CYREG_OPAMP1_SW 0x40005b43u
N#define CYDEV_ANAIF_RT_OPAMP2_BASE 0x40005b44u
N#define CYDEV_ANAIF_RT_OPAMP2_SIZE 0x00000002u
N#define CYREG_OPAMP2_MX 0x40005b44u
N#define CYREG_OPAMP2_SW 0x40005b45u
N#define CYDEV_ANAIF_RT_OPAMP3_BASE 0x40005b46u
N#define CYDEV_ANAIF_RT_OPAMP3_SIZE 0x00000002u
N#define CYREG_OPAMP3_MX 0x40005b46u
N#define CYREG_OPAMP3_SW 0x40005b47u
N#define CYDEV_ANAIF_RT_LCDDAC_BASE 0x40005b50u
N#define CYDEV_ANAIF_RT_LCDDAC_SIZE 0x00000005u
N#define CYREG_LCDDAC_SW0 0x40005b50u
N#define CYREG_LCDDAC_SW1 0x40005b51u
N#define CYREG_LCDDAC_SW2 0x40005b52u
N#define CYREG_LCDDAC_SW3 0x40005b53u
N#define CYREG_LCDDAC_SW4 0x40005b54u
N#define CYDEV_ANAIF_RT_SC_BASE 0x40005b56u
N#define CYDEV_ANAIF_RT_SC_SIZE 0x00000001u
N#define CYREG_SC_MISC 0x40005b56u
N#define CYDEV_ANAIF_RT_BUS_BASE 0x40005b58u
N#define CYDEV_ANAIF_RT_BUS_SIZE 0x00000004u
N#define CYREG_BUS_SW0 0x40005b58u
N#define CYREG_BUS_SW2 0x40005b5au
N#define CYREG_BUS_SW3 0x40005b5bu
N#define CYDEV_ANAIF_RT_DFT_BASE 0x40005b5cu
N#define CYDEV_ANAIF_RT_DFT_SIZE 0x00000006u
N#define CYREG_DFT_CR0 0x40005b5cu
N#define CYREG_DFT_CR1 0x40005b5du
N#define CYREG_DFT_CR2 0x40005b5eu
N#define CYREG_DFT_CR3 0x40005b5fu
N#define CYREG_DFT_CR4 0x40005b60u
N#define CYREG_DFT_CR5 0x40005b61u
N#define CYDEV_ANAIF_WRK_BASE 0x40005b80u
N#define CYDEV_ANAIF_WRK_SIZE 0x00000029u
N#define CYDEV_ANAIF_WRK_DAC0_BASE 0x40005b80u
N#define CYDEV_ANAIF_WRK_DAC0_SIZE 0x00000001u
N#define CYREG_DAC0_D 0x40005b80u
N#define CYDEV_ANAIF_WRK_DAC1_BASE 0x40005b81u
N#define CYDEV_ANAIF_WRK_DAC1_SIZE 0x00000001u
N#define CYREG_DAC1_D 0x40005b81u
N#define CYDEV_ANAIF_WRK_DAC2_BASE 0x40005b82u
N#define CYDEV_ANAIF_WRK_DAC2_SIZE 0x00000001u
N#define CYREG_DAC2_D 0x40005b82u
N#define CYDEV_ANAIF_WRK_DAC3_BASE 0x40005b83u
N#define CYDEV_ANAIF_WRK_DAC3_SIZE 0x00000001u
N#define CYREG_DAC3_D 0x40005b83u
N#define CYDEV_ANAIF_WRK_DSM0_BASE 0x40005b88u
N#define CYDEV_ANAIF_WRK_DSM0_SIZE 0x00000002u
N#define CYREG_DSM0_OUT0 0x40005b88u
N#define CYREG_DSM0_OUT1 0x40005b89u
N#define CYDEV_ANAIF_WRK_LUT_BASE 0x40005b90u
N#define CYDEV_ANAIF_WRK_LUT_SIZE 0x00000005u
N#define CYREG_LUT_SR 0x40005b90u
N#define CYREG_LUT_WRK1 0x40005b91u
N#define CYREG_LUT_MSK 0x40005b92u
N#define CYREG_LUT_CLK 0x40005b93u
N#define CYREG_LUT_CPTR 0x40005b94u
N#define CYDEV_ANAIF_WRK_CMP_BASE 0x40005b96u
N#define CYDEV_ANAIF_WRK_CMP_SIZE 0x00000002u
N#define CYREG_CMP_WRK 0x40005b96u
N#define CYREG_CMP_TST 0x40005b97u
N#define CYDEV_ANAIF_WRK_SC_BASE 0x40005b98u
N#define CYDEV_ANAIF_WRK_SC_SIZE 0x00000005u
N#define CYREG_SC_SR 0x40005b98u
N#define CYREG_SC_WRK1 0x40005b99u
N#define CYREG_SC_MSK 0x40005b9au
N#define CYREG_SC_CMPINV 0x40005b9bu
N#define CYREG_SC_CPTR 0x40005b9cu
N#define CYDEV_ANAIF_WRK_SAR0_BASE 0x40005ba0u
N#define CYDEV_ANAIF_WRK_SAR0_SIZE 0x00000002u
N#define CYREG_SAR0_WRK0 0x40005ba0u
N#define CYREG_SAR0_WRK1 0x40005ba1u
N#define CYDEV_ANAIF_WRK_SAR1_BASE 0x40005ba2u
N#define CYDEV_ANAIF_WRK_SAR1_SIZE 0x00000002u
N#define CYREG_SAR1_WRK0 0x40005ba2u
N#define CYREG_SAR1_WRK1 0x40005ba3u
N#define CYDEV_ANAIF_WRK_SARS_BASE 0x40005ba8u
N#define CYDEV_ANAIF_WRK_SARS_SIZE 0x00000001u
N#define CYREG_ANAIF_WRK_SARS_SOF 0x40005ba8u
N#define CYDEV_USB_BASE 0x40006000u
N#define CYDEV_USB_SIZE 0x00000300u
N#define CYREG_USB_EP0_DR0 0x40006000u
N#define CYREG_USB_EP0_DR1 0x40006001u
N#define CYREG_USB_EP0_DR2 0x40006002u
N#define CYREG_USB_EP0_DR3 0x40006003u
N#define CYREG_USB_EP0_DR4 0x40006004u
N#define CYREG_USB_EP0_DR5 0x40006005u
N#define CYREG_USB_EP0_DR6 0x40006006u
N#define CYREG_USB_EP0_DR7 0x40006007u
N#define CYREG_USB_CR0 0x40006008u
N#define CYREG_USB_CR1 0x40006009u
N#define CYREG_USB_SIE_EP_INT_EN 0x4000600au
N#define CYREG_USB_SIE_EP_INT_SR 0x4000600bu
N#define CYDEV_USB_SIE_EP1_BASE 0x4000600cu
N#define CYDEV_USB_SIE_EP1_SIZE 0x00000003u
N#define CYREG_USB_SIE_EP1_CNT0 0x4000600cu
N#define CYREG_USB_SIE_EP1_CNT1 0x4000600du
N#define CYREG_USB_SIE_EP1_CR0 0x4000600eu
N#define CYREG_USB_USBIO_CR0 0x40006010u
N#define CYREG_USB_USBIO_CR1 0x40006012u
N#define CYREG_USB_DYN_RECONFIG 0x40006014u
N#define CYREG_USB_SOF0 0x40006018u
N#define CYREG_USB_SOF1 0x40006019u
N#define CYDEV_USB_SIE_EP2_BASE 0x4000601cu
N#define CYDEV_USB_SIE_EP2_SIZE 0x00000003u
N#define CYREG_USB_SIE_EP2_CNT0 0x4000601cu
N#define CYREG_USB_SIE_EP2_CNT1 0x4000601du
N#define CYREG_USB_SIE_EP2_CR0 0x4000601eu
N#define CYREG_USB_EP0_CR 0x40006028u
N#define CYREG_USB_EP0_CNT 0x40006029u
N#define CYDEV_USB_SIE_EP3_BASE 0x4000602cu
N#define CYDEV_USB_SIE_EP3_SIZE 0x00000003u
N#define CYREG_USB_SIE_EP3_CNT0 0x4000602cu
N#define CYREG_USB_SIE_EP3_CNT1 0x4000602du
N#define CYREG_USB_SIE_EP3_CR0 0x4000602eu
N#define CYDEV_USB_SIE_EP4_BASE 0x4000603cu
N#define CYDEV_USB_SIE_EP4_SIZE 0x00000003u
N#define CYREG_USB_SIE_EP4_CNT0 0x4000603cu
N#define CYREG_USB_SIE_EP4_CNT1 0x4000603du
N#define CYREG_USB_SIE_EP4_CR0 0x4000603eu
N#define CYDEV_USB_SIE_EP5_BASE 0x4000604cu
N#define CYDEV_USB_SIE_EP5_SIZE 0x00000003u
N#define CYREG_USB_SIE_EP5_CNT0 0x4000604cu
N#define CYREG_USB_SIE_EP5_CNT1 0x4000604du
N#define CYREG_USB_SIE_EP5_CR0 0x4000604eu
N#define CYDEV_USB_SIE_EP6_BASE 0x4000605cu
N#define CYDEV_USB_SIE_EP6_SIZE 0x00000003u
N#define CYREG_USB_SIE_EP6_CNT0 0x4000605cu
N#define CYREG_USB_SIE_EP6_CNT1 0x4000605du
N#define CYREG_USB_SIE_EP6_CR0 0x4000605eu
N#define CYDEV_USB_SIE_EP7_BASE 0x4000606cu
N#define CYDEV_USB_SIE_EP7_SIZE 0x00000003u
N#define CYREG_USB_SIE_EP7_CNT0 0x4000606cu
N#define CYREG_USB_SIE_EP7_CNT1 0x4000606du
N#define CYREG_USB_SIE_EP7_CR0 0x4000606eu
N#define CYDEV_USB_SIE_EP8_BASE 0x4000607cu
N#define CYDEV_USB_SIE_EP8_SIZE 0x00000003u
N#define CYREG_USB_SIE_EP8_CNT0 0x4000607cu
N#define CYREG_USB_SIE_EP8_CNT1 0x4000607du
N#define CYREG_USB_SIE_EP8_CR0 0x4000607eu
N#define CYDEV_USB_ARB_EP1_BASE 0x40006080u
N#define CYDEV_USB_ARB_EP1_SIZE 0x00000003u
N#define CYREG_USB_ARB_EP1_CFG 0x40006080u
N#define CYREG_USB_ARB_EP1_INT_EN 0x40006081u
N#define CYREG_USB_ARB_EP1_SR 0x40006082u
N#define CYDEV_USB_ARB_RW1_BASE 0x40006084u
N#define CYDEV_USB_ARB_RW1_SIZE 0x00000005u
N#define CYREG_USB_ARB_RW1_WA 0x40006084u
N#define CYREG_USB_ARB_RW1_WA_MSB 0x40006085u
N#define CYREG_USB_ARB_RW1_RA 0x40006086u
N#define CYREG_USB_ARB_RW1_RA_MSB 0x40006087u
N#define CYREG_USB_ARB_RW1_DR 0x40006088u
N#define CYREG_USB_BUF_SIZE 0x4000608cu
N#define CYREG_USB_EP_ACTIVE 0x4000608eu
N#define CYREG_USB_EP_TYPE 0x4000608fu
N#define CYDEV_USB_ARB_EP2_BASE 0x40006090u
N#define CYDEV_USB_ARB_EP2_SIZE 0x00000003u
N#define CYREG_USB_ARB_EP2_CFG 0x40006090u
N#define CYREG_USB_ARB_EP2_INT_EN 0x40006091u
N#define CYREG_USB_ARB_EP2_SR 0x40006092u
N#define CYDEV_USB_ARB_RW2_BASE 0x40006094u
N#define CYDEV_USB_ARB_RW2_SIZE 0x00000005u
N#define CYREG_USB_ARB_RW2_WA 0x40006094u
N#define CYREG_USB_ARB_RW2_WA_MSB 0x40006095u
N#define CYREG_USB_ARB_RW2_RA 0x40006096u
N#define CYREG_USB_ARB_RW2_RA_MSB 0x40006097u
N#define CYREG_USB_ARB_RW2_DR 0x40006098u
N#define CYREG_USB_ARB_CFG 0x4000609cu
N#define CYREG_USB_USB_CLK_EN 0x4000609du
N#define CYREG_USB_ARB_INT_EN 0x4000609eu
N#define CYREG_USB_ARB_INT_SR 0x4000609fu
N#define CYDEV_USB_ARB_EP3_BASE 0x400060a0u
N#define CYDEV_USB_ARB_EP3_SIZE 0x00000003u
N#define CYREG_USB_ARB_EP3_CFG 0x400060a0u
N#define CYREG_USB_ARB_EP3_INT_EN 0x400060a1u
N#define CYREG_USB_ARB_EP3_SR 0x400060a2u
N#define CYDEV_USB_ARB_RW3_BASE 0x400060a4u
N#define CYDEV_USB_ARB_RW3_SIZE 0x00000005u
N#define CYREG_USB_ARB_RW3_WA 0x400060a4u
N#define CYREG_USB_ARB_RW3_WA_MSB 0x400060a5u
N#define CYREG_USB_ARB_RW3_RA 0x400060a6u
N#define CYREG_USB_ARB_RW3_RA_MSB 0x400060a7u
N#define CYREG_USB_ARB_RW3_DR 0x400060a8u
N#define CYREG_USB_CWA 0x400060acu
N#define CYREG_USB_CWA_MSB 0x400060adu
N#define CYDEV_USB_ARB_EP4_BASE 0x400060b0u
N#define CYDEV_USB_ARB_EP4_SIZE 0x00000003u
N#define CYREG_USB_ARB_EP4_CFG 0x400060b0u
N#define CYREG_USB_ARB_EP4_INT_EN 0x400060b1u
N#define CYREG_USB_ARB_EP4_SR 0x400060b2u
N#define CYDEV_USB_ARB_RW4_BASE 0x400060b4u
N#define CYDEV_USB_ARB_RW4_SIZE 0x00000005u
N#define CYREG_USB_ARB_RW4_WA 0x400060b4u
N#define CYREG_USB_ARB_RW4_WA_MSB 0x400060b5u
N#define CYREG_USB_ARB_RW4_RA 0x400060b6u
N#define CYREG_USB_ARB_RW4_RA_MSB 0x400060b7u
N#define CYREG_USB_ARB_RW4_DR 0x400060b8u
N#define CYREG_USB_DMA_THRES 0x400060bcu
N#define CYREG_USB_DMA_THRES_MSB 0x400060bdu
N#define CYDEV_USB_ARB_EP5_BASE 0x400060c0u
N#define CYDEV_USB_ARB_EP5_SIZE 0x00000003u
N#define CYREG_USB_ARB_EP5_CFG 0x400060c0u
N#define CYREG_USB_ARB_EP5_INT_EN 0x400060c1u
N#define CYREG_USB_ARB_EP5_SR 0x400060c2u
N#define CYDEV_USB_ARB_RW5_BASE 0x400060c4u
N#define CYDEV_USB_ARB_RW5_SIZE 0x00000005u
N#define CYREG_USB_ARB_RW5_WA 0x400060c4u
N#define CYREG_USB_ARB_RW5_WA_MSB 0x400060c5u
N#define CYREG_USB_ARB_RW5_RA 0x400060c6u
N#define CYREG_USB_ARB_RW5_RA_MSB 0x400060c7u
N#define CYREG_USB_ARB_RW5_DR 0x400060c8u
N#define CYREG_USB_BUS_RST_CNT 0x400060ccu
N#define CYDEV_USB_ARB_EP6_BASE 0x400060d0u
N#define CYDEV_USB_ARB_EP6_SIZE 0x00000003u
N#define CYREG_USB_ARB_EP6_CFG 0x400060d0u
N#define CYREG_USB_ARB_EP6_INT_EN 0x400060d1u
N#define CYREG_USB_ARB_EP6_SR 0x400060d2u
N#define CYDEV_USB_ARB_RW6_BASE 0x400060d4u
N#define CYDEV_USB_ARB_RW6_SIZE 0x00000005u
N#define CYREG_USB_ARB_RW6_WA 0x400060d4u
N#define CYREG_USB_ARB_RW6_WA_MSB 0x400060d5u
N#define CYREG_USB_ARB_RW6_RA 0x400060d6u
N#define CYREG_USB_ARB_RW6_RA_MSB 0x400060d7u
N#define CYREG_USB_ARB_RW6_DR 0x400060d8u
N#define CYDEV_USB_ARB_EP7_BASE 0x400060e0u
N#define CYDEV_USB_ARB_EP7_SIZE 0x00000003u
N#define CYREG_USB_ARB_EP7_CFG 0x400060e0u
N#define CYREG_USB_ARB_EP7_INT_EN 0x400060e1u
N#define CYREG_USB_ARB_EP7_SR 0x400060e2u
N#define CYDEV_USB_ARB_RW7_BASE 0x400060e4u
N#define CYDEV_USB_ARB_RW7_SIZE 0x00000005u
N#define CYREG_USB_ARB_RW7_WA 0x400060e4u
N#define CYREG_USB_ARB_RW7_WA_MSB 0x400060e5u
N#define CYREG_USB_ARB_RW7_RA 0x400060e6u
N#define CYREG_USB_ARB_RW7_RA_MSB 0x400060e7u
N#define CYREG_USB_ARB_RW7_DR 0x400060e8u
N#define CYDEV_USB_ARB_EP8_BASE 0x400060f0u
N#define CYDEV_USB_ARB_EP8_SIZE 0x00000003u
N#define CYREG_USB_ARB_EP8_CFG 0x400060f0u
N#define CYREG_USB_ARB_EP8_INT_EN 0x400060f1u
N#define CYREG_USB_ARB_EP8_SR 0x400060f2u
N#define CYDEV_USB_ARB_RW8_BASE 0x400060f4u
N#define CYDEV_USB_ARB_RW8_SIZE 0x00000005u
N#define CYREG_USB_ARB_RW8_WA 0x400060f4u
N#define CYREG_USB_ARB_RW8_WA_MSB 0x400060f5u
N#define CYREG_USB_ARB_RW8_RA 0x400060f6u
N#define CYREG_USB_ARB_RW8_RA_MSB 0x400060f7u
N#define CYREG_USB_ARB_RW8_DR 0x400060f8u
N#define CYDEV_USB_MEM_BASE 0x40006100u
N#define CYDEV_USB_MEM_SIZE 0x00000200u
N#define CYREG_USB_MEM_DATA_MBASE 0x40006100u
N#define CYREG_USB_MEM_DATA_MSIZE 0x00000200u
N#define CYDEV_UWRK_BASE 0x40006400u
N#define CYDEV_UWRK_SIZE 0x00000b60u
N#define CYDEV_UWRK_UWRK8_BASE 0x40006400u
N#define CYDEV_UWRK_UWRK8_SIZE 0x000003b0u
N#define CYDEV_UWRK_UWRK8_B0_BASE 0x40006400u
N#define CYDEV_UWRK_UWRK8_B0_SIZE 0x000000b0u
N#define CYREG_B0_UDB00_A0 0x40006400u
N#define CYREG_B0_UDB01_A0 0x40006401u
N#define CYREG_B0_UDB02_A0 0x40006402u
N#define CYREG_B0_UDB03_A0 0x40006403u
N#define CYREG_B0_UDB04_A0 0x40006404u
N#define CYREG_B0_UDB05_A0 0x40006405u
N#define CYREG_B0_UDB06_A0 0x40006406u
N#define CYREG_B0_UDB07_A0 0x40006407u
N#define CYREG_B0_UDB08_A0 0x40006408u
N#define CYREG_B0_UDB09_A0 0x40006409u
N#define CYREG_B0_UDB10_A0 0x4000640au
N#define CYREG_B0_UDB11_A0 0x4000640bu
N#define CYREG_B0_UDB12_A0 0x4000640cu
N#define CYREG_B0_UDB13_A0 0x4000640du
N#define CYREG_B0_UDB14_A0 0x4000640eu
N#define CYREG_B0_UDB15_A0 0x4000640fu
N#define CYREG_B0_UDB00_A1 0x40006410u
N#define CYREG_B0_UDB01_A1 0x40006411u
N#define CYREG_B0_UDB02_A1 0x40006412u
N#define CYREG_B0_UDB03_A1 0x40006413u
N#define CYREG_B0_UDB04_A1 0x40006414u
N#define CYREG_B0_UDB05_A1 0x40006415u
N#define CYREG_B0_UDB06_A1 0x40006416u
N#define CYREG_B0_UDB07_A1 0x40006417u
N#define CYREG_B0_UDB08_A1 0x40006418u
N#define CYREG_B0_UDB09_A1 0x40006419u
N#define CYREG_B0_UDB10_A1 0x4000641au
N#define CYREG_B0_UDB11_A1 0x4000641bu
N#define CYREG_B0_UDB12_A1 0x4000641cu
N#define CYREG_B0_UDB13_A1 0x4000641du
N#define CYREG_B0_UDB14_A1 0x4000641eu
N#define CYREG_B0_UDB15_A1 0x4000641fu
N#define CYREG_B0_UDB00_D0 0x40006420u
N#define CYREG_B0_UDB01_D0 0x40006421u
N#define CYREG_B0_UDB02_D0 0x40006422u
N#define CYREG_B0_UDB03_D0 0x40006423u
N#define CYREG_B0_UDB04_D0 0x40006424u
N#define CYREG_B0_UDB05_D0 0x40006425u
N#define CYREG_B0_UDB06_D0 0x40006426u
N#define CYREG_B0_UDB07_D0 0x40006427u
N#define CYREG_B0_UDB08_D0 0x40006428u
N#define CYREG_B0_UDB09_D0 0x40006429u
N#define CYREG_B0_UDB10_D0 0x4000642au
N#define CYREG_B0_UDB11_D0 0x4000642bu
N#define CYREG_B0_UDB12_D0 0x4000642cu
N#define CYREG_B0_UDB13_D0 0x4000642du
N#define CYREG_B0_UDB14_D0 0x4000642eu
N#define CYREG_B0_UDB15_D0 0x4000642fu
N#define CYREG_B0_UDB00_D1 0x40006430u
N#define CYREG_B0_UDB01_D1 0x40006431u
N#define CYREG_B0_UDB02_D1 0x40006432u
N#define CYREG_B0_UDB03_D1 0x40006433u
N#define CYREG_B0_UDB04_D1 0x40006434u
N#define CYREG_B0_UDB05_D1 0x40006435u
N#define CYREG_B0_UDB06_D1 0x40006436u
N#define CYREG_B0_UDB07_D1 0x40006437u
N#define CYREG_B0_UDB08_D1 0x40006438u
N#define CYREG_B0_UDB09_D1 0x40006439u
N#define CYREG_B0_UDB10_D1 0x4000643au
N#define CYREG_B0_UDB11_D1 0x4000643bu
N#define CYREG_B0_UDB12_D1 0x4000643cu
N#define CYREG_B0_UDB13_D1 0x4000643du
N#define CYREG_B0_UDB14_D1 0x4000643eu
N#define CYREG_B0_UDB15_D1 0x4000643fu
N#define CYREG_B0_UDB00_F0 0x40006440u
N#define CYREG_B0_UDB01_F0 0x40006441u
N#define CYREG_B0_UDB02_F0 0x40006442u
N#define CYREG_B0_UDB03_F0 0x40006443u
N#define CYREG_B0_UDB04_F0 0x40006444u
N#define CYREG_B0_UDB05_F0 0x40006445u
N#define CYREG_B0_UDB06_F0 0x40006446u
N#define CYREG_B0_UDB07_F0 0x40006447u
N#define CYREG_B0_UDB08_F0 0x40006448u
N#define CYREG_B0_UDB09_F0 0x40006449u
N#define CYREG_B0_UDB10_F0 0x4000644au
N#define CYREG_B0_UDB11_F0 0x4000644bu
N#define CYREG_B0_UDB12_F0 0x4000644cu
N#define CYREG_B0_UDB13_F0 0x4000644du
N#define CYREG_B0_UDB14_F0 0x4000644eu
N#define CYREG_B0_UDB15_F0 0x4000644fu
N#define CYREG_B0_UDB00_F1 0x40006450u
N#define CYREG_B0_UDB01_F1 0x40006451u
N#define CYREG_B0_UDB02_F1 0x40006452u
N#define CYREG_B0_UDB03_F1 0x40006453u
N#define CYREG_B0_UDB04_F1 0x40006454u
N#define CYREG_B0_UDB05_F1 0x40006455u
N#define CYREG_B0_UDB06_F1 0x40006456u
N#define CYREG_B0_UDB07_F1 0x40006457u
N#define CYREG_B0_UDB08_F1 0x40006458u
N#define CYREG_B0_UDB09_F1 0x40006459u
N#define CYREG_B0_UDB10_F1 0x4000645au
N#define CYREG_B0_UDB11_F1 0x4000645bu
N#define CYREG_B0_UDB12_F1 0x4000645cu
N#define CYREG_B0_UDB13_F1 0x4000645du
N#define CYREG_B0_UDB14_F1 0x4000645eu
N#define CYREG_B0_UDB15_F1 0x4000645fu
N#define CYREG_B0_UDB00_ST 0x40006460u
N#define CYREG_B0_UDB01_ST 0x40006461u
N#define CYREG_B0_UDB02_ST 0x40006462u
N#define CYREG_B0_UDB03_ST 0x40006463u
N#define CYREG_B0_UDB04_ST 0x40006464u
N#define CYREG_B0_UDB05_ST 0x40006465u
N#define CYREG_B0_UDB06_ST 0x40006466u
N#define CYREG_B0_UDB07_ST 0x40006467u
N#define CYREG_B0_UDB08_ST 0x40006468u
N#define CYREG_B0_UDB09_ST 0x40006469u
N#define CYREG_B0_UDB10_ST 0x4000646au
N#define CYREG_B0_UDB11_ST 0x4000646bu
N#define CYREG_B0_UDB12_ST 0x4000646cu
N#define CYREG_B0_UDB13_ST 0x4000646du
N#define CYREG_B0_UDB14_ST 0x4000646eu
N#define CYREG_B0_UDB15_ST 0x4000646fu
N#define CYREG_B0_UDB00_CTL 0x40006470u
N#define CYREG_B0_UDB01_CTL 0x40006471u
N#define CYREG_B0_UDB02_CTL 0x40006472u
N#define CYREG_B0_UDB03_CTL 0x40006473u
N#define CYREG_B0_UDB04_CTL 0x40006474u
N#define CYREG_B0_UDB05_CTL 0x40006475u
N#define CYREG_B0_UDB06_CTL 0x40006476u
N#define CYREG_B0_UDB07_CTL 0x40006477u
N#define CYREG_B0_UDB08_CTL 0x40006478u
N#define CYREG_B0_UDB09_CTL 0x40006479u
N#define CYREG_B0_UDB10_CTL 0x4000647au
N#define CYREG_B0_UDB11_CTL 0x4000647bu
N#define CYREG_B0_UDB12_CTL 0x4000647cu
N#define CYREG_B0_UDB13_CTL 0x4000647du
N#define CYREG_B0_UDB14_CTL 0x4000647eu
N#define CYREG_B0_UDB15_CTL 0x4000647fu
N#define CYREG_B0_UDB00_MSK 0x40006480u
N#define CYREG_B0_UDB01_MSK 0x40006481u
N#define CYREG_B0_UDB02_MSK 0x40006482u
N#define CYREG_B0_UDB03_MSK 0x40006483u
N#define CYREG_B0_UDB04_MSK 0x40006484u
N#define CYREG_B0_UDB05_MSK 0x40006485u
N#define CYREG_B0_UDB06_MSK 0x40006486u
N#define CYREG_B0_UDB07_MSK 0x40006487u
N#define CYREG_B0_UDB08_MSK 0x40006488u
N#define CYREG_B0_UDB09_MSK 0x40006489u
N#define CYREG_B0_UDB10_MSK 0x4000648au
N#define CYREG_B0_UDB11_MSK 0x4000648bu
N#define CYREG_B0_UDB12_MSK 0x4000648cu
N#define CYREG_B0_UDB13_MSK 0x4000648du
N#define CYREG_B0_UDB14_MSK 0x4000648eu
N#define CYREG_B0_UDB15_MSK 0x4000648fu
N#define CYREG_B0_UDB00_ACTL 0x40006490u
N#define CYREG_B0_UDB01_ACTL 0x40006491u
N#define CYREG_B0_UDB02_ACTL 0x40006492u
N#define CYREG_B0_UDB03_ACTL 0x40006493u
N#define CYREG_B0_UDB04_ACTL 0x40006494u
N#define CYREG_B0_UDB05_ACTL 0x40006495u
N#define CYREG_B0_UDB06_ACTL 0x40006496u
N#define CYREG_B0_UDB07_ACTL 0x40006497u
N#define CYREG_B0_UDB08_ACTL 0x40006498u
N#define CYREG_B0_UDB09_ACTL 0x40006499u
N#define CYREG_B0_UDB10_ACTL 0x4000649au
N#define CYREG_B0_UDB11_ACTL 0x4000649bu
N#define CYREG_B0_UDB12_ACTL 0x4000649cu
N#define CYREG_B0_UDB13_ACTL 0x4000649du
N#define CYREG_B0_UDB14_ACTL 0x4000649eu
N#define CYREG_B0_UDB15_ACTL 0x4000649fu
N#define CYREG_B0_UDB00_MC 0x400064a0u
N#define CYREG_B0_UDB01_MC 0x400064a1u
N#define CYREG_B0_UDB02_MC 0x400064a2u
N#define CYREG_B0_UDB03_MC 0x400064a3u
N#define CYREG_B0_UDB04_MC 0x400064a4u
N#define CYREG_B0_UDB05_MC 0x400064a5u
N#define CYREG_B0_UDB06_MC 0x400064a6u
N#define CYREG_B0_UDB07_MC 0x400064a7u
N#define CYREG_B0_UDB08_MC 0x400064a8u
N#define CYREG_B0_UDB09_MC 0x400064a9u
N#define CYREG_B0_UDB10_MC 0x400064aau
N#define CYREG_B0_UDB11_MC 0x400064abu
N#define CYREG_B0_UDB12_MC 0x400064acu
N#define CYREG_B0_UDB13_MC 0x400064adu
N#define CYREG_B0_UDB14_MC 0x400064aeu
N#define CYREG_B0_UDB15_MC 0x400064afu
N#define CYDEV_UWRK_UWRK8_B1_BASE 0x40006500u
N#define CYDEV_UWRK_UWRK8_B1_SIZE 0x000000b0u
N#define CYREG_B1_UDB04_A0 0x40006504u
N#define CYREG_B1_UDB05_A0 0x40006505u
N#define CYREG_B1_UDB06_A0 0x40006506u
N#define CYREG_B1_UDB07_A0 0x40006507u
N#define CYREG_B1_UDB08_A0 0x40006508u
N#define CYREG_B1_UDB09_A0 0x40006509u
N#define CYREG_B1_UDB10_A0 0x4000650au
N#define CYREG_B1_UDB11_A0 0x4000650bu
N#define CYREG_B1_UDB04_A1 0x40006514u
N#define CYREG_B1_UDB05_A1 0x40006515u
N#define CYREG_B1_UDB06_A1 0x40006516u
N#define CYREG_B1_UDB07_A1 0x40006517u
N#define CYREG_B1_UDB08_A1 0x40006518u
N#define CYREG_B1_UDB09_A1 0x40006519u
N#define CYREG_B1_UDB10_A1 0x4000651au
N#define CYREG_B1_UDB11_A1 0x4000651bu
N#define CYREG_B1_UDB04_D0 0x40006524u
N#define CYREG_B1_UDB05_D0 0x40006525u
N#define CYREG_B1_UDB06_D0 0x40006526u
N#define CYREG_B1_UDB07_D0 0x40006527u
N#define CYREG_B1_UDB08_D0 0x40006528u
N#define CYREG_B1_UDB09_D0 0x40006529u
N#define CYREG_B1_UDB10_D0 0x4000652au
N#define CYREG_B1_UDB11_D0 0x4000652bu
N#define CYREG_B1_UDB04_D1 0x40006534u
N#define CYREG_B1_UDB05_D1 0x40006535u
N#define CYREG_B1_UDB06_D1 0x40006536u
N#define CYREG_B1_UDB07_D1 0x40006537u
N#define CYREG_B1_UDB08_D1 0x40006538u
N#define CYREG_B1_UDB09_D1 0x40006539u
N#define CYREG_B1_UDB10_D1 0x4000653au
N#define CYREG_B1_UDB11_D1 0x4000653bu
N#define CYREG_B1_UDB04_F0 0x40006544u
N#define CYREG_B1_UDB05_F0 0x40006545u
N#define CYREG_B1_UDB06_F0 0x40006546u
N#define CYREG_B1_UDB07_F0 0x40006547u
N#define CYREG_B1_UDB08_F0 0x40006548u
N#define CYREG_B1_UDB09_F0 0x40006549u
N#define CYREG_B1_UDB10_F0 0x4000654au
N#define CYREG_B1_UDB11_F0 0x4000654bu
N#define CYREG_B1_UDB04_F1 0x40006554u
N#define CYREG_B1_UDB05_F1 0x40006555u
N#define CYREG_B1_UDB06_F1 0x40006556u
N#define CYREG_B1_UDB07_F1 0x40006557u
N#define CYREG_B1_UDB08_F1 0x40006558u
N#define CYREG_B1_UDB09_F1 0x40006559u
N#define CYREG_B1_UDB10_F1 0x4000655au
N#define CYREG_B1_UDB11_F1 0x4000655bu
N#define CYREG_B1_UDB04_ST 0x40006564u
N#define CYREG_B1_UDB05_ST 0x40006565u
N#define CYREG_B1_UDB06_ST 0x40006566u
N#define CYREG_B1_UDB07_ST 0x40006567u
N#define CYREG_B1_UDB08_ST 0x40006568u
N#define CYREG_B1_UDB09_ST 0x40006569u
N#define CYREG_B1_UDB10_ST 0x4000656au
N#define CYREG_B1_UDB11_ST 0x4000656bu
N#define CYREG_B1_UDB04_CTL 0x40006574u
N#define CYREG_B1_UDB05_CTL 0x40006575u
N#define CYREG_B1_UDB06_CTL 0x40006576u
N#define CYREG_B1_UDB07_CTL 0x40006577u
N#define CYREG_B1_UDB08_CTL 0x40006578u
N#define CYREG_B1_UDB09_CTL 0x40006579u
N#define CYREG_B1_UDB10_CTL 0x4000657au
N#define CYREG_B1_UDB11_CTL 0x4000657bu
N#define CYREG_B1_UDB04_MSK 0x40006584u
N#define CYREG_B1_UDB05_MSK 0x40006585u
N#define CYREG_B1_UDB06_MSK 0x40006586u
N#define CYREG_B1_UDB07_MSK 0x40006587u
N#define CYREG_B1_UDB08_MSK 0x40006588u
N#define CYREG_B1_UDB09_MSK 0x40006589u
N#define CYREG_B1_UDB10_MSK 0x4000658au
N#define CYREG_B1_UDB11_MSK 0x4000658bu
N#define CYREG_B1_UDB04_ACTL 0x40006594u
N#define CYREG_B1_UDB05_ACTL 0x40006595u
N#define CYREG_B1_UDB06_ACTL 0x40006596u
N#define CYREG_B1_UDB07_ACTL 0x40006597u
N#define CYREG_B1_UDB08_ACTL 0x40006598u
N#define CYREG_B1_UDB09_ACTL 0x40006599u
N#define CYREG_B1_UDB10_ACTL 0x4000659au
N#define CYREG_B1_UDB11_ACTL 0x4000659bu
N#define CYREG_B1_UDB04_MC 0x400065a4u
N#define CYREG_B1_UDB05_MC 0x400065a5u
N#define CYREG_B1_UDB06_MC 0x400065a6u
N#define CYREG_B1_UDB07_MC 0x400065a7u
N#define CYREG_B1_UDB08_MC 0x400065a8u
N#define CYREG_B1_UDB09_MC 0x400065a9u
N#define CYREG_B1_UDB10_MC 0x400065aau
N#define CYREG_B1_UDB11_MC 0x400065abu
N#define CYDEV_UWRK_UWRK16_BASE 0x40006800u
N#define CYDEV_UWRK_UWRK16_SIZE 0x00000760u
N#define CYDEV_UWRK_UWRK16_CAT_BASE 0x40006800u
N#define CYDEV_UWRK_UWRK16_CAT_SIZE 0x00000760u
N#define CYDEV_UWRK_UWRK16_CAT_B0_BASE 0x40006800u
N#define CYDEV_UWRK_UWRK16_CAT_B0_SIZE 0x00000160u
N#define CYREG_B0_UDB00_A0_A1 0x40006800u
N#define CYREG_B0_UDB01_A0_A1 0x40006802u
N#define CYREG_B0_UDB02_A0_A1 0x40006804u
N#define CYREG_B0_UDB03_A0_A1 0x40006806u
N#define CYREG_B0_UDB04_A0_A1 0x40006808u
N#define CYREG_B0_UDB05_A0_A1 0x4000680au
N#define CYREG_B0_UDB06_A0_A1 0x4000680cu
N#define CYREG_B0_UDB07_A0_A1 0x4000680eu
N#define CYREG_B0_UDB08_A0_A1 0x40006810u
N#define CYREG_B0_UDB09_A0_A1 0x40006812u
N#define CYREG_B0_UDB10_A0_A1 0x40006814u
N#define CYREG_B0_UDB11_A0_A1 0x40006816u
N#define CYREG_B0_UDB12_A0_A1 0x40006818u
N#define CYREG_B0_UDB13_A0_A1 0x4000681au
N#define CYREG_B0_UDB14_A0_A1 0x4000681cu
N#define CYREG_B0_UDB15_A0_A1 0x4000681eu
N#define CYREG_B0_UDB00_D0_D1 0x40006840u
N#define CYREG_B0_UDB01_D0_D1 0x40006842u
N#define CYREG_B0_UDB02_D0_D1 0x40006844u
N#define CYREG_B0_UDB03_D0_D1 0x40006846u
N#define CYREG_B0_UDB04_D0_D1 0x40006848u
N#define CYREG_B0_UDB05_D0_D1 0x4000684au
N#define CYREG_B0_UDB06_D0_D1 0x4000684cu
N#define CYREG_B0_UDB07_D0_D1 0x4000684eu
N#define CYREG_B0_UDB08_D0_D1 0x40006850u
N#define CYREG_B0_UDB09_D0_D1 0x40006852u
N#define CYREG_B0_UDB10_D0_D1 0x40006854u
N#define CYREG_B0_UDB11_D0_D1 0x40006856u
N#define CYREG_B0_UDB12_D0_D1 0x40006858u
N#define CYREG_B0_UDB13_D0_D1 0x4000685au
N#define CYREG_B0_UDB14_D0_D1 0x4000685cu
N#define CYREG_B0_UDB15_D0_D1 0x4000685eu
N#define CYREG_B0_UDB00_F0_F1 0x40006880u
N#define CYREG_B0_UDB01_F0_F1 0x40006882u
N#define CYREG_B0_UDB02_F0_F1 0x40006884u
N#define CYREG_B0_UDB03_F0_F1 0x40006886u
N#define CYREG_B0_UDB04_F0_F1 0x40006888u
N#define CYREG_B0_UDB05_F0_F1 0x4000688au
N#define CYREG_B0_UDB06_F0_F1 0x4000688cu
N#define CYREG_B0_UDB07_F0_F1 0x4000688eu
N#define CYREG_B0_UDB08_F0_F1 0x40006890u
N#define CYREG_B0_UDB09_F0_F1 0x40006892u
N#define CYREG_B0_UDB10_F0_F1 0x40006894u
N#define CYREG_B0_UDB11_F0_F1 0x40006896u
N#define CYREG_B0_UDB12_F0_F1 0x40006898u
N#define CYREG_B0_UDB13_F0_F1 0x4000689au
N#define CYREG_B0_UDB14_F0_F1 0x4000689cu
N#define CYREG_B0_UDB15_F0_F1 0x4000689eu
N#define CYREG_B0_UDB00_ST_CTL 0x400068c0u
N#define CYREG_B0_UDB01_ST_CTL 0x400068c2u
N#define CYREG_B0_UDB02_ST_CTL 0x400068c4u
N#define CYREG_B0_UDB03_ST_CTL 0x400068c6u
N#define CYREG_B0_UDB04_ST_CTL 0x400068c8u
N#define CYREG_B0_UDB05_ST_CTL 0x400068cau
N#define CYREG_B0_UDB06_ST_CTL 0x400068ccu
N#define CYREG_B0_UDB07_ST_CTL 0x400068ceu
N#define CYREG_B0_UDB08_ST_CTL 0x400068d0u
N#define CYREG_B0_UDB09_ST_CTL 0x400068d2u
N#define CYREG_B0_UDB10_ST_CTL 0x400068d4u
N#define CYREG_B0_UDB11_ST_CTL 0x400068d6u
N#define CYREG_B0_UDB12_ST_CTL 0x400068d8u
N#define CYREG_B0_UDB13_ST_CTL 0x400068dau
N#define CYREG_B0_UDB14_ST_CTL 0x400068dcu
N#define CYREG_B0_UDB15_ST_CTL 0x400068deu
N#define CYREG_B0_UDB00_MSK_ACTL 0x40006900u
N#define CYREG_B0_UDB01_MSK_ACTL 0x40006902u
N#define CYREG_B0_UDB02_MSK_ACTL 0x40006904u
N#define CYREG_B0_UDB03_MSK_ACTL 0x40006906u
N#define CYREG_B0_UDB04_MSK_ACTL 0x40006908u
N#define CYREG_B0_UDB05_MSK_ACTL 0x4000690au
N#define CYREG_B0_UDB06_MSK_ACTL 0x4000690cu
N#define CYREG_B0_UDB07_MSK_ACTL 0x4000690eu
N#define CYREG_B0_UDB08_MSK_ACTL 0x40006910u
N#define CYREG_B0_UDB09_MSK_ACTL 0x40006912u
N#define CYREG_B0_UDB10_MSK_ACTL 0x40006914u
N#define CYREG_B0_UDB11_MSK_ACTL 0x40006916u
N#define CYREG_B0_UDB12_MSK_ACTL 0x40006918u
N#define CYREG_B0_UDB13_MSK_ACTL 0x4000691au
N#define CYREG_B0_UDB14_MSK_ACTL 0x4000691cu
N#define CYREG_B0_UDB15_MSK_ACTL 0x4000691eu
N#define CYREG_B0_UDB00_MC_00 0x40006940u
N#define CYREG_B0_UDB01_MC_00 0x40006942u
N#define CYREG_B0_UDB02_MC_00 0x40006944u
N#define CYREG_B0_UDB03_MC_00 0x40006946u
N#define CYREG_B0_UDB04_MC_00 0x40006948u
N#define CYREG_B0_UDB05_MC_00 0x4000694au
N#define CYREG_B0_UDB06_MC_00 0x4000694cu
N#define CYREG_B0_UDB07_MC_00 0x4000694eu
N#define CYREG_B0_UDB08_MC_00 0x40006950u
N#define CYREG_B0_UDB09_MC_00 0x40006952u
N#define CYREG_B0_UDB10_MC_00 0x40006954u
N#define CYREG_B0_UDB11_MC_00 0x40006956u
N#define CYREG_B0_UDB12_MC_00 0x40006958u
N#define CYREG_B0_UDB13_MC_00 0x4000695au
N#define CYREG_B0_UDB14_MC_00 0x4000695cu
N#define CYREG_B0_UDB15_MC_00 0x4000695eu
N#define CYDEV_UWRK_UWRK16_CAT_B1_BASE 0x40006a00u
N#define CYDEV_UWRK_UWRK16_CAT_B1_SIZE 0x00000160u
N#define CYREG_B1_UDB04_A0_A1 0x40006a08u
N#define CYREG_B1_UDB05_A0_A1 0x40006a0au
N#define CYREG_B1_UDB06_A0_A1 0x40006a0cu
N#define CYREG_B1_UDB07_A0_A1 0x40006a0eu
N#define CYREG_B1_UDB08_A0_A1 0x40006a10u
N#define CYREG_B1_UDB09_A0_A1 0x40006a12u
N#define CYREG_B1_UDB10_A0_A1 0x40006a14u
N#define CYREG_B1_UDB11_A0_A1 0x40006a16u
N#define CYREG_B1_UDB04_D0_D1 0x40006a48u
N#define CYREG_B1_UDB05_D0_D1 0x40006a4au
N#define CYREG_B1_UDB06_D0_D1 0x40006a4cu
N#define CYREG_B1_UDB07_D0_D1 0x40006a4eu
N#define CYREG_B1_UDB08_D0_D1 0x40006a50u
N#define CYREG_B1_UDB09_D0_D1 0x40006a52u
N#define CYREG_B1_UDB10_D0_D1 0x40006a54u
N#define CYREG_B1_UDB11_D0_D1 0x40006a56u
N#define CYREG_B1_UDB04_F0_F1 0x40006a88u
N#define CYREG_B1_UDB05_F0_F1 0x40006a8au
N#define CYREG_B1_UDB06_F0_F1 0x40006a8cu
N#define CYREG_B1_UDB07_F0_F1 0x40006a8eu
N#define CYREG_B1_UDB08_F0_F1 0x40006a90u
N#define CYREG_B1_UDB09_F0_F1 0x40006a92u
N#define CYREG_B1_UDB10_F0_F1 0x40006a94u
N#define CYREG_B1_UDB11_F0_F1 0x40006a96u
N#define CYREG_B1_UDB04_ST_CTL 0x40006ac8u
N#define CYREG_B1_UDB05_ST_CTL 0x40006acau
N#define CYREG_B1_UDB06_ST_CTL 0x40006accu
N#define CYREG_B1_UDB07_ST_CTL 0x40006aceu
N#define CYREG_B1_UDB08_ST_CTL 0x40006ad0u
N#define CYREG_B1_UDB09_ST_CTL 0x40006ad2u
N#define CYREG_B1_UDB10_ST_CTL 0x40006ad4u
N#define CYREG_B1_UDB11_ST_CTL 0x40006ad6u
N#define CYREG_B1_UDB04_MSK_ACTL 0x40006b08u
N#define CYREG_B1_UDB05_MSK_ACTL 0x40006b0au
N#define CYREG_B1_UDB06_MSK_ACTL 0x40006b0cu
N#define CYREG_B1_UDB07_MSK_ACTL 0x40006b0eu
N#define CYREG_B1_UDB08_MSK_ACTL 0x40006b10u
N#define CYREG_B1_UDB09_MSK_ACTL 0x40006b12u
N#define CYREG_B1_UDB10_MSK_ACTL 0x40006b14u
N#define CYREG_B1_UDB11_MSK_ACTL 0x40006b16u
N#define CYREG_B1_UDB04_MC_00 0x40006b48u
N#define CYREG_B1_UDB05_MC_00 0x40006b4au
N#define CYREG_B1_UDB06_MC_00 0x40006b4cu
N#define CYREG_B1_UDB07_MC_00 0x40006b4eu
N#define CYREG_B1_UDB08_MC_00 0x40006b50u
N#define CYREG_B1_UDB09_MC_00 0x40006b52u
N#define CYREG_B1_UDB10_MC_00 0x40006b54u
N#define CYREG_B1_UDB11_MC_00 0x40006b56u
N#define CYDEV_UWRK_UWRK16_DEF_BASE 0x40006800u
N#define CYDEV_UWRK_UWRK16_DEF_SIZE 0x0000075eu
N#define CYDEV_UWRK_UWRK16_DEF_B0_BASE 0x40006800u
N#define CYDEV_UWRK_UWRK16_DEF_B0_SIZE 0x0000015eu
N#define CYREG_B0_UDB00_01_A0 0x40006800u
N#define CYREG_B0_UDB01_02_A0 0x40006802u
N#define CYREG_B0_UDB02_03_A0 0x40006804u
N#define CYREG_B0_UDB03_04_A0 0x40006806u
N#define CYREG_B0_UDB04_05_A0 0x40006808u
N#define CYREG_B0_UDB05_06_A0 0x4000680au
N#define CYREG_B0_UDB06_07_A0 0x4000680cu
N#define CYREG_B0_UDB07_08_A0 0x4000680eu
N#define CYREG_B0_UDB08_09_A0 0x40006810u
N#define CYREG_B0_UDB09_10_A0 0x40006812u
N#define CYREG_B0_UDB10_11_A0 0x40006814u
N#define CYREG_B0_UDB11_12_A0 0x40006816u
N#define CYREG_B0_UDB12_13_A0 0x40006818u
N#define CYREG_B0_UDB13_14_A0 0x4000681au
N#define CYREG_B0_UDB14_15_A0 0x4000681cu
N#define CYREG_B0_UDB00_01_A1 0x40006820u
N#define CYREG_B0_UDB01_02_A1 0x40006822u
N#define CYREG_B0_UDB02_03_A1 0x40006824u
N#define CYREG_B0_UDB03_04_A1 0x40006826u
N#define CYREG_B0_UDB04_05_A1 0x40006828u
N#define CYREG_B0_UDB05_06_A1 0x4000682au
N#define CYREG_B0_UDB06_07_A1 0x4000682cu
N#define CYREG_B0_UDB07_08_A1 0x4000682eu
N#define CYREG_B0_UDB08_09_A1 0x40006830u
N#define CYREG_B0_UDB09_10_A1 0x40006832u
N#define CYREG_B0_UDB10_11_A1 0x40006834u
N#define CYREG_B0_UDB11_12_A1 0x40006836u
N#define CYREG_B0_UDB12_13_A1 0x40006838u
N#define CYREG_B0_UDB13_14_A1 0x4000683au
N#define CYREG_B0_UDB14_15_A1 0x4000683cu
N#define CYREG_B0_UDB00_01_D0 0x40006840u
N#define CYREG_B0_UDB01_02_D0 0x40006842u
N#define CYREG_B0_UDB02_03_D0 0x40006844u
N#define CYREG_B0_UDB03_04_D0 0x40006846u
N#define CYREG_B0_UDB04_05_D0 0x40006848u
N#define CYREG_B0_UDB05_06_D0 0x4000684au
N#define CYREG_B0_UDB06_07_D0 0x4000684cu
N#define CYREG_B0_UDB07_08_D0 0x4000684eu
N#define CYREG_B0_UDB08_09_D0 0x40006850u
N#define CYREG_B0_UDB09_10_D0 0x40006852u
N#define CYREG_B0_UDB10_11_D0 0x40006854u
N#define CYREG_B0_UDB11_12_D0 0x40006856u
N#define CYREG_B0_UDB12_13_D0 0x40006858u
N#define CYREG_B0_UDB13_14_D0 0x4000685au
N#define CYREG_B0_UDB14_15_D0 0x4000685cu
N#define CYREG_B0_UDB00_01_D1 0x40006860u
N#define CYREG_B0_UDB01_02_D1 0x40006862u
N#define CYREG_B0_UDB02_03_D1 0x40006864u
N#define CYREG_B0_UDB03_04_D1 0x40006866u
N#define CYREG_B0_UDB04_05_D1 0x40006868u
N#define CYREG_B0_UDB05_06_D1 0x4000686au
N#define CYREG_B0_UDB06_07_D1 0x4000686cu
N#define CYREG_B0_UDB07_08_D1 0x4000686eu
N#define CYREG_B0_UDB08_09_D1 0x40006870u
N#define CYREG_B0_UDB09_10_D1 0x40006872u
N#define CYREG_B0_UDB10_11_D1 0x40006874u
N#define CYREG_B0_UDB11_12_D1 0x40006876u
N#define CYREG_B0_UDB12_13_D1 0x40006878u
N#define CYREG_B0_UDB13_14_D1 0x4000687au
N#define CYREG_B0_UDB14_15_D1 0x4000687cu
N#define CYREG_B0_UDB00_01_F0 0x40006880u
N#define CYREG_B0_UDB01_02_F0 0x40006882u
N#define CYREG_B0_UDB02_03_F0 0x40006884u
N#define CYREG_B0_UDB03_04_F0 0x40006886u
N#define CYREG_B0_UDB04_05_F0 0x40006888u
N#define CYREG_B0_UDB05_06_F0 0x4000688au
N#define CYREG_B0_UDB06_07_F0 0x4000688cu
N#define CYREG_B0_UDB07_08_F0 0x4000688eu
N#define CYREG_B0_UDB08_09_F0 0x40006890u
N#define CYREG_B0_UDB09_10_F0 0x40006892u
N#define CYREG_B0_UDB10_11_F0 0x40006894u
N#define CYREG_B0_UDB11_12_F0 0x40006896u
N#define CYREG_B0_UDB12_13_F0 0x40006898u
N#define CYREG_B0_UDB13_14_F0 0x4000689au
N#define CYREG_B0_UDB14_15_F0 0x4000689cu
N#define CYREG_B0_UDB00_01_F1 0x400068a0u
N#define CYREG_B0_UDB01_02_F1 0x400068a2u
N#define CYREG_B0_UDB02_03_F1 0x400068a4u
N#define CYREG_B0_UDB03_04_F1 0x400068a6u
N#define CYREG_B0_UDB04_05_F1 0x400068a8u
N#define CYREG_B0_UDB05_06_F1 0x400068aau
N#define CYREG_B0_UDB06_07_F1 0x400068acu
N#define CYREG_B0_UDB07_08_F1 0x400068aeu
N#define CYREG_B0_UDB08_09_F1 0x400068b0u
N#define CYREG_B0_UDB09_10_F1 0x400068b2u
N#define CYREG_B0_UDB10_11_F1 0x400068b4u
N#define CYREG_B0_UDB11_12_F1 0x400068b6u
N#define CYREG_B0_UDB12_13_F1 0x400068b8u
N#define CYREG_B0_UDB13_14_F1 0x400068bau
N#define CYREG_B0_UDB14_15_F1 0x400068bcu
N#define CYREG_B0_UDB00_01_ST 0x400068c0u
N#define CYREG_B0_UDB01_02_ST 0x400068c2u
N#define CYREG_B0_UDB02_03_ST 0x400068c4u
N#define CYREG_B0_UDB03_04_ST 0x400068c6u
N#define CYREG_B0_UDB04_05_ST 0x400068c8u
N#define CYREG_B0_UDB05_06_ST 0x400068cau
N#define CYREG_B0_UDB06_07_ST 0x400068ccu
N#define CYREG_B0_UDB07_08_ST 0x400068ceu
N#define CYREG_B0_UDB08_09_ST 0x400068d0u
N#define CYREG_B0_UDB09_10_ST 0x400068d2u
N#define CYREG_B0_UDB10_11_ST 0x400068d4u
N#define CYREG_B0_UDB11_12_ST 0x400068d6u
N#define CYREG_B0_UDB12_13_ST 0x400068d8u
N#define CYREG_B0_UDB13_14_ST 0x400068dau
N#define CYREG_B0_UDB14_15_ST 0x400068dcu
N#define CYREG_B0_UDB00_01_CTL 0x400068e0u
N#define CYREG_B0_UDB01_02_CTL 0x400068e2u
N#define CYREG_B0_UDB02_03_CTL 0x400068e4u
N#define CYREG_B0_UDB03_04_CTL 0x400068e6u
N#define CYREG_B0_UDB04_05_CTL 0x400068e8u
N#define CYREG_B0_UDB05_06_CTL 0x400068eau
N#define CYREG_B0_UDB06_07_CTL 0x400068ecu
N#define CYREG_B0_UDB07_08_CTL 0x400068eeu
N#define CYREG_B0_UDB08_09_CTL 0x400068f0u
N#define CYREG_B0_UDB09_10_CTL 0x400068f2u
N#define CYREG_B0_UDB10_11_CTL 0x400068f4u
N#define CYREG_B0_UDB11_12_CTL 0x400068f6u
N#define CYREG_B0_UDB12_13_CTL 0x400068f8u
N#define CYREG_B0_UDB13_14_CTL 0x400068fau
N#define CYREG_B0_UDB14_15_CTL 0x400068fcu
N#define CYREG_B0_UDB00_01_MSK 0x40006900u
N#define CYREG_B0_UDB01_02_MSK 0x40006902u
N#define CYREG_B0_UDB02_03_MSK 0x40006904u
N#define CYREG_B0_UDB03_04_MSK 0x40006906u
N#define CYREG_B0_UDB04_05_MSK 0x40006908u
N#define CYREG_B0_UDB05_06_MSK 0x4000690au
N#define CYREG_B0_UDB06_07_MSK 0x4000690cu
N#define CYREG_B0_UDB07_08_MSK 0x4000690eu
N#define CYREG_B0_UDB08_09_MSK 0x40006910u
N#define CYREG_B0_UDB09_10_MSK 0x40006912u
N#define CYREG_B0_UDB10_11_MSK 0x40006914u
N#define CYREG_B0_UDB11_12_MSK 0x40006916u
N#define CYREG_B0_UDB12_13_MSK 0x40006918u
N#define CYREG_B0_UDB13_14_MSK 0x4000691au
N#define CYREG_B0_UDB14_15_MSK 0x4000691cu
N#define CYREG_B0_UDB00_01_ACTL 0x40006920u
N#define CYREG_B0_UDB01_02_ACTL 0x40006922u
N#define CYREG_B0_UDB02_03_ACTL 0x40006924u
N#define CYREG_B0_UDB03_04_ACTL 0x40006926u
N#define CYREG_B0_UDB04_05_ACTL 0x40006928u
N#define CYREG_B0_UDB05_06_ACTL 0x4000692au
N#define CYREG_B0_UDB06_07_ACTL 0x4000692cu
N#define CYREG_B0_UDB07_08_ACTL 0x4000692eu
N#define CYREG_B0_UDB08_09_ACTL 0x40006930u
N#define CYREG_B0_UDB09_10_ACTL 0x40006932u
N#define CYREG_B0_UDB10_11_ACTL 0x40006934u
N#define CYREG_B0_UDB11_12_ACTL 0x40006936u
N#define CYREG_B0_UDB12_13_ACTL 0x40006938u
N#define CYREG_B0_UDB13_14_ACTL 0x4000693au
N#define CYREG_B0_UDB14_15_ACTL 0x4000693cu
N#define CYREG_B0_UDB00_01_MC 0x40006940u
N#define CYREG_B0_UDB01_02_MC 0x40006942u
N#define CYREG_B0_UDB02_03_MC 0x40006944u
N#define CYREG_B0_UDB03_04_MC 0x40006946u
N#define CYREG_B0_UDB04_05_MC 0x40006948u
N#define CYREG_B0_UDB05_06_MC 0x4000694au
N#define CYREG_B0_UDB06_07_MC 0x4000694cu
N#define CYREG_B0_UDB07_08_MC 0x4000694eu
N#define CYREG_B0_UDB08_09_MC 0x40006950u
N#define CYREG_B0_UDB09_10_MC 0x40006952u
N#define CYREG_B0_UDB10_11_MC 0x40006954u
N#define CYREG_B0_UDB11_12_MC 0x40006956u
N#define CYREG_B0_UDB12_13_MC 0x40006958u
N#define CYREG_B0_UDB13_14_MC 0x4000695au
N#define CYREG_B0_UDB14_15_MC 0x4000695cu
N#define CYDEV_UWRK_UWRK16_DEF_B1_BASE 0x40006a00u
N#define CYDEV_UWRK_UWRK16_DEF_B1_SIZE 0x0000015eu
N#define CYREG_B1_UDB04_05_A0 0x40006a08u
N#define CYREG_B1_UDB05_06_A0 0x40006a0au
N#define CYREG_B1_UDB06_07_A0 0x40006a0cu
N#define CYREG_B1_UDB07_08_A0 0x40006a0eu
N#define CYREG_B1_UDB08_09_A0 0x40006a10u
N#define CYREG_B1_UDB09_10_A0 0x40006a12u
N#define CYREG_B1_UDB10_11_A0 0x40006a14u
N#define CYREG_B1_UDB11_12_A0 0x40006a16u
N#define CYREG_B1_UDB04_05_A1 0x40006a28u
N#define CYREG_B1_UDB05_06_A1 0x40006a2au
N#define CYREG_B1_UDB06_07_A1 0x40006a2cu
N#define CYREG_B1_UDB07_08_A1 0x40006a2eu
N#define CYREG_B1_UDB08_09_A1 0x40006a30u
N#define CYREG_B1_UDB09_10_A1 0x40006a32u
N#define CYREG_B1_UDB10_11_A1 0x40006a34u
N#define CYREG_B1_UDB11_12_A1 0x40006a36u
N#define CYREG_B1_UDB04_05_D0 0x40006a48u
N#define CYREG_B1_UDB05_06_D0 0x40006a4au
N#define CYREG_B1_UDB06_07_D0 0x40006a4cu
N#define CYREG_B1_UDB07_08_D0 0x40006a4eu
N#define CYREG_B1_UDB08_09_D0 0x40006a50u
N#define CYREG_B1_UDB09_10_D0 0x40006a52u
N#define CYREG_B1_UDB10_11_D0 0x40006a54u
N#define CYREG_B1_UDB11_12_D0 0x40006a56u
N#define CYREG_B1_UDB04_05_D1 0x40006a68u
N#define CYREG_B1_UDB05_06_D1 0x40006a6au
N#define CYREG_B1_UDB06_07_D1 0x40006a6cu
N#define CYREG_B1_UDB07_08_D1 0x40006a6eu
N#define CYREG_B1_UDB08_09_D1 0x40006a70u
N#define CYREG_B1_UDB09_10_D1 0x40006a72u
N#define CYREG_B1_UDB10_11_D1 0x40006a74u
N#define CYREG_B1_UDB11_12_D1 0x40006a76u
N#define CYREG_B1_UDB04_05_F0 0x40006a88u
N#define CYREG_B1_UDB05_06_F0 0x40006a8au
N#define CYREG_B1_UDB06_07_F0 0x40006a8cu
N#define CYREG_B1_UDB07_08_F0 0x40006a8eu
N#define CYREG_B1_UDB08_09_F0 0x40006a90u
N#define CYREG_B1_UDB09_10_F0 0x40006a92u
N#define CYREG_B1_UDB10_11_F0 0x40006a94u
N#define CYREG_B1_UDB11_12_F0 0x40006a96u
N#define CYREG_B1_UDB04_05_F1 0x40006aa8u
N#define CYREG_B1_UDB05_06_F1 0x40006aaau
N#define CYREG_B1_UDB06_07_F1 0x40006aacu
N#define CYREG_B1_UDB07_08_F1 0x40006aaeu
N#define CYREG_B1_UDB08_09_F1 0x40006ab0u
N#define CYREG_B1_UDB09_10_F1 0x40006ab2u
N#define CYREG_B1_UDB10_11_F1 0x40006ab4u
N#define CYREG_B1_UDB11_12_F1 0x40006ab6u
N#define CYREG_B1_UDB04_05_ST 0x40006ac8u
N#define CYREG_B1_UDB05_06_ST 0x40006acau
N#define CYREG_B1_UDB06_07_ST 0x40006accu
N#define CYREG_B1_UDB07_08_ST 0x40006aceu
N#define CYREG_B1_UDB08_09_ST 0x40006ad0u
N#define CYREG_B1_UDB09_10_ST 0x40006ad2u
N#define CYREG_B1_UDB10_11_ST 0x40006ad4u
N#define CYREG_B1_UDB11_12_ST 0x40006ad6u
N#define CYREG_B1_UDB04_05_CTL 0x40006ae8u
N#define CYREG_B1_UDB05_06_CTL 0x40006aeau
N#define CYREG_B1_UDB06_07_CTL 0x40006aecu
N#define CYREG_B1_UDB07_08_CTL 0x40006aeeu
N#define CYREG_B1_UDB08_09_CTL 0x40006af0u
N#define CYREG_B1_UDB09_10_CTL 0x40006af2u
N#define CYREG_B1_UDB10_11_CTL 0x40006af4u
N#define CYREG_B1_UDB11_12_CTL 0x40006af6u
N#define CYREG_B1_UDB04_05_MSK 0x40006b08u
N#define CYREG_B1_UDB05_06_MSK 0x40006b0au
N#define CYREG_B1_UDB06_07_MSK 0x40006b0cu
N#define CYREG_B1_UDB07_08_MSK 0x40006b0eu
N#define CYREG_B1_UDB08_09_MSK 0x40006b10u
N#define CYREG_B1_UDB09_10_MSK 0x40006b12u
N#define CYREG_B1_UDB10_11_MSK 0x40006b14u
N#define CYREG_B1_UDB11_12_MSK 0x40006b16u
N#define CYREG_B1_UDB04_05_ACTL 0x40006b28u
N#define CYREG_B1_UDB05_06_ACTL 0x40006b2au
N#define CYREG_B1_UDB06_07_ACTL 0x40006b2cu
N#define CYREG_B1_UDB07_08_ACTL 0x40006b2eu
N#define CYREG_B1_UDB08_09_ACTL 0x40006b30u
N#define CYREG_B1_UDB09_10_ACTL 0x40006b32u
N#define CYREG_B1_UDB10_11_ACTL 0x40006b34u
N#define CYREG_B1_UDB11_12_ACTL 0x40006b36u
N#define CYREG_B1_UDB04_05_MC 0x40006b48u
N#define CYREG_B1_UDB05_06_MC 0x40006b4au
N#define CYREG_B1_UDB06_07_MC 0x40006b4cu
N#define CYREG_B1_UDB07_08_MC 0x40006b4eu
N#define CYREG_B1_UDB08_09_MC 0x40006b50u
N#define CYREG_B1_UDB09_10_MC 0x40006b52u
N#define CYREG_B1_UDB10_11_MC 0x40006b54u
N#define CYREG_B1_UDB11_12_MC 0x40006b56u
N#define CYDEV_PHUB_BASE 0x40007000u
N#define CYDEV_PHUB_SIZE 0x00000c00u
N#define CYREG_PHUB_CFG 0x40007000u
N#define CYREG_PHUB_ERR 0x40007004u
N#define CYREG_PHUB_ERR_ADR 0x40007008u
N#define CYDEV_PHUB_CH0_BASE 0x40007010u
N#define CYDEV_PHUB_CH0_SIZE 0x0000000cu
N#define CYREG_PHUB_CH0_BASIC_CFG 0x40007010u
N#define CYREG_PHUB_CH0_ACTION 0x40007014u
N#define CYREG_PHUB_CH0_BASIC_STATUS 0x40007018u
N#define CYDEV_PHUB_CH1_BASE 0x40007020u
N#define CYDEV_PHUB_CH1_SIZE 0x0000000cu
N#define CYREG_PHUB_CH1_BASIC_CFG 0x40007020u
N#define CYREG_PHUB_CH1_ACTION 0x40007024u
N#define CYREG_PHUB_CH1_BASIC_STATUS 0x40007028u
N#define CYDEV_PHUB_CH2_BASE 0x40007030u
N#define CYDEV_PHUB_CH2_SIZE 0x0000000cu
N#define CYREG_PHUB_CH2_BASIC_CFG 0x40007030u
N#define CYREG_PHUB_CH2_ACTION 0x40007034u
N#define CYREG_PHUB_CH2_BASIC_STATUS 0x40007038u
N#define CYDEV_PHUB_CH3_BASE 0x40007040u
N#define CYDEV_PHUB_CH3_SIZE 0x0000000cu
N#define CYREG_PHUB_CH3_BASIC_CFG 0x40007040u
N#define CYREG_PHUB_CH3_ACTION 0x40007044u
N#define CYREG_PHUB_CH3_BASIC_STATUS 0x40007048u
N#define CYDEV_PHUB_CH4_BASE 0x40007050u
N#define CYDEV_PHUB_CH4_SIZE 0x0000000cu
N#define CYREG_PHUB_CH4_BASIC_CFG 0x40007050u
N#define CYREG_PHUB_CH4_ACTION 0x40007054u
N#define CYREG_PHUB_CH4_BASIC_STATUS 0x40007058u
N#define CYDEV_PHUB_CH5_BASE 0x40007060u
N#define CYDEV_PHUB_CH5_SIZE 0x0000000cu
N#define CYREG_PHUB_CH5_BASIC_CFG 0x40007060u
N#define CYREG_PHUB_CH5_ACTION 0x40007064u
N#define CYREG_PHUB_CH5_BASIC_STATUS 0x40007068u
N#define CYDEV_PHUB_CH6_BASE 0x40007070u
N#define CYDEV_PHUB_CH6_SIZE 0x0000000cu
N#define CYREG_PHUB_CH6_BASIC_CFG 0x40007070u
N#define CYREG_PHUB_CH6_ACTION 0x40007074u
N#define CYREG_PHUB_CH6_BASIC_STATUS 0x40007078u
N#define CYDEV_PHUB_CH7_BASE 0x40007080u
N#define CYDEV_PHUB_CH7_SIZE 0x0000000cu
N#define CYREG_PHUB_CH7_BASIC_CFG 0x40007080u
N#define CYREG_PHUB_CH7_ACTION 0x40007084u
N#define CYREG_PHUB_CH7_BASIC_STATUS 0x40007088u
N#define CYDEV_PHUB_CH8_BASE 0x40007090u
N#define CYDEV_PHUB_CH8_SIZE 0x0000000cu
N#define CYREG_PHUB_CH8_BASIC_CFG 0x40007090u
N#define CYREG_PHUB_CH8_ACTION 0x40007094u
N#define CYREG_PHUB_CH8_BASIC_STATUS 0x40007098u
N#define CYDEV_PHUB_CH9_BASE 0x400070a0u
N#define CYDEV_PHUB_CH9_SIZE 0x0000000cu
N#define CYREG_PHUB_CH9_BASIC_CFG 0x400070a0u
N#define CYREG_PHUB_CH9_ACTION 0x400070a4u
N#define CYREG_PHUB_CH9_BASIC_STATUS 0x400070a8u
N#define CYDEV_PHUB_CH10_BASE 0x400070b0u
N#define CYDEV_PHUB_CH10_SIZE 0x0000000cu
N#define CYREG_PHUB_CH10_BASIC_CFG 0x400070b0u
N#define CYREG_PHUB_CH10_ACTION 0x400070b4u
N#define CYREG_PHUB_CH10_BASIC_STATUS 0x400070b8u
N#define CYDEV_PHUB_CH11_BASE 0x400070c0u
N#define CYDEV_PHUB_CH11_SIZE 0x0000000cu
N#define CYREG_PHUB_CH11_BASIC_CFG 0x400070c0u
N#define CYREG_PHUB_CH11_ACTION 0x400070c4u
N#define CYREG_PHUB_CH11_BASIC_STATUS 0x400070c8u
N#define CYDEV_PHUB_CH12_BASE 0x400070d0u
N#define CYDEV_PHUB_CH12_SIZE 0x0000000cu
N#define CYREG_PHUB_CH12_BASIC_CFG 0x400070d0u
N#define CYREG_PHUB_CH12_ACTION 0x400070d4u
N#define CYREG_PHUB_CH12_BASIC_STATUS 0x400070d8u
N#define CYDEV_PHUB_CH13_BASE 0x400070e0u
N#define CYDEV_PHUB_CH13_SIZE 0x0000000cu
N#define CYREG_PHUB_CH13_BASIC_CFG 0x400070e0u
N#define CYREG_PHUB_CH13_ACTION 0x400070e4u
N#define CYREG_PHUB_CH13_BASIC_STATUS 0x400070e8u
N#define CYDEV_PHUB_CH14_BASE 0x400070f0u
N#define CYDEV_PHUB_CH14_SIZE 0x0000000cu
N#define CYREG_PHUB_CH14_BASIC_CFG 0x400070f0u
N#define CYREG_PHUB_CH14_ACTION 0x400070f4u
N#define CYREG_PHUB_CH14_BASIC_STATUS 0x400070f8u
N#define CYDEV_PHUB_CH15_BASE 0x40007100u
N#define CYDEV_PHUB_CH15_SIZE 0x0000000cu
N#define CYREG_PHUB_CH15_BASIC_CFG 0x40007100u
N#define CYREG_PHUB_CH15_ACTION 0x40007104u
N#define CYREG_PHUB_CH15_BASIC_STATUS 0x40007108u
N#define CYDEV_PHUB_CH16_BASE 0x40007110u
N#define CYDEV_PHUB_CH16_SIZE 0x0000000cu
N#define CYREG_PHUB_CH16_BASIC_CFG 0x40007110u
N#define CYREG_PHUB_CH16_ACTION 0x40007114u
N#define CYREG_PHUB_CH16_BASIC_STATUS 0x40007118u
N#define CYDEV_PHUB_CH17_BASE 0x40007120u
N#define CYDEV_PHUB_CH17_SIZE 0x0000000cu
N#define CYREG_PHUB_CH17_BASIC_CFG 0x40007120u
N#define CYREG_PHUB_CH17_ACTION 0x40007124u
N#define CYREG_PHUB_CH17_BASIC_STATUS 0x40007128u
N#define CYDEV_PHUB_CH18_BASE 0x40007130u
N#define CYDEV_PHUB_CH18_SIZE 0x0000000cu
N#define CYREG_PHUB_CH18_BASIC_CFG 0x40007130u
N#define CYREG_PHUB_CH18_ACTION 0x40007134u
N#define CYREG_PHUB_CH18_BASIC_STATUS 0x40007138u
N#define CYDEV_PHUB_CH19_BASE 0x40007140u
N#define CYDEV_PHUB_CH19_SIZE 0x0000000cu
N#define CYREG_PHUB_CH19_BASIC_CFG 0x40007140u
N#define CYREG_PHUB_CH19_ACTION 0x40007144u
N#define CYREG_PHUB_CH19_BASIC_STATUS 0x40007148u
N#define CYDEV_PHUB_CH20_BASE 0x40007150u
N#define CYDEV_PHUB_CH20_SIZE 0x0000000cu
N#define CYREG_PHUB_CH20_BASIC_CFG 0x40007150u
N#define CYREG_PHUB_CH20_ACTION 0x40007154u
N#define CYREG_PHUB_CH20_BASIC_STATUS 0x40007158u
N#define CYDEV_PHUB_CH21_BASE 0x40007160u
N#define CYDEV_PHUB_CH21_SIZE 0x0000000cu
N#define CYREG_PHUB_CH21_BASIC_CFG 0x40007160u
N#define CYREG_PHUB_CH21_ACTION 0x40007164u
N#define CYREG_PHUB_CH21_BASIC_STATUS 0x40007168u
N#define CYDEV_PHUB_CH22_BASE 0x40007170u
N#define CYDEV_PHUB_CH22_SIZE 0x0000000cu
N#define CYREG_PHUB_CH22_BASIC_CFG 0x40007170u
N#define CYREG_PHUB_CH22_ACTION 0x40007174u
N#define CYREG_PHUB_CH22_BASIC_STATUS 0x40007178u
N#define CYDEV_PHUB_CH23_BASE 0x40007180u
N#define CYDEV_PHUB_CH23_SIZE 0x0000000cu
N#define CYREG_PHUB_CH23_BASIC_CFG 0x40007180u
N#define CYREG_PHUB_CH23_ACTION 0x40007184u
N#define CYREG_PHUB_CH23_BASIC_STATUS 0x40007188u
N#define CYDEV_PHUB_CFGMEM0_BASE 0x40007600u
N#define CYDEV_PHUB_CFGMEM0_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM0_CFG0 0x40007600u
N#define CYREG_PHUB_CFGMEM0_CFG1 0x40007604u
N#define CYDEV_PHUB_CFGMEM1_BASE 0x40007608u
N#define CYDEV_PHUB_CFGMEM1_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM1_CFG0 0x40007608u
N#define CYREG_PHUB_CFGMEM1_CFG1 0x4000760cu
N#define CYDEV_PHUB_CFGMEM2_BASE 0x40007610u
N#define CYDEV_PHUB_CFGMEM2_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM2_CFG0 0x40007610u
N#define CYREG_PHUB_CFGMEM2_CFG1 0x40007614u
N#define CYDEV_PHUB_CFGMEM3_BASE 0x40007618u
N#define CYDEV_PHUB_CFGMEM3_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM3_CFG0 0x40007618u
N#define CYREG_PHUB_CFGMEM3_CFG1 0x4000761cu
N#define CYDEV_PHUB_CFGMEM4_BASE 0x40007620u
N#define CYDEV_PHUB_CFGMEM4_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM4_CFG0 0x40007620u
N#define CYREG_PHUB_CFGMEM4_CFG1 0x40007624u
N#define CYDEV_PHUB_CFGMEM5_BASE 0x40007628u
N#define CYDEV_PHUB_CFGMEM5_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM5_CFG0 0x40007628u
N#define CYREG_PHUB_CFGMEM5_CFG1 0x4000762cu
N#define CYDEV_PHUB_CFGMEM6_BASE 0x40007630u
N#define CYDEV_PHUB_CFGMEM6_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM6_CFG0 0x40007630u
N#define CYREG_PHUB_CFGMEM6_CFG1 0x40007634u
N#define CYDEV_PHUB_CFGMEM7_BASE 0x40007638u
N#define CYDEV_PHUB_CFGMEM7_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM7_CFG0 0x40007638u
N#define CYREG_PHUB_CFGMEM7_CFG1 0x4000763cu
N#define CYDEV_PHUB_CFGMEM8_BASE 0x40007640u
N#define CYDEV_PHUB_CFGMEM8_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM8_CFG0 0x40007640u
N#define CYREG_PHUB_CFGMEM8_CFG1 0x40007644u
N#define CYDEV_PHUB_CFGMEM9_BASE 0x40007648u
N#define CYDEV_PHUB_CFGMEM9_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM9_CFG0 0x40007648u
N#define CYREG_PHUB_CFGMEM9_CFG1 0x4000764cu
N#define CYDEV_PHUB_CFGMEM10_BASE 0x40007650u
N#define CYDEV_PHUB_CFGMEM10_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM10_CFG0 0x40007650u
N#define CYREG_PHUB_CFGMEM10_CFG1 0x40007654u
N#define CYDEV_PHUB_CFGMEM11_BASE 0x40007658u
N#define CYDEV_PHUB_CFGMEM11_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM11_CFG0 0x40007658u
N#define CYREG_PHUB_CFGMEM11_CFG1 0x4000765cu
N#define CYDEV_PHUB_CFGMEM12_BASE 0x40007660u
N#define CYDEV_PHUB_CFGMEM12_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM12_CFG0 0x40007660u
N#define CYREG_PHUB_CFGMEM12_CFG1 0x40007664u
N#define CYDEV_PHUB_CFGMEM13_BASE 0x40007668u
N#define CYDEV_PHUB_CFGMEM13_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM13_CFG0 0x40007668u
N#define CYREG_PHUB_CFGMEM13_CFG1 0x4000766cu
N#define CYDEV_PHUB_CFGMEM14_BASE 0x40007670u
N#define CYDEV_PHUB_CFGMEM14_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM14_CFG0 0x40007670u
N#define CYREG_PHUB_CFGMEM14_CFG1 0x40007674u
N#define CYDEV_PHUB_CFGMEM15_BASE 0x40007678u
N#define CYDEV_PHUB_CFGMEM15_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM15_CFG0 0x40007678u
N#define CYREG_PHUB_CFGMEM15_CFG1 0x4000767cu
N#define CYDEV_PHUB_CFGMEM16_BASE 0x40007680u
N#define CYDEV_PHUB_CFGMEM16_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM16_CFG0 0x40007680u
N#define CYREG_PHUB_CFGMEM16_CFG1 0x40007684u
N#define CYDEV_PHUB_CFGMEM17_BASE 0x40007688u
N#define CYDEV_PHUB_CFGMEM17_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM17_CFG0 0x40007688u
N#define CYREG_PHUB_CFGMEM17_CFG1 0x4000768cu
N#define CYDEV_PHUB_CFGMEM18_BASE 0x40007690u
N#define CYDEV_PHUB_CFGMEM18_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM18_CFG0 0x40007690u
N#define CYREG_PHUB_CFGMEM18_CFG1 0x40007694u
N#define CYDEV_PHUB_CFGMEM19_BASE 0x40007698u
N#define CYDEV_PHUB_CFGMEM19_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM19_CFG0 0x40007698u
N#define CYREG_PHUB_CFGMEM19_CFG1 0x4000769cu
N#define CYDEV_PHUB_CFGMEM20_BASE 0x400076a0u
N#define CYDEV_PHUB_CFGMEM20_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM20_CFG0 0x400076a0u
N#define CYREG_PHUB_CFGMEM20_CFG1 0x400076a4u
N#define CYDEV_PHUB_CFGMEM21_BASE 0x400076a8u
N#define CYDEV_PHUB_CFGMEM21_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM21_CFG0 0x400076a8u
N#define CYREG_PHUB_CFGMEM21_CFG1 0x400076acu
N#define CYDEV_PHUB_CFGMEM22_BASE 0x400076b0u
N#define CYDEV_PHUB_CFGMEM22_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM22_CFG0 0x400076b0u
N#define CYREG_PHUB_CFGMEM22_CFG1 0x400076b4u
N#define CYDEV_PHUB_CFGMEM23_BASE 0x400076b8u
N#define CYDEV_PHUB_CFGMEM23_SIZE 0x00000008u
N#define CYREG_PHUB_CFGMEM23_CFG0 0x400076b8u
N#define CYREG_PHUB_CFGMEM23_CFG1 0x400076bcu
N#define CYDEV_PHUB_TDMEM0_BASE 0x40007800u
N#define CYDEV_PHUB_TDMEM0_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM0_ORIG_TD0 0x40007800u
N#define CYREG_PHUB_TDMEM0_ORIG_TD1 0x40007804u
N#define CYDEV_PHUB_TDMEM1_BASE 0x40007808u
N#define CYDEV_PHUB_TDMEM1_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM1_ORIG_TD0 0x40007808u
N#define CYREG_PHUB_TDMEM1_ORIG_TD1 0x4000780cu
N#define CYDEV_PHUB_TDMEM2_BASE 0x40007810u
N#define CYDEV_PHUB_TDMEM2_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM2_ORIG_TD0 0x40007810u
N#define CYREG_PHUB_TDMEM2_ORIG_TD1 0x40007814u
N#define CYDEV_PHUB_TDMEM3_BASE 0x40007818u
N#define CYDEV_PHUB_TDMEM3_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM3_ORIG_TD0 0x40007818u
N#define CYREG_PHUB_TDMEM3_ORIG_TD1 0x4000781cu
N#define CYDEV_PHUB_TDMEM4_BASE 0x40007820u
N#define CYDEV_PHUB_TDMEM4_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM4_ORIG_TD0 0x40007820u
N#define CYREG_PHUB_TDMEM4_ORIG_TD1 0x40007824u
N#define CYDEV_PHUB_TDMEM5_BASE 0x40007828u
N#define CYDEV_PHUB_TDMEM5_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM5_ORIG_TD0 0x40007828u
N#define CYREG_PHUB_TDMEM5_ORIG_TD1 0x4000782cu
N#define CYDEV_PHUB_TDMEM6_BASE 0x40007830u
N#define CYDEV_PHUB_TDMEM6_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM6_ORIG_TD0 0x40007830u
N#define CYREG_PHUB_TDMEM6_ORIG_TD1 0x40007834u
N#define CYDEV_PHUB_TDMEM7_BASE 0x40007838u
N#define CYDEV_PHUB_TDMEM7_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM7_ORIG_TD0 0x40007838u
N#define CYREG_PHUB_TDMEM7_ORIG_TD1 0x4000783cu
N#define CYDEV_PHUB_TDMEM8_BASE 0x40007840u
N#define CYDEV_PHUB_TDMEM8_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM8_ORIG_TD0 0x40007840u
N#define CYREG_PHUB_TDMEM8_ORIG_TD1 0x40007844u
N#define CYDEV_PHUB_TDMEM9_BASE 0x40007848u
N#define CYDEV_PHUB_TDMEM9_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM9_ORIG_TD0 0x40007848u
N#define CYREG_PHUB_TDMEM9_ORIG_TD1 0x4000784cu
N#define CYDEV_PHUB_TDMEM10_BASE 0x40007850u
N#define CYDEV_PHUB_TDMEM10_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM10_ORIG_TD0 0x40007850u
N#define CYREG_PHUB_TDMEM10_ORIG_TD1 0x40007854u
N#define CYDEV_PHUB_TDMEM11_BASE 0x40007858u
N#define CYDEV_PHUB_TDMEM11_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM11_ORIG_TD0 0x40007858u
N#define CYREG_PHUB_TDMEM11_ORIG_TD1 0x4000785cu
N#define CYDEV_PHUB_TDMEM12_BASE 0x40007860u
N#define CYDEV_PHUB_TDMEM12_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM12_ORIG_TD0 0x40007860u
N#define CYREG_PHUB_TDMEM12_ORIG_TD1 0x40007864u
N#define CYDEV_PHUB_TDMEM13_BASE 0x40007868u
N#define CYDEV_PHUB_TDMEM13_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM13_ORIG_TD0 0x40007868u
N#define CYREG_PHUB_TDMEM13_ORIG_TD1 0x4000786cu
N#define CYDEV_PHUB_TDMEM14_BASE 0x40007870u
N#define CYDEV_PHUB_TDMEM14_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM14_ORIG_TD0 0x40007870u
N#define CYREG_PHUB_TDMEM14_ORIG_TD1 0x40007874u
N#define CYDEV_PHUB_TDMEM15_BASE 0x40007878u
N#define CYDEV_PHUB_TDMEM15_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM15_ORIG_TD0 0x40007878u
N#define CYREG_PHUB_TDMEM15_ORIG_TD1 0x4000787cu
N#define CYDEV_PHUB_TDMEM16_BASE 0x40007880u
N#define CYDEV_PHUB_TDMEM16_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM16_ORIG_TD0 0x40007880u
N#define CYREG_PHUB_TDMEM16_ORIG_TD1 0x40007884u
N#define CYDEV_PHUB_TDMEM17_BASE 0x40007888u
N#define CYDEV_PHUB_TDMEM17_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM17_ORIG_TD0 0x40007888u
N#define CYREG_PHUB_TDMEM17_ORIG_TD1 0x4000788cu
N#define CYDEV_PHUB_TDMEM18_BASE 0x40007890u
N#define CYDEV_PHUB_TDMEM18_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM18_ORIG_TD0 0x40007890u
N#define CYREG_PHUB_TDMEM18_ORIG_TD1 0x40007894u
N#define CYDEV_PHUB_TDMEM19_BASE 0x40007898u
N#define CYDEV_PHUB_TDMEM19_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM19_ORIG_TD0 0x40007898u
N#define CYREG_PHUB_TDMEM19_ORIG_TD1 0x4000789cu
N#define CYDEV_PHUB_TDMEM20_BASE 0x400078a0u
N#define CYDEV_PHUB_TDMEM20_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM20_ORIG_TD0 0x400078a0u
N#define CYREG_PHUB_TDMEM20_ORIG_TD1 0x400078a4u
N#define CYDEV_PHUB_TDMEM21_BASE 0x400078a8u
N#define CYDEV_PHUB_TDMEM21_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM21_ORIG_TD0 0x400078a8u
N#define CYREG_PHUB_TDMEM21_ORIG_TD1 0x400078acu
N#define CYDEV_PHUB_TDMEM22_BASE 0x400078b0u
N#define CYDEV_PHUB_TDMEM22_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM22_ORIG_TD0 0x400078b0u
N#define CYREG_PHUB_TDMEM22_ORIG_TD1 0x400078b4u
N#define CYDEV_PHUB_TDMEM23_BASE 0x400078b8u
N#define CYDEV_PHUB_TDMEM23_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM23_ORIG_TD0 0x400078b8u
N#define CYREG_PHUB_TDMEM23_ORIG_TD1 0x400078bcu
N#define CYDEV_PHUB_TDMEM24_BASE 0x400078c0u
N#define CYDEV_PHUB_TDMEM24_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM24_ORIG_TD0 0x400078c0u
N#define CYREG_PHUB_TDMEM24_ORIG_TD1 0x400078c4u
N#define CYDEV_PHUB_TDMEM25_BASE 0x400078c8u
N#define CYDEV_PHUB_TDMEM25_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM25_ORIG_TD0 0x400078c8u
N#define CYREG_PHUB_TDMEM25_ORIG_TD1 0x400078ccu
N#define CYDEV_PHUB_TDMEM26_BASE 0x400078d0u
N#define CYDEV_PHUB_TDMEM26_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM26_ORIG_TD0 0x400078d0u
N#define CYREG_PHUB_TDMEM26_ORIG_TD1 0x400078d4u
N#define CYDEV_PHUB_TDMEM27_BASE 0x400078d8u
N#define CYDEV_PHUB_TDMEM27_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM27_ORIG_TD0 0x400078d8u
N#define CYREG_PHUB_TDMEM27_ORIG_TD1 0x400078dcu
N#define CYDEV_PHUB_TDMEM28_BASE 0x400078e0u
N#define CYDEV_PHUB_TDMEM28_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM28_ORIG_TD0 0x400078e0u
N#define CYREG_PHUB_TDMEM28_ORIG_TD1 0x400078e4u
N#define CYDEV_PHUB_TDMEM29_BASE 0x400078e8u
N#define CYDEV_PHUB_TDMEM29_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM29_ORIG_TD0 0x400078e8u
N#define CYREG_PHUB_TDMEM29_ORIG_TD1 0x400078ecu
N#define CYDEV_PHUB_TDMEM30_BASE 0x400078f0u
N#define CYDEV_PHUB_TDMEM30_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM30_ORIG_TD0 0x400078f0u
N#define CYREG_PHUB_TDMEM30_ORIG_TD1 0x400078f4u
N#define CYDEV_PHUB_TDMEM31_BASE 0x400078f8u
N#define CYDEV_PHUB_TDMEM31_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM31_ORIG_TD0 0x400078f8u
N#define CYREG_PHUB_TDMEM31_ORIG_TD1 0x400078fcu
N#define CYDEV_PHUB_TDMEM32_BASE 0x40007900u
N#define CYDEV_PHUB_TDMEM32_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM32_ORIG_TD0 0x40007900u
N#define CYREG_PHUB_TDMEM32_ORIG_TD1 0x40007904u
N#define CYDEV_PHUB_TDMEM33_BASE 0x40007908u
N#define CYDEV_PHUB_TDMEM33_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM33_ORIG_TD0 0x40007908u
N#define CYREG_PHUB_TDMEM33_ORIG_TD1 0x4000790cu
N#define CYDEV_PHUB_TDMEM34_BASE 0x40007910u
N#define CYDEV_PHUB_TDMEM34_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM34_ORIG_TD0 0x40007910u
N#define CYREG_PHUB_TDMEM34_ORIG_TD1 0x40007914u
N#define CYDEV_PHUB_TDMEM35_BASE 0x40007918u
N#define CYDEV_PHUB_TDMEM35_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM35_ORIG_TD0 0x40007918u
N#define CYREG_PHUB_TDMEM35_ORIG_TD1 0x4000791cu
N#define CYDEV_PHUB_TDMEM36_BASE 0x40007920u
N#define CYDEV_PHUB_TDMEM36_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM36_ORIG_TD0 0x40007920u
N#define CYREG_PHUB_TDMEM36_ORIG_TD1 0x40007924u
N#define CYDEV_PHUB_TDMEM37_BASE 0x40007928u
N#define CYDEV_PHUB_TDMEM37_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM37_ORIG_TD0 0x40007928u
N#define CYREG_PHUB_TDMEM37_ORIG_TD1 0x4000792cu
N#define CYDEV_PHUB_TDMEM38_BASE 0x40007930u
N#define CYDEV_PHUB_TDMEM38_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM38_ORIG_TD0 0x40007930u
N#define CYREG_PHUB_TDMEM38_ORIG_TD1 0x40007934u
N#define CYDEV_PHUB_TDMEM39_BASE 0x40007938u
N#define CYDEV_PHUB_TDMEM39_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM39_ORIG_TD0 0x40007938u
N#define CYREG_PHUB_TDMEM39_ORIG_TD1 0x4000793cu
N#define CYDEV_PHUB_TDMEM40_BASE 0x40007940u
N#define CYDEV_PHUB_TDMEM40_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM40_ORIG_TD0 0x40007940u
N#define CYREG_PHUB_TDMEM40_ORIG_TD1 0x40007944u
N#define CYDEV_PHUB_TDMEM41_BASE 0x40007948u
N#define CYDEV_PHUB_TDMEM41_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM41_ORIG_TD0 0x40007948u
N#define CYREG_PHUB_TDMEM41_ORIG_TD1 0x4000794cu
N#define CYDEV_PHUB_TDMEM42_BASE 0x40007950u
N#define CYDEV_PHUB_TDMEM42_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM42_ORIG_TD0 0x40007950u
N#define CYREG_PHUB_TDMEM42_ORIG_TD1 0x40007954u
N#define CYDEV_PHUB_TDMEM43_BASE 0x40007958u
N#define CYDEV_PHUB_TDMEM43_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM43_ORIG_TD0 0x40007958u
N#define CYREG_PHUB_TDMEM43_ORIG_TD1 0x4000795cu
N#define CYDEV_PHUB_TDMEM44_BASE 0x40007960u
N#define CYDEV_PHUB_TDMEM44_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM44_ORIG_TD0 0x40007960u
N#define CYREG_PHUB_TDMEM44_ORIG_TD1 0x40007964u
N#define CYDEV_PHUB_TDMEM45_BASE 0x40007968u
N#define CYDEV_PHUB_TDMEM45_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM45_ORIG_TD0 0x40007968u
N#define CYREG_PHUB_TDMEM45_ORIG_TD1 0x4000796cu
N#define CYDEV_PHUB_TDMEM46_BASE 0x40007970u
N#define CYDEV_PHUB_TDMEM46_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM46_ORIG_TD0 0x40007970u
N#define CYREG_PHUB_TDMEM46_ORIG_TD1 0x40007974u
N#define CYDEV_PHUB_TDMEM47_BASE 0x40007978u
N#define CYDEV_PHUB_TDMEM47_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM47_ORIG_TD0 0x40007978u
N#define CYREG_PHUB_TDMEM47_ORIG_TD1 0x4000797cu
N#define CYDEV_PHUB_TDMEM48_BASE 0x40007980u
N#define CYDEV_PHUB_TDMEM48_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM48_ORIG_TD0 0x40007980u
N#define CYREG_PHUB_TDMEM48_ORIG_TD1 0x40007984u
N#define CYDEV_PHUB_TDMEM49_BASE 0x40007988u
N#define CYDEV_PHUB_TDMEM49_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM49_ORIG_TD0 0x40007988u
N#define CYREG_PHUB_TDMEM49_ORIG_TD1 0x4000798cu
N#define CYDEV_PHUB_TDMEM50_BASE 0x40007990u
N#define CYDEV_PHUB_TDMEM50_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM50_ORIG_TD0 0x40007990u
N#define CYREG_PHUB_TDMEM50_ORIG_TD1 0x40007994u
N#define CYDEV_PHUB_TDMEM51_BASE 0x40007998u
N#define CYDEV_PHUB_TDMEM51_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM51_ORIG_TD0 0x40007998u
N#define CYREG_PHUB_TDMEM51_ORIG_TD1 0x4000799cu
N#define CYDEV_PHUB_TDMEM52_BASE 0x400079a0u
N#define CYDEV_PHUB_TDMEM52_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM52_ORIG_TD0 0x400079a0u
N#define CYREG_PHUB_TDMEM52_ORIG_TD1 0x400079a4u
N#define CYDEV_PHUB_TDMEM53_BASE 0x400079a8u
N#define CYDEV_PHUB_TDMEM53_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM53_ORIG_TD0 0x400079a8u
N#define CYREG_PHUB_TDMEM53_ORIG_TD1 0x400079acu
N#define CYDEV_PHUB_TDMEM54_BASE 0x400079b0u
N#define CYDEV_PHUB_TDMEM54_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM54_ORIG_TD0 0x400079b0u
N#define CYREG_PHUB_TDMEM54_ORIG_TD1 0x400079b4u
N#define CYDEV_PHUB_TDMEM55_BASE 0x400079b8u
N#define CYDEV_PHUB_TDMEM55_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM55_ORIG_TD0 0x400079b8u
N#define CYREG_PHUB_TDMEM55_ORIG_TD1 0x400079bcu
N#define CYDEV_PHUB_TDMEM56_BASE 0x400079c0u
N#define CYDEV_PHUB_TDMEM56_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM56_ORIG_TD0 0x400079c0u
N#define CYREG_PHUB_TDMEM56_ORIG_TD1 0x400079c4u
N#define CYDEV_PHUB_TDMEM57_BASE 0x400079c8u
N#define CYDEV_PHUB_TDMEM57_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM57_ORIG_TD0 0x400079c8u
N#define CYREG_PHUB_TDMEM57_ORIG_TD1 0x400079ccu
N#define CYDEV_PHUB_TDMEM58_BASE 0x400079d0u
N#define CYDEV_PHUB_TDMEM58_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM58_ORIG_TD0 0x400079d0u
N#define CYREG_PHUB_TDMEM58_ORIG_TD1 0x400079d4u
N#define CYDEV_PHUB_TDMEM59_BASE 0x400079d8u
N#define CYDEV_PHUB_TDMEM59_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM59_ORIG_TD0 0x400079d8u
N#define CYREG_PHUB_TDMEM59_ORIG_TD1 0x400079dcu
N#define CYDEV_PHUB_TDMEM60_BASE 0x400079e0u
N#define CYDEV_PHUB_TDMEM60_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM60_ORIG_TD0 0x400079e0u
N#define CYREG_PHUB_TDMEM60_ORIG_TD1 0x400079e4u
N#define CYDEV_PHUB_TDMEM61_BASE 0x400079e8u
N#define CYDEV_PHUB_TDMEM61_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM61_ORIG_TD0 0x400079e8u
N#define CYREG_PHUB_TDMEM61_ORIG_TD1 0x400079ecu
N#define CYDEV_PHUB_TDMEM62_BASE 0x400079f0u
N#define CYDEV_PHUB_TDMEM62_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM62_ORIG_TD0 0x400079f0u
N#define CYREG_PHUB_TDMEM62_ORIG_TD1 0x400079f4u
N#define CYDEV_PHUB_TDMEM63_BASE 0x400079f8u
N#define CYDEV_PHUB_TDMEM63_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM63_ORIG_TD0 0x400079f8u
N#define CYREG_PHUB_TDMEM63_ORIG_TD1 0x400079fcu
N#define CYDEV_PHUB_TDMEM64_BASE 0x40007a00u
N#define CYDEV_PHUB_TDMEM64_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM64_ORIG_TD0 0x40007a00u
N#define CYREG_PHUB_TDMEM64_ORIG_TD1 0x40007a04u
N#define CYDEV_PHUB_TDMEM65_BASE 0x40007a08u
N#define CYDEV_PHUB_TDMEM65_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM65_ORIG_TD0 0x40007a08u
N#define CYREG_PHUB_TDMEM65_ORIG_TD1 0x40007a0cu
N#define CYDEV_PHUB_TDMEM66_BASE 0x40007a10u
N#define CYDEV_PHUB_TDMEM66_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM66_ORIG_TD0 0x40007a10u
N#define CYREG_PHUB_TDMEM66_ORIG_TD1 0x40007a14u
N#define CYDEV_PHUB_TDMEM67_BASE 0x40007a18u
N#define CYDEV_PHUB_TDMEM67_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM67_ORIG_TD0 0x40007a18u
N#define CYREG_PHUB_TDMEM67_ORIG_TD1 0x40007a1cu
N#define CYDEV_PHUB_TDMEM68_BASE 0x40007a20u
N#define CYDEV_PHUB_TDMEM68_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM68_ORIG_TD0 0x40007a20u
N#define CYREG_PHUB_TDMEM68_ORIG_TD1 0x40007a24u
N#define CYDEV_PHUB_TDMEM69_BASE 0x40007a28u
N#define CYDEV_PHUB_TDMEM69_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM69_ORIG_TD0 0x40007a28u
N#define CYREG_PHUB_TDMEM69_ORIG_TD1 0x40007a2cu
N#define CYDEV_PHUB_TDMEM70_BASE 0x40007a30u
N#define CYDEV_PHUB_TDMEM70_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM70_ORIG_TD0 0x40007a30u
N#define CYREG_PHUB_TDMEM70_ORIG_TD1 0x40007a34u
N#define CYDEV_PHUB_TDMEM71_BASE 0x40007a38u
N#define CYDEV_PHUB_TDMEM71_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM71_ORIG_TD0 0x40007a38u
N#define CYREG_PHUB_TDMEM71_ORIG_TD1 0x40007a3cu
N#define CYDEV_PHUB_TDMEM72_BASE 0x40007a40u
N#define CYDEV_PHUB_TDMEM72_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM72_ORIG_TD0 0x40007a40u
N#define CYREG_PHUB_TDMEM72_ORIG_TD1 0x40007a44u
N#define CYDEV_PHUB_TDMEM73_BASE 0x40007a48u
N#define CYDEV_PHUB_TDMEM73_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM73_ORIG_TD0 0x40007a48u
N#define CYREG_PHUB_TDMEM73_ORIG_TD1 0x40007a4cu
N#define CYDEV_PHUB_TDMEM74_BASE 0x40007a50u
N#define CYDEV_PHUB_TDMEM74_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM74_ORIG_TD0 0x40007a50u
N#define CYREG_PHUB_TDMEM74_ORIG_TD1 0x40007a54u
N#define CYDEV_PHUB_TDMEM75_BASE 0x40007a58u
N#define CYDEV_PHUB_TDMEM75_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM75_ORIG_TD0 0x40007a58u
N#define CYREG_PHUB_TDMEM75_ORIG_TD1 0x40007a5cu
N#define CYDEV_PHUB_TDMEM76_BASE 0x40007a60u
N#define CYDEV_PHUB_TDMEM76_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM76_ORIG_TD0 0x40007a60u
N#define CYREG_PHUB_TDMEM76_ORIG_TD1 0x40007a64u
N#define CYDEV_PHUB_TDMEM77_BASE 0x40007a68u
N#define CYDEV_PHUB_TDMEM77_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM77_ORIG_TD0 0x40007a68u
N#define CYREG_PHUB_TDMEM77_ORIG_TD1 0x40007a6cu
N#define CYDEV_PHUB_TDMEM78_BASE 0x40007a70u
N#define CYDEV_PHUB_TDMEM78_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM78_ORIG_TD0 0x40007a70u
N#define CYREG_PHUB_TDMEM78_ORIG_TD1 0x40007a74u
N#define CYDEV_PHUB_TDMEM79_BASE 0x40007a78u
N#define CYDEV_PHUB_TDMEM79_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM79_ORIG_TD0 0x40007a78u
N#define CYREG_PHUB_TDMEM79_ORIG_TD1 0x40007a7cu
N#define CYDEV_PHUB_TDMEM80_BASE 0x40007a80u
N#define CYDEV_PHUB_TDMEM80_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM80_ORIG_TD0 0x40007a80u
N#define CYREG_PHUB_TDMEM80_ORIG_TD1 0x40007a84u
N#define CYDEV_PHUB_TDMEM81_BASE 0x40007a88u
N#define CYDEV_PHUB_TDMEM81_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM81_ORIG_TD0 0x40007a88u
N#define CYREG_PHUB_TDMEM81_ORIG_TD1 0x40007a8cu
N#define CYDEV_PHUB_TDMEM82_BASE 0x40007a90u
N#define CYDEV_PHUB_TDMEM82_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM82_ORIG_TD0 0x40007a90u
N#define CYREG_PHUB_TDMEM82_ORIG_TD1 0x40007a94u
N#define CYDEV_PHUB_TDMEM83_BASE 0x40007a98u
N#define CYDEV_PHUB_TDMEM83_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM83_ORIG_TD0 0x40007a98u
N#define CYREG_PHUB_TDMEM83_ORIG_TD1 0x40007a9cu
N#define CYDEV_PHUB_TDMEM84_BASE 0x40007aa0u
N#define CYDEV_PHUB_TDMEM84_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM84_ORIG_TD0 0x40007aa0u
N#define CYREG_PHUB_TDMEM84_ORIG_TD1 0x40007aa4u
N#define CYDEV_PHUB_TDMEM85_BASE 0x40007aa8u
N#define CYDEV_PHUB_TDMEM85_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM85_ORIG_TD0 0x40007aa8u
N#define CYREG_PHUB_TDMEM85_ORIG_TD1 0x40007aacu
N#define CYDEV_PHUB_TDMEM86_BASE 0x40007ab0u
N#define CYDEV_PHUB_TDMEM86_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM86_ORIG_TD0 0x40007ab0u
N#define CYREG_PHUB_TDMEM86_ORIG_TD1 0x40007ab4u
N#define CYDEV_PHUB_TDMEM87_BASE 0x40007ab8u
N#define CYDEV_PHUB_TDMEM87_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM87_ORIG_TD0 0x40007ab8u
N#define CYREG_PHUB_TDMEM87_ORIG_TD1 0x40007abcu
N#define CYDEV_PHUB_TDMEM88_BASE 0x40007ac0u
N#define CYDEV_PHUB_TDMEM88_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM88_ORIG_TD0 0x40007ac0u
N#define CYREG_PHUB_TDMEM88_ORIG_TD1 0x40007ac4u
N#define CYDEV_PHUB_TDMEM89_BASE 0x40007ac8u
N#define CYDEV_PHUB_TDMEM89_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM89_ORIG_TD0 0x40007ac8u
N#define CYREG_PHUB_TDMEM89_ORIG_TD1 0x40007accu
N#define CYDEV_PHUB_TDMEM90_BASE 0x40007ad0u
N#define CYDEV_PHUB_TDMEM90_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM90_ORIG_TD0 0x40007ad0u
N#define CYREG_PHUB_TDMEM90_ORIG_TD1 0x40007ad4u
N#define CYDEV_PHUB_TDMEM91_BASE 0x40007ad8u
N#define CYDEV_PHUB_TDMEM91_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM91_ORIG_TD0 0x40007ad8u
N#define CYREG_PHUB_TDMEM91_ORIG_TD1 0x40007adcu
N#define CYDEV_PHUB_TDMEM92_BASE 0x40007ae0u
N#define CYDEV_PHUB_TDMEM92_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM92_ORIG_TD0 0x40007ae0u
N#define CYREG_PHUB_TDMEM92_ORIG_TD1 0x40007ae4u
N#define CYDEV_PHUB_TDMEM93_BASE 0x40007ae8u
N#define CYDEV_PHUB_TDMEM93_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM93_ORIG_TD0 0x40007ae8u
N#define CYREG_PHUB_TDMEM93_ORIG_TD1 0x40007aecu
N#define CYDEV_PHUB_TDMEM94_BASE 0x40007af0u
N#define CYDEV_PHUB_TDMEM94_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM94_ORIG_TD0 0x40007af0u
N#define CYREG_PHUB_TDMEM94_ORIG_TD1 0x40007af4u
N#define CYDEV_PHUB_TDMEM95_BASE 0x40007af8u
N#define CYDEV_PHUB_TDMEM95_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM95_ORIG_TD0 0x40007af8u
N#define CYREG_PHUB_TDMEM95_ORIG_TD1 0x40007afcu
N#define CYDEV_PHUB_TDMEM96_BASE 0x40007b00u
N#define CYDEV_PHUB_TDMEM96_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM96_ORIG_TD0 0x40007b00u
N#define CYREG_PHUB_TDMEM96_ORIG_TD1 0x40007b04u
N#define CYDEV_PHUB_TDMEM97_BASE 0x40007b08u
N#define CYDEV_PHUB_TDMEM97_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM97_ORIG_TD0 0x40007b08u
N#define CYREG_PHUB_TDMEM97_ORIG_TD1 0x40007b0cu
N#define CYDEV_PHUB_TDMEM98_BASE 0x40007b10u
N#define CYDEV_PHUB_TDMEM98_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM98_ORIG_TD0 0x40007b10u
N#define CYREG_PHUB_TDMEM98_ORIG_TD1 0x40007b14u
N#define CYDEV_PHUB_TDMEM99_BASE 0x40007b18u
N#define CYDEV_PHUB_TDMEM99_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM99_ORIG_TD0 0x40007b18u
N#define CYREG_PHUB_TDMEM99_ORIG_TD1 0x40007b1cu
N#define CYDEV_PHUB_TDMEM100_BASE 0x40007b20u
N#define CYDEV_PHUB_TDMEM100_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM100_ORIG_TD0 0x40007b20u
N#define CYREG_PHUB_TDMEM100_ORIG_TD1 0x40007b24u
N#define CYDEV_PHUB_TDMEM101_BASE 0x40007b28u
N#define CYDEV_PHUB_TDMEM101_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM101_ORIG_TD0 0x40007b28u
N#define CYREG_PHUB_TDMEM101_ORIG_TD1 0x40007b2cu
N#define CYDEV_PHUB_TDMEM102_BASE 0x40007b30u
N#define CYDEV_PHUB_TDMEM102_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM102_ORIG_TD0 0x40007b30u
N#define CYREG_PHUB_TDMEM102_ORIG_TD1 0x40007b34u
N#define CYDEV_PHUB_TDMEM103_BASE 0x40007b38u
N#define CYDEV_PHUB_TDMEM103_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM103_ORIG_TD0 0x40007b38u
N#define CYREG_PHUB_TDMEM103_ORIG_TD1 0x40007b3cu
N#define CYDEV_PHUB_TDMEM104_BASE 0x40007b40u
N#define CYDEV_PHUB_TDMEM104_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM104_ORIG_TD0 0x40007b40u
N#define CYREG_PHUB_TDMEM104_ORIG_TD1 0x40007b44u
N#define CYDEV_PHUB_TDMEM105_BASE 0x40007b48u
N#define CYDEV_PHUB_TDMEM105_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM105_ORIG_TD0 0x40007b48u
N#define CYREG_PHUB_TDMEM105_ORIG_TD1 0x40007b4cu
N#define CYDEV_PHUB_TDMEM106_BASE 0x40007b50u
N#define CYDEV_PHUB_TDMEM106_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM106_ORIG_TD0 0x40007b50u
N#define CYREG_PHUB_TDMEM106_ORIG_TD1 0x40007b54u
N#define CYDEV_PHUB_TDMEM107_BASE 0x40007b58u
N#define CYDEV_PHUB_TDMEM107_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM107_ORIG_TD0 0x40007b58u
N#define CYREG_PHUB_TDMEM107_ORIG_TD1 0x40007b5cu
N#define CYDEV_PHUB_TDMEM108_BASE 0x40007b60u
N#define CYDEV_PHUB_TDMEM108_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM108_ORIG_TD0 0x40007b60u
N#define CYREG_PHUB_TDMEM108_ORIG_TD1 0x40007b64u
N#define CYDEV_PHUB_TDMEM109_BASE 0x40007b68u
N#define CYDEV_PHUB_TDMEM109_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM109_ORIG_TD0 0x40007b68u
N#define CYREG_PHUB_TDMEM109_ORIG_TD1 0x40007b6cu
N#define CYDEV_PHUB_TDMEM110_BASE 0x40007b70u
N#define CYDEV_PHUB_TDMEM110_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM110_ORIG_TD0 0x40007b70u
N#define CYREG_PHUB_TDMEM110_ORIG_TD1 0x40007b74u
N#define CYDEV_PHUB_TDMEM111_BASE 0x40007b78u
N#define CYDEV_PHUB_TDMEM111_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM111_ORIG_TD0 0x40007b78u
N#define CYREG_PHUB_TDMEM111_ORIG_TD1 0x40007b7cu
N#define CYDEV_PHUB_TDMEM112_BASE 0x40007b80u
N#define CYDEV_PHUB_TDMEM112_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM112_ORIG_TD0 0x40007b80u
N#define CYREG_PHUB_TDMEM112_ORIG_TD1 0x40007b84u
N#define CYDEV_PHUB_TDMEM113_BASE 0x40007b88u
N#define CYDEV_PHUB_TDMEM113_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM113_ORIG_TD0 0x40007b88u
N#define CYREG_PHUB_TDMEM113_ORIG_TD1 0x40007b8cu
N#define CYDEV_PHUB_TDMEM114_BASE 0x40007b90u
N#define CYDEV_PHUB_TDMEM114_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM114_ORIG_TD0 0x40007b90u
N#define CYREG_PHUB_TDMEM114_ORIG_TD1 0x40007b94u
N#define CYDEV_PHUB_TDMEM115_BASE 0x40007b98u
N#define CYDEV_PHUB_TDMEM115_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM115_ORIG_TD0 0x40007b98u
N#define CYREG_PHUB_TDMEM115_ORIG_TD1 0x40007b9cu
N#define CYDEV_PHUB_TDMEM116_BASE 0x40007ba0u
N#define CYDEV_PHUB_TDMEM116_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM116_ORIG_TD0 0x40007ba0u
N#define CYREG_PHUB_TDMEM116_ORIG_TD1 0x40007ba4u
N#define CYDEV_PHUB_TDMEM117_BASE 0x40007ba8u
N#define CYDEV_PHUB_TDMEM117_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM117_ORIG_TD0 0x40007ba8u
N#define CYREG_PHUB_TDMEM117_ORIG_TD1 0x40007bacu
N#define CYDEV_PHUB_TDMEM118_BASE 0x40007bb0u
N#define CYDEV_PHUB_TDMEM118_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM118_ORIG_TD0 0x40007bb0u
N#define CYREG_PHUB_TDMEM118_ORIG_TD1 0x40007bb4u
N#define CYDEV_PHUB_TDMEM119_BASE 0x40007bb8u
N#define CYDEV_PHUB_TDMEM119_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM119_ORIG_TD0 0x40007bb8u
N#define CYREG_PHUB_TDMEM119_ORIG_TD1 0x40007bbcu
N#define CYDEV_PHUB_TDMEM120_BASE 0x40007bc0u
N#define CYDEV_PHUB_TDMEM120_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM120_ORIG_TD0 0x40007bc0u
N#define CYREG_PHUB_TDMEM120_ORIG_TD1 0x40007bc4u
N#define CYDEV_PHUB_TDMEM121_BASE 0x40007bc8u
N#define CYDEV_PHUB_TDMEM121_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM121_ORIG_TD0 0x40007bc8u
N#define CYREG_PHUB_TDMEM121_ORIG_TD1 0x40007bccu
N#define CYDEV_PHUB_TDMEM122_BASE 0x40007bd0u
N#define CYDEV_PHUB_TDMEM122_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM122_ORIG_TD0 0x40007bd0u
N#define CYREG_PHUB_TDMEM122_ORIG_TD1 0x40007bd4u
N#define CYDEV_PHUB_TDMEM123_BASE 0x40007bd8u
N#define CYDEV_PHUB_TDMEM123_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM123_ORIG_TD0 0x40007bd8u
N#define CYREG_PHUB_TDMEM123_ORIG_TD1 0x40007bdcu
N#define CYDEV_PHUB_TDMEM124_BASE 0x40007be0u
N#define CYDEV_PHUB_TDMEM124_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM124_ORIG_TD0 0x40007be0u
N#define CYREG_PHUB_TDMEM124_ORIG_TD1 0x40007be4u
N#define CYDEV_PHUB_TDMEM125_BASE 0x40007be8u
N#define CYDEV_PHUB_TDMEM125_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM125_ORIG_TD0 0x40007be8u
N#define CYREG_PHUB_TDMEM125_ORIG_TD1 0x40007becu
N#define CYDEV_PHUB_TDMEM126_BASE 0x40007bf0u
N#define CYDEV_PHUB_TDMEM126_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM126_ORIG_TD0 0x40007bf0u
N#define CYREG_PHUB_TDMEM126_ORIG_TD1 0x40007bf4u
N#define CYDEV_PHUB_TDMEM127_BASE 0x40007bf8u
N#define CYDEV_PHUB_TDMEM127_SIZE 0x00000008u
N#define CYREG_PHUB_TDMEM127_ORIG_TD0 0x40007bf8u
N#define CYREG_PHUB_TDMEM127_ORIG_TD1 0x40007bfcu
N#define CYDEV_EE_BASE 0x40008000u
N#define CYDEV_EE_SIZE 0x00000800u
N#define CYREG_EE_DATA_MBASE 0x40008000u
N#define CYREG_EE_DATA_MSIZE 0x00000800u
N#define CYDEV_CAN0_BASE 0x4000a000u
N#define CYDEV_CAN0_SIZE 0x000002a0u
N#define CYDEV_CAN0_CSR_BASE 0x4000a000u
N#define CYDEV_CAN0_CSR_SIZE 0x00000018u
N#define CYREG_CAN0_CSR_INT_SR 0x4000a000u
N#define CYREG_CAN0_CSR_INT_EN 0x4000a004u
N#define CYREG_CAN0_CSR_BUF_SR 0x4000a008u
N#define CYREG_CAN0_CSR_ERR_SR 0x4000a00cu
N#define CYREG_CAN0_CSR_CMD 0x4000a010u
N#define CYREG_CAN0_CSR_CFG 0x4000a014u
N#define CYDEV_CAN0_TX0_BASE 0x4000a020u
N#define CYDEV_CAN0_TX0_SIZE 0x00000010u
N#define CYREG_CAN0_TX0_CMD 0x4000a020u
N#define CYREG_CAN0_TX0_ID 0x4000a024u
N#define CYREG_CAN0_TX0_DH 0x4000a028u
N#define CYREG_CAN0_TX0_DL 0x4000a02cu
N#define CYDEV_CAN0_TX1_BASE 0x4000a030u
N#define CYDEV_CAN0_TX1_SIZE 0x00000010u
N#define CYREG_CAN0_TX1_CMD 0x4000a030u
N#define CYREG_CAN0_TX1_ID 0x4000a034u
N#define CYREG_CAN0_TX1_DH 0x4000a038u
N#define CYREG_CAN0_TX1_DL 0x4000a03cu
N#define CYDEV_CAN0_TX2_BASE 0x4000a040u
N#define CYDEV_CAN0_TX2_SIZE 0x00000010u
N#define CYREG_CAN0_TX2_CMD 0x4000a040u
N#define CYREG_CAN0_TX2_ID 0x4000a044u
N#define CYREG_CAN0_TX2_DH 0x4000a048u
N#define CYREG_CAN0_TX2_DL 0x4000a04cu
N#define CYDEV_CAN0_TX3_BASE 0x4000a050u
N#define CYDEV_CAN0_TX3_SIZE 0x00000010u
N#define CYREG_CAN0_TX3_CMD 0x4000a050u
N#define CYREG_CAN0_TX3_ID 0x4000a054u
N#define CYREG_CAN0_TX3_DH 0x4000a058u
N#define CYREG_CAN0_TX3_DL 0x4000a05cu
N#define CYDEV_CAN0_TX4_BASE 0x4000a060u
N#define CYDEV_CAN0_TX4_SIZE 0x00000010u
N#define CYREG_CAN0_TX4_CMD 0x4000a060u
N#define CYREG_CAN0_TX4_ID 0x4000a064u
N#define CYREG_CAN0_TX4_DH 0x4000a068u
N#define CYREG_CAN0_TX4_DL 0x4000a06cu
N#define CYDEV_CAN0_TX5_BASE 0x4000a070u
N#define CYDEV_CAN0_TX5_SIZE 0x00000010u
N#define CYREG_CAN0_TX5_CMD 0x4000a070u
N#define CYREG_CAN0_TX5_ID 0x4000a074u
N#define CYREG_CAN0_TX5_DH 0x4000a078u
N#define CYREG_CAN0_TX5_DL 0x4000a07cu
N#define CYDEV_CAN0_TX6_BASE 0x4000a080u
N#define CYDEV_CAN0_TX6_SIZE 0x00000010u
N#define CYREG_CAN0_TX6_CMD 0x4000a080u
N#define CYREG_CAN0_TX6_ID 0x4000a084u
N#define CYREG_CAN0_TX6_DH 0x4000a088u
N#define CYREG_CAN0_TX6_DL 0x4000a08cu
N#define CYDEV_CAN0_TX7_BASE 0x4000a090u
N#define CYDEV_CAN0_TX7_SIZE 0x00000010u
N#define CYREG_CAN0_TX7_CMD 0x4000a090u
N#define CYREG_CAN0_TX7_ID 0x4000a094u
N#define CYREG_CAN0_TX7_DH 0x4000a098u
N#define CYREG_CAN0_TX7_DL 0x4000a09cu
N#define CYDEV_CAN0_RX0_BASE 0x4000a0a0u
N#define CYDEV_CAN0_RX0_SIZE 0x00000020u
N#define CYREG_CAN0_RX0_CMD 0x4000a0a0u
N#define CYREG_CAN0_RX0_ID 0x4000a0a4u
N#define CYREG_CAN0_RX0_DH 0x4000a0a8u
N#define CYREG_CAN0_RX0_DL 0x4000a0acu
N#define CYREG_CAN0_RX0_AMR 0x4000a0b0u
N#define CYREG_CAN0_RX0_ACR 0x4000a0b4u
N#define CYREG_CAN0_RX0_AMRD 0x4000a0b8u
N#define CYREG_CAN0_RX0_ACRD 0x4000a0bcu
N#define CYDEV_CAN0_RX1_BASE 0x4000a0c0u
N#define CYDEV_CAN0_RX1_SIZE 0x00000020u
N#define CYREG_CAN0_RX1_CMD 0x4000a0c0u
N#define CYREG_CAN0_RX1_ID 0x4000a0c4u
N#define CYREG_CAN0_RX1_DH 0x4000a0c8u
N#define CYREG_CAN0_RX1_DL 0x4000a0ccu
N#define CYREG_CAN0_RX1_AMR 0x4000a0d0u
N#define CYREG_CAN0_RX1_ACR 0x4000a0d4u
N#define CYREG_CAN0_RX1_AMRD 0x4000a0d8u
N#define CYREG_CAN0_RX1_ACRD 0x4000a0dcu
N#define CYDEV_CAN0_RX2_BASE 0x4000a0e0u
N#define CYDEV_CAN0_RX2_SIZE 0x00000020u
N#define CYREG_CAN0_RX2_CMD 0x4000a0e0u
N#define CYREG_CAN0_RX2_ID 0x4000a0e4u
N#define CYREG_CAN0_RX2_DH 0x4000a0e8u
N#define CYREG_CAN0_RX2_DL 0x4000a0ecu
N#define CYREG_CAN0_RX2_AMR 0x4000a0f0u
N#define CYREG_CAN0_RX2_ACR 0x4000a0f4u
N#define CYREG_CAN0_RX2_AMRD 0x4000a0f8u
N#define CYREG_CAN0_RX2_ACRD 0x4000a0fcu
N#define CYDEV_CAN0_RX3_BASE 0x4000a100u
N#define CYDEV_CAN0_RX3_SIZE 0x00000020u
N#define CYREG_CAN0_RX3_CMD 0x4000a100u
N#define CYREG_CAN0_RX3_ID 0x4000a104u
N#define CYREG_CAN0_RX3_DH 0x4000a108u
N#define CYREG_CAN0_RX3_DL 0x4000a10cu
N#define CYREG_CAN0_RX3_AMR 0x4000a110u
N#define CYREG_CAN0_RX3_ACR 0x4000a114u
N#define CYREG_CAN0_RX3_AMRD 0x4000a118u
N#define CYREG_CAN0_RX3_ACRD 0x4000a11cu
N#define CYDEV_CAN0_RX4_BASE 0x4000a120u
N#define CYDEV_CAN0_RX4_SIZE 0x00000020u
N#define CYREG_CAN0_RX4_CMD 0x4000a120u
N#define CYREG_CAN0_RX4_ID 0x4000a124u
N#define CYREG_CAN0_RX4_DH 0x4000a128u
N#define CYREG_CAN0_RX4_DL 0x4000a12cu
N#define CYREG_CAN0_RX4_AMR 0x4000a130u
N#define CYREG_CAN0_RX4_ACR 0x4000a134u
N#define CYREG_CAN0_RX4_AMRD 0x4000a138u
N#define CYREG_CAN0_RX4_ACRD 0x4000a13cu
N#define CYDEV_CAN0_RX5_BASE 0x4000a140u
N#define CYDEV_CAN0_RX5_SIZE 0x00000020u
N#define CYREG_CAN0_RX5_CMD 0x4000a140u
N#define CYREG_CAN0_RX5_ID 0x4000a144u
N#define CYREG_CAN0_RX5_DH 0x4000a148u
N#define CYREG_CAN0_RX5_DL 0x4000a14cu
N#define CYREG_CAN0_RX5_AMR 0x4000a150u
N#define CYREG_CAN0_RX5_ACR 0x4000a154u
N#define CYREG_CAN0_RX5_AMRD 0x4000a158u
N#define CYREG_CAN0_RX5_ACRD 0x4000a15cu
N#define CYDEV_CAN0_RX6_BASE 0x4000a160u
N#define CYDEV_CAN0_RX6_SIZE 0x00000020u
N#define CYREG_CAN0_RX6_CMD 0x4000a160u
N#define CYREG_CAN0_RX6_ID 0x4000a164u
N#define CYREG_CAN0_RX6_DH 0x4000a168u
N#define CYREG_CAN0_RX6_DL 0x4000a16cu
N#define CYREG_CAN0_RX6_AMR 0x4000a170u
N#define CYREG_CAN0_RX6_ACR 0x4000a174u
N#define CYREG_CAN0_RX6_AMRD 0x4000a178u
N#define CYREG_CAN0_RX6_ACRD 0x4000a17cu
N#define CYDEV_CAN0_RX7_BASE 0x4000a180u
N#define CYDEV_CAN0_RX7_SIZE 0x00000020u
N#define CYREG_CAN0_RX7_CMD 0x4000a180u
N#define CYREG_CAN0_RX7_ID 0x4000a184u
N#define CYREG_CAN0_RX7_DH 0x4000a188u
N#define CYREG_CAN0_RX7_DL 0x4000a18cu
N#define CYREG_CAN0_RX7_AMR 0x4000a190u
N#define CYREG_CAN0_RX7_ACR 0x4000a194u
N#define CYREG_CAN0_RX7_AMRD 0x4000a198u
N#define CYREG_CAN0_RX7_ACRD 0x4000a19cu
N#define CYDEV_CAN0_RX8_BASE 0x4000a1a0u
N#define CYDEV_CAN0_RX8_SIZE 0x00000020u
N#define CYREG_CAN0_RX8_CMD 0x4000a1a0u
N#define CYREG_CAN0_RX8_ID 0x4000a1a4u
N#define CYREG_CAN0_RX8_DH 0x4000a1a8u
N#define CYREG_CAN0_RX8_DL 0x4000a1acu
N#define CYREG_CAN0_RX8_AMR 0x4000a1b0u
N#define CYREG_CAN0_RX8_ACR 0x4000a1b4u
N#define CYREG_CAN0_RX8_AMRD 0x4000a1b8u
N#define CYREG_CAN0_RX8_ACRD 0x4000a1bcu
N#define CYDEV_CAN0_RX9_BASE 0x4000a1c0u
N#define CYDEV_CAN0_RX9_SIZE 0x00000020u
N#define CYREG_CAN0_RX9_CMD 0x4000a1c0u
N#define CYREG_CAN0_RX9_ID 0x4000a1c4u
N#define CYREG_CAN0_RX9_DH 0x4000a1c8u
N#define CYREG_CAN0_RX9_DL 0x4000a1ccu
N#define CYREG_CAN0_RX9_AMR 0x4000a1d0u
N#define CYREG_CAN0_RX9_ACR 0x4000a1d4u
N#define CYREG_CAN0_RX9_AMRD 0x4000a1d8u
N#define CYREG_CAN0_RX9_ACRD 0x4000a1dcu
N#define CYDEV_CAN0_RX10_BASE 0x4000a1e0u
N#define CYDEV_CAN0_RX10_SIZE 0x00000020u
N#define CYREG_CAN0_RX10_CMD 0x4000a1e0u
N#define CYREG_CAN0_RX10_ID 0x4000a1e4u
N#define CYREG_CAN0_RX10_DH 0x4000a1e8u
N#define CYREG_CAN0_RX10_DL 0x4000a1ecu
N#define CYREG_CAN0_RX10_AMR 0x4000a1f0u
N#define CYREG_CAN0_RX10_ACR 0x4000a1f4u
N#define CYREG_CAN0_RX10_AMRD 0x4000a1f8u
N#define CYREG_CAN0_RX10_ACRD 0x4000a1fcu
N#define CYDEV_CAN0_RX11_BASE 0x4000a200u
N#define CYDEV_CAN0_RX11_SIZE 0x00000020u
N#define CYREG_CAN0_RX11_CMD 0x4000a200u
N#define CYREG_CAN0_RX11_ID 0x4000a204u
N#define CYREG_CAN0_RX11_DH 0x4000a208u
N#define CYREG_CAN0_RX11_DL 0x4000a20cu
N#define CYREG_CAN0_RX11_AMR 0x4000a210u
N#define CYREG_CAN0_RX11_ACR 0x4000a214u
N#define CYREG_CAN0_RX11_AMRD 0x4000a218u
N#define CYREG_CAN0_RX11_ACRD 0x4000a21cu
N#define CYDEV_CAN0_RX12_BASE 0x4000a220u
N#define CYDEV_CAN0_RX12_SIZE 0x00000020u
N#define CYREG_CAN0_RX12_CMD 0x4000a220u
N#define CYREG_CAN0_RX12_ID 0x4000a224u
N#define CYREG_CAN0_RX12_DH 0x4000a228u
N#define CYREG_CAN0_RX12_DL 0x4000a22cu
N#define CYREG_CAN0_RX12_AMR 0x4000a230u
N#define CYREG_CAN0_RX12_ACR 0x4000a234u
N#define CYREG_CAN0_RX12_AMRD 0x4000a238u
N#define CYREG_CAN0_RX12_ACRD 0x4000a23cu
N#define CYDEV_CAN0_RX13_BASE 0x4000a240u
N#define CYDEV_CAN0_RX13_SIZE 0x00000020u
N#define CYREG_CAN0_RX13_CMD 0x4000a240u
N#define CYREG_CAN0_RX13_ID 0x4000a244u
N#define CYREG_CAN0_RX13_DH 0x4000a248u
N#define CYREG_CAN0_RX13_DL 0x4000a24cu
N#define CYREG_CAN0_RX13_AMR 0x4000a250u
N#define CYREG_CAN0_RX13_ACR 0x4000a254u
N#define CYREG_CAN0_RX13_AMRD 0x4000a258u
N#define CYREG_CAN0_RX13_ACRD 0x4000a25cu
N#define CYDEV_CAN0_RX14_BASE 0x4000a260u
N#define CYDEV_CAN0_RX14_SIZE 0x00000020u
N#define CYREG_CAN0_RX14_CMD 0x4000a260u
N#define CYREG_CAN0_RX14_ID 0x4000a264u
N#define CYREG_CAN0_RX14_DH 0x4000a268u
N#define CYREG_CAN0_RX14_DL 0x4000a26cu
N#define CYREG_CAN0_RX14_AMR 0x4000a270u
N#define CYREG_CAN0_RX14_ACR 0x4000a274u
N#define CYREG_CAN0_RX14_AMRD 0x4000a278u
N#define CYREG_CAN0_RX14_ACRD 0x4000a27cu
N#define CYDEV_CAN0_RX15_BASE 0x4000a280u
N#define CYDEV_CAN0_RX15_SIZE 0x00000020u
N#define CYREG_CAN0_RX15_CMD 0x4000a280u
N#define CYREG_CAN0_RX15_ID 0x4000a284u
N#define CYREG_CAN0_RX15_DH 0x4000a288u
N#define CYREG_CAN0_RX15_DL 0x4000a28cu
N#define CYREG_CAN0_RX15_AMR 0x4000a290u
N#define CYREG_CAN0_RX15_ACR 0x4000a294u
N#define CYREG_CAN0_RX15_AMRD 0x4000a298u
N#define CYREG_CAN0_RX15_ACRD 0x4000a29cu
N#define CYDEV_DFB0_BASE 0x4000c000u
N#define CYDEV_DFB0_SIZE 0x000007b5u
N#define CYDEV_DFB0_DPA_SRAM_BASE 0x4000c000u
N#define CYDEV_DFB0_DPA_SRAM_SIZE 0x00000200u
N#define CYREG_DFB0_DPA_SRAM_DATA_MBASE 0x4000c000u
N#define CYREG_DFB0_DPA_SRAM_DATA_MSIZE 0x00000200u
N#define CYDEV_DFB0_DPB_SRAM_BASE 0x4000c200u
N#define CYDEV_DFB0_DPB_SRAM_SIZE 0x00000200u
N#define CYREG_DFB0_DPB_SRAM_DATA_MBASE 0x4000c200u
N#define CYREG_DFB0_DPB_SRAM_DATA_MSIZE 0x00000200u
N#define CYDEV_DFB0_CSA_SRAM_BASE 0x4000c400u
N#define CYDEV_DFB0_CSA_SRAM_SIZE 0x00000100u
N#define CYREG_DFB0_CSA_SRAM_DATA_MBASE 0x4000c400u
N#define CYREG_DFB0_CSA_SRAM_DATA_MSIZE 0x00000100u
N#define CYDEV_DFB0_CSB_SRAM_BASE 0x4000c500u
N#define CYDEV_DFB0_CSB_SRAM_SIZE 0x00000100u
N#define CYREG_DFB0_CSB_SRAM_DATA_MBASE 0x4000c500u
N#define CYREG_DFB0_CSB_SRAM_DATA_MSIZE 0x00000100u
N#define CYDEV_DFB0_FSM_SRAM_BASE 0x4000c600u
N#define CYDEV_DFB0_FSM_SRAM_SIZE 0x00000100u
N#define CYREG_DFB0_FSM_SRAM_DATA_MBASE 0x4000c600u
N#define CYREG_DFB0_FSM_SRAM_DATA_MSIZE 0x00000100u
N#define CYDEV_DFB0_ACU_SRAM_BASE 0x4000c700u
N#define CYDEV_DFB0_ACU_SRAM_SIZE 0x00000040u
N#define CYREG_DFB0_ACU_SRAM_DATA_MBASE 0x4000c700u
N#define CYREG_DFB0_ACU_SRAM_DATA_MSIZE 0x00000040u
N#define CYREG_DFB0_CR 0x4000c780u
N#define CYREG_DFB0_SR 0x4000c784u
N#define CYREG_DFB0_RAM_EN 0x4000c788u
N#define CYREG_DFB0_RAM_DIR 0x4000c78cu
N#define CYREG_DFB0_SEMA 0x4000c790u
N#define CYREG_DFB0_DSI_CTRL 0x4000c794u
N#define CYREG_DFB0_INT_CTRL 0x4000c798u
N#define CYREG_DFB0_DMA_CTRL 0x4000c79cu
N#define CYREG_DFB0_STAGEA 0x4000c7a0u
N#define CYREG_DFB0_STAGEAM 0x4000c7a1u
N#define CYREG_DFB0_STAGEAH 0x4000c7a2u
N#define CYREG_DFB0_STAGEB 0x4000c7a4u
N#define CYREG_DFB0_STAGEBM 0x4000c7a5u
N#define CYREG_DFB0_STAGEBH 0x4000c7a6u
N#define CYREG_DFB0_HOLDA 0x4000c7a8u
N#define CYREG_DFB0_HOLDAM 0x4000c7a9u
N#define CYREG_DFB0_HOLDAH 0x4000c7aau
N#define CYREG_DFB0_HOLDAS 0x4000c7abu
N#define CYREG_DFB0_HOLDB 0x4000c7acu
N#define CYREG_DFB0_HOLDBM 0x4000c7adu
N#define CYREG_DFB0_HOLDBH 0x4000c7aeu
N#define CYREG_DFB0_HOLDBS 0x4000c7afu
N#define CYREG_DFB0_COHER 0x4000c7b0u
N#define CYREG_DFB0_DALIGN 0x4000c7b4u
N#define CYDEV_UCFG_BASE 0x40010000u
N#define CYDEV_UCFG_SIZE 0x00005040u
N#define CYDEV_UCFG_B0_BASE 0x40010000u
N#define CYDEV_UCFG_B0_SIZE 0x00000fefu
N#define CYDEV_UCFG_B0_P0_BASE 0x40010000u
N#define CYDEV_UCFG_B0_P0_SIZE 0x000001efu
N#define CYDEV_UCFG_B0_P0_U0_BASE 0x40010000u
N#define CYDEV_UCFG_B0_P0_U0_SIZE 0x00000070u
N#define CYREG_B0_P0_U0_PLD_IT0 0x40010000u
N#define CYREG_B0_P0_U0_PLD_IT1 0x40010004u
N#define CYREG_B0_P0_U0_PLD_IT2 0x40010008u
N#define CYREG_B0_P0_U0_PLD_IT3 0x4001000cu
N#define CYREG_B0_P0_U0_PLD_IT4 0x40010010u
N#define CYREG_B0_P0_U0_PLD_IT5 0x40010014u
N#define CYREG_B0_P0_U0_PLD_IT6 0x40010018u
N#define CYREG_B0_P0_U0_PLD_IT7 0x4001001cu
N#define CYREG_B0_P0_U0_PLD_IT8 0x40010020u
N#define CYREG_B0_P0_U0_PLD_IT9 0x40010024u
N#define CYREG_B0_P0_U0_PLD_IT10 0x40010028u
N#define CYREG_B0_P0_U0_PLD_IT11 0x4001002cu
N#define CYREG_B0_P0_U0_PLD_ORT0 0x40010030u
N#define CYREG_B0_P0_U0_PLD_ORT1 0x40010032u
N#define CYREG_B0_P0_U0_PLD_ORT2 0x40010034u
N#define CYREG_B0_P0_U0_PLD_ORT3 0x40010036u
N#define CYREG_B0_P0_U0_MC_CFG_CEN_CONST 0x40010038u
N#define CYREG_B0_P0_U0_MC_CFG_XORFB 0x4001003au
N#define CYREG_B0_P0_U0_MC_CFG_SET_RESET 0x4001003cu
N#define CYREG_B0_P0_U0_MC_CFG_BYPASS 0x4001003eu
N#define CYREG_B0_P0_U0_CFG0 0x40010040u
N#define CYREG_B0_P0_U0_CFG1 0x40010041u
N#define CYREG_B0_P0_U0_CFG2 0x40010042u
N#define CYREG_B0_P0_U0_CFG3 0x40010043u
N#define CYREG_B0_P0_U0_CFG4 0x40010044u
N#define CYREG_B0_P0_U0_CFG5 0x40010045u
N#define CYREG_B0_P0_U0_CFG6 0x40010046u
N#define CYREG_B0_P0_U0_CFG7 0x40010047u
N#define CYREG_B0_P0_U0_CFG8 0x40010048u
N#define CYREG_B0_P0_U0_CFG9 0x40010049u
N#define CYREG_B0_P0_U0_CFG10 0x4001004au
N#define CYREG_B0_P0_U0_CFG11 0x4001004bu
N#define CYREG_B0_P0_U0_CFG12 0x4001004cu
N#define CYREG_B0_P0_U0_CFG13 0x4001004du
N#define CYREG_B0_P0_U0_CFG14 0x4001004eu
N#define CYREG_B0_P0_U0_CFG15 0x4001004fu
N#define CYREG_B0_P0_U0_CFG16 0x40010050u
N#define CYREG_B0_P0_U0_CFG17 0x40010051u
N#define CYREG_B0_P0_U0_CFG18 0x40010052u
N#define CYREG_B0_P0_U0_CFG19 0x40010053u
N#define CYREG_B0_P0_U0_CFG20 0x40010054u
N#define CYREG_B0_P0_U0_CFG21 0x40010055u
N#define CYREG_B0_P0_U0_CFG22 0x40010056u
N#define CYREG_B0_P0_U0_CFG23 0x40010057u
N#define CYREG_B0_P0_U0_CFG24 0x40010058u
N#define CYREG_B0_P0_U0_CFG25 0x40010059u
N#define CYREG_B0_P0_U0_CFG26 0x4001005au
N#define CYREG_B0_P0_U0_CFG27 0x4001005bu
N#define CYREG_B0_P0_U0_CFG28 0x4001005cu
N#define CYREG_B0_P0_U0_CFG29 0x4001005du
N#define CYREG_B0_P0_U0_CFG30 0x4001005eu
N#define CYREG_B0_P0_U0_CFG31 0x4001005fu
N#define CYREG_B0_P0_U0_DCFG0 0x40010060u
N#define CYREG_B0_P0_U0_DCFG1 0x40010062u
N#define CYREG_B0_P0_U0_DCFG2 0x40010064u
N#define CYREG_B0_P0_U0_DCFG3 0x40010066u
N#define CYREG_B0_P0_U0_DCFG4 0x40010068u
N#define CYREG_B0_P0_U0_DCFG5 0x4001006au
N#define CYREG_B0_P0_U0_DCFG6 0x4001006cu
N#define CYREG_B0_P0_U0_DCFG7 0x4001006eu
N#define CYDEV_UCFG_B0_P0_U1_BASE 0x40010080u
N#define CYDEV_UCFG_B0_P0_U1_SIZE 0x00000070u
N#define CYREG_B0_P0_U1_PLD_IT0 0x40010080u
N#define CYREG_B0_P0_U1_PLD_IT1 0x40010084u
N#define CYREG_B0_P0_U1_PLD_IT2 0x40010088u
N#define CYREG_B0_P0_U1_PLD_IT3 0x4001008cu
N#define CYREG_B0_P0_U1_PLD_IT4 0x40010090u
N#define CYREG_B0_P0_U1_PLD_IT5 0x40010094u
N#define CYREG_B0_P0_U1_PLD_IT6 0x40010098u
N#define CYREG_B0_P0_U1_PLD_IT7 0x4001009cu
N#define CYREG_B0_P0_U1_PLD_IT8 0x400100a0u
N#define CYREG_B0_P0_U1_PLD_IT9 0x400100a4u
N#define CYREG_B0_P0_U1_PLD_IT10 0x400100a8u
N#define CYREG_B0_P0_U1_PLD_IT11 0x400100acu
N#define CYREG_B0_P0_U1_PLD_ORT0 0x400100b0u
N#define CYREG_B0_P0_U1_PLD_ORT1 0x400100b2u
N#define CYREG_B0_P0_U1_PLD_ORT2 0x400100b4u
N#define CYREG_B0_P0_U1_PLD_ORT3 0x400100b6u
N#define CYREG_B0_P0_U1_MC_CFG_CEN_CONST 0x400100b8u
N#define CYREG_B0_P0_U1_MC_CFG_XORFB 0x400100bau
N#define CYREG_B0_P0_U1_MC_CFG_SET_RESET 0x400100bcu
N#define CYREG_B0_P0_U1_MC_CFG_BYPASS 0x400100beu
N#define CYREG_B0_P0_U1_CFG0 0x400100c0u
N#define CYREG_B0_P0_U1_CFG1 0x400100c1u
N#define CYREG_B0_P0_U1_CFG2 0x400100c2u
N#define CYREG_B0_P0_U1_CFG3 0x400100c3u
N#define CYREG_B0_P0_U1_CFG4 0x400100c4u
N#define CYREG_B0_P0_U1_CFG5 0x400100c5u
N#define CYREG_B0_P0_U1_CFG6 0x400100c6u
N#define CYREG_B0_P0_U1_CFG7 0x400100c7u
N#define CYREG_B0_P0_U1_CFG8 0x400100c8u
N#define CYREG_B0_P0_U1_CFG9 0x400100c9u
N#define CYREG_B0_P0_U1_CFG10 0x400100cau
N#define CYREG_B0_P0_U1_CFG11 0x400100cbu
N#define CYREG_B0_P0_U1_CFG12 0x400100ccu
N#define CYREG_B0_P0_U1_CFG13 0x400100cdu
N#define CYREG_B0_P0_U1_CFG14 0x400100ceu
N#define CYREG_B0_P0_U1_CFG15 0x400100cfu
N#define CYREG_B0_P0_U1_CFG16 0x400100d0u
N#define CYREG_B0_P0_U1_CFG17 0x400100d1u
N#define CYREG_B0_P0_U1_CFG18 0x400100d2u
N#define CYREG_B0_P0_U1_CFG19 0x400100d3u
N#define CYREG_B0_P0_U1_CFG20 0x400100d4u
N#define CYREG_B0_P0_U1_CFG21 0x400100d5u
N#define CYREG_B0_P0_U1_CFG22 0x400100d6u
N#define CYREG_B0_P0_U1_CFG23 0x400100d7u
N#define CYREG_B0_P0_U1_CFG24 0x400100d8u
N#define CYREG_B0_P0_U1_CFG25 0x400100d9u
N#define CYREG_B0_P0_U1_CFG26 0x400100dau
N#define CYREG_B0_P0_U1_CFG27 0x400100dbu
N#define CYREG_B0_P0_U1_CFG28 0x400100dcu
N#define CYREG_B0_P0_U1_CFG29 0x400100ddu
N#define CYREG_B0_P0_U1_CFG30 0x400100deu
N#define CYREG_B0_P0_U1_CFG31 0x400100dfu
N#define CYREG_B0_P0_U1_DCFG0 0x400100e0u
N#define CYREG_B0_P0_U1_DCFG1 0x400100e2u
N#define CYREG_B0_P0_U1_DCFG2 0x400100e4u
N#define CYREG_B0_P0_U1_DCFG3 0x400100e6u
N#define CYREG_B0_P0_U1_DCFG4 0x400100e8u
N#define CYREG_B0_P0_U1_DCFG5 0x400100eau
N#define CYREG_B0_P0_U1_DCFG6 0x400100ecu
N#define CYREG_B0_P0_U1_DCFG7 0x400100eeu
N#define CYDEV_UCFG_B0_P0_ROUTE_BASE 0x40010100u
N#define CYDEV_UCFG_B0_P0_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B0_P1_BASE 0x40010200u
N#define CYDEV_UCFG_B0_P1_SIZE 0x000001efu
N#define CYDEV_UCFG_B0_P1_U0_BASE 0x40010200u
N#define CYDEV_UCFG_B0_P1_U0_SIZE 0x00000070u
N#define CYREG_B0_P1_U0_PLD_IT0 0x40010200u
N#define CYREG_B0_P1_U0_PLD_IT1 0x40010204u
N#define CYREG_B0_P1_U0_PLD_IT2 0x40010208u
N#define CYREG_B0_P1_U0_PLD_IT3 0x4001020cu
N#define CYREG_B0_P1_U0_PLD_IT4 0x40010210u
N#define CYREG_B0_P1_U0_PLD_IT5 0x40010214u
N#define CYREG_B0_P1_U0_PLD_IT6 0x40010218u
N#define CYREG_B0_P1_U0_PLD_IT7 0x4001021cu
N#define CYREG_B0_P1_U0_PLD_IT8 0x40010220u
N#define CYREG_B0_P1_U0_PLD_IT9 0x40010224u
N#define CYREG_B0_P1_U0_PLD_IT10 0x40010228u
N#define CYREG_B0_P1_U0_PLD_IT11 0x4001022cu
N#define CYREG_B0_P1_U0_PLD_ORT0 0x40010230u
N#define CYREG_B0_P1_U0_PLD_ORT1 0x40010232u
N#define CYREG_B0_P1_U0_PLD_ORT2 0x40010234u
N#define CYREG_B0_P1_U0_PLD_ORT3 0x40010236u
N#define CYREG_B0_P1_U0_MC_CFG_CEN_CONST 0x40010238u
N#define CYREG_B0_P1_U0_MC_CFG_XORFB 0x4001023au
N#define CYREG_B0_P1_U0_MC_CFG_SET_RESET 0x4001023cu
N#define CYREG_B0_P1_U0_MC_CFG_BYPASS 0x4001023eu
N#define CYREG_B0_P1_U0_CFG0 0x40010240u
N#define CYREG_B0_P1_U0_CFG1 0x40010241u
N#define CYREG_B0_P1_U0_CFG2 0x40010242u
N#define CYREG_B0_P1_U0_CFG3 0x40010243u
N#define CYREG_B0_P1_U0_CFG4 0x40010244u
N#define CYREG_B0_P1_U0_CFG5 0x40010245u
N#define CYREG_B0_P1_U0_CFG6 0x40010246u
N#define CYREG_B0_P1_U0_CFG7 0x40010247u
N#define CYREG_B0_P1_U0_CFG8 0x40010248u
N#define CYREG_B0_P1_U0_CFG9 0x40010249u
N#define CYREG_B0_P1_U0_CFG10 0x4001024au
N#define CYREG_B0_P1_U0_CFG11 0x4001024bu
N#define CYREG_B0_P1_U0_CFG12 0x4001024cu
N#define CYREG_B0_P1_U0_CFG13 0x4001024du
N#define CYREG_B0_P1_U0_CFG14 0x4001024eu
N#define CYREG_B0_P1_U0_CFG15 0x4001024fu
N#define CYREG_B0_P1_U0_CFG16 0x40010250u
N#define CYREG_B0_P1_U0_CFG17 0x40010251u
N#define CYREG_B0_P1_U0_CFG18 0x40010252u
N#define CYREG_B0_P1_U0_CFG19 0x40010253u
N#define CYREG_B0_P1_U0_CFG20 0x40010254u
N#define CYREG_B0_P1_U0_CFG21 0x40010255u
N#define CYREG_B0_P1_U0_CFG22 0x40010256u
N#define CYREG_B0_P1_U0_CFG23 0x40010257u
N#define CYREG_B0_P1_U0_CFG24 0x40010258u
N#define CYREG_B0_P1_U0_CFG25 0x40010259u
N#define CYREG_B0_P1_U0_CFG26 0x4001025au
N#define CYREG_B0_P1_U0_CFG27 0x4001025bu
N#define CYREG_B0_P1_U0_CFG28 0x4001025cu
N#define CYREG_B0_P1_U0_CFG29 0x4001025du
N#define CYREG_B0_P1_U0_CFG30 0x4001025eu
N#define CYREG_B0_P1_U0_CFG31 0x4001025fu
N#define CYREG_B0_P1_U0_DCFG0 0x40010260u
N#define CYREG_B0_P1_U0_DCFG1 0x40010262u
N#define CYREG_B0_P1_U0_DCFG2 0x40010264u
N#define CYREG_B0_P1_U0_DCFG3 0x40010266u
N#define CYREG_B0_P1_U0_DCFG4 0x40010268u
N#define CYREG_B0_P1_U0_DCFG5 0x4001026au
N#define CYREG_B0_P1_U0_DCFG6 0x4001026cu
N#define CYREG_B0_P1_U0_DCFG7 0x4001026eu
N#define CYDEV_UCFG_B0_P1_U1_BASE 0x40010280u
N#define CYDEV_UCFG_B0_P1_U1_SIZE 0x00000070u
N#define CYREG_B0_P1_U1_PLD_IT0 0x40010280u
N#define CYREG_B0_P1_U1_PLD_IT1 0x40010284u
N#define CYREG_B0_P1_U1_PLD_IT2 0x40010288u
N#define CYREG_B0_P1_U1_PLD_IT3 0x4001028cu
N#define CYREG_B0_P1_U1_PLD_IT4 0x40010290u
N#define CYREG_B0_P1_U1_PLD_IT5 0x40010294u
N#define CYREG_B0_P1_U1_PLD_IT6 0x40010298u
N#define CYREG_B0_P1_U1_PLD_IT7 0x4001029cu
N#define CYREG_B0_P1_U1_PLD_IT8 0x400102a0u
N#define CYREG_B0_P1_U1_PLD_IT9 0x400102a4u
N#define CYREG_B0_P1_U1_PLD_IT10 0x400102a8u
N#define CYREG_B0_P1_U1_PLD_IT11 0x400102acu
N#define CYREG_B0_P1_U1_PLD_ORT0 0x400102b0u
N#define CYREG_B0_P1_U1_PLD_ORT1 0x400102b2u
N#define CYREG_B0_P1_U1_PLD_ORT2 0x400102b4u
N#define CYREG_B0_P1_U1_PLD_ORT3 0x400102b6u
N#define CYREG_B0_P1_U1_MC_CFG_CEN_CONST 0x400102b8u
N#define CYREG_B0_P1_U1_MC_CFG_XORFB 0x400102bau
N#define CYREG_B0_P1_U1_MC_CFG_SET_RESET 0x400102bcu
N#define CYREG_B0_P1_U1_MC_CFG_BYPASS 0x400102beu
N#define CYREG_B0_P1_U1_CFG0 0x400102c0u
N#define CYREG_B0_P1_U1_CFG1 0x400102c1u
N#define CYREG_B0_P1_U1_CFG2 0x400102c2u
N#define CYREG_B0_P1_U1_CFG3 0x400102c3u
N#define CYREG_B0_P1_U1_CFG4 0x400102c4u
N#define CYREG_B0_P1_U1_CFG5 0x400102c5u
N#define CYREG_B0_P1_U1_CFG6 0x400102c6u
N#define CYREG_B0_P1_U1_CFG7 0x400102c7u
N#define CYREG_B0_P1_U1_CFG8 0x400102c8u
N#define CYREG_B0_P1_U1_CFG9 0x400102c9u
N#define CYREG_B0_P1_U1_CFG10 0x400102cau
N#define CYREG_B0_P1_U1_CFG11 0x400102cbu
N#define CYREG_B0_P1_U1_CFG12 0x400102ccu
N#define CYREG_B0_P1_U1_CFG13 0x400102cdu
N#define CYREG_B0_P1_U1_CFG14 0x400102ceu
N#define CYREG_B0_P1_U1_CFG15 0x400102cfu
N#define CYREG_B0_P1_U1_CFG16 0x400102d0u
N#define CYREG_B0_P1_U1_CFG17 0x400102d1u
N#define CYREG_B0_P1_U1_CFG18 0x400102d2u
N#define CYREG_B0_P1_U1_CFG19 0x400102d3u
N#define CYREG_B0_P1_U1_CFG20 0x400102d4u
N#define CYREG_B0_P1_U1_CFG21 0x400102d5u
N#define CYREG_B0_P1_U1_CFG22 0x400102d6u
N#define CYREG_B0_P1_U1_CFG23 0x400102d7u
N#define CYREG_B0_P1_U1_CFG24 0x400102d8u
N#define CYREG_B0_P1_U1_CFG25 0x400102d9u
N#define CYREG_B0_P1_U1_CFG26 0x400102dau
N#define CYREG_B0_P1_U1_CFG27 0x400102dbu
N#define CYREG_B0_P1_U1_CFG28 0x400102dcu
N#define CYREG_B0_P1_U1_CFG29 0x400102ddu
N#define CYREG_B0_P1_U1_CFG30 0x400102deu
N#define CYREG_B0_P1_U1_CFG31 0x400102dfu
N#define CYREG_B0_P1_U1_DCFG0 0x400102e0u
N#define CYREG_B0_P1_U1_DCFG1 0x400102e2u
N#define CYREG_B0_P1_U1_DCFG2 0x400102e4u
N#define CYREG_B0_P1_U1_DCFG3 0x400102e6u
N#define CYREG_B0_P1_U1_DCFG4 0x400102e8u
N#define CYREG_B0_P1_U1_DCFG5 0x400102eau
N#define CYREG_B0_P1_U1_DCFG6 0x400102ecu
N#define CYREG_B0_P1_U1_DCFG7 0x400102eeu
N#define CYDEV_UCFG_B0_P1_ROUTE_BASE 0x40010300u
N#define CYDEV_UCFG_B0_P1_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B0_P2_BASE 0x40010400u
N#define CYDEV_UCFG_B0_P2_SIZE 0x000001efu
N#define CYDEV_UCFG_B0_P2_U0_BASE 0x40010400u
N#define CYDEV_UCFG_B0_P2_U0_SIZE 0x00000070u
N#define CYREG_B0_P2_U0_PLD_IT0 0x40010400u
N#define CYREG_B0_P2_U0_PLD_IT1 0x40010404u
N#define CYREG_B0_P2_U0_PLD_IT2 0x40010408u
N#define CYREG_B0_P2_U0_PLD_IT3 0x4001040cu
N#define CYREG_B0_P2_U0_PLD_IT4 0x40010410u
N#define CYREG_B0_P2_U0_PLD_IT5 0x40010414u
N#define CYREG_B0_P2_U0_PLD_IT6 0x40010418u
N#define CYREG_B0_P2_U0_PLD_IT7 0x4001041cu
N#define CYREG_B0_P2_U0_PLD_IT8 0x40010420u
N#define CYREG_B0_P2_U0_PLD_IT9 0x40010424u
N#define CYREG_B0_P2_U0_PLD_IT10 0x40010428u
N#define CYREG_B0_P2_U0_PLD_IT11 0x4001042cu
N#define CYREG_B0_P2_U0_PLD_ORT0 0x40010430u
N#define CYREG_B0_P2_U0_PLD_ORT1 0x40010432u
N#define CYREG_B0_P2_U0_PLD_ORT2 0x40010434u
N#define CYREG_B0_P2_U0_PLD_ORT3 0x40010436u
N#define CYREG_B0_P2_U0_MC_CFG_CEN_CONST 0x40010438u
N#define CYREG_B0_P2_U0_MC_CFG_XORFB 0x4001043au
N#define CYREG_B0_P2_U0_MC_CFG_SET_RESET 0x4001043cu
N#define CYREG_B0_P2_U0_MC_CFG_BYPASS 0x4001043eu
N#define CYREG_B0_P2_U0_CFG0 0x40010440u
N#define CYREG_B0_P2_U0_CFG1 0x40010441u
N#define CYREG_B0_P2_U0_CFG2 0x40010442u
N#define CYREG_B0_P2_U0_CFG3 0x40010443u
N#define CYREG_B0_P2_U0_CFG4 0x40010444u
N#define CYREG_B0_P2_U0_CFG5 0x40010445u
N#define CYREG_B0_P2_U0_CFG6 0x40010446u
N#define CYREG_B0_P2_U0_CFG7 0x40010447u
N#define CYREG_B0_P2_U0_CFG8 0x40010448u
N#define CYREG_B0_P2_U0_CFG9 0x40010449u
N#define CYREG_B0_P2_U0_CFG10 0x4001044au
N#define CYREG_B0_P2_U0_CFG11 0x4001044bu
N#define CYREG_B0_P2_U0_CFG12 0x4001044cu
N#define CYREG_B0_P2_U0_CFG13 0x4001044du
N#define CYREG_B0_P2_U0_CFG14 0x4001044eu
N#define CYREG_B0_P2_U0_CFG15 0x4001044fu
N#define CYREG_B0_P2_U0_CFG16 0x40010450u
N#define CYREG_B0_P2_U0_CFG17 0x40010451u
N#define CYREG_B0_P2_U0_CFG18 0x40010452u
N#define CYREG_B0_P2_U0_CFG19 0x40010453u
N#define CYREG_B0_P2_U0_CFG20 0x40010454u
N#define CYREG_B0_P2_U0_CFG21 0x40010455u
N#define CYREG_B0_P2_U0_CFG22 0x40010456u
N#define CYREG_B0_P2_U0_CFG23 0x40010457u
N#define CYREG_B0_P2_U0_CFG24 0x40010458u
N#define CYREG_B0_P2_U0_CFG25 0x40010459u
N#define CYREG_B0_P2_U0_CFG26 0x4001045au
N#define CYREG_B0_P2_U0_CFG27 0x4001045bu
N#define CYREG_B0_P2_U0_CFG28 0x4001045cu
N#define CYREG_B0_P2_U0_CFG29 0x4001045du
N#define CYREG_B0_P2_U0_CFG30 0x4001045eu
N#define CYREG_B0_P2_U0_CFG31 0x4001045fu
N#define CYREG_B0_P2_U0_DCFG0 0x40010460u
N#define CYREG_B0_P2_U0_DCFG1 0x40010462u
N#define CYREG_B0_P2_U0_DCFG2 0x40010464u
N#define CYREG_B0_P2_U0_DCFG3 0x40010466u
N#define CYREG_B0_P2_U0_DCFG4 0x40010468u
N#define CYREG_B0_P2_U0_DCFG5 0x4001046au
N#define CYREG_B0_P2_U0_DCFG6 0x4001046cu
N#define CYREG_B0_P2_U0_DCFG7 0x4001046eu
N#define CYDEV_UCFG_B0_P2_U1_BASE 0x40010480u
N#define CYDEV_UCFG_B0_P2_U1_SIZE 0x00000070u
N#define CYREG_B0_P2_U1_PLD_IT0 0x40010480u
N#define CYREG_B0_P2_U1_PLD_IT1 0x40010484u
N#define CYREG_B0_P2_U1_PLD_IT2 0x40010488u
N#define CYREG_B0_P2_U1_PLD_IT3 0x4001048cu
N#define CYREG_B0_P2_U1_PLD_IT4 0x40010490u
N#define CYREG_B0_P2_U1_PLD_IT5 0x40010494u
N#define CYREG_B0_P2_U1_PLD_IT6 0x40010498u
N#define CYREG_B0_P2_U1_PLD_IT7 0x4001049cu
N#define CYREG_B0_P2_U1_PLD_IT8 0x400104a0u
N#define CYREG_B0_P2_U1_PLD_IT9 0x400104a4u
N#define CYREG_B0_P2_U1_PLD_IT10 0x400104a8u
N#define CYREG_B0_P2_U1_PLD_IT11 0x400104acu
N#define CYREG_B0_P2_U1_PLD_ORT0 0x400104b0u
N#define CYREG_B0_P2_U1_PLD_ORT1 0x400104b2u
N#define CYREG_B0_P2_U1_PLD_ORT2 0x400104b4u
N#define CYREG_B0_P2_U1_PLD_ORT3 0x400104b6u
N#define CYREG_B0_P2_U1_MC_CFG_CEN_CONST 0x400104b8u
N#define CYREG_B0_P2_U1_MC_CFG_XORFB 0x400104bau
N#define CYREG_B0_P2_U1_MC_CFG_SET_RESET 0x400104bcu
N#define CYREG_B0_P2_U1_MC_CFG_BYPASS 0x400104beu
N#define CYREG_B0_P2_U1_CFG0 0x400104c0u
N#define CYREG_B0_P2_U1_CFG1 0x400104c1u
N#define CYREG_B0_P2_U1_CFG2 0x400104c2u
N#define CYREG_B0_P2_U1_CFG3 0x400104c3u
N#define CYREG_B0_P2_U1_CFG4 0x400104c4u
N#define CYREG_B0_P2_U1_CFG5 0x400104c5u
N#define CYREG_B0_P2_U1_CFG6 0x400104c6u
N#define CYREG_B0_P2_U1_CFG7 0x400104c7u
N#define CYREG_B0_P2_U1_CFG8 0x400104c8u
N#define CYREG_B0_P2_U1_CFG9 0x400104c9u
N#define CYREG_B0_P2_U1_CFG10 0x400104cau
N#define CYREG_B0_P2_U1_CFG11 0x400104cbu
N#define CYREG_B0_P2_U1_CFG12 0x400104ccu
N#define CYREG_B0_P2_U1_CFG13 0x400104cdu
N#define CYREG_B0_P2_U1_CFG14 0x400104ceu
N#define CYREG_B0_P2_U1_CFG15 0x400104cfu
N#define CYREG_B0_P2_U1_CFG16 0x400104d0u
N#define CYREG_B0_P2_U1_CFG17 0x400104d1u
N#define CYREG_B0_P2_U1_CFG18 0x400104d2u
N#define CYREG_B0_P2_U1_CFG19 0x400104d3u
N#define CYREG_B0_P2_U1_CFG20 0x400104d4u
N#define CYREG_B0_P2_U1_CFG21 0x400104d5u
N#define CYREG_B0_P2_U1_CFG22 0x400104d6u
N#define CYREG_B0_P2_U1_CFG23 0x400104d7u
N#define CYREG_B0_P2_U1_CFG24 0x400104d8u
N#define CYREG_B0_P2_U1_CFG25 0x400104d9u
N#define CYREG_B0_P2_U1_CFG26 0x400104dau
N#define CYREG_B0_P2_U1_CFG27 0x400104dbu
N#define CYREG_B0_P2_U1_CFG28 0x400104dcu
N#define CYREG_B0_P2_U1_CFG29 0x400104ddu
N#define CYREG_B0_P2_U1_CFG30 0x400104deu
N#define CYREG_B0_P2_U1_CFG31 0x400104dfu
N#define CYREG_B0_P2_U1_DCFG0 0x400104e0u
N#define CYREG_B0_P2_U1_DCFG1 0x400104e2u
N#define CYREG_B0_P2_U1_DCFG2 0x400104e4u
N#define CYREG_B0_P2_U1_DCFG3 0x400104e6u
N#define CYREG_B0_P2_U1_DCFG4 0x400104e8u
N#define CYREG_B0_P2_U1_DCFG5 0x400104eau
N#define CYREG_B0_P2_U1_DCFG6 0x400104ecu
N#define CYREG_B0_P2_U1_DCFG7 0x400104eeu
N#define CYDEV_UCFG_B0_P2_ROUTE_BASE 0x40010500u
N#define CYDEV_UCFG_B0_P2_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B0_P3_BASE 0x40010600u
N#define CYDEV_UCFG_B0_P3_SIZE 0x000001efu
N#define CYDEV_UCFG_B0_P3_U0_BASE 0x40010600u
N#define CYDEV_UCFG_B0_P3_U0_SIZE 0x00000070u
N#define CYREG_B0_P3_U0_PLD_IT0 0x40010600u
N#define CYREG_B0_P3_U0_PLD_IT1 0x40010604u
N#define CYREG_B0_P3_U0_PLD_IT2 0x40010608u
N#define CYREG_B0_P3_U0_PLD_IT3 0x4001060cu
N#define CYREG_B0_P3_U0_PLD_IT4 0x40010610u
N#define CYREG_B0_P3_U0_PLD_IT5 0x40010614u
N#define CYREG_B0_P3_U0_PLD_IT6 0x40010618u
N#define CYREG_B0_P3_U0_PLD_IT7 0x4001061cu
N#define CYREG_B0_P3_U0_PLD_IT8 0x40010620u
N#define CYREG_B0_P3_U0_PLD_IT9 0x40010624u
N#define CYREG_B0_P3_U0_PLD_IT10 0x40010628u
N#define CYREG_B0_P3_U0_PLD_IT11 0x4001062cu
N#define CYREG_B0_P3_U0_PLD_ORT0 0x40010630u
N#define CYREG_B0_P3_U0_PLD_ORT1 0x40010632u
N#define CYREG_B0_P3_U0_PLD_ORT2 0x40010634u
N#define CYREG_B0_P3_U0_PLD_ORT3 0x40010636u
N#define CYREG_B0_P3_U0_MC_CFG_CEN_CONST 0x40010638u
N#define CYREG_B0_P3_U0_MC_CFG_XORFB 0x4001063au
N#define CYREG_B0_P3_U0_MC_CFG_SET_RESET 0x4001063cu
N#define CYREG_B0_P3_U0_MC_CFG_BYPASS 0x4001063eu
N#define CYREG_B0_P3_U0_CFG0 0x40010640u
N#define CYREG_B0_P3_U0_CFG1 0x40010641u
N#define CYREG_B0_P3_U0_CFG2 0x40010642u
N#define CYREG_B0_P3_U0_CFG3 0x40010643u
N#define CYREG_B0_P3_U0_CFG4 0x40010644u
N#define CYREG_B0_P3_U0_CFG5 0x40010645u
N#define CYREG_B0_P3_U0_CFG6 0x40010646u
N#define CYREG_B0_P3_U0_CFG7 0x40010647u
N#define CYREG_B0_P3_U0_CFG8 0x40010648u
N#define CYREG_B0_P3_U0_CFG9 0x40010649u
N#define CYREG_B0_P3_U0_CFG10 0x4001064au
N#define CYREG_B0_P3_U0_CFG11 0x4001064bu
N#define CYREG_B0_P3_U0_CFG12 0x4001064cu
N#define CYREG_B0_P3_U0_CFG13 0x4001064du
N#define CYREG_B0_P3_U0_CFG14 0x4001064eu
N#define CYREG_B0_P3_U0_CFG15 0x4001064fu
N#define CYREG_B0_P3_U0_CFG16 0x40010650u
N#define CYREG_B0_P3_U0_CFG17 0x40010651u
N#define CYREG_B0_P3_U0_CFG18 0x40010652u
N#define CYREG_B0_P3_U0_CFG19 0x40010653u
N#define CYREG_B0_P3_U0_CFG20 0x40010654u
N#define CYREG_B0_P3_U0_CFG21 0x40010655u
N#define CYREG_B0_P3_U0_CFG22 0x40010656u
N#define CYREG_B0_P3_U0_CFG23 0x40010657u
N#define CYREG_B0_P3_U0_CFG24 0x40010658u
N#define CYREG_B0_P3_U0_CFG25 0x40010659u
N#define CYREG_B0_P3_U0_CFG26 0x4001065au
N#define CYREG_B0_P3_U0_CFG27 0x4001065bu
N#define CYREG_B0_P3_U0_CFG28 0x4001065cu
N#define CYREG_B0_P3_U0_CFG29 0x4001065du
N#define CYREG_B0_P3_U0_CFG30 0x4001065eu
N#define CYREG_B0_P3_U0_CFG31 0x4001065fu
N#define CYREG_B0_P3_U0_DCFG0 0x40010660u
N#define CYREG_B0_P3_U0_DCFG1 0x40010662u
N#define CYREG_B0_P3_U0_DCFG2 0x40010664u
N#define CYREG_B0_P3_U0_DCFG3 0x40010666u
N#define CYREG_B0_P3_U0_DCFG4 0x40010668u
N#define CYREG_B0_P3_U0_DCFG5 0x4001066au
N#define CYREG_B0_P3_U0_DCFG6 0x4001066cu
N#define CYREG_B0_P3_U0_DCFG7 0x4001066eu
N#define CYDEV_UCFG_B0_P3_U1_BASE 0x40010680u
N#define CYDEV_UCFG_B0_P3_U1_SIZE 0x00000070u
N#define CYREG_B0_P3_U1_PLD_IT0 0x40010680u
N#define CYREG_B0_P3_U1_PLD_IT1 0x40010684u
N#define CYREG_B0_P3_U1_PLD_IT2 0x40010688u
N#define CYREG_B0_P3_U1_PLD_IT3 0x4001068cu
N#define CYREG_B0_P3_U1_PLD_IT4 0x40010690u
N#define CYREG_B0_P3_U1_PLD_IT5 0x40010694u
N#define CYREG_B0_P3_U1_PLD_IT6 0x40010698u
N#define CYREG_B0_P3_U1_PLD_IT7 0x4001069cu
N#define CYREG_B0_P3_U1_PLD_IT8 0x400106a0u
N#define CYREG_B0_P3_U1_PLD_IT9 0x400106a4u
N#define CYREG_B0_P3_U1_PLD_IT10 0x400106a8u
N#define CYREG_B0_P3_U1_PLD_IT11 0x400106acu
N#define CYREG_B0_P3_U1_PLD_ORT0 0x400106b0u
N#define CYREG_B0_P3_U1_PLD_ORT1 0x400106b2u
N#define CYREG_B0_P3_U1_PLD_ORT2 0x400106b4u
N#define CYREG_B0_P3_U1_PLD_ORT3 0x400106b6u
N#define CYREG_B0_P3_U1_MC_CFG_CEN_CONST 0x400106b8u
N#define CYREG_B0_P3_U1_MC_CFG_XORFB 0x400106bau
N#define CYREG_B0_P3_U1_MC_CFG_SET_RESET 0x400106bcu
N#define CYREG_B0_P3_U1_MC_CFG_BYPASS 0x400106beu
N#define CYREG_B0_P3_U1_CFG0 0x400106c0u
N#define CYREG_B0_P3_U1_CFG1 0x400106c1u
N#define CYREG_B0_P3_U1_CFG2 0x400106c2u
N#define CYREG_B0_P3_U1_CFG3 0x400106c3u
N#define CYREG_B0_P3_U1_CFG4 0x400106c4u
N#define CYREG_B0_P3_U1_CFG5 0x400106c5u
N#define CYREG_B0_P3_U1_CFG6 0x400106c6u
N#define CYREG_B0_P3_U1_CFG7 0x400106c7u
N#define CYREG_B0_P3_U1_CFG8 0x400106c8u
N#define CYREG_B0_P3_U1_CFG9 0x400106c9u
N#define CYREG_B0_P3_U1_CFG10 0x400106cau
N#define CYREG_B0_P3_U1_CFG11 0x400106cbu
N#define CYREG_B0_P3_U1_CFG12 0x400106ccu
N#define CYREG_B0_P3_U1_CFG13 0x400106cdu
N#define CYREG_B0_P3_U1_CFG14 0x400106ceu
N#define CYREG_B0_P3_U1_CFG15 0x400106cfu
N#define CYREG_B0_P3_U1_CFG16 0x400106d0u
N#define CYREG_B0_P3_U1_CFG17 0x400106d1u
N#define CYREG_B0_P3_U1_CFG18 0x400106d2u
N#define CYREG_B0_P3_U1_CFG19 0x400106d3u
N#define CYREG_B0_P3_U1_CFG20 0x400106d4u
N#define CYREG_B0_P3_U1_CFG21 0x400106d5u
N#define CYREG_B0_P3_U1_CFG22 0x400106d6u
N#define CYREG_B0_P3_U1_CFG23 0x400106d7u
N#define CYREG_B0_P3_U1_CFG24 0x400106d8u
N#define CYREG_B0_P3_U1_CFG25 0x400106d9u
N#define CYREG_B0_P3_U1_CFG26 0x400106dau
N#define CYREG_B0_P3_U1_CFG27 0x400106dbu
N#define CYREG_B0_P3_U1_CFG28 0x400106dcu
N#define CYREG_B0_P3_U1_CFG29 0x400106ddu
N#define CYREG_B0_P3_U1_CFG30 0x400106deu
N#define CYREG_B0_P3_U1_CFG31 0x400106dfu
N#define CYREG_B0_P3_U1_DCFG0 0x400106e0u
N#define CYREG_B0_P3_U1_DCFG1 0x400106e2u
N#define CYREG_B0_P3_U1_DCFG2 0x400106e4u
N#define CYREG_B0_P3_U1_DCFG3 0x400106e6u
N#define CYREG_B0_P3_U1_DCFG4 0x400106e8u
N#define CYREG_B0_P3_U1_DCFG5 0x400106eau
N#define CYREG_B0_P3_U1_DCFG6 0x400106ecu
N#define CYREG_B0_P3_U1_DCFG7 0x400106eeu
N#define CYDEV_UCFG_B0_P3_ROUTE_BASE 0x40010700u
N#define CYDEV_UCFG_B0_P3_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B0_P4_BASE 0x40010800u
N#define CYDEV_UCFG_B0_P4_SIZE 0x000001efu
N#define CYDEV_UCFG_B0_P4_U0_BASE 0x40010800u
N#define CYDEV_UCFG_B0_P4_U0_SIZE 0x00000070u
N#define CYREG_B0_P4_U0_PLD_IT0 0x40010800u
N#define CYREG_B0_P4_U0_PLD_IT1 0x40010804u
N#define CYREG_B0_P4_U0_PLD_IT2 0x40010808u
N#define CYREG_B0_P4_U0_PLD_IT3 0x4001080cu
N#define CYREG_B0_P4_U0_PLD_IT4 0x40010810u
N#define CYREG_B0_P4_U0_PLD_IT5 0x40010814u
N#define CYREG_B0_P4_U0_PLD_IT6 0x40010818u
N#define CYREG_B0_P4_U0_PLD_IT7 0x4001081cu
N#define CYREG_B0_P4_U0_PLD_IT8 0x40010820u
N#define CYREG_B0_P4_U0_PLD_IT9 0x40010824u
N#define CYREG_B0_P4_U0_PLD_IT10 0x40010828u
N#define CYREG_B0_P4_U0_PLD_IT11 0x4001082cu
N#define CYREG_B0_P4_U0_PLD_ORT0 0x40010830u
N#define CYREG_B0_P4_U0_PLD_ORT1 0x40010832u
N#define CYREG_B0_P4_U0_PLD_ORT2 0x40010834u
N#define CYREG_B0_P4_U0_PLD_ORT3 0x40010836u
N#define CYREG_B0_P4_U0_MC_CFG_CEN_CONST 0x40010838u
N#define CYREG_B0_P4_U0_MC_CFG_XORFB 0x4001083au
N#define CYREG_B0_P4_U0_MC_CFG_SET_RESET 0x4001083cu
N#define CYREG_B0_P4_U0_MC_CFG_BYPASS 0x4001083eu
N#define CYREG_B0_P4_U0_CFG0 0x40010840u
N#define CYREG_B0_P4_U0_CFG1 0x40010841u
N#define CYREG_B0_P4_U0_CFG2 0x40010842u
N#define CYREG_B0_P4_U0_CFG3 0x40010843u
N#define CYREG_B0_P4_U0_CFG4 0x40010844u
N#define CYREG_B0_P4_U0_CFG5 0x40010845u
N#define CYREG_B0_P4_U0_CFG6 0x40010846u
N#define CYREG_B0_P4_U0_CFG7 0x40010847u
N#define CYREG_B0_P4_U0_CFG8 0x40010848u
N#define CYREG_B0_P4_U0_CFG9 0x40010849u
N#define CYREG_B0_P4_U0_CFG10 0x4001084au
N#define CYREG_B0_P4_U0_CFG11 0x4001084bu
N#define CYREG_B0_P4_U0_CFG12 0x4001084cu
N#define CYREG_B0_P4_U0_CFG13 0x4001084du
N#define CYREG_B0_P4_U0_CFG14 0x4001084eu
N#define CYREG_B0_P4_U0_CFG15 0x4001084fu
N#define CYREG_B0_P4_U0_CFG16 0x40010850u
N#define CYREG_B0_P4_U0_CFG17 0x40010851u
N#define CYREG_B0_P4_U0_CFG18 0x40010852u
N#define CYREG_B0_P4_U0_CFG19 0x40010853u
N#define CYREG_B0_P4_U0_CFG20 0x40010854u
N#define CYREG_B0_P4_U0_CFG21 0x40010855u
N#define CYREG_B0_P4_U0_CFG22 0x40010856u
N#define CYREG_B0_P4_U0_CFG23 0x40010857u
N#define CYREG_B0_P4_U0_CFG24 0x40010858u
N#define CYREG_B0_P4_U0_CFG25 0x40010859u
N#define CYREG_B0_P4_U0_CFG26 0x4001085au
N#define CYREG_B0_P4_U0_CFG27 0x4001085bu
N#define CYREG_B0_P4_U0_CFG28 0x4001085cu
N#define CYREG_B0_P4_U0_CFG29 0x4001085du
N#define CYREG_B0_P4_U0_CFG30 0x4001085eu
N#define CYREG_B0_P4_U0_CFG31 0x4001085fu
N#define CYREG_B0_P4_U0_DCFG0 0x40010860u
N#define CYREG_B0_P4_U0_DCFG1 0x40010862u
N#define CYREG_B0_P4_U0_DCFG2 0x40010864u
N#define CYREG_B0_P4_U0_DCFG3 0x40010866u
N#define CYREG_B0_P4_U0_DCFG4 0x40010868u
N#define CYREG_B0_P4_U0_DCFG5 0x4001086au
N#define CYREG_B0_P4_U0_DCFG6 0x4001086cu
N#define CYREG_B0_P4_U0_DCFG7 0x4001086eu
N#define CYDEV_UCFG_B0_P4_U1_BASE 0x40010880u
N#define CYDEV_UCFG_B0_P4_U1_SIZE 0x00000070u
N#define CYREG_B0_P4_U1_PLD_IT0 0x40010880u
N#define CYREG_B0_P4_U1_PLD_IT1 0x40010884u
N#define CYREG_B0_P4_U1_PLD_IT2 0x40010888u
N#define CYREG_B0_P4_U1_PLD_IT3 0x4001088cu
N#define CYREG_B0_P4_U1_PLD_IT4 0x40010890u
N#define CYREG_B0_P4_U1_PLD_IT5 0x40010894u
N#define CYREG_B0_P4_U1_PLD_IT6 0x40010898u
N#define CYREG_B0_P4_U1_PLD_IT7 0x4001089cu
N#define CYREG_B0_P4_U1_PLD_IT8 0x400108a0u
N#define CYREG_B0_P4_U1_PLD_IT9 0x400108a4u
N#define CYREG_B0_P4_U1_PLD_IT10 0x400108a8u
N#define CYREG_B0_P4_U1_PLD_IT11 0x400108acu
N#define CYREG_B0_P4_U1_PLD_ORT0 0x400108b0u
N#define CYREG_B0_P4_U1_PLD_ORT1 0x400108b2u
N#define CYREG_B0_P4_U1_PLD_ORT2 0x400108b4u
N#define CYREG_B0_P4_U1_PLD_ORT3 0x400108b6u
N#define CYREG_B0_P4_U1_MC_CFG_CEN_CONST 0x400108b8u
N#define CYREG_B0_P4_U1_MC_CFG_XORFB 0x400108bau
N#define CYREG_B0_P4_U1_MC_CFG_SET_RESET 0x400108bcu
N#define CYREG_B0_P4_U1_MC_CFG_BYPASS 0x400108beu
N#define CYREG_B0_P4_U1_CFG0 0x400108c0u
N#define CYREG_B0_P4_U1_CFG1 0x400108c1u
N#define CYREG_B0_P4_U1_CFG2 0x400108c2u
N#define CYREG_B0_P4_U1_CFG3 0x400108c3u
N#define CYREG_B0_P4_U1_CFG4 0x400108c4u
N#define CYREG_B0_P4_U1_CFG5 0x400108c5u
N#define CYREG_B0_P4_U1_CFG6 0x400108c6u
N#define CYREG_B0_P4_U1_CFG7 0x400108c7u
N#define CYREG_B0_P4_U1_CFG8 0x400108c8u
N#define CYREG_B0_P4_U1_CFG9 0x400108c9u
N#define CYREG_B0_P4_U1_CFG10 0x400108cau
N#define CYREG_B0_P4_U1_CFG11 0x400108cbu
N#define CYREG_B0_P4_U1_CFG12 0x400108ccu
N#define CYREG_B0_P4_U1_CFG13 0x400108cdu
N#define CYREG_B0_P4_U1_CFG14 0x400108ceu
N#define CYREG_B0_P4_U1_CFG15 0x400108cfu
N#define CYREG_B0_P4_U1_CFG16 0x400108d0u
N#define CYREG_B0_P4_U1_CFG17 0x400108d1u
N#define CYREG_B0_P4_U1_CFG18 0x400108d2u
N#define CYREG_B0_P4_U1_CFG19 0x400108d3u
N#define CYREG_B0_P4_U1_CFG20 0x400108d4u
N#define CYREG_B0_P4_U1_CFG21 0x400108d5u
N#define CYREG_B0_P4_U1_CFG22 0x400108d6u
N#define CYREG_B0_P4_U1_CFG23 0x400108d7u
N#define CYREG_B0_P4_U1_CFG24 0x400108d8u
N#define CYREG_B0_P4_U1_CFG25 0x400108d9u
N#define CYREG_B0_P4_U1_CFG26 0x400108dau
N#define CYREG_B0_P4_U1_CFG27 0x400108dbu
N#define CYREG_B0_P4_U1_CFG28 0x400108dcu
N#define CYREG_B0_P4_U1_CFG29 0x400108ddu
N#define CYREG_B0_P4_U1_CFG30 0x400108deu
N#define CYREG_B0_P4_U1_CFG31 0x400108dfu
N#define CYREG_B0_P4_U1_DCFG0 0x400108e0u
N#define CYREG_B0_P4_U1_DCFG1 0x400108e2u
N#define CYREG_B0_P4_U1_DCFG2 0x400108e4u
N#define CYREG_B0_P4_U1_DCFG3 0x400108e6u
N#define CYREG_B0_P4_U1_DCFG4 0x400108e8u
N#define CYREG_B0_P4_U1_DCFG5 0x400108eau
N#define CYREG_B0_P4_U1_DCFG6 0x400108ecu
N#define CYREG_B0_P4_U1_DCFG7 0x400108eeu
N#define CYDEV_UCFG_B0_P4_ROUTE_BASE 0x40010900u
N#define CYDEV_UCFG_B0_P4_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B0_P5_BASE 0x40010a00u
N#define CYDEV_UCFG_B0_P5_SIZE 0x000001efu
N#define CYDEV_UCFG_B0_P5_U0_BASE 0x40010a00u
N#define CYDEV_UCFG_B0_P5_U0_SIZE 0x00000070u
N#define CYREG_B0_P5_U0_PLD_IT0 0x40010a00u
N#define CYREG_B0_P5_U0_PLD_IT1 0x40010a04u
N#define CYREG_B0_P5_U0_PLD_IT2 0x40010a08u
N#define CYREG_B0_P5_U0_PLD_IT3 0x40010a0cu
N#define CYREG_B0_P5_U0_PLD_IT4 0x40010a10u
N#define CYREG_B0_P5_U0_PLD_IT5 0x40010a14u
N#define CYREG_B0_P5_U0_PLD_IT6 0x40010a18u
N#define CYREG_B0_P5_U0_PLD_IT7 0x40010a1cu
N#define CYREG_B0_P5_U0_PLD_IT8 0x40010a20u
N#define CYREG_B0_P5_U0_PLD_IT9 0x40010a24u
N#define CYREG_B0_P5_U0_PLD_IT10 0x40010a28u
N#define CYREG_B0_P5_U0_PLD_IT11 0x40010a2cu
N#define CYREG_B0_P5_U0_PLD_ORT0 0x40010a30u
N#define CYREG_B0_P5_U0_PLD_ORT1 0x40010a32u
N#define CYREG_B0_P5_U0_PLD_ORT2 0x40010a34u
N#define CYREG_B0_P5_U0_PLD_ORT3 0x40010a36u
N#define CYREG_B0_P5_U0_MC_CFG_CEN_CONST 0x40010a38u
N#define CYREG_B0_P5_U0_MC_CFG_XORFB 0x40010a3au
N#define CYREG_B0_P5_U0_MC_CFG_SET_RESET 0x40010a3cu
N#define CYREG_B0_P5_U0_MC_CFG_BYPASS 0x40010a3eu
N#define CYREG_B0_P5_U0_CFG0 0x40010a40u
N#define CYREG_B0_P5_U0_CFG1 0x40010a41u
N#define CYREG_B0_P5_U0_CFG2 0x40010a42u
N#define CYREG_B0_P5_U0_CFG3 0x40010a43u
N#define CYREG_B0_P5_U0_CFG4 0x40010a44u
N#define CYREG_B0_P5_U0_CFG5 0x40010a45u
N#define CYREG_B0_P5_U0_CFG6 0x40010a46u
N#define CYREG_B0_P5_U0_CFG7 0x40010a47u
N#define CYREG_B0_P5_U0_CFG8 0x40010a48u
N#define CYREG_B0_P5_U0_CFG9 0x40010a49u
N#define CYREG_B0_P5_U0_CFG10 0x40010a4au
N#define CYREG_B0_P5_U0_CFG11 0x40010a4bu
N#define CYREG_B0_P5_U0_CFG12 0x40010a4cu
N#define CYREG_B0_P5_U0_CFG13 0x40010a4du
N#define CYREG_B0_P5_U0_CFG14 0x40010a4eu
N#define CYREG_B0_P5_U0_CFG15 0x40010a4fu
N#define CYREG_B0_P5_U0_CFG16 0x40010a50u
N#define CYREG_B0_P5_U0_CFG17 0x40010a51u
N#define CYREG_B0_P5_U0_CFG18 0x40010a52u
N#define CYREG_B0_P5_U0_CFG19 0x40010a53u
N#define CYREG_B0_P5_U0_CFG20 0x40010a54u
N#define CYREG_B0_P5_U0_CFG21 0x40010a55u
N#define CYREG_B0_P5_U0_CFG22 0x40010a56u
N#define CYREG_B0_P5_U0_CFG23 0x40010a57u
N#define CYREG_B0_P5_U0_CFG24 0x40010a58u
N#define CYREG_B0_P5_U0_CFG25 0x40010a59u
N#define CYREG_B0_P5_U0_CFG26 0x40010a5au
N#define CYREG_B0_P5_U0_CFG27 0x40010a5bu
N#define CYREG_B0_P5_U0_CFG28 0x40010a5cu
N#define CYREG_B0_P5_U0_CFG29 0x40010a5du
N#define CYREG_B0_P5_U0_CFG30 0x40010a5eu
N#define CYREG_B0_P5_U0_CFG31 0x40010a5fu
N#define CYREG_B0_P5_U0_DCFG0 0x40010a60u
N#define CYREG_B0_P5_U0_DCFG1 0x40010a62u
N#define CYREG_B0_P5_U0_DCFG2 0x40010a64u
N#define CYREG_B0_P5_U0_DCFG3 0x40010a66u
N#define CYREG_B0_P5_U0_DCFG4 0x40010a68u
N#define CYREG_B0_P5_U0_DCFG5 0x40010a6au
N#define CYREG_B0_P5_U0_DCFG6 0x40010a6cu
N#define CYREG_B0_P5_U0_DCFG7 0x40010a6eu
N#define CYDEV_UCFG_B0_P5_U1_BASE 0x40010a80u
N#define CYDEV_UCFG_B0_P5_U1_SIZE 0x00000070u
N#define CYREG_B0_P5_U1_PLD_IT0 0x40010a80u
N#define CYREG_B0_P5_U1_PLD_IT1 0x40010a84u
N#define CYREG_B0_P5_U1_PLD_IT2 0x40010a88u
N#define CYREG_B0_P5_U1_PLD_IT3 0x40010a8cu
N#define CYREG_B0_P5_U1_PLD_IT4 0x40010a90u
N#define CYREG_B0_P5_U1_PLD_IT5 0x40010a94u
N#define CYREG_B0_P5_U1_PLD_IT6 0x40010a98u
N#define CYREG_B0_P5_U1_PLD_IT7 0x40010a9cu
N#define CYREG_B0_P5_U1_PLD_IT8 0x40010aa0u
N#define CYREG_B0_P5_U1_PLD_IT9 0x40010aa4u
N#define CYREG_B0_P5_U1_PLD_IT10 0x40010aa8u
N#define CYREG_B0_P5_U1_PLD_IT11 0x40010aacu
N#define CYREG_B0_P5_U1_PLD_ORT0 0x40010ab0u
N#define CYREG_B0_P5_U1_PLD_ORT1 0x40010ab2u
N#define CYREG_B0_P5_U1_PLD_ORT2 0x40010ab4u
N#define CYREG_B0_P5_U1_PLD_ORT3 0x40010ab6u
N#define CYREG_B0_P5_U1_MC_CFG_CEN_CONST 0x40010ab8u
N#define CYREG_B0_P5_U1_MC_CFG_XORFB 0x40010abau
N#define CYREG_B0_P5_U1_MC_CFG_SET_RESET 0x40010abcu
N#define CYREG_B0_P5_U1_MC_CFG_BYPASS 0x40010abeu
N#define CYREG_B0_P5_U1_CFG0 0x40010ac0u
N#define CYREG_B0_P5_U1_CFG1 0x40010ac1u
N#define CYREG_B0_P5_U1_CFG2 0x40010ac2u
N#define CYREG_B0_P5_U1_CFG3 0x40010ac3u
N#define CYREG_B0_P5_U1_CFG4 0x40010ac4u
N#define CYREG_B0_P5_U1_CFG5 0x40010ac5u
N#define CYREG_B0_P5_U1_CFG6 0x40010ac6u
N#define CYREG_B0_P5_U1_CFG7 0x40010ac7u
N#define CYREG_B0_P5_U1_CFG8 0x40010ac8u
N#define CYREG_B0_P5_U1_CFG9 0x40010ac9u
N#define CYREG_B0_P5_U1_CFG10 0x40010acau
N#define CYREG_B0_P5_U1_CFG11 0x40010acbu
N#define CYREG_B0_P5_U1_CFG12 0x40010accu
N#define CYREG_B0_P5_U1_CFG13 0x40010acdu
N#define CYREG_B0_P5_U1_CFG14 0x40010aceu
N#define CYREG_B0_P5_U1_CFG15 0x40010acfu
N#define CYREG_B0_P5_U1_CFG16 0x40010ad0u
N#define CYREG_B0_P5_U1_CFG17 0x40010ad1u
N#define CYREG_B0_P5_U1_CFG18 0x40010ad2u
N#define CYREG_B0_P5_U1_CFG19 0x40010ad3u
N#define CYREG_B0_P5_U1_CFG20 0x40010ad4u
N#define CYREG_B0_P5_U1_CFG21 0x40010ad5u
N#define CYREG_B0_P5_U1_CFG22 0x40010ad6u
N#define CYREG_B0_P5_U1_CFG23 0x40010ad7u
N#define CYREG_B0_P5_U1_CFG24 0x40010ad8u
N#define CYREG_B0_P5_U1_CFG25 0x40010ad9u
N#define CYREG_B0_P5_U1_CFG26 0x40010adau
N#define CYREG_B0_P5_U1_CFG27 0x40010adbu
N#define CYREG_B0_P5_U1_CFG28 0x40010adcu
N#define CYREG_B0_P5_U1_CFG29 0x40010addu
N#define CYREG_B0_P5_U1_CFG30 0x40010adeu
N#define CYREG_B0_P5_U1_CFG31 0x40010adfu
N#define CYREG_B0_P5_U1_DCFG0 0x40010ae0u
N#define CYREG_B0_P5_U1_DCFG1 0x40010ae2u
N#define CYREG_B0_P5_U1_DCFG2 0x40010ae4u
N#define CYREG_B0_P5_U1_DCFG3 0x40010ae6u
N#define CYREG_B0_P5_U1_DCFG4 0x40010ae8u
N#define CYREG_B0_P5_U1_DCFG5 0x40010aeau
N#define CYREG_B0_P5_U1_DCFG6 0x40010aecu
N#define CYREG_B0_P5_U1_DCFG7 0x40010aeeu
N#define CYDEV_UCFG_B0_P5_ROUTE_BASE 0x40010b00u
N#define CYDEV_UCFG_B0_P5_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B0_P6_BASE 0x40010c00u
N#define CYDEV_UCFG_B0_P6_SIZE 0x000001efu
N#define CYDEV_UCFG_B0_P6_U0_BASE 0x40010c00u
N#define CYDEV_UCFG_B0_P6_U0_SIZE 0x00000070u
N#define CYREG_B0_P6_U0_PLD_IT0 0x40010c00u
N#define CYREG_B0_P6_U0_PLD_IT1 0x40010c04u
N#define CYREG_B0_P6_U0_PLD_IT2 0x40010c08u
N#define CYREG_B0_P6_U0_PLD_IT3 0x40010c0cu
N#define CYREG_B0_P6_U0_PLD_IT4 0x40010c10u
N#define CYREG_B0_P6_U0_PLD_IT5 0x40010c14u
N#define CYREG_B0_P6_U0_PLD_IT6 0x40010c18u
N#define CYREG_B0_P6_U0_PLD_IT7 0x40010c1cu
N#define CYREG_B0_P6_U0_PLD_IT8 0x40010c20u
N#define CYREG_B0_P6_U0_PLD_IT9 0x40010c24u
N#define CYREG_B0_P6_U0_PLD_IT10 0x40010c28u
N#define CYREG_B0_P6_U0_PLD_IT11 0x40010c2cu
N#define CYREG_B0_P6_U0_PLD_ORT0 0x40010c30u
N#define CYREG_B0_P6_U0_PLD_ORT1 0x40010c32u
N#define CYREG_B0_P6_U0_PLD_ORT2 0x40010c34u
N#define CYREG_B0_P6_U0_PLD_ORT3 0x40010c36u
N#define CYREG_B0_P6_U0_MC_CFG_CEN_CONST 0x40010c38u
N#define CYREG_B0_P6_U0_MC_CFG_XORFB 0x40010c3au
N#define CYREG_B0_P6_U0_MC_CFG_SET_RESET 0x40010c3cu
N#define CYREG_B0_P6_U0_MC_CFG_BYPASS 0x40010c3eu
N#define CYREG_B0_P6_U0_CFG0 0x40010c40u
N#define CYREG_B0_P6_U0_CFG1 0x40010c41u
N#define CYREG_B0_P6_U0_CFG2 0x40010c42u
N#define CYREG_B0_P6_U0_CFG3 0x40010c43u
N#define CYREG_B0_P6_U0_CFG4 0x40010c44u
N#define CYREG_B0_P6_U0_CFG5 0x40010c45u
N#define CYREG_B0_P6_U0_CFG6 0x40010c46u
N#define CYREG_B0_P6_U0_CFG7 0x40010c47u
N#define CYREG_B0_P6_U0_CFG8 0x40010c48u
N#define CYREG_B0_P6_U0_CFG9 0x40010c49u
N#define CYREG_B0_P6_U0_CFG10 0x40010c4au
N#define CYREG_B0_P6_U0_CFG11 0x40010c4bu
N#define CYREG_B0_P6_U0_CFG12 0x40010c4cu
N#define CYREG_B0_P6_U0_CFG13 0x40010c4du
N#define CYREG_B0_P6_U0_CFG14 0x40010c4eu
N#define CYREG_B0_P6_U0_CFG15 0x40010c4fu
N#define CYREG_B0_P6_U0_CFG16 0x40010c50u
N#define CYREG_B0_P6_U0_CFG17 0x40010c51u
N#define CYREG_B0_P6_U0_CFG18 0x40010c52u
N#define CYREG_B0_P6_U0_CFG19 0x40010c53u
N#define CYREG_B0_P6_U0_CFG20 0x40010c54u
N#define CYREG_B0_P6_U0_CFG21 0x40010c55u
N#define CYREG_B0_P6_U0_CFG22 0x40010c56u
N#define CYREG_B0_P6_U0_CFG23 0x40010c57u
N#define CYREG_B0_P6_U0_CFG24 0x40010c58u
N#define CYREG_B0_P6_U0_CFG25 0x40010c59u
N#define CYREG_B0_P6_U0_CFG26 0x40010c5au
N#define CYREG_B0_P6_U0_CFG27 0x40010c5bu
N#define CYREG_B0_P6_U0_CFG28 0x40010c5cu
N#define CYREG_B0_P6_U0_CFG29 0x40010c5du
N#define CYREG_B0_P6_U0_CFG30 0x40010c5eu
N#define CYREG_B0_P6_U0_CFG31 0x40010c5fu
N#define CYREG_B0_P6_U0_DCFG0 0x40010c60u
N#define CYREG_B0_P6_U0_DCFG1 0x40010c62u
N#define CYREG_B0_P6_U0_DCFG2 0x40010c64u
N#define CYREG_B0_P6_U0_DCFG3 0x40010c66u
N#define CYREG_B0_P6_U0_DCFG4 0x40010c68u
N#define CYREG_B0_P6_U0_DCFG5 0x40010c6au
N#define CYREG_B0_P6_U0_DCFG6 0x40010c6cu
N#define CYREG_B0_P6_U0_DCFG7 0x40010c6eu
N#define CYDEV_UCFG_B0_P6_U1_BASE 0x40010c80u
N#define CYDEV_UCFG_B0_P6_U1_SIZE 0x00000070u
N#define CYREG_B0_P6_U1_PLD_IT0 0x40010c80u
N#define CYREG_B0_P6_U1_PLD_IT1 0x40010c84u
N#define CYREG_B0_P6_U1_PLD_IT2 0x40010c88u
N#define CYREG_B0_P6_U1_PLD_IT3 0x40010c8cu
N#define CYREG_B0_P6_U1_PLD_IT4 0x40010c90u
N#define CYREG_B0_P6_U1_PLD_IT5 0x40010c94u
N#define CYREG_B0_P6_U1_PLD_IT6 0x40010c98u
N#define CYREG_B0_P6_U1_PLD_IT7 0x40010c9cu
N#define CYREG_B0_P6_U1_PLD_IT8 0x40010ca0u
N#define CYREG_B0_P6_U1_PLD_IT9 0x40010ca4u
N#define CYREG_B0_P6_U1_PLD_IT10 0x40010ca8u
N#define CYREG_B0_P6_U1_PLD_IT11 0x40010cacu
N#define CYREG_B0_P6_U1_PLD_ORT0 0x40010cb0u
N#define CYREG_B0_P6_U1_PLD_ORT1 0x40010cb2u
N#define CYREG_B0_P6_U1_PLD_ORT2 0x40010cb4u
N#define CYREG_B0_P6_U1_PLD_ORT3 0x40010cb6u
N#define CYREG_B0_P6_U1_MC_CFG_CEN_CONST 0x40010cb8u
N#define CYREG_B0_P6_U1_MC_CFG_XORFB 0x40010cbau
N#define CYREG_B0_P6_U1_MC_CFG_SET_RESET 0x40010cbcu
N#define CYREG_B0_P6_U1_MC_CFG_BYPASS 0x40010cbeu
N#define CYREG_B0_P6_U1_CFG0 0x40010cc0u
N#define CYREG_B0_P6_U1_CFG1 0x40010cc1u
N#define CYREG_B0_P6_U1_CFG2 0x40010cc2u
N#define CYREG_B0_P6_U1_CFG3 0x40010cc3u
N#define CYREG_B0_P6_U1_CFG4 0x40010cc4u
N#define CYREG_B0_P6_U1_CFG5 0x40010cc5u
N#define CYREG_B0_P6_U1_CFG6 0x40010cc6u
N#define CYREG_B0_P6_U1_CFG7 0x40010cc7u
N#define CYREG_B0_P6_U1_CFG8 0x40010cc8u
N#define CYREG_B0_P6_U1_CFG9 0x40010cc9u
N#define CYREG_B0_P6_U1_CFG10 0x40010ccau
N#define CYREG_B0_P6_U1_CFG11 0x40010ccbu
N#define CYREG_B0_P6_U1_CFG12 0x40010cccu
N#define CYREG_B0_P6_U1_CFG13 0x40010ccdu
N#define CYREG_B0_P6_U1_CFG14 0x40010cceu
N#define CYREG_B0_P6_U1_CFG15 0x40010ccfu
N#define CYREG_B0_P6_U1_CFG16 0x40010cd0u
N#define CYREG_B0_P6_U1_CFG17 0x40010cd1u
N#define CYREG_B0_P6_U1_CFG18 0x40010cd2u
N#define CYREG_B0_P6_U1_CFG19 0x40010cd3u
N#define CYREG_B0_P6_U1_CFG20 0x40010cd4u
N#define CYREG_B0_P6_U1_CFG21 0x40010cd5u
N#define CYREG_B0_P6_U1_CFG22 0x40010cd6u
N#define CYREG_B0_P6_U1_CFG23 0x40010cd7u
N#define CYREG_B0_P6_U1_CFG24 0x40010cd8u
N#define CYREG_B0_P6_U1_CFG25 0x40010cd9u
N#define CYREG_B0_P6_U1_CFG26 0x40010cdau
N#define CYREG_B0_P6_U1_CFG27 0x40010cdbu
N#define CYREG_B0_P6_U1_CFG28 0x40010cdcu
N#define CYREG_B0_P6_U1_CFG29 0x40010cddu
N#define CYREG_B0_P6_U1_CFG30 0x40010cdeu
N#define CYREG_B0_P6_U1_CFG31 0x40010cdfu
N#define CYREG_B0_P6_U1_DCFG0 0x40010ce0u
N#define CYREG_B0_P6_U1_DCFG1 0x40010ce2u
N#define CYREG_B0_P6_U1_DCFG2 0x40010ce4u
N#define CYREG_B0_P6_U1_DCFG3 0x40010ce6u
N#define CYREG_B0_P6_U1_DCFG4 0x40010ce8u
N#define CYREG_B0_P6_U1_DCFG5 0x40010ceau
N#define CYREG_B0_P6_U1_DCFG6 0x40010cecu
N#define CYREG_B0_P6_U1_DCFG7 0x40010ceeu
N#define CYDEV_UCFG_B0_P6_ROUTE_BASE 0x40010d00u
N#define CYDEV_UCFG_B0_P6_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B0_P7_BASE 0x40010e00u
N#define CYDEV_UCFG_B0_P7_SIZE 0x000001efu
N#define CYDEV_UCFG_B0_P7_U0_BASE 0x40010e00u
N#define CYDEV_UCFG_B0_P7_U0_SIZE 0x00000070u
N#define CYREG_B0_P7_U0_PLD_IT0 0x40010e00u
N#define CYREG_B0_P7_U0_PLD_IT1 0x40010e04u
N#define CYREG_B0_P7_U0_PLD_IT2 0x40010e08u
N#define CYREG_B0_P7_U0_PLD_IT3 0x40010e0cu
N#define CYREG_B0_P7_U0_PLD_IT4 0x40010e10u
N#define CYREG_B0_P7_U0_PLD_IT5 0x40010e14u
N#define CYREG_B0_P7_U0_PLD_IT6 0x40010e18u
N#define CYREG_B0_P7_U0_PLD_IT7 0x40010e1cu
N#define CYREG_B0_P7_U0_PLD_IT8 0x40010e20u
N#define CYREG_B0_P7_U0_PLD_IT9 0x40010e24u
N#define CYREG_B0_P7_U0_PLD_IT10 0x40010e28u
N#define CYREG_B0_P7_U0_PLD_IT11 0x40010e2cu
N#define CYREG_B0_P7_U0_PLD_ORT0 0x40010e30u
N#define CYREG_B0_P7_U0_PLD_ORT1 0x40010e32u
N#define CYREG_B0_P7_U0_PLD_ORT2 0x40010e34u
N#define CYREG_B0_P7_U0_PLD_ORT3 0x40010e36u
N#define CYREG_B0_P7_U0_MC_CFG_CEN_CONST 0x40010e38u
N#define CYREG_B0_P7_U0_MC_CFG_XORFB 0x40010e3au
N#define CYREG_B0_P7_U0_MC_CFG_SET_RESET 0x40010e3cu
N#define CYREG_B0_P7_U0_MC_CFG_BYPASS 0x40010e3eu
N#define CYREG_B0_P7_U0_CFG0 0x40010e40u
N#define CYREG_B0_P7_U0_CFG1 0x40010e41u
N#define CYREG_B0_P7_U0_CFG2 0x40010e42u
N#define CYREG_B0_P7_U0_CFG3 0x40010e43u
N#define CYREG_B0_P7_U0_CFG4 0x40010e44u
N#define CYREG_B0_P7_U0_CFG5 0x40010e45u
N#define CYREG_B0_P7_U0_CFG6 0x40010e46u
N#define CYREG_B0_P7_U0_CFG7 0x40010e47u
N#define CYREG_B0_P7_U0_CFG8 0x40010e48u
N#define CYREG_B0_P7_U0_CFG9 0x40010e49u
N#define CYREG_B0_P7_U0_CFG10 0x40010e4au
N#define CYREG_B0_P7_U0_CFG11 0x40010e4bu
N#define CYREG_B0_P7_U0_CFG12 0x40010e4cu
N#define CYREG_B0_P7_U0_CFG13 0x40010e4du
N#define CYREG_B0_P7_U0_CFG14 0x40010e4eu
N#define CYREG_B0_P7_U0_CFG15 0x40010e4fu
N#define CYREG_B0_P7_U0_CFG16 0x40010e50u
N#define CYREG_B0_P7_U0_CFG17 0x40010e51u
N#define CYREG_B0_P7_U0_CFG18 0x40010e52u
N#define CYREG_B0_P7_U0_CFG19 0x40010e53u
N#define CYREG_B0_P7_U0_CFG20 0x40010e54u
N#define CYREG_B0_P7_U0_CFG21 0x40010e55u
N#define CYREG_B0_P7_U0_CFG22 0x40010e56u
N#define CYREG_B0_P7_U0_CFG23 0x40010e57u
N#define CYREG_B0_P7_U0_CFG24 0x40010e58u
N#define CYREG_B0_P7_U0_CFG25 0x40010e59u
N#define CYREG_B0_P7_U0_CFG26 0x40010e5au
N#define CYREG_B0_P7_U0_CFG27 0x40010e5bu
N#define CYREG_B0_P7_U0_CFG28 0x40010e5cu
N#define CYREG_B0_P7_U0_CFG29 0x40010e5du
N#define CYREG_B0_P7_U0_CFG30 0x40010e5eu
N#define CYREG_B0_P7_U0_CFG31 0x40010e5fu
N#define CYREG_B0_P7_U0_DCFG0 0x40010e60u
N#define CYREG_B0_P7_U0_DCFG1 0x40010e62u
N#define CYREG_B0_P7_U0_DCFG2 0x40010e64u
N#define CYREG_B0_P7_U0_DCFG3 0x40010e66u
N#define CYREG_B0_P7_U0_DCFG4 0x40010e68u
N#define CYREG_B0_P7_U0_DCFG5 0x40010e6au
N#define CYREG_B0_P7_U0_DCFG6 0x40010e6cu
N#define CYREG_B0_P7_U0_DCFG7 0x40010e6eu
N#define CYDEV_UCFG_B0_P7_U1_BASE 0x40010e80u
N#define CYDEV_UCFG_B0_P7_U1_SIZE 0x00000070u
N#define CYREG_B0_P7_U1_PLD_IT0 0x40010e80u
N#define CYREG_B0_P7_U1_PLD_IT1 0x40010e84u
N#define CYREG_B0_P7_U1_PLD_IT2 0x40010e88u
N#define CYREG_B0_P7_U1_PLD_IT3 0x40010e8cu
N#define CYREG_B0_P7_U1_PLD_IT4 0x40010e90u
N#define CYREG_B0_P7_U1_PLD_IT5 0x40010e94u
N#define CYREG_B0_P7_U1_PLD_IT6 0x40010e98u
N#define CYREG_B0_P7_U1_PLD_IT7 0x40010e9cu
N#define CYREG_B0_P7_U1_PLD_IT8 0x40010ea0u
N#define CYREG_B0_P7_U1_PLD_IT9 0x40010ea4u
N#define CYREG_B0_P7_U1_PLD_IT10 0x40010ea8u
N#define CYREG_B0_P7_U1_PLD_IT11 0x40010eacu
N#define CYREG_B0_P7_U1_PLD_ORT0 0x40010eb0u
N#define CYREG_B0_P7_U1_PLD_ORT1 0x40010eb2u
N#define CYREG_B0_P7_U1_PLD_ORT2 0x40010eb4u
N#define CYREG_B0_P7_U1_PLD_ORT3 0x40010eb6u
N#define CYREG_B0_P7_U1_MC_CFG_CEN_CONST 0x40010eb8u
N#define CYREG_B0_P7_U1_MC_CFG_XORFB 0x40010ebau
N#define CYREG_B0_P7_U1_MC_CFG_SET_RESET 0x40010ebcu
N#define CYREG_B0_P7_U1_MC_CFG_BYPASS 0x40010ebeu
N#define CYREG_B0_P7_U1_CFG0 0x40010ec0u
N#define CYREG_B0_P7_U1_CFG1 0x40010ec1u
N#define CYREG_B0_P7_U1_CFG2 0x40010ec2u
N#define CYREG_B0_P7_U1_CFG3 0x40010ec3u
N#define CYREG_B0_P7_U1_CFG4 0x40010ec4u
N#define CYREG_B0_P7_U1_CFG5 0x40010ec5u
N#define CYREG_B0_P7_U1_CFG6 0x40010ec6u
N#define CYREG_B0_P7_U1_CFG7 0x40010ec7u
N#define CYREG_B0_P7_U1_CFG8 0x40010ec8u
N#define CYREG_B0_P7_U1_CFG9 0x40010ec9u
N#define CYREG_B0_P7_U1_CFG10 0x40010ecau
N#define CYREG_B0_P7_U1_CFG11 0x40010ecbu
N#define CYREG_B0_P7_U1_CFG12 0x40010eccu
N#define CYREG_B0_P7_U1_CFG13 0x40010ecdu
N#define CYREG_B0_P7_U1_CFG14 0x40010eceu
N#define CYREG_B0_P7_U1_CFG15 0x40010ecfu
N#define CYREG_B0_P7_U1_CFG16 0x40010ed0u
N#define CYREG_B0_P7_U1_CFG17 0x40010ed1u
N#define CYREG_B0_P7_U1_CFG18 0x40010ed2u
N#define CYREG_B0_P7_U1_CFG19 0x40010ed3u
N#define CYREG_B0_P7_U1_CFG20 0x40010ed4u
N#define CYREG_B0_P7_U1_CFG21 0x40010ed5u
N#define CYREG_B0_P7_U1_CFG22 0x40010ed6u
N#define CYREG_B0_P7_U1_CFG23 0x40010ed7u
N#define CYREG_B0_P7_U1_CFG24 0x40010ed8u
N#define CYREG_B0_P7_U1_CFG25 0x40010ed9u
N#define CYREG_B0_P7_U1_CFG26 0x40010edau
N#define CYREG_B0_P7_U1_CFG27 0x40010edbu
N#define CYREG_B0_P7_U1_CFG28 0x40010edcu
N#define CYREG_B0_P7_U1_CFG29 0x40010eddu
N#define CYREG_B0_P7_U1_CFG30 0x40010edeu
N#define CYREG_B0_P7_U1_CFG31 0x40010edfu
N#define CYREG_B0_P7_U1_DCFG0 0x40010ee0u
N#define CYREG_B0_P7_U1_DCFG1 0x40010ee2u
N#define CYREG_B0_P7_U1_DCFG2 0x40010ee4u
N#define CYREG_B0_P7_U1_DCFG3 0x40010ee6u
N#define CYREG_B0_P7_U1_DCFG4 0x40010ee8u
N#define CYREG_B0_P7_U1_DCFG5 0x40010eeau
N#define CYREG_B0_P7_U1_DCFG6 0x40010eecu
N#define CYREG_B0_P7_U1_DCFG7 0x40010eeeu
N#define CYDEV_UCFG_B0_P7_ROUTE_BASE 0x40010f00u
N#define CYDEV_UCFG_B0_P7_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B1_BASE 0x40011000u
N#define CYDEV_UCFG_B1_SIZE 0x00000fefu
N#define CYDEV_UCFG_B1_P2_BASE 0x40011400u
N#define CYDEV_UCFG_B1_P2_SIZE 0x000001efu
N#define CYDEV_UCFG_B1_P2_U0_BASE 0x40011400u
N#define CYDEV_UCFG_B1_P2_U0_SIZE 0x00000070u
N#define CYREG_B1_P2_U0_PLD_IT0 0x40011400u
N#define CYREG_B1_P2_U0_PLD_IT1 0x40011404u
N#define CYREG_B1_P2_U0_PLD_IT2 0x40011408u
N#define CYREG_B1_P2_U0_PLD_IT3 0x4001140cu
N#define CYREG_B1_P2_U0_PLD_IT4 0x40011410u
N#define CYREG_B1_P2_U0_PLD_IT5 0x40011414u
N#define CYREG_B1_P2_U0_PLD_IT6 0x40011418u
N#define CYREG_B1_P2_U0_PLD_IT7 0x4001141cu
N#define CYREG_B1_P2_U0_PLD_IT8 0x40011420u
N#define CYREG_B1_P2_U0_PLD_IT9 0x40011424u
N#define CYREG_B1_P2_U0_PLD_IT10 0x40011428u
N#define CYREG_B1_P2_U0_PLD_IT11 0x4001142cu
N#define CYREG_B1_P2_U0_PLD_ORT0 0x40011430u
N#define CYREG_B1_P2_U0_PLD_ORT1 0x40011432u
N#define CYREG_B1_P2_U0_PLD_ORT2 0x40011434u
N#define CYREG_B1_P2_U0_PLD_ORT3 0x40011436u
N#define CYREG_B1_P2_U0_MC_CFG_CEN_CONST 0x40011438u
N#define CYREG_B1_P2_U0_MC_CFG_XORFB 0x4001143au
N#define CYREG_B1_P2_U0_MC_CFG_SET_RESET 0x4001143cu
N#define CYREG_B1_P2_U0_MC_CFG_BYPASS 0x4001143eu
N#define CYREG_B1_P2_U0_CFG0 0x40011440u
N#define CYREG_B1_P2_U0_CFG1 0x40011441u
N#define CYREG_B1_P2_U0_CFG2 0x40011442u
N#define CYREG_B1_P2_U0_CFG3 0x40011443u
N#define CYREG_B1_P2_U0_CFG4 0x40011444u
N#define CYREG_B1_P2_U0_CFG5 0x40011445u
N#define CYREG_B1_P2_U0_CFG6 0x40011446u
N#define CYREG_B1_P2_U0_CFG7 0x40011447u
N#define CYREG_B1_P2_U0_CFG8 0x40011448u
N#define CYREG_B1_P2_U0_CFG9 0x40011449u
N#define CYREG_B1_P2_U0_CFG10 0x4001144au
N#define CYREG_B1_P2_U0_CFG11 0x4001144bu
N#define CYREG_B1_P2_U0_CFG12 0x4001144cu
N#define CYREG_B1_P2_U0_CFG13 0x4001144du
N#define CYREG_B1_P2_U0_CFG14 0x4001144eu
N#define CYREG_B1_P2_U0_CFG15 0x4001144fu
N#define CYREG_B1_P2_U0_CFG16 0x40011450u
N#define CYREG_B1_P2_U0_CFG17 0x40011451u
N#define CYREG_B1_P2_U0_CFG18 0x40011452u
N#define CYREG_B1_P2_U0_CFG19 0x40011453u
N#define CYREG_B1_P2_U0_CFG20 0x40011454u
N#define CYREG_B1_P2_U0_CFG21 0x40011455u
N#define CYREG_B1_P2_U0_CFG22 0x40011456u
N#define CYREG_B1_P2_U0_CFG23 0x40011457u
N#define CYREG_B1_P2_U0_CFG24 0x40011458u
N#define CYREG_B1_P2_U0_CFG25 0x40011459u
N#define CYREG_B1_P2_U0_CFG26 0x4001145au
N#define CYREG_B1_P2_U0_CFG27 0x4001145bu
N#define CYREG_B1_P2_U0_CFG28 0x4001145cu
N#define CYREG_B1_P2_U0_CFG29 0x4001145du
N#define CYREG_B1_P2_U0_CFG30 0x4001145eu
N#define CYREG_B1_P2_U0_CFG31 0x4001145fu
N#define CYREG_B1_P2_U0_DCFG0 0x40011460u
N#define CYREG_B1_P2_U0_DCFG1 0x40011462u
N#define CYREG_B1_P2_U0_DCFG2 0x40011464u
N#define CYREG_B1_P2_U0_DCFG3 0x40011466u
N#define CYREG_B1_P2_U0_DCFG4 0x40011468u
N#define CYREG_B1_P2_U0_DCFG5 0x4001146au
N#define CYREG_B1_P2_U0_DCFG6 0x4001146cu
N#define CYREG_B1_P2_U0_DCFG7 0x4001146eu
N#define CYDEV_UCFG_B1_P2_U1_BASE 0x40011480u
N#define CYDEV_UCFG_B1_P2_U1_SIZE 0x00000070u
N#define CYREG_B1_P2_U1_PLD_IT0 0x40011480u
N#define CYREG_B1_P2_U1_PLD_IT1 0x40011484u
N#define CYREG_B1_P2_U1_PLD_IT2 0x40011488u
N#define CYREG_B1_P2_U1_PLD_IT3 0x4001148cu
N#define CYREG_B1_P2_U1_PLD_IT4 0x40011490u
N#define CYREG_B1_P2_U1_PLD_IT5 0x40011494u
N#define CYREG_B1_P2_U1_PLD_IT6 0x40011498u
N#define CYREG_B1_P2_U1_PLD_IT7 0x4001149cu
N#define CYREG_B1_P2_U1_PLD_IT8 0x400114a0u
N#define CYREG_B1_P2_U1_PLD_IT9 0x400114a4u
N#define CYREG_B1_P2_U1_PLD_IT10 0x400114a8u
N#define CYREG_B1_P2_U1_PLD_IT11 0x400114acu
N#define CYREG_B1_P2_U1_PLD_ORT0 0x400114b0u
N#define CYREG_B1_P2_U1_PLD_ORT1 0x400114b2u
N#define CYREG_B1_P2_U1_PLD_ORT2 0x400114b4u
N#define CYREG_B1_P2_U1_PLD_ORT3 0x400114b6u
N#define CYREG_B1_P2_U1_MC_CFG_CEN_CONST 0x400114b8u
N#define CYREG_B1_P2_U1_MC_CFG_XORFB 0x400114bau
N#define CYREG_B1_P2_U1_MC_CFG_SET_RESET 0x400114bcu
N#define CYREG_B1_P2_U1_MC_CFG_BYPASS 0x400114beu
N#define CYREG_B1_P2_U1_CFG0 0x400114c0u
N#define CYREG_B1_P2_U1_CFG1 0x400114c1u
N#define CYREG_B1_P2_U1_CFG2 0x400114c2u
N#define CYREG_B1_P2_U1_CFG3 0x400114c3u
N#define CYREG_B1_P2_U1_CFG4 0x400114c4u
N#define CYREG_B1_P2_U1_CFG5 0x400114c5u
N#define CYREG_B1_P2_U1_CFG6 0x400114c6u
N#define CYREG_B1_P2_U1_CFG7 0x400114c7u
N#define CYREG_B1_P2_U1_CFG8 0x400114c8u
N#define CYREG_B1_P2_U1_CFG9 0x400114c9u
N#define CYREG_B1_P2_U1_CFG10 0x400114cau
N#define CYREG_B1_P2_U1_CFG11 0x400114cbu
N#define CYREG_B1_P2_U1_CFG12 0x400114ccu
N#define CYREG_B1_P2_U1_CFG13 0x400114cdu
N#define CYREG_B1_P2_U1_CFG14 0x400114ceu
N#define CYREG_B1_P2_U1_CFG15 0x400114cfu
N#define CYREG_B1_P2_U1_CFG16 0x400114d0u
N#define CYREG_B1_P2_U1_CFG17 0x400114d1u
N#define CYREG_B1_P2_U1_CFG18 0x400114d2u
N#define CYREG_B1_P2_U1_CFG19 0x400114d3u
N#define CYREG_B1_P2_U1_CFG20 0x400114d4u
N#define CYREG_B1_P2_U1_CFG21 0x400114d5u
N#define CYREG_B1_P2_U1_CFG22 0x400114d6u
N#define CYREG_B1_P2_U1_CFG23 0x400114d7u
N#define CYREG_B1_P2_U1_CFG24 0x400114d8u
N#define CYREG_B1_P2_U1_CFG25 0x400114d9u
N#define CYREG_B1_P2_U1_CFG26 0x400114dau
N#define CYREG_B1_P2_U1_CFG27 0x400114dbu
N#define CYREG_B1_P2_U1_CFG28 0x400114dcu
N#define CYREG_B1_P2_U1_CFG29 0x400114ddu
N#define CYREG_B1_P2_U1_CFG30 0x400114deu
N#define CYREG_B1_P2_U1_CFG31 0x400114dfu
N#define CYREG_B1_P2_U1_DCFG0 0x400114e0u
N#define CYREG_B1_P2_U1_DCFG1 0x400114e2u
N#define CYREG_B1_P2_U1_DCFG2 0x400114e4u
N#define CYREG_B1_P2_U1_DCFG3 0x400114e6u
N#define CYREG_B1_P2_U1_DCFG4 0x400114e8u
N#define CYREG_B1_P2_U1_DCFG5 0x400114eau
N#define CYREG_B1_P2_U1_DCFG6 0x400114ecu
N#define CYREG_B1_P2_U1_DCFG7 0x400114eeu
N#define CYDEV_UCFG_B1_P2_ROUTE_BASE 0x40011500u
N#define CYDEV_UCFG_B1_P2_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B1_P3_BASE 0x40011600u
N#define CYDEV_UCFG_B1_P3_SIZE 0x000001efu
N#define CYDEV_UCFG_B1_P3_U0_BASE 0x40011600u
N#define CYDEV_UCFG_B1_P3_U0_SIZE 0x00000070u
N#define CYREG_B1_P3_U0_PLD_IT0 0x40011600u
N#define CYREG_B1_P3_U0_PLD_IT1 0x40011604u
N#define CYREG_B1_P3_U0_PLD_IT2 0x40011608u
N#define CYREG_B1_P3_U0_PLD_IT3 0x4001160cu
N#define CYREG_B1_P3_U0_PLD_IT4 0x40011610u
N#define CYREG_B1_P3_U0_PLD_IT5 0x40011614u
N#define CYREG_B1_P3_U0_PLD_IT6 0x40011618u
N#define CYREG_B1_P3_U0_PLD_IT7 0x4001161cu
N#define CYREG_B1_P3_U0_PLD_IT8 0x40011620u
N#define CYREG_B1_P3_U0_PLD_IT9 0x40011624u
N#define CYREG_B1_P3_U0_PLD_IT10 0x40011628u
N#define CYREG_B1_P3_U0_PLD_IT11 0x4001162cu
N#define CYREG_B1_P3_U0_PLD_ORT0 0x40011630u
N#define CYREG_B1_P3_U0_PLD_ORT1 0x40011632u
N#define CYREG_B1_P3_U0_PLD_ORT2 0x40011634u
N#define CYREG_B1_P3_U0_PLD_ORT3 0x40011636u
N#define CYREG_B1_P3_U0_MC_CFG_CEN_CONST 0x40011638u
N#define CYREG_B1_P3_U0_MC_CFG_XORFB 0x4001163au
N#define CYREG_B1_P3_U0_MC_CFG_SET_RESET 0x4001163cu
N#define CYREG_B1_P3_U0_MC_CFG_BYPASS 0x4001163eu
N#define CYREG_B1_P3_U0_CFG0 0x40011640u
N#define CYREG_B1_P3_U0_CFG1 0x40011641u
N#define CYREG_B1_P3_U0_CFG2 0x40011642u
N#define CYREG_B1_P3_U0_CFG3 0x40011643u
N#define CYREG_B1_P3_U0_CFG4 0x40011644u
N#define CYREG_B1_P3_U0_CFG5 0x40011645u
N#define CYREG_B1_P3_U0_CFG6 0x40011646u
N#define CYREG_B1_P3_U0_CFG7 0x40011647u
N#define CYREG_B1_P3_U0_CFG8 0x40011648u
N#define CYREG_B1_P3_U0_CFG9 0x40011649u
N#define CYREG_B1_P3_U0_CFG10 0x4001164au
N#define CYREG_B1_P3_U0_CFG11 0x4001164bu
N#define CYREG_B1_P3_U0_CFG12 0x4001164cu
N#define CYREG_B1_P3_U0_CFG13 0x4001164du
N#define CYREG_B1_P3_U0_CFG14 0x4001164eu
N#define CYREG_B1_P3_U0_CFG15 0x4001164fu
N#define CYREG_B1_P3_U0_CFG16 0x40011650u
N#define CYREG_B1_P3_U0_CFG17 0x40011651u
N#define CYREG_B1_P3_U0_CFG18 0x40011652u
N#define CYREG_B1_P3_U0_CFG19 0x40011653u
N#define CYREG_B1_P3_U0_CFG20 0x40011654u
N#define CYREG_B1_P3_U0_CFG21 0x40011655u
N#define CYREG_B1_P3_U0_CFG22 0x40011656u
N#define CYREG_B1_P3_U0_CFG23 0x40011657u
N#define CYREG_B1_P3_U0_CFG24 0x40011658u
N#define CYREG_B1_P3_U0_CFG25 0x40011659u
N#define CYREG_B1_P3_U0_CFG26 0x4001165au
N#define CYREG_B1_P3_U0_CFG27 0x4001165bu
N#define CYREG_B1_P3_U0_CFG28 0x4001165cu
N#define CYREG_B1_P3_U0_CFG29 0x4001165du
N#define CYREG_B1_P3_U0_CFG30 0x4001165eu
N#define CYREG_B1_P3_U0_CFG31 0x4001165fu
N#define CYREG_B1_P3_U0_DCFG0 0x40011660u
N#define CYREG_B1_P3_U0_DCFG1 0x40011662u
N#define CYREG_B1_P3_U0_DCFG2 0x40011664u
N#define CYREG_B1_P3_U0_DCFG3 0x40011666u
N#define CYREG_B1_P3_U0_DCFG4 0x40011668u
N#define CYREG_B1_P3_U0_DCFG5 0x4001166au
N#define CYREG_B1_P3_U0_DCFG6 0x4001166cu
N#define CYREG_B1_P3_U0_DCFG7 0x4001166eu
N#define CYDEV_UCFG_B1_P3_U1_BASE 0x40011680u
N#define CYDEV_UCFG_B1_P3_U1_SIZE 0x00000070u
N#define CYREG_B1_P3_U1_PLD_IT0 0x40011680u
N#define CYREG_B1_P3_U1_PLD_IT1 0x40011684u
N#define CYREG_B1_P3_U1_PLD_IT2 0x40011688u
N#define CYREG_B1_P3_U1_PLD_IT3 0x4001168cu
N#define CYREG_B1_P3_U1_PLD_IT4 0x40011690u
N#define CYREG_B1_P3_U1_PLD_IT5 0x40011694u
N#define CYREG_B1_P3_U1_PLD_IT6 0x40011698u
N#define CYREG_B1_P3_U1_PLD_IT7 0x4001169cu
N#define CYREG_B1_P3_U1_PLD_IT8 0x400116a0u
N#define CYREG_B1_P3_U1_PLD_IT9 0x400116a4u
N#define CYREG_B1_P3_U1_PLD_IT10 0x400116a8u
N#define CYREG_B1_P3_U1_PLD_IT11 0x400116acu
N#define CYREG_B1_P3_U1_PLD_ORT0 0x400116b0u
N#define CYREG_B1_P3_U1_PLD_ORT1 0x400116b2u
N#define CYREG_B1_P3_U1_PLD_ORT2 0x400116b4u
N#define CYREG_B1_P3_U1_PLD_ORT3 0x400116b6u
N#define CYREG_B1_P3_U1_MC_CFG_CEN_CONST 0x400116b8u
N#define CYREG_B1_P3_U1_MC_CFG_XORFB 0x400116bau
N#define CYREG_B1_P3_U1_MC_CFG_SET_RESET 0x400116bcu
N#define CYREG_B1_P3_U1_MC_CFG_BYPASS 0x400116beu
N#define CYREG_B1_P3_U1_CFG0 0x400116c0u
N#define CYREG_B1_P3_U1_CFG1 0x400116c1u
N#define CYREG_B1_P3_U1_CFG2 0x400116c2u
N#define CYREG_B1_P3_U1_CFG3 0x400116c3u
N#define CYREG_B1_P3_U1_CFG4 0x400116c4u
N#define CYREG_B1_P3_U1_CFG5 0x400116c5u
N#define CYREG_B1_P3_U1_CFG6 0x400116c6u
N#define CYREG_B1_P3_U1_CFG7 0x400116c7u
N#define CYREG_B1_P3_U1_CFG8 0x400116c8u
N#define CYREG_B1_P3_U1_CFG9 0x400116c9u
N#define CYREG_B1_P3_U1_CFG10 0x400116cau
N#define CYREG_B1_P3_U1_CFG11 0x400116cbu
N#define CYREG_B1_P3_U1_CFG12 0x400116ccu
N#define CYREG_B1_P3_U1_CFG13 0x400116cdu
N#define CYREG_B1_P3_U1_CFG14 0x400116ceu
N#define CYREG_B1_P3_U1_CFG15 0x400116cfu
N#define CYREG_B1_P3_U1_CFG16 0x400116d0u
N#define CYREG_B1_P3_U1_CFG17 0x400116d1u
N#define CYREG_B1_P3_U1_CFG18 0x400116d2u
N#define CYREG_B1_P3_U1_CFG19 0x400116d3u
N#define CYREG_B1_P3_U1_CFG20 0x400116d4u
N#define CYREG_B1_P3_U1_CFG21 0x400116d5u
N#define CYREG_B1_P3_U1_CFG22 0x400116d6u
N#define CYREG_B1_P3_U1_CFG23 0x400116d7u
N#define CYREG_B1_P3_U1_CFG24 0x400116d8u
N#define CYREG_B1_P3_U1_CFG25 0x400116d9u
N#define CYREG_B1_P3_U1_CFG26 0x400116dau
N#define CYREG_B1_P3_U1_CFG27 0x400116dbu
N#define CYREG_B1_P3_U1_CFG28 0x400116dcu
N#define CYREG_B1_P3_U1_CFG29 0x400116ddu
N#define CYREG_B1_P3_U1_CFG30 0x400116deu
N#define CYREG_B1_P3_U1_CFG31 0x400116dfu
N#define CYREG_B1_P3_U1_DCFG0 0x400116e0u
N#define CYREG_B1_P3_U1_DCFG1 0x400116e2u
N#define CYREG_B1_P3_U1_DCFG2 0x400116e4u
N#define CYREG_B1_P3_U1_DCFG3 0x400116e6u
N#define CYREG_B1_P3_U1_DCFG4 0x400116e8u
N#define CYREG_B1_P3_U1_DCFG5 0x400116eau
N#define CYREG_B1_P3_U1_DCFG6 0x400116ecu
N#define CYREG_B1_P3_U1_DCFG7 0x400116eeu
N#define CYDEV_UCFG_B1_P3_ROUTE_BASE 0x40011700u
N#define CYDEV_UCFG_B1_P3_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B1_P4_BASE 0x40011800u
N#define CYDEV_UCFG_B1_P4_SIZE 0x000001efu
N#define CYDEV_UCFG_B1_P4_U0_BASE 0x40011800u
N#define CYDEV_UCFG_B1_P4_U0_SIZE 0x00000070u
N#define CYREG_B1_P4_U0_PLD_IT0 0x40011800u
N#define CYREG_B1_P4_U0_PLD_IT1 0x40011804u
N#define CYREG_B1_P4_U0_PLD_IT2 0x40011808u
N#define CYREG_B1_P4_U0_PLD_IT3 0x4001180cu
N#define CYREG_B1_P4_U0_PLD_IT4 0x40011810u
N#define CYREG_B1_P4_U0_PLD_IT5 0x40011814u
N#define CYREG_B1_P4_U0_PLD_IT6 0x40011818u
N#define CYREG_B1_P4_U0_PLD_IT7 0x4001181cu
N#define CYREG_B1_P4_U0_PLD_IT8 0x40011820u
N#define CYREG_B1_P4_U0_PLD_IT9 0x40011824u
N#define CYREG_B1_P4_U0_PLD_IT10 0x40011828u
N#define CYREG_B1_P4_U0_PLD_IT11 0x4001182cu
N#define CYREG_B1_P4_U0_PLD_ORT0 0x40011830u
N#define CYREG_B1_P4_U0_PLD_ORT1 0x40011832u
N#define CYREG_B1_P4_U0_PLD_ORT2 0x40011834u
N#define CYREG_B1_P4_U0_PLD_ORT3 0x40011836u
N#define CYREG_B1_P4_U0_MC_CFG_CEN_CONST 0x40011838u
N#define CYREG_B1_P4_U0_MC_CFG_XORFB 0x4001183au
N#define CYREG_B1_P4_U0_MC_CFG_SET_RESET 0x4001183cu
N#define CYREG_B1_P4_U0_MC_CFG_BYPASS 0x4001183eu
N#define CYREG_B1_P4_U0_CFG0 0x40011840u
N#define CYREG_B1_P4_U0_CFG1 0x40011841u
N#define CYREG_B1_P4_U0_CFG2 0x40011842u
N#define CYREG_B1_P4_U0_CFG3 0x40011843u
N#define CYREG_B1_P4_U0_CFG4 0x40011844u
N#define CYREG_B1_P4_U0_CFG5 0x40011845u
N#define CYREG_B1_P4_U0_CFG6 0x40011846u
N#define CYREG_B1_P4_U0_CFG7 0x40011847u
N#define CYREG_B1_P4_U0_CFG8 0x40011848u
N#define CYREG_B1_P4_U0_CFG9 0x40011849u
N#define CYREG_B1_P4_U0_CFG10 0x4001184au
N#define CYREG_B1_P4_U0_CFG11 0x4001184bu
N#define CYREG_B1_P4_U0_CFG12 0x4001184cu
N#define CYREG_B1_P4_U0_CFG13 0x4001184du
N#define CYREG_B1_P4_U0_CFG14 0x4001184eu
N#define CYREG_B1_P4_U0_CFG15 0x4001184fu
N#define CYREG_B1_P4_U0_CFG16 0x40011850u
N#define CYREG_B1_P4_U0_CFG17 0x40011851u
N#define CYREG_B1_P4_U0_CFG18 0x40011852u
N#define CYREG_B1_P4_U0_CFG19 0x40011853u
N#define CYREG_B1_P4_U0_CFG20 0x40011854u
N#define CYREG_B1_P4_U0_CFG21 0x40011855u
N#define CYREG_B1_P4_U0_CFG22 0x40011856u
N#define CYREG_B1_P4_U0_CFG23 0x40011857u
N#define CYREG_B1_P4_U0_CFG24 0x40011858u
N#define CYREG_B1_P4_U0_CFG25 0x40011859u
N#define CYREG_B1_P4_U0_CFG26 0x4001185au
N#define CYREG_B1_P4_U0_CFG27 0x4001185bu
N#define CYREG_B1_P4_U0_CFG28 0x4001185cu
N#define CYREG_B1_P4_U0_CFG29 0x4001185du
N#define CYREG_B1_P4_U0_CFG30 0x4001185eu
N#define CYREG_B1_P4_U0_CFG31 0x4001185fu
N#define CYREG_B1_P4_U0_DCFG0 0x40011860u
N#define CYREG_B1_P4_U0_DCFG1 0x40011862u
N#define CYREG_B1_P4_U0_DCFG2 0x40011864u
N#define CYREG_B1_P4_U0_DCFG3 0x40011866u
N#define CYREG_B1_P4_U0_DCFG4 0x40011868u
N#define CYREG_B1_P4_U0_DCFG5 0x4001186au
N#define CYREG_B1_P4_U0_DCFG6 0x4001186cu
N#define CYREG_B1_P4_U0_DCFG7 0x4001186eu
N#define CYDEV_UCFG_B1_P4_U1_BASE 0x40011880u
N#define CYDEV_UCFG_B1_P4_U1_SIZE 0x00000070u
N#define CYREG_B1_P4_U1_PLD_IT0 0x40011880u
N#define CYREG_B1_P4_U1_PLD_IT1 0x40011884u
N#define CYREG_B1_P4_U1_PLD_IT2 0x40011888u
N#define CYREG_B1_P4_U1_PLD_IT3 0x4001188cu
N#define CYREG_B1_P4_U1_PLD_IT4 0x40011890u
N#define CYREG_B1_P4_U1_PLD_IT5 0x40011894u
N#define CYREG_B1_P4_U1_PLD_IT6 0x40011898u
N#define CYREG_B1_P4_U1_PLD_IT7 0x4001189cu
N#define CYREG_B1_P4_U1_PLD_IT8 0x400118a0u
N#define CYREG_B1_P4_U1_PLD_IT9 0x400118a4u
N#define CYREG_B1_P4_U1_PLD_IT10 0x400118a8u
N#define CYREG_B1_P4_U1_PLD_IT11 0x400118acu
N#define CYREG_B1_P4_U1_PLD_ORT0 0x400118b0u
N#define CYREG_B1_P4_U1_PLD_ORT1 0x400118b2u
N#define CYREG_B1_P4_U1_PLD_ORT2 0x400118b4u
N#define CYREG_B1_P4_U1_PLD_ORT3 0x400118b6u
N#define CYREG_B1_P4_U1_MC_CFG_CEN_CONST 0x400118b8u
N#define CYREG_B1_P4_U1_MC_CFG_XORFB 0x400118bau
N#define CYREG_B1_P4_U1_MC_CFG_SET_RESET 0x400118bcu
N#define CYREG_B1_P4_U1_MC_CFG_BYPASS 0x400118beu
N#define CYREG_B1_P4_U1_CFG0 0x400118c0u
N#define CYREG_B1_P4_U1_CFG1 0x400118c1u
N#define CYREG_B1_P4_U1_CFG2 0x400118c2u
N#define CYREG_B1_P4_U1_CFG3 0x400118c3u
N#define CYREG_B1_P4_U1_CFG4 0x400118c4u
N#define CYREG_B1_P4_U1_CFG5 0x400118c5u
N#define CYREG_B1_P4_U1_CFG6 0x400118c6u
N#define CYREG_B1_P4_U1_CFG7 0x400118c7u
N#define CYREG_B1_P4_U1_CFG8 0x400118c8u
N#define CYREG_B1_P4_U1_CFG9 0x400118c9u
N#define CYREG_B1_P4_U1_CFG10 0x400118cau
N#define CYREG_B1_P4_U1_CFG11 0x400118cbu
N#define CYREG_B1_P4_U1_CFG12 0x400118ccu
N#define CYREG_B1_P4_U1_CFG13 0x400118cdu
N#define CYREG_B1_P4_U1_CFG14 0x400118ceu
N#define CYREG_B1_P4_U1_CFG15 0x400118cfu
N#define CYREG_B1_P4_U1_CFG16 0x400118d0u
N#define CYREG_B1_P4_U1_CFG17 0x400118d1u
N#define CYREG_B1_P4_U1_CFG18 0x400118d2u
N#define CYREG_B1_P4_U1_CFG19 0x400118d3u
N#define CYREG_B1_P4_U1_CFG20 0x400118d4u
N#define CYREG_B1_P4_U1_CFG21 0x400118d5u
N#define CYREG_B1_P4_U1_CFG22 0x400118d6u
N#define CYREG_B1_P4_U1_CFG23 0x400118d7u
N#define CYREG_B1_P4_U1_CFG24 0x400118d8u
N#define CYREG_B1_P4_U1_CFG25 0x400118d9u
N#define CYREG_B1_P4_U1_CFG26 0x400118dau
N#define CYREG_B1_P4_U1_CFG27 0x400118dbu
N#define CYREG_B1_P4_U1_CFG28 0x400118dcu
N#define CYREG_B1_P4_U1_CFG29 0x400118ddu
N#define CYREG_B1_P4_U1_CFG30 0x400118deu
N#define CYREG_B1_P4_U1_CFG31 0x400118dfu
N#define CYREG_B1_P4_U1_DCFG0 0x400118e0u
N#define CYREG_B1_P4_U1_DCFG1 0x400118e2u
N#define CYREG_B1_P4_U1_DCFG2 0x400118e4u
N#define CYREG_B1_P4_U1_DCFG3 0x400118e6u
N#define CYREG_B1_P4_U1_DCFG4 0x400118e8u
N#define CYREG_B1_P4_U1_DCFG5 0x400118eau
N#define CYREG_B1_P4_U1_DCFG6 0x400118ecu
N#define CYREG_B1_P4_U1_DCFG7 0x400118eeu
N#define CYDEV_UCFG_B1_P4_ROUTE_BASE 0x40011900u
N#define CYDEV_UCFG_B1_P4_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_B1_P5_BASE 0x40011a00u
N#define CYDEV_UCFG_B1_P5_SIZE 0x000001efu
N#define CYDEV_UCFG_B1_P5_U0_BASE 0x40011a00u
N#define CYDEV_UCFG_B1_P5_U0_SIZE 0x00000070u
N#define CYREG_B1_P5_U0_PLD_IT0 0x40011a00u
N#define CYREG_B1_P5_U0_PLD_IT1 0x40011a04u
N#define CYREG_B1_P5_U0_PLD_IT2 0x40011a08u
N#define CYREG_B1_P5_U0_PLD_IT3 0x40011a0cu
N#define CYREG_B1_P5_U0_PLD_IT4 0x40011a10u
N#define CYREG_B1_P5_U0_PLD_IT5 0x40011a14u
N#define CYREG_B1_P5_U0_PLD_IT6 0x40011a18u
N#define CYREG_B1_P5_U0_PLD_IT7 0x40011a1cu
N#define CYREG_B1_P5_U0_PLD_IT8 0x40011a20u
N#define CYREG_B1_P5_U0_PLD_IT9 0x40011a24u
N#define CYREG_B1_P5_U0_PLD_IT10 0x40011a28u
N#define CYREG_B1_P5_U0_PLD_IT11 0x40011a2cu
N#define CYREG_B1_P5_U0_PLD_ORT0 0x40011a30u
N#define CYREG_B1_P5_U0_PLD_ORT1 0x40011a32u
N#define CYREG_B1_P5_U0_PLD_ORT2 0x40011a34u
N#define CYREG_B1_P5_U0_PLD_ORT3 0x40011a36u
N#define CYREG_B1_P5_U0_MC_CFG_CEN_CONST 0x40011a38u
N#define CYREG_B1_P5_U0_MC_CFG_XORFB 0x40011a3au
N#define CYREG_B1_P5_U0_MC_CFG_SET_RESET 0x40011a3cu
N#define CYREG_B1_P5_U0_MC_CFG_BYPASS 0x40011a3eu
N#define CYREG_B1_P5_U0_CFG0 0x40011a40u
N#define CYREG_B1_P5_U0_CFG1 0x40011a41u
N#define CYREG_B1_P5_U0_CFG2 0x40011a42u
N#define CYREG_B1_P5_U0_CFG3 0x40011a43u
N#define CYREG_B1_P5_U0_CFG4 0x40011a44u
N#define CYREG_B1_P5_U0_CFG5 0x40011a45u
N#define CYREG_B1_P5_U0_CFG6 0x40011a46u
N#define CYREG_B1_P5_U0_CFG7 0x40011a47u
N#define CYREG_B1_P5_U0_CFG8 0x40011a48u
N#define CYREG_B1_P5_U0_CFG9 0x40011a49u
N#define CYREG_B1_P5_U0_CFG10 0x40011a4au
N#define CYREG_B1_P5_U0_CFG11 0x40011a4bu
N#define CYREG_B1_P5_U0_CFG12 0x40011a4cu
N#define CYREG_B1_P5_U0_CFG13 0x40011a4du
N#define CYREG_B1_P5_U0_CFG14 0x40011a4eu
N#define CYREG_B1_P5_U0_CFG15 0x40011a4fu
N#define CYREG_B1_P5_U0_CFG16 0x40011a50u
N#define CYREG_B1_P5_U0_CFG17 0x40011a51u
N#define CYREG_B1_P5_U0_CFG18 0x40011a52u
N#define CYREG_B1_P5_U0_CFG19 0x40011a53u
N#define CYREG_B1_P5_U0_CFG20 0x40011a54u
N#define CYREG_B1_P5_U0_CFG21 0x40011a55u
N#define CYREG_B1_P5_U0_CFG22 0x40011a56u
N#define CYREG_B1_P5_U0_CFG23 0x40011a57u
N#define CYREG_B1_P5_U0_CFG24 0x40011a58u
N#define CYREG_B1_P5_U0_CFG25 0x40011a59u
N#define CYREG_B1_P5_U0_CFG26 0x40011a5au
N#define CYREG_B1_P5_U0_CFG27 0x40011a5bu
N#define CYREG_B1_P5_U0_CFG28 0x40011a5cu
N#define CYREG_B1_P5_U0_CFG29 0x40011a5du
N#define CYREG_B1_P5_U0_CFG30 0x40011a5eu
N#define CYREG_B1_P5_U0_CFG31 0x40011a5fu
N#define CYREG_B1_P5_U0_DCFG0 0x40011a60u
N#define CYREG_B1_P5_U0_DCFG1 0x40011a62u
N#define CYREG_B1_P5_U0_DCFG2 0x40011a64u
N#define CYREG_B1_P5_U0_DCFG3 0x40011a66u
N#define CYREG_B1_P5_U0_DCFG4 0x40011a68u
N#define CYREG_B1_P5_U0_DCFG5 0x40011a6au
N#define CYREG_B1_P5_U0_DCFG6 0x40011a6cu
N#define CYREG_B1_P5_U0_DCFG7 0x40011a6eu
N#define CYDEV_UCFG_B1_P5_U1_BASE 0x40011a80u
N#define CYDEV_UCFG_B1_P5_U1_SIZE 0x00000070u
N#define CYREG_B1_P5_U1_PLD_IT0 0x40011a80u
N#define CYREG_B1_P5_U1_PLD_IT1 0x40011a84u
N#define CYREG_B1_P5_U1_PLD_IT2 0x40011a88u
N#define CYREG_B1_P5_U1_PLD_IT3 0x40011a8cu
N#define CYREG_B1_P5_U1_PLD_IT4 0x40011a90u
N#define CYREG_B1_P5_U1_PLD_IT5 0x40011a94u
N#define CYREG_B1_P5_U1_PLD_IT6 0x40011a98u
N#define CYREG_B1_P5_U1_PLD_IT7 0x40011a9cu
N#define CYREG_B1_P5_U1_PLD_IT8 0x40011aa0u
N#define CYREG_B1_P5_U1_PLD_IT9 0x40011aa4u
N#define CYREG_B1_P5_U1_PLD_IT10 0x40011aa8u
N#define CYREG_B1_P5_U1_PLD_IT11 0x40011aacu
N#define CYREG_B1_P5_U1_PLD_ORT0 0x40011ab0u
N#define CYREG_B1_P5_U1_PLD_ORT1 0x40011ab2u
N#define CYREG_B1_P5_U1_PLD_ORT2 0x40011ab4u
N#define CYREG_B1_P5_U1_PLD_ORT3 0x40011ab6u
N#define CYREG_B1_P5_U1_MC_CFG_CEN_CONST 0x40011ab8u
N#define CYREG_B1_P5_U1_MC_CFG_XORFB 0x40011abau
N#define CYREG_B1_P5_U1_MC_CFG_SET_RESET 0x40011abcu
N#define CYREG_B1_P5_U1_MC_CFG_BYPASS 0x40011abeu
N#define CYREG_B1_P5_U1_CFG0 0x40011ac0u
N#define CYREG_B1_P5_U1_CFG1 0x40011ac1u
N#define CYREG_B1_P5_U1_CFG2 0x40011ac2u
N#define CYREG_B1_P5_U1_CFG3 0x40011ac3u
N#define CYREG_B1_P5_U1_CFG4 0x40011ac4u
N#define CYREG_B1_P5_U1_CFG5 0x40011ac5u
N#define CYREG_B1_P5_U1_CFG6 0x40011ac6u
N#define CYREG_B1_P5_U1_CFG7 0x40011ac7u
N#define CYREG_B1_P5_U1_CFG8 0x40011ac8u
N#define CYREG_B1_P5_U1_CFG9 0x40011ac9u
N#define CYREG_B1_P5_U1_CFG10 0x40011acau
N#define CYREG_B1_P5_U1_CFG11 0x40011acbu
N#define CYREG_B1_P5_U1_CFG12 0x40011accu
N#define CYREG_B1_P5_U1_CFG13 0x40011acdu
N#define CYREG_B1_P5_U1_CFG14 0x40011aceu
N#define CYREG_B1_P5_U1_CFG15 0x40011acfu
N#define CYREG_B1_P5_U1_CFG16 0x40011ad0u
N#define CYREG_B1_P5_U1_CFG17 0x40011ad1u
N#define CYREG_B1_P5_U1_CFG18 0x40011ad2u
N#define CYREG_B1_P5_U1_CFG19 0x40011ad3u
N#define CYREG_B1_P5_U1_CFG20 0x40011ad4u
N#define CYREG_B1_P5_U1_CFG21 0x40011ad5u
N#define CYREG_B1_P5_U1_CFG22 0x40011ad6u
N#define CYREG_B1_P5_U1_CFG23 0x40011ad7u
N#define CYREG_B1_P5_U1_CFG24 0x40011ad8u
N#define CYREG_B1_P5_U1_CFG25 0x40011ad9u
N#define CYREG_B1_P5_U1_CFG26 0x40011adau
N#define CYREG_B1_P5_U1_CFG27 0x40011adbu
N#define CYREG_B1_P5_U1_CFG28 0x40011adcu
N#define CYREG_B1_P5_U1_CFG29 0x40011addu
N#define CYREG_B1_P5_U1_CFG30 0x40011adeu
N#define CYREG_B1_P5_U1_CFG31 0x40011adfu
N#define CYREG_B1_P5_U1_DCFG0 0x40011ae0u
N#define CYREG_B1_P5_U1_DCFG1 0x40011ae2u
N#define CYREG_B1_P5_U1_DCFG2 0x40011ae4u
N#define CYREG_B1_P5_U1_DCFG3 0x40011ae6u
N#define CYREG_B1_P5_U1_DCFG4 0x40011ae8u
N#define CYREG_B1_P5_U1_DCFG5 0x40011aeau
N#define CYREG_B1_P5_U1_DCFG6 0x40011aecu
N#define CYREG_B1_P5_U1_DCFG7 0x40011aeeu
N#define CYDEV_UCFG_B1_P5_ROUTE_BASE 0x40011b00u
N#define CYDEV_UCFG_B1_P5_ROUTE_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI0_BASE 0x40014000u
N#define CYDEV_UCFG_DSI0_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI1_BASE 0x40014100u
N#define CYDEV_UCFG_DSI1_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI2_BASE 0x40014200u
N#define CYDEV_UCFG_DSI2_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI3_BASE 0x40014300u
N#define CYDEV_UCFG_DSI3_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI4_BASE 0x40014400u
N#define CYDEV_UCFG_DSI4_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI5_BASE 0x40014500u
N#define CYDEV_UCFG_DSI5_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI6_BASE 0x40014600u
N#define CYDEV_UCFG_DSI6_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI7_BASE 0x40014700u
N#define CYDEV_UCFG_DSI7_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI8_BASE 0x40014800u
N#define CYDEV_UCFG_DSI8_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI9_BASE 0x40014900u
N#define CYDEV_UCFG_DSI9_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI12_BASE 0x40014c00u
N#define CYDEV_UCFG_DSI12_SIZE 0x000000efu
N#define CYDEV_UCFG_DSI13_BASE 0x40014d00u
N#define CYDEV_UCFG_DSI13_SIZE 0x000000efu
N#define CYDEV_UCFG_BCTL0_BASE 0x40015000u
N#define CYDEV_UCFG_BCTL0_SIZE 0x00000010u
N#define CYREG_BCTL0_MDCLK_EN 0x40015000u
N#define CYREG_BCTL0_MBCLK_EN 0x40015001u
N#define CYREG_BCTL0_WAIT_CFG 0x40015002u
N#define CYREG_BCTL0_BANK_CTL 0x40015003u
N#define CYREG_BCTL0_UDB_TEST_3 0x40015007u
N#define CYREG_BCTL0_DCLK_EN0 0x40015008u
N#define CYREG_BCTL0_BCLK_EN0 0x40015009u
N#define CYREG_BCTL0_DCLK_EN1 0x4001500au
N#define CYREG_BCTL0_BCLK_EN1 0x4001500bu
N#define CYREG_BCTL0_DCLK_EN2 0x4001500cu
N#define CYREG_BCTL0_BCLK_EN2 0x4001500du
N#define CYREG_BCTL0_DCLK_EN3 0x4001500eu
N#define CYREG_BCTL0_BCLK_EN3 0x4001500fu
N#define CYDEV_UCFG_BCTL1_BASE 0x40015010u
N#define CYDEV_UCFG_BCTL1_SIZE 0x00000010u
N#define CYREG_BCTL1_MDCLK_EN 0x40015010u
N#define CYREG_BCTL1_MBCLK_EN 0x40015011u
N#define CYREG_BCTL1_WAIT_CFG 0x40015012u
N#define CYREG_BCTL1_BANK_CTL 0x40015013u
N#define CYREG_BCTL1_UDB_TEST_3 0x40015017u
N#define CYREG_BCTL1_DCLK_EN0 0x40015018u
N#define CYREG_BCTL1_BCLK_EN0 0x40015019u
N#define CYREG_BCTL1_DCLK_EN1 0x4001501au
N#define CYREG_BCTL1_BCLK_EN1 0x4001501bu
N#define CYREG_BCTL1_DCLK_EN2 0x4001501cu
N#define CYREG_BCTL1_BCLK_EN2 0x4001501du
N#define CYREG_BCTL1_DCLK_EN3 0x4001501eu
N#define CYREG_BCTL1_BCLK_EN3 0x4001501fu
N#define CYDEV_IDMUX_BASE 0x40015100u
N#define CYDEV_IDMUX_SIZE 0x00000016u
N#define CYREG_IDMUX_IRQ_CTL0 0x40015100u
N#define CYREG_IDMUX_IRQ_CTL1 0x40015101u
N#define CYREG_IDMUX_IRQ_CTL2 0x40015102u
N#define CYREG_IDMUX_IRQ_CTL3 0x40015103u
N#define CYREG_IDMUX_IRQ_CTL4 0x40015104u
N#define CYREG_IDMUX_IRQ_CTL5 0x40015105u
N#define CYREG_IDMUX_IRQ_CTL6 0x40015106u
N#define CYREG_IDMUX_IRQ_CTL7 0x40015107u
N#define CYREG_IDMUX_DRQ_CTL0 0x40015110u
N#define CYREG_IDMUX_DRQ_CTL1 0x40015111u
N#define CYREG_IDMUX_DRQ_CTL2 0x40015112u
N#define CYREG_IDMUX_DRQ_CTL3 0x40015113u
N#define CYREG_IDMUX_DRQ_CTL4 0x40015114u
N#define CYREG_IDMUX_DRQ_CTL5 0x40015115u
N#define CYDEV_CACHERAM_BASE 0x40030000u
N#define CYDEV_CACHERAM_SIZE 0x00000400u
N#define CYREG_CACHERAM_DATA_MBASE 0x40030000u
N#define CYREG_CACHERAM_DATA_MSIZE 0x00000400u
N#define CYDEV_SFR_BASE 0x40050100u
N#define CYDEV_SFR_SIZE 0x000000fbu
N#define CYREG_SFR_GPIO0 0x40050180u
N#define CYREG_SFR_GPIRD0 0x40050189u
N#define CYREG_SFR_GPIO0_SEL 0x4005018au
N#define CYREG_SFR_GPIO1 0x40050190u
N#define CYREG_SFR_GPIRD1 0x40050191u
N#define CYREG_SFR_GPIO2 0x40050198u
N#define CYREG_SFR_GPIRD2 0x40050199u
N#define CYREG_SFR_GPIO2_SEL 0x4005019au
N#define CYREG_SFR_GPIO1_SEL 0x400501a2u
N#define CYREG_SFR_GPIO3 0x400501b0u
N#define CYREG_SFR_GPIRD3 0x400501b1u
N#define CYREG_SFR_GPIO3_SEL 0x400501b2u
N#define CYREG_SFR_GPIO4 0x400501c0u
N#define CYREG_SFR_GPIRD4 0x400501c1u
N#define CYREG_SFR_GPIO4_SEL 0x400501c2u
N#define CYREG_SFR_GPIO5 0x400501c8u
N#define CYREG_SFR_GPIRD5 0x400501c9u
N#define CYREG_SFR_GPIO5_SEL 0x400501cau
N#define CYREG_SFR_GPIO6 0x400501d8u
N#define CYREG_SFR_GPIRD6 0x400501d9u
N#define CYREG_SFR_GPIO6_SEL 0x400501dau
N#define CYREG_SFR_GPIO12 0x400501e8u
N#define CYREG_SFR_GPIRD12 0x400501e9u
N#define CYREG_SFR_GPIO12_SEL 0x400501f2u
N#define CYREG_SFR_GPIO15 0x400501f8u
N#define CYREG_SFR_GPIRD15 0x400501f9u
N#define CYREG_SFR_GPIO15_SEL 0x400501fau
N#define CYDEV_P3BA_BASE 0x40050300u
N#define CYDEV_P3BA_SIZE 0x0000002bu
N#define CYREG_P3BA_Y_START 0x40050300u
N#define CYREG_P3BA_YROLL 0x40050301u
N#define CYREG_P3BA_YCFG 0x40050302u
N#define CYREG_P3BA_X_START1 0x40050303u
N#define CYREG_P3BA_X_START2 0x40050304u
N#define CYREG_P3BA_XROLL1 0x40050305u
N#define CYREG_P3BA_XROLL2 0x40050306u
N#define CYREG_P3BA_XINC 0x40050307u
N#define CYREG_P3BA_XCFG 0x40050308u
N#define CYREG_P3BA_OFFSETADDR1 0x40050309u
N#define CYREG_P3BA_OFFSETADDR2 0x4005030au
N#define CYREG_P3BA_OFFSETADDR3 0x4005030bu
N#define CYREG_P3BA_ABSADDR1 0x4005030cu
N#define CYREG_P3BA_ABSADDR2 0x4005030du
N#define CYREG_P3BA_ABSADDR3 0x4005030eu
N#define CYREG_P3BA_ABSADDR4 0x4005030fu
N#define CYREG_P3BA_DATCFG1 0x40050310u
N#define CYREG_P3BA_DATCFG2 0x40050311u
N#define CYREG_P3BA_CMP_RSLT1 0x40050314u
N#define CYREG_P3BA_CMP_RSLT2 0x40050315u
N#define CYREG_P3BA_CMP_RSLT3 0x40050316u
N#define CYREG_P3BA_CMP_RSLT4 0x40050317u
N#define CYREG_P3BA_DATA_REG1 0x40050318u
N#define CYREG_P3BA_DATA_REG2 0x40050319u
N#define CYREG_P3BA_DATA_REG3 0x4005031au
N#define CYREG_P3BA_DATA_REG4 0x4005031bu
N#define CYREG_P3BA_EXP_DATA1 0x4005031cu
N#define CYREG_P3BA_EXP_DATA2 0x4005031du
N#define CYREG_P3BA_EXP_DATA3 0x4005031eu
N#define CYREG_P3BA_EXP_DATA4 0x4005031fu
N#define CYREG_P3BA_MSTR_HRDATA1 0x40050320u
N#define CYREG_P3BA_MSTR_HRDATA2 0x40050321u
N#define CYREG_P3BA_MSTR_HRDATA3 0x40050322u
N#define CYREG_P3BA_MSTR_HRDATA4 0x40050323u
N#define CYREG_P3BA_BIST_EN 0x40050324u
N#define CYREG_P3BA_PHUB_MASTER_SSR 0x40050325u
N#define CYREG_P3BA_SEQCFG1 0x40050326u
N#define CYREG_P3BA_SEQCFG2 0x40050327u
N#define CYREG_P3BA_Y_CURR 0x40050328u
N#define CYREG_P3BA_X_CURR1 0x40050329u
N#define CYREG_P3BA_X_CURR2 0x4005032au
N#define CYDEV_PANTHER_BASE 0x40080000u
N#define CYDEV_PANTHER_SIZE 0x00000020u
N#define CYREG_PANTHER_STCALIB_CFG 0x40080000u
N#define CYREG_PANTHER_WAITPIPE 0x40080004u
N#define CYREG_PANTHER_TRACE_CFG 0x40080008u
N#define CYREG_PANTHER_DBG_CFG 0x4008000cu
N#define CYREG_PANTHER_CM3_LCKRST_STAT 0x40080018u
N#define CYREG_PANTHER_DEVICE_ID 0x4008001cu
N#define CYDEV_FLSECC_BASE 0x48000000u
N#define CYDEV_FLSECC_SIZE 0x00008000u
N#define CYREG_FLSECC_DATA_MBASE 0x48000000u
N#define CYREG_FLSECC_DATA_MSIZE 0x00008000u
N#define CYDEV_FLSHID_BASE 0x49000000u
N#define CYDEV_FLSHID_SIZE 0x00000200u
N#define CYREG_FLSHID_RSVD_MBASE 0x49000000u
N#define CYREG_FLSHID_RSVD_MSIZE 0x00000080u
N#define CYREG_FLSHID_CUST_MDATA_MBASE 0x49000080u
N#define CYREG_FLSHID_CUST_MDATA_MSIZE 0x00000080u
N#define CYDEV_FLSHID_CUST_TABLES_BASE 0x49000100u
N#define CYDEV_FLSHID_CUST_TABLES_SIZE 0x00000040u
N#define CYREG_FLSHID_CUST_TABLES_Y_LOC 0x49000100u
N#define CYREG_FLSHID_CUST_TABLES_X_LOC 0x49000101u
N#define CYREG_FLSHID_CUST_TABLES_WAFER_NUM 0x49000102u
N#define CYREG_FLSHID_CUST_TABLES_LOT_LSB 0x49000103u
N#define CYREG_FLSHID_CUST_TABLES_LOT_MSB 0x49000104u
N#define CYREG_FLSHID_CUST_TABLES_WRK_WK 0x49000105u
N#define CYREG_FLSHID_CUST_TABLES_FAB_YR 0x49000106u
N#define CYREG_FLSHID_CUST_TABLES_MINOR 0x49000107u
N#define CYREG_FLSHID_CUST_TABLES_IMO_3MHZ 0x49000108u
N#define CYREG_FLSHID_CUST_TABLES_IMO_6MHZ 0x49000109u
N#define CYREG_FLSHID_CUST_TABLES_IMO_12MHZ 0x4900010au
N#define CYREG_FLSHID_CUST_TABLES_IMO_24MHZ 0x4900010bu
N#define CYREG_FLSHID_CUST_TABLES_IMO_67MHZ 0x4900010cu
N#define CYREG_FLSHID_CUST_TABLES_IMO_80MHZ 0x4900010du
N#define CYREG_FLSHID_CUST_TABLES_IMO_92MHZ 0x4900010eu
N#define CYREG_FLSHID_CUST_TABLES_IMO_USB 0x4900010fu
N#define CYREG_FLSHID_CUST_TABLES_CMP0_TR0_HS 0x49000110u
N#define CYREG_FLSHID_CUST_TABLES_CMP1_TR0_HS 0x49000111u
N#define CYREG_FLSHID_CUST_TABLES_CMP2_TR0_HS 0x49000112u
N#define CYREG_FLSHID_CUST_TABLES_CMP3_TR0_HS 0x49000113u
N#define CYREG_FLSHID_CUST_TABLES_CMP0_TR1_HS 0x49000114u
N#define CYREG_FLSHID_CUST_TABLES_CMP1_TR1_HS 0x49000115u
N#define CYREG_FLSHID_CUST_TABLES_CMP2_TR1_HS 0x49000116u
N#define CYREG_FLSHID_CUST_TABLES_CMP3_TR1_HS 0x49000117u
N#define CYREG_FLSHID_CUST_TABLES_DEC_M1 0x49000118u
N#define CYREG_FLSHID_CUST_TABLES_DEC_M2 0x49000119u
N#define CYREG_FLSHID_CUST_TABLES_DEC_M3 0x4900011au
N#define CYREG_FLSHID_CUST_TABLES_DEC_M4 0x4900011bu
N#define CYREG_FLSHID_CUST_TABLES_DEC_M5 0x4900011cu
N#define CYREG_FLSHID_CUST_TABLES_DEC_M6 0x4900011du
N#define CYREG_FLSHID_CUST_TABLES_DEC_M7 0x4900011eu
N#define CYREG_FLSHID_CUST_TABLES_DEC_M8 0x4900011fu
N#define CYREG_FLSHID_CUST_TABLES_DAC0_M1 0x49000120u
N#define CYREG_FLSHID_CUST_TABLES_DAC0_M2 0x49000121u
N#define CYREG_FLSHID_CUST_TABLES_DAC0_M3 0x49000122u
N#define CYREG_FLSHID_CUST_TABLES_DAC0_M4 0x49000123u
N#define CYREG_FLSHID_CUST_TABLES_DAC0_M5 0x49000124u
N#define CYREG_FLSHID_CUST_TABLES_DAC0_M6 0x49000125u
N#define CYREG_FLSHID_CUST_TABLES_DAC0_M7 0x49000126u
N#define CYREG_FLSHID_CUST_TABLES_DAC0_M8 0x49000127u
N#define CYREG_FLSHID_CUST_TABLES_DAC2_M1 0x49000128u
N#define CYREG_FLSHID_CUST_TABLES_DAC2_M2 0x49000129u
N#define CYREG_FLSHID_CUST_TABLES_DAC2_M3 0x4900012au
N#define CYREG_FLSHID_CUST_TABLES_DAC2_M4 0x4900012bu
N#define CYREG_FLSHID_CUST_TABLES_DAC2_M5 0x4900012cu
N#define CYREG_FLSHID_CUST_TABLES_DAC2_M6 0x4900012du
N#define CYREG_FLSHID_CUST_TABLES_DAC2_M7 0x4900012eu
N#define CYREG_FLSHID_CUST_TABLES_DAC2_M8 0x4900012fu
N#define CYREG_FLSHID_CUST_TABLES_DAC1_M1 0x49000130u
N#define CYREG_FLSHID_CUST_TABLES_DAC1_M2 0x49000131u
N#define CYREG_FLSHID_CUST_TABLES_DAC1_M3 0x49000132u
N#define CYREG_FLSHID_CUST_TABLES_DAC1_M4 0x49000133u
N#define CYREG_FLSHID_CUST_TABLES_DAC1_M5 0x49000134u
N#define CYREG_FLSHID_CUST_TABLES_DAC1_M6 0x49000135u
N#define CYREG_FLSHID_CUST_TABLES_DAC1_M7 0x49000136u
N#define CYREG_FLSHID_CUST_TABLES_DAC1_M8 0x49000137u
N#define CYREG_FLSHID_CUST_TABLES_DAC3_M1 0x49000138u
N#define CYREG_FLSHID_CUST_TABLES_DAC3_M2 0x49000139u
N#define CYREG_FLSHID_CUST_TABLES_DAC3_M3 0x4900013au
N#define CYREG_FLSHID_CUST_TABLES_DAC3_M4 0x4900013bu
N#define CYREG_FLSHID_CUST_TABLES_DAC3_M5 0x4900013cu
N#define CYREG_FLSHID_CUST_TABLES_DAC3_M6 0x4900013du
N#define CYREG_FLSHID_CUST_TABLES_DAC3_M7 0x4900013eu
N#define CYREG_FLSHID_CUST_TABLES_DAC3_M8 0x4900013fu
N#define CYDEV_FLSHID_MFG_CFG_BASE 0x49000180u
N#define CYDEV_FLSHID_MFG_CFG_SIZE 0x00000080u
N#define CYREG_FLSHID_MFG_CFG_IMO_TR1 0x49000188u
N#define CYREG_FLSHID_MFG_CFG_CMP0_TR0 0x490001acu
N#define CYREG_FLSHID_MFG_CFG_CMP1_TR0 0x490001aeu
N#define CYREG_FLSHID_MFG_CFG_CMP2_TR0 0x490001b0u
N#define CYREG_FLSHID_MFG_CFG_CMP3_TR0 0x490001b2u
N#define CYREG_FLSHID_MFG_CFG_CMP0_TR1 0x490001b4u
N#define CYREG_FLSHID_MFG_CFG_CMP1_TR1 0x490001b6u
N#define CYREG_FLSHID_MFG_CFG_CMP2_TR1 0x490001b8u
N#define CYREG_FLSHID_MFG_CFG_CMP3_TR1 0x490001bau
N#define CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM 0x490001ceu
N#define CYDEV_EXTMEM_BASE 0x60000000u
N#define CYDEV_EXTMEM_SIZE 0x00800000u
N#define CYREG_EXTMEM_DATA_MBASE 0x60000000u
N#define CYREG_EXTMEM_DATA_MSIZE 0x00800000u
N#define CYDEV_ITM_BASE 0xe0000000u
N#define CYDEV_ITM_SIZE 0x00001000u
N#define CYREG_ITM_TRACE_EN 0xe0000e00u
N#define CYREG_ITM_TRACE_PRIVILEGE 0xe0000e40u
N#define CYREG_ITM_TRACE_CTRL 0xe0000e80u
N#define CYREG_ITM_LOCK_ACCESS 0xe0000fb0u
N#define CYREG_ITM_LOCK_STATUS 0xe0000fb4u
N#define CYREG_ITM_PID4 0xe0000fd0u
N#define CYREG_ITM_PID5 0xe0000fd4u
N#define CYREG_ITM_PID6 0xe0000fd8u
N#define CYREG_ITM_PID7 0xe0000fdcu
N#define CYREG_ITM_PID0 0xe0000fe0u
N#define CYREG_ITM_PID1 0xe0000fe4u
N#define CYREG_ITM_PID2 0xe0000fe8u
N#define CYREG_ITM_PID3 0xe0000fecu
N#define CYREG_ITM_CID0 0xe0000ff0u
N#define CYREG_ITM_CID1 0xe0000ff4u
N#define CYREG_ITM_CID2 0xe0000ff8u
N#define CYREG_ITM_CID3 0xe0000ffcu
N#define CYDEV_DWT_BASE 0xe0001000u
N#define CYDEV_DWT_SIZE 0x0000005cu
N#define CYREG_DWT_CTRL 0xe0001000u
N#define CYREG_DWT_CYCLE_COUNT 0xe0001004u
N#define CYREG_DWT_CPI_COUNT 0xe0001008u
N#define CYREG_DWT_EXC_OVHD_COUNT 0xe000100cu
N#define CYREG_DWT_SLEEP_COUNT 0xe0001010u
N#define CYREG_DWT_LSU_COUNT 0xe0001014u
N#define CYREG_DWT_FOLD_COUNT 0xe0001018u
N#define CYREG_DWT_PC_SAMPLE 0xe000101cu
N#define CYREG_DWT_COMP_0 0xe0001020u
N#define CYREG_DWT_MASK_0 0xe0001024u
N#define CYREG_DWT_FUNCTION_0 0xe0001028u
N#define CYREG_DWT_COMP_1 0xe0001030u
N#define CYREG_DWT_MASK_1 0xe0001034u
N#define CYREG_DWT_FUNCTION_1 0xe0001038u
N#define CYREG_DWT_COMP_2 0xe0001040u
N#define CYREG_DWT_MASK_2 0xe0001044u
N#define CYREG_DWT_FUNCTION_2 0xe0001048u
N#define CYREG_DWT_COMP_3 0xe0001050u
N#define CYREG_DWT_MASK_3 0xe0001054u
N#define CYREG_DWT_FUNCTION_3 0xe0001058u
N#define CYDEV_FPB_BASE 0xe0002000u
N#define CYDEV_FPB_SIZE 0x00001000u
N#define CYREG_FPB_CTRL 0xe0002000u
N#define CYREG_FPB_REMAP 0xe0002004u
N#define CYREG_FPB_FP_COMP_0 0xe0002008u
N#define CYREG_FPB_FP_COMP_1 0xe000200cu
N#define CYREG_FPB_FP_COMP_2 0xe0002010u
N#define CYREG_FPB_FP_COMP_3 0xe0002014u
N#define CYREG_FPB_FP_COMP_4 0xe0002018u
N#define CYREG_FPB_FP_COMP_5 0xe000201cu
N#define CYREG_FPB_FP_COMP_6 0xe0002020u
N#define CYREG_FPB_FP_COMP_7 0xe0002024u
N#define CYREG_FPB_PID4 0xe0002fd0u
N#define CYREG_FPB_PID5 0xe0002fd4u
N#define CYREG_FPB_PID6 0xe0002fd8u
N#define CYREG_FPB_PID7 0xe0002fdcu
N#define CYREG_FPB_PID0 0xe0002fe0u
N#define CYREG_FPB_PID1 0xe0002fe4u
N#define CYREG_FPB_PID2 0xe0002fe8u
N#define CYREG_FPB_PID3 0xe0002fecu
N#define CYREG_FPB_CID0 0xe0002ff0u
N#define CYREG_FPB_CID1 0xe0002ff4u
N#define CYREG_FPB_CID2 0xe0002ff8u
N#define CYREG_FPB_CID3 0xe0002ffcu
N#define CYDEV_NVIC_BASE 0xe000e000u
N#define CYDEV_NVIC_SIZE 0x00000d3cu
N#define CYREG_NVIC_INT_CTL_TYPE 0xe000e004u
N#define CYREG_NVIC_SYSTICK_CTL 0xe000e010u
N#define CYREG_NVIC_SYSTICK_RELOAD 0xe000e014u
N#define CYREG_NVIC_SYSTICK_CURRENT 0xe000e018u
N#define CYREG_NVIC_SYSTICK_CAL 0xe000e01cu
N#define CYREG_NVIC_SETENA0 0xe000e100u
N#define CYREG_NVIC_CLRENA0 0xe000e180u
N#define CYREG_NVIC_SETPEND0 0xe000e200u
N#define CYREG_NVIC_CLRPEND0 0xe000e280u
N#define CYREG_NVIC_ACTIVE0 0xe000e300u
N#define CYREG_NVIC_PRI_0 0xe000e400u
N#define CYREG_NVIC_PRI_1 0xe000e401u
N#define CYREG_NVIC_PRI_2 0xe000e402u
N#define CYREG_NVIC_PRI_3 0xe000e403u
N#define CYREG_NVIC_PRI_4 0xe000e404u
N#define CYREG_NVIC_PRI_5 0xe000e405u
N#define CYREG_NVIC_PRI_6 0xe000e406u
N#define CYREG_NVIC_PRI_7 0xe000e407u
N#define CYREG_NVIC_PRI_8 0xe000e408u
N#define CYREG_NVIC_PRI_9 0xe000e409u
N#define CYREG_NVIC_PRI_10 0xe000e40au
N#define CYREG_NVIC_PRI_11 0xe000e40bu
N#define CYREG_NVIC_PRI_12 0xe000e40cu
N#define CYREG_NVIC_PRI_13 0xe000e40du
N#define CYREG_NVIC_PRI_14 0xe000e40eu
N#define CYREG_NVIC_PRI_15 0xe000e40fu
N#define CYREG_NVIC_PRI_16 0xe000e410u
N#define CYREG_NVIC_PRI_17 0xe000e411u
N#define CYREG_NVIC_PRI_18 0xe000e412u
N#define CYREG_NVIC_PRI_19 0xe000e413u
N#define CYREG_NVIC_PRI_20 0xe000e414u
N#define CYREG_NVIC_PRI_21 0xe000e415u
N#define CYREG_NVIC_PRI_22 0xe000e416u
N#define CYREG_NVIC_PRI_23 0xe000e417u
N#define CYREG_NVIC_PRI_24 0xe000e418u
N#define CYREG_NVIC_PRI_25 0xe000e419u
N#define CYREG_NVIC_PRI_26 0xe000e41au
N#define CYREG_NVIC_PRI_27 0xe000e41bu
N#define CYREG_NVIC_PRI_28 0xe000e41cu
N#define CYREG_NVIC_PRI_29 0xe000e41du
N#define CYREG_NVIC_PRI_30 0xe000e41eu
N#define CYREG_NVIC_PRI_31 0xe000e41fu
N#define CYREG_NVIC_CPUID_BASE 0xe000ed00u
N#define CYREG_NVIC_INTR_CTRL_STATE 0xe000ed04u
N#define CYREG_NVIC_VECT_OFFSET 0xe000ed08u
N#define CYREG_NVIC_APPLN_INTR 0xe000ed0cu
N#define CYREG_NVIC_SYSTEM_CONTROL 0xe000ed10u
N#define CYREG_NVIC_CFG_CONTROL 0xe000ed14u
N#define CYREG_NVIC_SYS_PRIO_HANDLER_4_7 0xe000ed18u
N#define CYREG_NVIC_SYS_PRIO_HANDLER_8_11 0xe000ed1cu
N#define CYREG_NVIC_SYS_PRIO_HANDLER_12_15 0xe000ed20u
N#define CYREG_NVIC_SYS_HANDLER_CSR 0xe000ed24u
N#define CYREG_NVIC_MEMMAN_FAULT_STATUS 0xe000ed28u
N#define CYREG_NVIC_BUS_FAULT_STATUS 0xe000ed29u
N#define CYREG_NVIC_USAGE_FAULT_STATUS 0xe000ed2au
N#define CYREG_NVIC_HARD_FAULT_STATUS 0xe000ed2cu
N#define CYREG_NVIC_DEBUG_FAULT_STATUS 0xe000ed30u
N#define CYREG_NVIC_MEMMAN_FAULT_ADD 0xe000ed34u
N#define CYREG_NVIC_BUS_FAULT_ADD 0xe000ed38u
N#define CYDEV_CORE_DBG_BASE 0xe000edf0u
N#define CYDEV_CORE_DBG_SIZE 0x00000010u
N#define CYREG_CORE_DBG_DBG_HLT_CS 0xe000edf0u
N#define CYREG_CORE_DBG_DBG_REG_SEL 0xe000edf4u
N#define CYREG_CORE_DBG_DBG_REG_DATA 0xe000edf8u
N#define CYREG_CORE_DBG_EXC_MON_CTL 0xe000edfcu
N#define CYDEV_TPIU_BASE 0xe0040000u
N#define CYDEV_TPIU_SIZE 0x00001000u
N#define CYREG_TPIU_SUPPORTED_SYNC_PRT_SZ 0xe0040000u
N#define CYREG_TPIU_CURRENT_SYNC_PRT_SZ 0xe0040004u
N#define CYREG_TPIU_ASYNC_CLK_PRESCALER 0xe0040010u
N#define CYREG_TPIU_PROTOCOL 0xe00400f0u
N#define CYREG_TPIU_FORM_FLUSH_STAT 0xe0040300u
N#define CYREG_TPIU_FORM_FLUSH_CTRL 0xe0040304u
N#define CYREG_TPIU_TRIGGER 0xe0040ee8u
N#define CYREG_TPIU_ITETMDATA 0xe0040eecu
N#define CYREG_TPIU_ITATBCTR2 0xe0040ef0u
N#define CYREG_TPIU_ITATBCTR0 0xe0040ef8u
N#define CYREG_TPIU_ITITMDATA 0xe0040efcu
N#define CYREG_TPIU_ITCTRL 0xe0040f00u
N#define CYREG_TPIU_DEVID 0xe0040fc8u
N#define CYREG_TPIU_DEVTYPE 0xe0040fccu
N#define CYREG_TPIU_PID4 0xe0040fd0u
N#define CYREG_TPIU_PID5 0xe0040fd4u
N#define CYREG_TPIU_PID6 0xe0040fd8u
N#define CYREG_TPIU_PID7 0xe0040fdcu
N#define CYREG_TPIU_PID0 0xe0040fe0u
N#define CYREG_TPIU_PID1 0xe0040fe4u
N#define CYREG_TPIU_PID2 0xe0040fe8u
N#define CYREG_TPIU_PID3 0xe0040fecu
N#define CYREG_TPIU_CID0 0xe0040ff0u
N#define CYREG_TPIU_CID1 0xe0040ff4u
N#define CYREG_TPIU_CID2 0xe0040ff8u
N#define CYREG_TPIU_CID3 0xe0040ffcu
N#define CYDEV_ETM_BASE 0xe0041000u
N#define CYDEV_ETM_SIZE 0x00001000u
N#define CYREG_ETM_CTL 0xe0041000u
N#define CYREG_ETM_CFG_CODE 0xe0041004u
N#define CYREG_ETM_TRIG_EVENT 0xe0041008u
N#define CYREG_ETM_STATUS 0xe0041010u
N#define CYREG_ETM_SYS_CFG 0xe0041014u
N#define CYREG_ETM_TRACE_ENB_EVENT 0xe0041020u
N#define CYREG_ETM_TRACE_EN_CTRL1 0xe0041024u
N#define CYREG_ETM_FIFOFULL_LEVEL 0xe004102cu
N#define CYREG_ETM_SYNC_FREQ 0xe00411e0u
N#define CYREG_ETM_ETM_ID 0xe00411e4u
N#define CYREG_ETM_CFG_CODE_EXT 0xe00411e8u
N#define CYREG_ETM_TR_SS_EMBICE_CTRL 0xe00411f0u
N#define CYREG_ETM_CS_TRACE_ID 0xe0041200u
N#define CYREG_ETM_OS_LOCK_ACCESS 0xe0041300u
N#define CYREG_ETM_OS_LOCK_STATUS 0xe0041304u
N#define CYREG_ETM_PDSR 0xe0041314u
N#define CYREG_ETM_ITMISCIN 0xe0041ee0u
N#define CYREG_ETM_ITTRIGOUT 0xe0041ee8u
N#define CYREG_ETM_ITATBCTR2 0xe0041ef0u
N#define CYREG_ETM_ITATBCTR0 0xe0041ef8u
N#define CYREG_ETM_INT_MODE_CTRL 0xe0041f00u
N#define CYREG_ETM_CLM_TAG_SET 0xe0041fa0u
N#define CYREG_ETM_CLM_TAG_CLR 0xe0041fa4u
N#define CYREG_ETM_LOCK_ACCESS 0xe0041fb0u
N#define CYREG_ETM_LOCK_STATUS 0xe0041fb4u
N#define CYREG_ETM_AUTH_STATUS 0xe0041fb8u
N#define CYREG_ETM_DEV_TYPE 0xe0041fccu
N#define CYREG_ETM_PID4 0xe0041fd0u
N#define CYREG_ETM_PID5 0xe0041fd4u
N#define CYREG_ETM_PID6 0xe0041fd8u
N#define CYREG_ETM_PID7 0xe0041fdcu
N#define CYREG_ETM_PID0 0xe0041fe0u
N#define CYREG_ETM_PID1 0xe0041fe4u
N#define CYREG_ETM_PID2 0xe0041fe8u
N#define CYREG_ETM_PID3 0xe0041fecu
N#define CYREG_ETM_CID0 0xe0041ff0u
N#define CYREG_ETM_CID1 0xe0041ff4u
N#define CYREG_ETM_CID2 0xe0041ff8u
N#define CYREG_ETM_CID3 0xe0041ffcu
N#define CYDEV_ROM_TABLE_BASE 0xe00ff000u
N#define CYDEV_ROM_TABLE_SIZE 0x00001000u
N#define CYREG_ROM_TABLE_NVIC 0xe00ff000u
N#define CYREG_ROM_TABLE_DWT 0xe00ff004u
N#define CYREG_ROM_TABLE_FPB 0xe00ff008u
N#define CYREG_ROM_TABLE_ITM 0xe00ff00cu
N#define CYREG_ROM_TABLE_TPIU 0xe00ff010u
N#define CYREG_ROM_TABLE_ETM 0xe00ff014u
N#define CYREG_ROM_TABLE_END 0xe00ff018u
N#define CYREG_ROM_TABLE_MEMTYPE 0xe00fffccu
N#define CYREG_ROM_TABLE_PID4 0xe00fffd0u
N#define CYREG_ROM_TABLE_PID5 0xe00fffd4u
N#define CYREG_ROM_TABLE_PID6 0xe00fffd8u
N#define CYREG_ROM_TABLE_PID7 0xe00fffdcu
N#define CYREG_ROM_TABLE_PID0 0xe00fffe0u
N#define CYREG_ROM_TABLE_PID1 0xe00fffe4u
N#define CYREG_ROM_TABLE_PID2 0xe00fffe8u
N#define CYREG_ROM_TABLE_PID3 0xe00fffecu
N#define CYREG_ROM_TABLE_CID0 0xe00ffff0u
N#define CYREG_ROM_TABLE_CID1 0xe00ffff4u
N#define CYREG_ROM_TABLE_CID2 0xe00ffff8u
N#define CYREG_ROM_TABLE_CID3 0xe00ffffcu
N#define CYDEV_FLS_SIZE CYDEV_FLASH_SIZE
N#define CYDEV_ECC_BASE CYDEV_FLSECC_BASE
N#define CYDEV_FLS_SECTOR_SIZE 0x00010000u
N#define CYDEV_FLS_ROW_SIZE 0x00000100u
N#define CYDEV_ECC_SECTOR_SIZE 0x00002000u
N#define CYDEV_ECC_ROW_SIZE 0x00000020u
N#define CYDEV_EEPROM_SECTOR_SIZE 0x00000400u
N#define CYDEV_EEPROM_ROW_SIZE 0x00000010u
N#define CYDEV_PERIPH_BASE CYDEV_CLKDIST_BASE
N#define CYCLK_LD_DISABLE 0x00000004u
N#define CYCLK_LD_SYNC_EN 0x00000002u
N#define CYCLK_LD_LOAD 0x00000001u
N#define CYCLK_PIPE 0x00000080u
N#define CYCLK_SSS 0x00000040u
N#define CYCLK_EARLY 0x00000020u
N#define CYCLK_DUTY 0x00000010u
N#define CYCLK_SYNC 0x00000008u
N#define CYCLK_SRC_SEL_CLK_SYNC_D 0
N#define CYCLK_SRC_SEL_SYNC_DIG 0
N#define CYCLK_SRC_SEL_IMO 1
N#define CYCLK_SRC_SEL_XTAL_MHZ 2
N#define CYCLK_SRC_SEL_XTALM 2
N#define CYCLK_SRC_SEL_ILO 3
N#define CYCLK_SRC_SEL_PLL 4
N#define CYCLK_SRC_SEL_XTAL_KHZ 5
N#define CYCLK_SRC_SEL_XTALK 5
N#define CYCLK_SRC_SEL_DSI_G 6
N#define CYCLK_SRC_SEL_DSI_D 7
N#define CYCLK_SRC_SEL_CLK_SYNC_A 0
N#define CYCLK_SRC_SEL_DSI_A 7
N#endif /* CYDEVICE_TRM_H */
L 21 "Generated_Source\PSoC5\cyfitter.h" 2
N
N/* Miscellaneous */
N#define BCLK__BUS_CLK__HZ 24000000U
N#define BCLK__BUS_CLK__KHZ 24000U
N#define BCLK__BUS_CLK__MHZ 24U
N#define CY_PROJECT_NAME "ws2812"
N#define CY_VERSION "PSoC Creator  4.4"
N#define CYDEV_CHIP_DIE_LEOPARD 1u
N#define CYDEV_CHIP_DIE_PSOC4A 26u
N#define CYDEV_CHIP_DIE_PSOC5LP 2u
N#define CYDEV_CHIP_DIE_PSOC5TM 3u
N#define CYDEV_CHIP_DIE_TMA4 4u
N#define CYDEV_CHIP_DIE_UNKNOWN 0u
N#define CYDEV_CHIP_FAMILY_FM0P 5u
N#define CYDEV_CHIP_FAMILY_FM3 6u
N#define CYDEV_CHIP_FAMILY_FM4 7u
N#define CYDEV_CHIP_FAMILY_PSOC3 1u
N#define CYDEV_CHIP_FAMILY_PSOC4 2u
N#define CYDEV_CHIP_FAMILY_PSOC5 3u
N#define CYDEV_CHIP_FAMILY_PSOC6 4u
N#define CYDEV_CHIP_FAMILY_UNKNOWN 0u
N#define CYDEV_CHIP_FAMILY_USED CYDEV_CHIP_FAMILY_PSOC5
N#define CYDEV_CHIP_JTAG_ID 0x2E161069u
N#define CYDEV_CHIP_MEMBER_3A 1u
N#define CYDEV_CHIP_MEMBER_4A 26u
N#define CYDEV_CHIP_MEMBER_4AA 25u
N#define CYDEV_CHIP_MEMBER_4AB 30u
N#define CYDEV_CHIP_MEMBER_4AC 14u
N#define CYDEV_CHIP_MEMBER_4AD 15u
N#define CYDEV_CHIP_MEMBER_4AE 16u
N#define CYDEV_CHIP_MEMBER_4D 20u
N#define CYDEV_CHIP_MEMBER_4E 6u
N#define CYDEV_CHIP_MEMBER_4F 27u
N#define CYDEV_CHIP_MEMBER_4G 4u
N#define CYDEV_CHIP_MEMBER_4H 24u
N#define CYDEV_CHIP_MEMBER_4I 32u
N#define CYDEV_CHIP_MEMBER_4J 21u
N#define CYDEV_CHIP_MEMBER_4K 22u
N#define CYDEV_CHIP_MEMBER_4L 31u
N#define CYDEV_CHIP_MEMBER_4M 29u
N#define CYDEV_CHIP_MEMBER_4N 11u
N#define CYDEV_CHIP_MEMBER_4O 8u
N#define CYDEV_CHIP_MEMBER_4P 28u
N#define CYDEV_CHIP_MEMBER_4Q 17u
N#define CYDEV_CHIP_MEMBER_4R 9u
N#define CYDEV_CHIP_MEMBER_4S 12u
N#define CYDEV_CHIP_MEMBER_4T 10u
N#define CYDEV_CHIP_MEMBER_4U 5u
N#define CYDEV_CHIP_MEMBER_4V 23u
N#define CYDEV_CHIP_MEMBER_4W 13u
N#define CYDEV_CHIP_MEMBER_4X 7u
N#define CYDEV_CHIP_MEMBER_4Y 18u
N#define CYDEV_CHIP_MEMBER_4Z 19u
N#define CYDEV_CHIP_MEMBER_5A 3u
N#define CYDEV_CHIP_MEMBER_5B 2u
N#define CYDEV_CHIP_MEMBER_6A 33u
N#define CYDEV_CHIP_MEMBER_FM3 37u
N#define CYDEV_CHIP_MEMBER_FM4 38u
N#define CYDEV_CHIP_MEMBER_PDL_FM0P_TYPE1 34u
N#define CYDEV_CHIP_MEMBER_PDL_FM0P_TYPE2 35u
N#define CYDEV_CHIP_MEMBER_PDL_FM0P_TYPE3 36u
N#define CYDEV_CHIP_MEMBER_UNKNOWN 0u
N#define CYDEV_CHIP_MEMBER_USED CYDEV_CHIP_MEMBER_5B
N#define CYDEV_CHIP_DIE_EXPECT CYDEV_CHIP_MEMBER_USED
N#define CYDEV_CHIP_DIE_ACTUAL CYDEV_CHIP_DIE_EXPECT
N#define CYDEV_CHIP_REV_LEOPARD_ES1 0u
N#define CYDEV_CHIP_REV_LEOPARD_ES2 1u
N#define CYDEV_CHIP_REV_LEOPARD_ES3 3u
N#define CYDEV_CHIP_REV_LEOPARD_PRODUCTION 3u
N#define CYDEV_CHIP_REV_PSOC4A_ES0 17u
N#define CYDEV_CHIP_REV_PSOC4A_PRODUCTION 17u
N#define CYDEV_CHIP_REV_PSOC5LP_ES0 0u
N#define CYDEV_CHIP_REV_PSOC5LP_PRODUCTION 0u
N#define CYDEV_CHIP_REV_PSOC5TM_ES0 0u
N#define CYDEV_CHIP_REV_PSOC5TM_ES1 1u
N#define CYDEV_CHIP_REV_PSOC5TM_PRODUCTION 1u
N#define CYDEV_CHIP_REV_TMA4_ES 17u
N#define CYDEV_CHIP_REV_TMA4_ES2 33u
N#define CYDEV_CHIP_REV_TMA4_PRODUCTION 17u
N#define CYDEV_CHIP_REVISION_3A_ES1 0u
N#define CYDEV_CHIP_REVISION_3A_ES2 1u
N#define CYDEV_CHIP_REVISION_3A_ES3 3u
N#define CYDEV_CHIP_REVISION_3A_PRODUCTION 3u
N#define CYDEV_CHIP_REVISION_4A_ES0 17u
N#define CYDEV_CHIP_REVISION_4A_PRODUCTION 17u
N#define CYDEV_CHIP_REVISION_4AA_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4AB_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4AC_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4AD_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4AE_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4D_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4E_CCG2_NO_USBPD 0u
N#define CYDEV_CHIP_REVISION_4E_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4F_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4F_PRODUCTION_256DMA 0u
N#define CYDEV_CHIP_REVISION_4F_PRODUCTION_256K 0u
N#define CYDEV_CHIP_REVISION_4G_ES 17u
N#define CYDEV_CHIP_REVISION_4G_ES2 33u
N#define CYDEV_CHIP_REVISION_4G_PRODUCTION 17u
N#define CYDEV_CHIP_REVISION_4H_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4I_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4J_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4K_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4L_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4M_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4N_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4O_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4P_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4Q_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4R_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4S_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4T_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4U_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4V_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4W_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4X_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4Y_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4Z_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_5A_ES0 0u
N#define CYDEV_CHIP_REVISION_5A_ES1 1u
N#define CYDEV_CHIP_REVISION_5A_PRODUCTION 1u
N#define CYDEV_CHIP_REVISION_5B_ES0 0u
N#define CYDEV_CHIP_REVISION_5B_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_6A_ES 17u
N#define CYDEV_CHIP_REVISION_6A_NO_UDB 33u
N#define CYDEV_CHIP_REVISION_6A_PRODUCTION 33u
N#define CYDEV_CHIP_REVISION_FM3_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_FM4_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_PDL_FM0P_TYPE1_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_PDL_FM0P_TYPE2_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_PDL_FM0P_TYPE3_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_USED CYDEV_CHIP_REVISION_5B_PRODUCTION
N#define CYDEV_CHIP_REV_EXPECT CYDEV_CHIP_REVISION_USED
N#define CYDEV_CONFIG_FASTBOOT_ENABLED 1
N#define CYDEV_CONFIG_UNUSED_IO_AllowButWarn 0
N#define CYDEV_CONFIG_UNUSED_IO CYDEV_CONFIG_UNUSED_IO_AllowButWarn
N#define CYDEV_CONFIG_UNUSED_IO_AllowWithInfo 1
N#define CYDEV_CONFIG_UNUSED_IO_Disallowed 2
N#define CYDEV_CONFIGURATION_COMPRESSED 1
N#define CYDEV_CONFIGURATION_DMA 0
N#define CYDEV_CONFIGURATION_ECC 1
N#define CYDEV_CONFIGURATION_IMOENABLED CYDEV_CONFIG_FASTBOOT_ENABLED
N#define CYDEV_CONFIGURATION_MODE_COMPRESSED 0
N#define CYDEV_CONFIGURATION_MODE CYDEV_CONFIGURATION_MODE_COMPRESSED
N#define CYDEV_CONFIGURATION_MODE_DMA 2
N#define CYDEV_CONFIGURATION_MODE_UNCOMPRESSED 1
N#define CYDEV_DEBUG_ENABLE_MASK 0x20u
N#define CYDEV_DEBUG_ENABLE_REGISTER CYREG_MLOGIC_DEBUG
N#define CYDEV_DEBUGGING_DPS_Disable 3
N#define CYDEV_DEBUGGING_DPS_JTAG_4 1
N#define CYDEV_DEBUGGING_DPS_JTAG_5 0
N#define CYDEV_DEBUGGING_DPS_SWD 2
N#define CYDEV_DEBUGGING_DPS_SWD_SWV 6
N#define CYDEV_DEBUGGING_DPS CYDEV_DEBUGGING_DPS_SWD_SWV
N#define CYDEV_DEBUGGING_ENABLE 1
N#define CYDEV_DEBUGGING_XRES 0
N#define CYDEV_DMA_CHANNELS_AVAILABLE 24u
N#define CYDEV_ECC_ENABLE 0
N#define CYDEV_HEAP_SIZE 0x80
N#define CYDEV_INSTRUCT_CACHE_ENABLED 1
N#define CYDEV_INTR_RISING 0x00000000u
N#define CYDEV_IS_EXPORTING_CODE 0
N#define CYDEV_IS_IMPORTING_CODE 0
N#define CYDEV_PROJ_TYPE 0
N#define CYDEV_PROJ_TYPE_BOOTLOADER 1
N#define CYDEV_PROJ_TYPE_LAUNCHER 5
N#define CYDEV_PROJ_TYPE_LOADABLE 2
N#define CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER 4
N#define CYDEV_PROJ_TYPE_MULTIAPPBOOTLOADER 3
N#define CYDEV_PROJ_TYPE_STANDARD 0
N#define CYDEV_PROTECTION_ENABLE 0
N#define CYDEV_STACK_SIZE 0x0800
N#define CYDEV_USE_BUNDLED_CMSIS 1
N#define CYDEV_VARIABLE_VDDA 0
N#define CYDEV_VDDA 5.0
N#define CYDEV_VDDA_MV 5000
N#define CYDEV_VDDD 5.0
N#define CYDEV_VDDD_MV 5000
N#define CYDEV_VDDIO0 5.0
N#define CYDEV_VDDIO0_MV 5000
N#define CYDEV_VDDIO1 5.0
N#define CYDEV_VDDIO1_MV 5000
N#define CYDEV_VDDIO2 5.0
N#define CYDEV_VDDIO2_MV 5000
N#define CYDEV_VDDIO3 5.0
N#define CYDEV_VDDIO3_MV 5000
N#define CYDEV_VIO0 5.0
N#define CYDEV_VIO0_MV 5000
N#define CYDEV_VIO1 5.0
N#define CYDEV_VIO1_MV 5000
N#define CYDEV_VIO2 5.0
N#define CYDEV_VIO2_MV 5000
N#define CYDEV_VIO3 5.0
N#define CYDEV_VIO3_MV 5000
N#define CYIPBLOCK_ARM_CM3_VERSION 0
N#define CYIPBLOCK_P3_ANAIF_VERSION 0
N#define CYIPBLOCK_P3_CAN_VERSION 0
N#define CYIPBLOCK_P3_CAPSENSE_VERSION 0
N#define CYIPBLOCK_P3_COMP_VERSION 0
N#define CYIPBLOCK_P3_DECIMATOR_VERSION 0
N#define CYIPBLOCK_P3_DFB_VERSION 0
N#define CYIPBLOCK_P3_DMA_VERSION 0
N#define CYIPBLOCK_P3_DRQ_VERSION 0
N#define CYIPBLOCK_P3_DSM_VERSION 0
N#define CYIPBLOCK_P3_EMIF_VERSION 0
N#define CYIPBLOCK_P3_I2C_VERSION 0
N#define CYIPBLOCK_P3_LCD_VERSION 0
N#define CYIPBLOCK_P3_LPF_VERSION 0
N#define CYIPBLOCK_P3_OPAMP_VERSION 0
N#define CYIPBLOCK_P3_PM_VERSION 0
N#define CYIPBLOCK_P3_SCCT_VERSION 0
N#define CYIPBLOCK_P3_TIMER_VERSION 0
N#define CYIPBLOCK_P3_USB_VERSION 0
N#define CYIPBLOCK_P3_VIDAC_VERSION 0
N#define CYIPBLOCK_P3_VREF_VERSION 0
N#define CYIPBLOCK_S8_GPIO_VERSION 0
N#define CYIPBLOCK_S8_IRQ_VERSION 0
N#define CYIPBLOCK_S8_SAR_VERSION 0
N#define CYIPBLOCK_S8_SIO_VERSION 0
N#define CYIPBLOCK_S8_UDB_VERSION 0
N#define DMA_CHANNELS_USED__MASK0 0x00000000u
N#define CYDEV_BOOTLOADER_ENABLE 0
N
N#endif /* INCLUDED_CYFITTER_H */
L 38 "Generated_Source\PSoC5\cytypes.h" 2
N
N
N#if defined( __ICCARM__ )
X#if 0L
S    /* Suppress warning for multiple volatile variables in an expression. */
S    /* This is common in component code and usage is not order dependent. */
S    #pragma diag_suppress=Pa082
N#endif  /* defined( __ICCARM__ ) */
N
N
N/***************************************
N* Conditional Compilation Parameters
N***************************************/
N
N
N/*******************************************************************************
N* FAMILY encodes the overall architectural family
N*******************************************************************************/
N#define CY_PSOC3 (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3)
N#define CY_PSOC4 (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC4)
N#define CY_PSOC5 (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC5)
N
N
N/*******************************************************************************
N* MEMBER encodes both the family and the detailed architecture
N*******************************************************************************/
N#ifdef CYDEV_CHIP_MEMBER_4D
N    #define CY_PSOC4_4000   (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4D)
N#else
S    #define CY_PSOC4_4000   (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4D */
N
N#define CY_PSOC4_4100       (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4A)
N#define CY_PSOC4_4200       (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4A)
N
N#ifdef CYDEV_CHIP_MEMBER_4F
N    #define CY_PSOC4_4100BL (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4F)
N    #define CY_PSOC4_4200BL (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4F)
N#else
S    #define CY_PSOC4_4100BL (0u != 0u)
S    #define CY_PSOC4_4200BL (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4F */
N
N#ifdef CYDEV_CHIP_MEMBER_4M
N    #define CY_PSOC4_4100M (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4M)
N    #define CY_PSOC4_4200M (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4M)
N#else
S    #define CY_PSOC4_4100M (0u != 0u)
S    #define CY_PSOC4_4200M (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4M */
N
N#ifdef CYDEV_CHIP_MEMBER_4H
N    #define CY_PSOC4_4200D (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4H)
N#else
S    #define CY_PSOC4_4200D (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4H */
N
N#ifdef CYDEV_CHIP_MEMBER_4L
N    #define CY_PSOC4_4200L (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4L)
N#else
S    #define CY_PSOC4_4200L (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4L */
N
N#ifdef CYDEV_CHIP_MEMBER_4U
N    #define CY_PSOC4_4000U (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4U)
N#else
S    #define CY_PSOC4_4000U (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4U */
N
N#ifdef CYDEV_CHIP_MEMBER_4J
N    #define CY_PSOC4_4000S (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4J)
N#else
S    #define CY_PSOC4_4000S (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4J */
N
N#ifdef CYDEV_CHIP_MEMBER_4K
N    #define CY_PSOC4_4100S (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4K)
N#else
S    #define CY_PSOC4_4100S (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4K */
N
N#ifdef CYDEV_CHIP_MEMBER_4I
N    #define CY_PSOC4_4400 (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4I)
N#else
S    #define CY_PSOC4_4400 (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4I */
N
N#ifdef CYDEV_CHIP_MEMBER_4E
N    #define CY_CCG2 (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4E)
N#else
S    #define CY_CCG2 (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4E */
N
N#ifdef CYDEV_CHIP_MEMBER_4O
N    #define CY_CCG3 (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4O)
N#else
S    #define CY_CCG3 (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4O */
N
N#ifdef CYDEV_CHIP_MEMBER_4R
N    #define CY_CCG3PA (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4R)
N#else
S    #define CY_CCG3PA (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4R */
N
N#ifdef CYDEV_CHIP_MEMBER_4N
N    #define CY_CCG4 (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4N)
N#else
S    #define CY_CCG4 (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4N */
N
N#ifdef CYDEV_CHIP_MEMBER_4S
N    #define CY_CCG5 (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4S)
N#else
S    #define CY_CCG5 (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4S */
N
N#ifdef CYDEV_CHIP_MEMBER_4P
N    #define CY_PSOC4_4100BLII (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4P)
N    #define CY_PSOC4_4200BLII (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4P)
N#else
S    #define CY_PSOC4_4100BLII (0u != 0u)
S    #define CY_PSOC4_4200BLII (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4P */
N
N#ifdef CYDEV_CHIP_MEMBER_4V
N    #define CY_PSOC4_4100MS (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4V)
N    #define CY_PSOC4_4100MS (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4V)
N#else
S    #define CY_PSOC4_4100MS (0u != 0u)
S    #define CY_PSOC4_4100MS (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4V */
N
N#define CY_IP_HOBTO_DEVICE      (!(0 == 1))
N
N
N/*******************************************************************************
N* IP blocks
N*******************************************************************************/
N#if (CY_PSOC4)
X#if ((3u == 2u))
S
S    /* Using SRSSv2 or SRS-Lite */
S    #if (CY_IP_HOBTO_DEVICE)
S        #define CY_IP_SRSSV2            (0 != 0)
S        #define CY_IP_SRSSLT            (!CY_IP_SRSSV2)
S    #else
S        #define CY_IP_SRSSV2            (0 == 0)
S        #define CY_IP_SRSSLT            (!CY_IP_SRSSV2)
S    #endif  /* (CY_IP_HOBTO_DEVICE) */
S
S    #if (CY_IP_HOBTO_DEVICE)
S        #define CY_IP_CPUSSV3           (0 == 1)
S        #define CY_IP_CPUSSV2           (0 == 1)
S        #define CY_IP_CPUSS             (0 == 1)
S    #else
S        #define CY_IP_CPUSSV3           (0 != 0)
S        #define CY_IP_CPUSSV2           (0 != 0)
S        #define CY_IP_CPUSS             (0 == 0)
S    #endif  /* (CY_IP_HOBTO_DEVICE) */
S
S    /* CM0 present or CM0+ present (1=CM0, 0=CM0+) */
S    #if (CY_IP_HOBTO_DEVICE)
S        #if (CY_IP_CPUSSV2)
S            #define CY_IP_CPUSS_CM0         (0 == 0)
S        #else   /* CY_IP_CPUSSV3 */
S            #define CY_IP_CPUSS_CM0         (-1 == 1)
S        #endif  /* (CY_IP_CPUSSV2) */
S        #define CY_IP_CPUSS_CM0PLUS         (!CY_IP_CPUSS_CM0)
S    #else
S        #define CY_IP_CPUSS_CM0             (0 == 0)
S        #define CY_IP_CPUSS_CM0PLUS         (0 != 0)
S    #endif  /* (CY_IP_HOBTO_DEVICE) */
S
S
S    /* Flash memory present or not (1=Flash present, 0=Flash not present) */
S    #if (CY_IP_HOBTO_DEVICE)
S        #define CY_IP_CPUSS_FLASHC_PRESENT      (0 == 0)
S    #else
S        #define CY_IP_CPUSS_FLASHC_PRESENT      (0 != 0)
S    #endif  /* (CY_IP_HOBTO_DEVICE) */
S
S
S    /* Product uses FLASH-Lite or regular FLASH */
S    #if (CY_IP_HOBTO_DEVICE)
S        #if (CY_IP_CPUSSV2)
S            #define CY_IP_FM                (-1 == 0)
S            #define CY_IP_FMLT              (-1 == 1)
S            #define CY_IP_FS                (-1 == 2)
S            #define CY_IP_FSLT              (-1 == 3)
S        #else   /* CY_IP_CPUSSV3 */
S            #define CY_IP_FM                (-1 == 0)
S            #define CY_IP_FMLT              (-1 == 1)
S            #define CY_IP_FS                (-1 == 2)
S            #define CY_IP_FSLT              (-1 == 3)
S        #endif  /* (CY_IP_CPUSSV2) */
S    #else
S        #define CY_IP_FM                (!CY_IP_FMLT)       /* Regular FLASH */
S        #define CY_IP_FMLT              (0 != 0)            /* FLASH-Lite */
S        #define CY_IP_FS                (0 != 0)            /* FS */
S        #define CY_IP_FSLT              (0 != 0)            /* FSLT */
S    #endif  /* (CY_IP_HOBTO_DEVICE) */
S
S
S    /* Enable simultaneous execution/programming in multi-macro devices */
S    #if (CY_IP_HOBTO_DEVICE)
S        #if (CY_IP_CPUSSV2)
S            #define CY_IP_FLASH_PARALLEL_PGM_EN (-1 == 1)
S        #else   /* CY_IP_CPUSSV3 */
S            #define CY_IP_FLASH_PARALLEL_PGM_EN (-1 == 1)
S        #endif  /* (CY_IP_CPUSSV2) */
S    #else
S        #define CY_IP_FLASH_PARALLEL_PGM_EN     (0u != 0u)
S    #endif  /* (CY_IP_HOBTO_DEVICE) */
S
S
S    /* Number of Flash macros used in the device (0, 1 or 2) */
S    #if (CY_IP_HOBTO_DEVICE)
S        #if (CY_IP_CPUSSV2)
S            #define CY_IP_FLASH_MACROS (-1u)
S        #else   /* CY_IP_CPUSSV3 */
S            #define CY_IP_FLASH_MACROS (-1u)
S        #endif  /* (CY_IP_CPUSSV2) */
S    #else
S        #define CY_IP_FLASH_MACROS     (1u)
S    #endif  /* (CY_IP_HOBTO_DEVICE) */
S
S    /* Number of interrupt request inputs to CM0 */
S    #if (CY_IP_HOBTO_DEVICE)
S        #if (CY_IP_CPUSSV2)
S            #define CY_IP_INT_NR            (-1u)
S        #else   /* CY_IP_CPUSSV3 */
S            #define CY_IP_INT_NR            (-1u)
S        #endif  /* (CY_IP_CPUSSV2) */
S    #else
S        #define CY_IP_INT_NR            (32u)
S    #endif  /* (CY_IP_HOBTO_DEVICE) */
S
S
S    /* Presence of the BLESS IP block */
S    #if (CY_IP_HOBTO_DEVICE)
S        #define CY_IP_BLESS             (0 != 0)
S        #define CY_IP_BLESSV3           (CYIPBLOCK_m0s8bless_VERSION == 3)
S    #else
S        #define CY_IP_BLESS             (0 != 0)
S        #define CY_IP_BLESSV3           (0 != 0)
S    #endif  /* (CY_IP_HOBTO_DEVICE) */
S
S    #if (CY_IP_HOBTO_DEVICE)
S        #define CY_IP_USBDEV            (0 != 0)
S    #else
S        #define CY_IP_USBDEV            (0 != 0)
S    #endif  /* (CY_IP_HOBTO_DEVICE) */
S
S
S    /***************************************************************************
S    * Devices with the SPCIF_SYNCHRONOUS parameter set to one will not use
S    * the 36MHz Oscillator for Flash operation. Instead, flash write function
S    * ensures that the charge pump clock and the higher frequency clock (HFCLK)
S    * are set to the IMO at 48MHz prior to writing the flash.
S    ***************************************************************************/
S    #if (CY_IP_HOBTO_DEVICE)
S        #if (CY_IP_CPUSSV2)
S            #define CY_IP_SPCIF_SYNCHRONOUS     (-1 == 1)
S        #else   /* CY_IP_CPUSSV3 */
S            #define CY_IP_SPCIF_SYNCHRONOUS     (-1 == 1)
S        #endif  /* (CY_IP_CPUSSV2) */
S    #else
S        #define CY_IP_SPCIF_SYNCHRONOUS     (0 != 0)
S    #endif  /* (CY_IP_HOBTO_DEVICE) */
S
S    /* Watch Crystal Oscillator (WCO) is present (32kHz) */
S    #if (CY_IP_HOBTO_DEVICE)
S        #if (CY_IP_BLESS)
S            #define CY_IP_WCO_WCO           (0 != 0)
S            #define CY_IP_WCO_SRSSV2        (0 != 0)
S            #if (CY_IP_BLESSV3)
S                #define CY_IP_WCO_WCOV2     (0 == 0)
S                #define CY_IP_WCO_BLESS     (0 != 0)
S            #else
S                #define CY_IP_WCO_WCOV2     (0 != 0)
S                #define CY_IP_WCO_BLESS     (0 == 0)
S            #endif
S        #else
S            #define CY_IP_WCO_BLESS         (0 != 0)
S            #define CY_IP_WCO_WCO           (0 == 1)
S            #define CY_IP_WCO_WCOV2         (0 != 0)
S            #define CY_IP_WCO_SRSSV2        (-1 == 1)
S        #endif  /* (CY_IP_BLESS) */
S    #else
S        #define CY_IP_WCO_BLESS             (0 != 0)
S        #define CY_IP_WCO_WCO               (0 != 0)
S        #define CY_IP_WCO_WCOV2             (0 != 0)
S        #define CY_IP_WCO_SRSSV2            (0 != 0)
S    #endif  /* (CY_IP_HOBTO_DEVICE) */
S
S    #define CY_IP_WCO   (CY_IP_WCO_BLESS || CY_IP_WCO_WCO || CY_IP_WCO_WCOV2 || CY_IP_WCO_SRSSV2)
S
S    /* External Crystal Oscillator is present (high frequency) */
S    #if (CY_IP_HOBTO_DEVICE)
S        #if (CY_IP_BLESS)
S            #define CY_IP_ECO_SRSSV2        (0 != 0)
S            #define CY_IP_ECO_SRSSLT        (0 != 0)
S
S            #if (CY_IP_BLESSV3)
S                #define CY_IP_ECO_BLESS     (0 != 0)
S                #define CY_IP_ECO_BLESSV3   (0 == 0)
S            #else
S                #define CY_IP_ECO_BLESS     (0 == 0)
S                #define CY_IP_ECO_BLESSV3   (0 != 0)
S            #endif
S        #else
S            #define CY_IP_ECO_BLESS         (0 != 0)
S            #define CY_IP_ECO_BLESSV3       (0 != 0)
S            #define CY_IP_ECO_SRSSV2        (-1 == 1)
S            #define CY_IP_ECO_SRSSLT        ((0 != 0) && (0 != 0))
S        #endif  /* (CY_IP_BLESS) */
S    #else
S        #define CY_IP_ECO_BLESS             (0 != 0)
S        #define CY_IP_ECO_BLESSV3           (0 != 0)
S        #define CY_IP_ECO_SRSSV2            (0 != 0)
S        #define CY_IP_ECO_SRSSLT            (0 != 0)
S    #endif  /* (CY_IP_HOBTO_DEVICE) */
S
S    #define CY_IP_ECO   (CY_IP_ECO_BLESS || CY_IP_ECO_SRSSV2 || CY_IP_ECO_BLESSV3 || CY_IP_ECO_SRSSLT)
S
S    /* PLL is present */
S    #if (CY_IP_HOBTO_DEVICE)
S        #if(CY_IP_SRSSV2)
S            #define CY_IP_PLL           ((-1 != 0) || \
S                                          (-1 != 0))
X            #define CY_IP_PLL           ((-1 != 0) ||                                           (-1 != 0))
S
S            #define CY_IP_PLL_NR        (-1u + \
S                                          -1u)
X            #define CY_IP_PLL_NR        (-1u +                                           -1u)
S
S        #elif (CY_IP_SRSSLT)
S            #define CY_IP_PLL           (-1 == 1)
S
S            #define CY_IP_PLL_NR        (1)
S        #else
S            #define CY_IP_PLL           (0 != 0)
S            #define CY_IP_PLL_NR        (0)
S        #endif /* (CY_IP_SRSSV2) */
S    #else
S        #define CY_IP_PLL           (0 != 0)
S        #define CY_IP_PLL_NR        (0)
S    #endif  /* (CY_IP_HOBTO_DEVICE) */
S
S    /* Clock Source clk_lf implemented in SysTick Counter. When 0, not implemented, 1=implemented */
S    #if (CY_IP_HOBTO_DEVICE)
S        #if (CY_IP_CPUSSV2)
S            #define CY_SYSTICK_LFCLK_SOURCE     (-1 != 0)
S        #else   /* CY_IP_CPUSSV3 */
S            #define CY_SYSTICK_LFCLK_SOURCE     (-1 != 0)
S        #endif  /* (CY_IP_CPUSSV2) */
S    #else
S        #define CY_SYSTICK_LFCLK_SOURCE     (0 != 0)
S    #endif  /* (CY_IP_HOBTO_DEVICE) */
S
S
S    /* Flash Macro 0 has extra rows */
S    #if (CY_IP_HOBTO_DEVICE)
S        #ifdef CYREG_SFLASH_MACRO_0_FREE_SFLASH0
S            #define CY_SFLASH_XTRA_ROWS         (0 == 0)
S        #else
S            #define CY_SFLASH_XTRA_ROWS         (0 != 0)
S        #endif /* CYREG_SFLASH_MACRO_0_FREE_SFLASH0 */
S
S    #else
S        #define CY_SFLASH_XTRA_ROWS         (0 != 0)
S    #endif  /* (CY_IP_HOBTO_DEVICE) */
S
S
S    #if (CY_IP_USBDEV)
S        #define CY_IP_IMO_TRIMMABLE_BY_USB  (0 == 0)
S    #else
S        #define CY_IP_IMO_TRIMMABLE_BY_USB  (0 != 0)
S    #endif  /* (CY_IP_USBDEV) */
S
S
S    #if (CY_IP_WCO_WCO || CY_IP_WCO_SRSSV2)
S        #define CY_IP_IMO_TRIMMABLE_BY_WCO  (0 == 0)
S    #else
S        #define CY_IP_IMO_TRIMMABLE_BY_WCO  (0 != 0)
S    #endif  /* (CY_IP_WCO_WCO || CY_IP_WCO_SRSSV2) */
S
S
S    /* DW/DMA Controller present (0=No, 1=Yes) */
S    #if (CY_IP_HOBTO_DEVICE)
S        #if (CY_IP_CPUSSV2)
S            #define CY_IP_DMAC_PRESENT      (-1 == 1)
S        #else
S            #define CY_IP_DMAC_PRESENT      (-1 == 1)
S        #endif  /* (CY_IP_CPUSSV2) */
S    #else
S        #define CY_IP_DMAC_PRESENT          (0 != 0)
S    #endif  /* (CY_IP_HOBTO_DEVICE) */
S
S    #if (CY_IP_HOBTO_DEVICE)
S        #define CY_IP_PASS                  (0 == 1)
S    #else
S        #define CY_IP_PASS                  (0 != 0)
S    #endif  /* (CY_IP_HOBTO_DEVICE) */
S
S
S
S	/* Number of external slave ports on System Interconnect */
S    #if (CY_IP_HOBTO_DEVICE)
S        #if (CY_IP_CPUSSV2)
S            #define CY_IP_SL_NR             (-1)
S        #else
S            #define CY_IP_SL_NR             (-1)
S        #endif  /* (CY_IP_CPUSSV2) */
S    #else
S        #define CY_IP_SL_NR                 (0)
S    #endif  /* (CY_IP_HOBTO_DEVICE) */
S
N#else
N
N    #if (CY_PSOC3)
X    #if ((3u == 1u))
S        #define CY_SYSTICK_LFCLK_SOURCE     (0 != 0)
N    #else /* PSoC 5LP */
N        #define CY_SYSTICK_LFCLK_SOURCE     (0 == 0)
N    #endif /* (CY_PSOC3) */
N
N#endif  /* (CY_PSOC4) */
N
N
N/*******************************************************************************
N* The components version defines. Available started from cy_boot 4.20
N* Use the following construction in order to identify cy_boot version:
N* (defined(CY_BOOT_VERSION) && CY_BOOT_VERSION >= CY_BOOT_4_20)
N*******************************************************************************/
N#define CY_BOOT_4_20            (420u)
N#define CY_BOOT_5_0             (500u)
N#define CY_BOOT_5_10            (510u)
N#define CY_BOOT_5_20            (520u)
N#define CY_BOOT_5_30            (530u)
N#define CY_BOOT_5_40            (540u)
N#define CY_BOOT_5_50            (550u)
N#define CY_BOOT_5_60            (560u)
N#define CY_BOOT_5_70            (570u)
N#define CY_BOOT_5_80            (580u)
N#define CY_BOOT_5_81            (581u)
N#define CY_BOOT_5_90            (590u)
N#define CY_BOOT_6_0             (600u)
N#define CY_BOOT_6_10            (610u)
N#define CY_BOOT_VERSION         (CY_BOOT_6_10)
N
N
N/*******************************************************************************
N*   Base Types. Acceptable types from MISRA-C specifying signedness and size.
N*******************************************************************************/
Ntypedef unsigned char   uint8;
Ntypedef unsigned short  uint16;
Ntypedef unsigned long   uint32;
Ntypedef signed   char   int8;
Ntypedef signed   short  int16;
Ntypedef signed   long   int32;
Ntypedef          float  float32;
N
N#if(!CY_PSOC3)
X#if(!(3u == 1u))
N
N    typedef               double float64;
N    typedef          long long   int64;
N    typedef unsigned long long   uint64;
N
N#endif  /* (!CY_PSOC3) */
N
N/* Signed or unsigned depending on compiler selection */
Ntypedef          char   char8;
N
N
N/*******************************************************************************
N*   Memory address functions prototypes
N*******************************************************************************/
N#if(CY_PSOC3)
X#if((3u == 1u))
S
S    /***************************************************************************
S    * Prototypes for absolute memory address functions (cymem.a51) with built-in
S    * endian conversion. These functions should be called through the
S    * CY_GET_XTND_REGxx and CY_SET_XTND_REGxx macros.
S    ***************************************************************************/
S    extern uint8  cyread8       (const volatile void far *addr);
S    extern void   cywrite8      (volatile void far *addr, uint8 value);
S
S    extern uint16 cyread16      (const volatile void far *addr);
S    extern uint16 cyread16_nodpx(const volatile void far *addr);
S
S    extern void   cywrite16      (volatile void far *addr, uint16 value);
S    extern void   cywrite16_nodpx(volatile void far *addr, uint16 value);
S
S    extern uint32 cyread24      (const volatile void far *addr);
S    extern uint32 cyread24_nodpx(const volatile void far *addr);
S
S    extern void   cywrite24      (volatile void far *addr, uint32 value);
S    extern void   cywrite24_nodpx(volatile void far *addr, uint32 value);
S
S    extern uint32 cyread32      (const volatile void far *addr);
S    extern uint32 cyread32_nodpx(const volatile void far *addr);
S
S    extern void   cywrite32      (volatile void far *addr, uint32 value);
S    extern void   cywrite32_nodpx(volatile void far *addr, uint32 value);
S
S
S    /***************************************************************************
S    * Memory access routines from cymem.a51 for the generated device
S    * configuration code. These functions may be subject to change in future
S    * revisions of the cy_boot component and they are not available for all
S    * devices. Most code should use memset or memcpy instead.
S    ***************************************************************************/
S    void cymemzero(void far *addr, uint16 size);
S    void cyconfigcpy(uint16 size, const void far *src, void far *dest) large;
S    void cyconfigcpycode(uint16 size, const void code *src, void far *dest);
S
S    #define CYCONFIGCPY_DECLARED    (1)
S
N#else
N
N    /* Prototype for function to set 24-bit register. Located at cyutils.c */
N    extern void     CySetReg24(uint32 volatile * addr, uint32 value);
N
N    #if(CY_PSOC4)
X    #if((3u == 2u))
S
S        extern uint32 CyGetReg24(uint32 const volatile * addr);
S
N    #endif  /* (CY_PSOC4) */
N
N#endif  /* (CY_PSOC3) */
N
N
N/*******************************************************************************
N*   Memory model definitions. To allow code to be 8051-ARM agnostic.
N*******************************************************************************/
N#if(CY_PSOC3)
X#if((3u == 1u))
S
S    #define CYBDATA     bdata
S    #define CYBIT       bit
S    #define CYCODE      code
S    #define CYCOMPACT   compact
S    #define CYDATA      data
S    #define CYFAR       far
S    #define CYIDATA     idata
S    #define CYLARGE     large
S    #define CYPDATA     pdata
S    #define CYREENTRANT reentrant
S    #define CYSMALL     small
S    #define CYXDATA     xdata
S    #define XDATA       xdata
S
S    #define CY_NOINIT
S
N#else
N
N    #define CYBDATA
N    #define CYBIT      uint8
N    #define CYCODE
N    #define CYCOMPACT
N    #define CYDATA
N    #define CYFAR
N    #define CYIDATA
N    #define CYLARGE
N    #define CYPDATA
N    #define CYREENTRANT
N    #define CYSMALL
N    #define CYXDATA
N    #define XDATA
N
N    #if defined(__ARMCC_VERSION)
X    #if 1L
N
N        #define CY_NOINIT           __attribute__ ((section(".noinit"), zero_init))
N        #define CY_NORETURN         __attribute__ ((noreturn))
N        #define CY_SECTION(name)    __attribute__ ((section(name)))
N
N        /* Specifies a minimum alignment (in bytes) for variables of the
N        *  specified type.
N        */
N        #define CY_ALIGN(align)     __align(align)
N
N
N        /* Attached to an enum, struct, or union type definition, specified that
N        *  the minimum required memory be used to represent the type.
N        */
N        #define CY_PACKED
N        #define CY_PACKED_ATTR      __attribute__ ((packed))
N        #define CY_INLINE           __inline
N    #elif defined (__GNUC__)
S
S        #define CY_NOINIT           __attribute__ ((section(".noinit")))
S        #define CY_NORETURN         __attribute__ ((noreturn))
S        #define CY_SECTION(name)    __attribute__ ((section(name)))
S        #define CY_ALIGN(align)     __attribute__ ((aligned(align)))
S        #define CY_PACKED
S        #define CY_PACKED_ATTR      __attribute__ ((packed))
S        #define CY_INLINE           inline
S    #elif defined (__ICCARM__)
S
S        #define CY_NOINIT           __no_init
S        #define CY_NORETURN         __noreturn
S        #define CY_PACKED           __packed
S        #define CY_PACKED_ATTR
S        #define CY_INLINE           inline
N    #endif  /* (__ARMCC_VERSION) */
N
N#endif  /* (CY_PSOC3) */
N
N
N#if(CY_PSOC3)
X#if((3u == 1u))
S
S    /* 8051 naturally returns 8 bit value. */
S    typedef unsigned char cystatus;
S
N#else
N
N    /* ARM naturally returns 32 bit value. */
N    typedef unsigned long cystatus;
N
N#endif  /* (CY_PSOC3) */
N
N
N/*******************************************************************************
N*  Hardware Register Types.
N*******************************************************************************/
Ntypedef volatile uint8  CYXDATA reg8;
Xtypedef volatile uint8   reg8;
Ntypedef volatile uint16 CYXDATA reg16;
Xtypedef volatile uint16  reg16;
Ntypedef volatile uint32 CYXDATA reg32;
Xtypedef volatile uint32  reg32;
N
N
N/*******************************************************************************
N*  Interrupt Types and Macros
N*******************************************************************************/
N#if(CY_PSOC3)
X#if((3u == 1u))
S
S    #define CY_ISR(FuncName)        void FuncName (void) interrupt 0
S    #define CY_ISR_PROTO(FuncName)  void FuncName (void)
S    typedef void (CYCODE * cyisraddress)(void);
S
N#else
N
N    #define CY_ISR(FuncName)        void FuncName (void)
N    #define CY_ISR_PROTO(FuncName)  void FuncName (void)
N    typedef void (* cyisraddress)(void);
N
N    #if defined (__ICCARM__)
X    #if 0L
S        typedef union { cyisraddress __fun; void * __ptr; } intvec_elem;
N    #endif  /* defined (__ICCARM__) */
N
N#endif  /* (CY_PSOC3) */
N
N
N#define CY_M_PI                         (3.14159265358979323846264338327)
N
N
N/**
N* \addtogroup group_register_access
NA library of macros provides read and write access to the registers of the device. These macros are used with the
Ndefined values made available in the generated cydevice_trm.h and cyfitter.h files. Access to registers should be made
Nusing these macros and not the functions that are used to implement the macros. This allows for device independent code
Ngeneration.
N
NThe PSoC 4 processor architecture use little endian ordering.
N
NSRAM and Flash storage in all architectures is done using the endianness of the architecture and compilers. However,
Nthe registers in all these chips are laid out in little endian order. These macros allow register accesses to match this
Nlittle endian ordering. If you perform operations on multi-byte registers without using these macros, you must consider
Nthe byte ordering of the specific architecture. Examples include usage of DMA to transfer between memory and registers,
Nas well as function calls that are passed an array of bytes in memory.
N
NThe PSoC 4 requires these accesses to be aligned to the width of the transaction.
N
NThe PSoC 4 requires peripheral register accesses to match the hardware register size. Otherwise, the peripheral might
Nignore the transfer and Hard Fault exception will be generated.
N
N*/
N
N/** @} group_register_access */
N
N
N/**
N* \addtogroup group_register_access_macros Register Access
N* \ingroup group_register_access
N* @{
N*/
N
N#if(CY_PSOC3)
X#if((3u == 1u))
S    /*******************************************************************************
S    * Macro Name: CY_GET_REG8(addr)
S    ****************************************************************************//**
S    *
S    * Reads the 8-bit value from the specified register.
S    *
S    * \param reg Register address.
S    *
S    * \return Read value.
S    *
S    *******************************************************************************/
S    #define CY_GET_REG8(addr)               (*((const reg8 *)(addr)))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_SET_REG8(addr, value)
S    ****************************************************************************//**
S    *
S    * Writes the 8-bit value to the specified register.
S    *
S    * \param reg Register address.
S    * \param value Value to write.
S    *
S    *******************************************************************************/
S    #define CY_SET_REG8(addr, value)        (*((reg8 *)(addr))  = (uint8)(value))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_GET_REG16(addr)
S    ****************************************************************************//**
S    *
S    * Reads the 16-bit value from the specified register. This macro implements the
S    * byte swapping required for proper operation.
S    *
S    * \param reg Register address.
S    *
S    * \return Read value.
S    *
S    *******************************************************************************/
S    #define CY_GET_REG16(addr)              cyread16_nodpx ((const volatile void far *)(const reg16 *)(addr))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_SET_REG16(addr, value)
S    ****************************************************************************//**
S    *
S    * Writes the 16-bit value to the specified register. This macro implements the
S    * byte swapping required for proper operation.
S    *
S    * \param reg Register address.
S    * \param value Value to write.
S    *
S    *******************************************************************************/
S    #define CY_SET_REG16(addr, value)       cywrite16_nodpx((volatile void far *)(reg16 *)(addr), value)
S
S
S    /*******************************************************************************
S    * Macro Name: CY_GET_REG24(addr)
S    ****************************************************************************//**
S    *
S    * Reads the 24-bit value from the specified register. This macro implements the
S    * byte swapping required for proper operation.
S    *
S    * \param reg Register address.
S    *
S    * \return Read value.
S    *
S    *******************************************************************************/
S    #define CY_GET_REG24(addr)              cyread24_nodpx ((const volatile void far *)(const reg32 *)(addr))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_SET_REG24(addr, value)
S    ****************************************************************************//**
S    *
S    * Writes the 24-bit value to the specified register. This macro implements the
S    * byte swapping required for proper operation.
S    *
S    * \param reg Register address.
S    * \param value Value to write.
S    *
S    *******************************************************************************/
S    #define CY_SET_REG24(addr, value)       cywrite24_nodpx((volatile void far *)(reg32 *)(addr),value)
S
S
S    /*******************************************************************************
S    * Macro Name: CY_GET_REG32(addr)
S    ****************************************************************************//**
S    *
S    * Reads the 32-bit value from the specified register. This macro implements the
S    * byte swapping required for proper operation.
S    *
S    * \param reg Register address.
S    *
S    * \return Read value.
S    *
S    *******************************************************************************/
S    #define CY_GET_REG32(addr)              cyread32_nodpx ((const volatile void far *)(const reg32 *)(addr))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_SET_REG32(addr, value)
S    ****************************************************************************//**
S    *
S    * Writes the 32-bit value to the specified register. This macro implements the
S    * byte swapping required for proper operation.
S    *
S    * \param reg Register address.
S    * \param value Value to write.
S    *
S    *******************************************************************************/
S    #define CY_SET_REG32(addr, value)       cywrite32_nodpx((volatile void far *)(reg32 *)(addr), value)
S
S
S    /*******************************************************************************
S    * Macro Name: CY_GET_XTND_REG8(addr)
S    ****************************************************************************//**
S    *
S    * Reads the 8-bit value from the specified register.
S    * Identical to \ref CY_GET_REG8 for PSoC 4.
S    *
S    * \param reg Register address.
S    *
S    * \return Read value.
S    *
S    *******************************************************************************/
S    #define CY_GET_XTND_REG8(addr)          cyread8((const volatile void far *)(addr))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_SET_XTND_REG8(addr, value)
S    ****************************************************************************//**
S    *
S    * Writes the 8-bit value to the specified register.
S    * Identical to \ref CY_SET_REG8 for PSoC 4.
S    *
S    * \param reg Register address.
S    * \param value Value to write.
S    *
S    *******************************************************************************/
S    #define CY_SET_XTND_REG8(addr, value)   cywrite8((volatile void far *)(addr), value)
S
S
S    /*******************************************************************************
S    * Macro Name: CY_GET_XTND_REG16(addr)
S    ****************************************************************************//**
S    *
S    * Reads the 16-bit value from the specified register. This macro implements the
S    * byte swapping required for proper operation. Identical to \ref CY_GET_REG16
S    * for PSoC 4.
S    *
S    * \param reg Register address.
S    *
S    * \return Read value.
S    *
S    *******************************************************************************/
S    #define CY_GET_XTND_REG16(addr)         cyread16((const volatile void far *)(addr))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_SET_XTND_REG16(addr, value)
S    ****************************************************************************//**
S    *
S    * Writes the 16-bit value to the specified register. This macro implements the
S    * byte swapping required for proper operation. Identical to \ref CY_SET_REG16
S    * for PSoC 4.
S    *
S    * \param reg Register address.
S    * \param value Value to write.
S    *
S    *******************************************************************************/
S    #define CY_SET_XTND_REG16(addr, value)  cywrite16((volatile void far *)(addr), value)
S
S
S    /*******************************************************************************
S    * Macro Name: CY_GET_XTND_REG24(addr)
S    ****************************************************************************//**
S    *
S    * Reads the 24-bit value from the specified register. This macro implements the
S    * byte swapping required for proper operation. Identical to \ref CY_GET_REG24
S    * for PSoC 4.
S    *
S    * \param reg Register address.
S    *
S    * \return Read value.
S    *
S    *******************************************************************************/
S    #define CY_GET_XTND_REG24(addr)         cyread24((const volatile void far *)(addr))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_SET_XTND_REG24(addr, value)
S    ****************************************************************************//**
S    *
S    * Writes the 24-bit value to the specified register. This macro implements the
S    * byte swapping required for proper operation. Identical to \ref CY_SET_REG24
S    * for PSoC 4.
S    *
S    * \param reg Register address.
S    * \param value Value to write.
S    *
S    *******************************************************************************/
S    #define CY_SET_XTND_REG24(addr, value)  cywrite24((volatile void far *)(addr), value)
S
S
S    /*******************************************************************************
S    * Macro Name: CY_GET_XTND_REG32(addr)
S    ****************************************************************************//**
S    *
S    * Reads the 32-bit value from the specified register. This macro implements the
S    * byte swapping required for proper operation. Identical to \ref CY_GET_REG32
S    * for PSoC 4.
S    *
S    * \param reg Register address.
S    *
S    * \return Read value.
S    *
S    *******************************************************************************/
S    #define CY_GET_XTND_REG32(addr)         cyread32((const volatile void far *)(addr))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_SET_XTND_REG32(addr, value)
S    ****************************************************************************//**
S    *
S    * Writes the 32-bit value to the specified register. This macro implements the
S    * byte swapping required for proper operation. Identical to \ref CY_SET_REG32
S    * for PSoC 4.
S    *
S    * \param reg Register address.
S    * \param value Value to write.
S    *
S    *******************************************************************************/
S    #define CY_SET_XTND_REG32(addr, value)  cywrite32((volatile void far *)(addr), value)
S
N#else
N
N    #define CY_GET_REG8(addr)               (*((const reg8 *)(addr)))
N    #define CY_SET_REG8(addr, value)        (*((reg8 *)(addr))  = (uint8)(value))
N
N    #define CY_GET_REG16(addr)              (*((const reg16 *)(addr)))
N    #define CY_SET_REG16(addr, value)       (*((reg16 *)(addr)) = (uint16)(value))
N
N
N    #define CY_SET_REG24(addr, value)       CySetReg24((reg32 *) (addr), (value))
N    #if(CY_PSOC4)
X    #if((3u == 2u))
S        #define CY_GET_REG24(addr)          CyGetReg24((const reg32 *) (addr))
N    #else
N        #define CY_GET_REG24(addr)          (*((const reg32 *)(addr)) & 0x00FFFFFFu)
N    #endif  /* (CY_PSOC4) */
N
N
N    #define CY_GET_REG32(addr)              (*((const reg32 *)(addr)))
N    #define CY_SET_REG32(addr, value)       (*((reg32 *)(addr)) = (uint32)(value))
N
N    /* To allow code to be 8051-ARM agnostic. */
N    #define CY_GET_XTND_REG8(addr)          CY_GET_REG8(addr)
N    #define CY_SET_XTND_REG8(addr, value)   CY_SET_REG8(addr, value)
N
N    #define CY_GET_XTND_REG16(addr)         CY_GET_REG16(addr)
N    #define CY_SET_XTND_REG16(addr, value)  CY_SET_REG16(addr, value)
N
N    #define CY_GET_XTND_REG24(addr)         CY_GET_REG24(addr)
N    #define CY_SET_XTND_REG24(addr, value)  CY_SET_REG24(addr, value)
N
N    #define CY_GET_XTND_REG32(addr)         CY_GET_REG32(addr)
N    #define CY_SET_XTND_REG32(addr, value)  CY_SET_REG32(addr, value)
N
N#endif  /* (CY_PSOC3) */
N/** @} group_register_access_macros */
N
N
N/**
N* \addtogroup group_register_access_bits Bit Manipulation
N* \ingroup group_register_access
N* @{
N*/
N
N#if(CY_PSOC4)
X#if((3u == 2u))
S
S    /*******************************************************************************
S    * Macro Name: CY_GET_FIELD_MASK(regSize, bitFieldName)
S    ****************************************************************************//**
S    *
S    * Returns the bit field mask for the specified register size and bit field
S    * name.
S    *
S    * \param regSize Size of the register in bits.
S    * \param bitFieldName Fully qualified name of the bit field. The biFieldName
S    *  is automatically appended with __OFFSET and __SIZE by the macro for usage.
S    *
S    * \return Returns the bit mask.
S    *
S    *******************************************************************************/
S    #define CY_GET_FIELD_MASK(regSize, bitFieldName) \
S        ((((uint ## regSize) 0xFFFFFFFFu << ((uint32)(regSize) - bitFieldName ## __SIZE - bitFieldName ## __OFFSET)) >>\
S         ((uint32)(regSize) - bitFieldName ## __SIZE)) << bitFieldName ## __OFFSET)
X    #define CY_GET_FIELD_MASK(regSize, bitFieldName)         ((((uint ## regSize) 0xFFFFFFFFu << ((uint32)(regSize) - bitFieldName ## __SIZE - bitFieldName ## __OFFSET)) >>         ((uint32)(regSize) - bitFieldName ## __SIZE)) << bitFieldName ## __OFFSET)
S
S
S    /*******************************************************************************
S    * Macro Name: CY_GET_REG8_FIELD(registerName, bitFieldName)
S    ****************************************************************************//**
S    *
S    * Reads the specified bit field value from the specified 8-bit register.
S    *
S    * The macro operation is not atomic. It is not guaranteed that the shared
S    * register will remain uncorrupted during simultaneous read-modify-write
S    * operation performed by two threads (main and interrupt threads). To
S    * guarantee data integrity in such cases, the macro should be invoked while
S    * the specific interrupt is disabled or within a critical section (all
S    * interrupts are disabled).
S    *
S    * Using this macro on 32-bit and 16-bit width registers will generate a
S    * hard fault exception. Examples of 8-bit registers are the UDB registers.
S    *
S    * \param registerName: The fully qualified name of the PSoC 4 device register.
S    * \param bitFieldName: fully qualified name of the bit field. The biFieldName is
S    * automatically appended with __OFFSET and __SIZE by the macro for usage.
S    *
S    * For fully qualified names of the register and bit fields and the possible
S    * values the field can take, please, refer to a respective PSoC family
S    * register TRM.
S    *
S    * \return Zero if the specified bit field is zero, and a non-zero value,
S    * otherwise. The return value is of type uint32.
S    *
S    *******************************************************************************/
S    #define CY_GET_REG8_FIELD(registerName, bitFieldName) \
S         ((CY_GET_REG8((registerName)) >> bitFieldName ## __OFFSET) & (~(0xFFu << bitFieldName ## __SIZE)))
X    #define CY_GET_REG8_FIELD(registerName, bitFieldName)          ((CY_GET_REG8((registerName)) >> bitFieldName ## __OFFSET) & (~(0xFFu << bitFieldName ## __SIZE)))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_SET_REG8_FIELD(registerName, bitFieldName, value)
S    ****************************************************************************//**
S    *
S    * Sets the specified bit field value of the specified 8-bit register to the
S    * required value.
S    *
S    * The macro operation is not atomic. It is not guaranteed that the shared
S    * register remains uncorrupted during simultaneous read-modify-write
S    * operation performed by two threads (main and interrupt threads). To
S    * guarantee data integrity in such cases, the macro should be invoked while
S    * the specific interrupt is disabled or within a critical section (all
S    * interrupts are disabled).
S    *
S    * Using this macro on the 32-bit and 16-bit width registers, generates a
S    * hard fault exception. Examples of 8-bit registers are the UDB registers.
S    *
S    * \param registerName The fully qualified name of the PSoC 4 device register.
S    * \param bitFieldName fully qualified name of the bit field. The biFieldName is
S    * automatically appended with __OFFSET and __SIZE by the macro for usage.
S    * \param value The value that the field must be configured for.
S    *
S    * For fully qualified names of the register and bit fields and the possible
S    * values the field can take, please, refer to a respective PSoC family
S    * register TRM.
S    *
S    *******************************************************************************/
S    #define CY_SET_REG8_FIELD(registerName, bitFieldName, value) \
S        CY_SET_REG8((registerName), \
S        ((CY_GET_REG8((registerName))                 & ~CY_GET_FIELD_MASK(8, bitFieldName)) | \
S        (((uint8)(value) << bitFieldName ## __OFFSET) &  CY_GET_FIELD_MASK(8, bitFieldName))))
X    #define CY_SET_REG8_FIELD(registerName, bitFieldName, value)         CY_SET_REG8((registerName),         ((CY_GET_REG8((registerName))                 & ~CY_GET_FIELD_MASK(8, bitFieldName)) |         (((uint8)(value) << bitFieldName ## __OFFSET) &  CY_GET_FIELD_MASK(8, bitFieldName))))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_CLEAR_REG8_FIELD(registerName, bitFieldName)
S    ****************************************************************************//**
S    *
S    * Clears the specified bit field of the specified 8-bit register.
S    *
S    * The macro operation is not atomic. It is not guaranteed that the shared
S    * register remains uncorrupted during simultaneous read-modify-write
S    * operation performed by two threads (main and interrupt threads). To
S    * guarantee data integrity in such cases, the macro should be invoked while
S    * the specific interrupt is disabled or within a critical section (all
S    * interrupts are disabled).
S    *
S    * Using this macro on the 32-bit and 16-bit width registers generates a
S    * hard fault exception. Examples of 8-bit registers are the UDB registers.
S    *
S    * \param registerName The fully qualified name of the PSoC 4 device register.
S    * \param bitFieldName fully qualified name of the bit field. The biFieldName is
S    * automatically appended with __OFFSET and __SIZE by the macro for usage.
S    *
S    * For fully qualified names of the register and bit fields and the
S    * possible values the field can take, please, refer to a respective PSoC
S    * family register TRM.
S    *
S    *******************************************************************************/
S    #define CY_CLEAR_REG8_FIELD(registerName, bitFieldName) \
S        (CY_SET_REG8((registerName), (CY_GET_REG8((registerName)) & ~CY_GET_FIELD_MASK(8, bitFieldName))))
X    #define CY_CLEAR_REG8_FIELD(registerName, bitFieldName)         (CY_SET_REG8((registerName), (CY_GET_REG8((registerName)) & ~CY_GET_FIELD_MASK(8, bitFieldName))))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_GET_REG16_FIELD(registerName, bitFieldName)
S    ****************************************************************************//**
S    *
S    * Reads the specified bit field value from the specified 16-bit register.
S    *
S    * The macro operation is not atomic. It is not guaranteed that the shared
S    * register remains uncorrupted during simultaneous read-modify-write
S    * operation performed by two threads (main and interrupt threads). To
S    * guarantee data integrity in such cases, the macro should be invoked while
S    * the specific interrupt is disabled or within a critical section (all
S    * interrupts are disabled).
S    *
S    * Using this macro on the 32-bit and 16-bit width registers generates a
S    * hardfault exception. Examples of 8-bit registers are the UDB registers.
S    *
S    * \param registerName The fully qualified name of the PSoC 4 device register.
S    * \param bitFieldName fully qualified name of the bit field. The biFieldName is
S    * automatically appended with __OFFSET and __SIZE by the macro for usage.
S    *
S    * For fully qualified names of the register and bit fields and the
S    * possible values the field can take, please, refer to a respective PSoC
S    * family register TRM.
S    *
S    * \return Zero if the specified bit field is zero, and a non-zero value,
S    * otherwise. The return value is of type uint32.
S    *
S    *******************************************************************************/
S    #define CY_GET_REG16_FIELD(registerName, bitFieldName) \
S         ((CY_GET_REG16((registerName)) >> bitFieldName ## __OFFSET) & (~(0xFFFFu << bitFieldName ## __SIZE)))
X    #define CY_GET_REG16_FIELD(registerName, bitFieldName)          ((CY_GET_REG16((registerName)) >> bitFieldName ## __OFFSET) & (~(0xFFFFu << bitFieldName ## __SIZE)))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_SET_REG16_FIELD(registerName, bitFieldName, value)
S    ****************************************************************************//**
S    *
S    * Sets the specified bit field value of the specified 16-bit register to the
S    * required value.
S    *
S    * The macro operation is not atomic. It is not guaranteed that the shared
S    * register remains uncorrupted during simultaneous read-modify-write operation
S    * performed by two threads (main and interrupt threads). To guarantee data
S    * integrity in such cases, the macro should be invoked while the specific
S    * interrupt is disabled or within a critical section (all interrupts are
S    * disabled).
S    *
S    * Using this macro on the 32-bit and 16-bit width registers generates a hard
S    * fault exception. Examples of 8-bit registers are the UDB registers.
S    *
S    * \param registerNam The fully qualified name of the PSoC 4 device register.
S    * \param bitFieldName: fully qualified name of the bit field. The biFieldName is
S    * automatically appended with __OFFSET and __SIZE by the macro for usage.
S    * \param value The value that the field must be configured for.
S    *
S    * For fully qualified names of the register and bit fields and the possible
S    * values the field can take, please, refer to a respective PSoC family
S    * register TRM.
S    *
S    *******************************************************************************/
S    #define CY_SET_REG16_FIELD(registerName, bitFieldName, value) \
S        CY_SET_REG16((registerName), \
S        ((CY_GET_REG16((registerName))                 & ~CY_GET_FIELD_MASK(16, bitFieldName)) | \
S        (((uint16)(value) << bitFieldName ## __OFFSET) &  CY_GET_FIELD_MASK(16, bitFieldName))))
X    #define CY_SET_REG16_FIELD(registerName, bitFieldName, value)         CY_SET_REG16((registerName),         ((CY_GET_REG16((registerName))                 & ~CY_GET_FIELD_MASK(16, bitFieldName)) |         (((uint16)(value) << bitFieldName ## __OFFSET) &  CY_GET_FIELD_MASK(16, bitFieldName))))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_CLEAR_REG16_FIELD(registerName, bitFieldName)
S    ****************************************************************************//**
S    *
S    * Clears the specified bit field of the specified 16-bit register.
S    *
S    * The macro operation is not atomic. It is not guaranteed that the shared
S    * register remains uncorrupted during simultaneous read-modify-write operation
S    * performed by two threads (main and interrupt threads). To guarantee data
S    * integrity in such cases, the macro should be invoked while the specific
S    * interrupt is disabled or within a critical section (all interrupts are
S    * disabled).
S    *
S    * Using this macro on the 32-bit and 16-bit width registers generates a hard
S    * fault exception. Examples of 8-bit registers are the UDB registers.
S    *
S    * \param registerName: The fully qualified name of the PSoC 4 device register.
S    * \param bitFieldName: fully qualified name of the bit field. The biFieldName is
S    * automatically appended with __OFFSET and __SIZE by the macro for usage.
S    *
S    * For fully qualified names of the register and bit fields and the possible
S    * values the field can take, please, refer to a respective PSoC family register
S    * TRM.
S    *
S    *******************************************************************************/
S    #define CY_CLEAR_REG16_FIELD(registerName, bitFieldName)\
S        (CY_SET_REG16((registerName), (CY_GET_REG16((registerName)) & ~CY_GET_FIELD_MASK(16, bitFieldName))))
X    #define CY_CLEAR_REG16_FIELD(registerName, bitFieldName)        (CY_SET_REG16((registerName), (CY_GET_REG16((registerName)) & ~CY_GET_FIELD_MASK(16, bitFieldName))))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_GET_REG32_FIELD(registerName, bitFieldName)
S    ****************************************************************************//**
S    *
S    * Reads the specified bit field value from the specified 32-bit register.
S    *
S    * The macro operation is not atomic. It is not guaranteed that the shared
S    * register remains uncorrupted during simultaneous read-modify-write operation
S    * performed by two threads (main and interrupt threads). To guarantee data
S    * integrity in such cases, the macro should be invoked while the specific
S    * interrupt is disabled or within a critical section (all interrupts are
S    * disabled).
S    *
S    * Using this macro on the 16-bit and 8-bit width registers generates a hard
S    * fault exception.
S    *
S    * \param registerName The fully qualified name of the PSoC 4 device register.
S    * \param bitFieldName The Fully qualified name of the bit field. The
S    * biFieldName is automatically appended with __OFFSET and __SIZE by the macro
S    * for usage.
S    *
S    * For fully qualified names of the register and bit fields, please, refer to
S    * a respective PSoC family register TRM.
S    *
S    * \return Zero if the specified bit field is zero, and a non-zero value, otherwise.
S    * The return value is of type uint32.
S    *
S    *******************************************************************************/
S    #define CY_GET_REG32_FIELD(registerName, bitFieldName) \
S          ((CY_GET_REG32((registerName)) >> bitFieldName ## __OFFSET) & (~(0xFFFFFFFFu << bitFieldName ## __SIZE)))
X    #define CY_GET_REG32_FIELD(registerName, bitFieldName)           ((CY_GET_REG32((registerName)) >> bitFieldName ## __OFFSET) & (~(0xFFFFFFFFu << bitFieldName ## __SIZE)))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_SET_REG32_FIELD(registerName, bitFieldName, value)
S    ****************************************************************************//**
S    *
S    * Sets the specified bit field value of the specified 32-bit register to the
S    * required value.
S    *
S    * The macro operation is not atomic. It is not guaranteed that the shared
S    * register remains uncorrupted during simultaneous read-modify-write operation
S    * performed by two threads (main and interrupt threads). To guarantee data
S    * integrity in such cases, the macro should be invoked while the specific
S    * interrupt is disabled or within a critical section (all interrupts are
S    * disabled).
S    *
S    * Using this macro on the 16-bit and 8-bit width registers generates a hard
S    * fault exception.
S    *
S    * \param registerName The fully qualified name of the PSoC 4 device register.
S    * \param bitFieldName The fully qualified name of the bit field. The
S    * biFieldName is automatically appended with __OFFSET and __SIZE by the macro
S    * for usage.
S    * \param value The value that the field must be configured for.
S    *
S    * For fully qualified names of the register and bit fields and the possible
S    * values the field can take, please, refer to a respective PSoC family register
S    * TRM.
S    *
S    *******************************************************************************/
S    #define CY_SET_REG32_FIELD(registerName, bitFieldName, value) \
S        CY_SET_REG32((registerName), \
S        ((CY_GET_REG32((registerName))                 & ~CY_GET_FIELD_MASK(32, bitFieldName)) | \
S        (((uint32)(value) << bitFieldName ## __OFFSET) &  CY_GET_FIELD_MASK(32, bitFieldName))))
X    #define CY_SET_REG32_FIELD(registerName, bitFieldName, value)         CY_SET_REG32((registerName),         ((CY_GET_REG32((registerName))                 & ~CY_GET_FIELD_MASK(32, bitFieldName)) |         (((uint32)(value) << bitFieldName ## __OFFSET) &  CY_GET_FIELD_MASK(32, bitFieldName))))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_CLEAR_REG32_FIELD(registerName, bitFieldName)
S    ****************************************************************************//**
S    *
S    * Clears the specified bit field of the specified 32-bit register.
S    *
S    * The macro operation is not atomic. It is not guaranteed that the shared
S    * register remains uncorrupted during simultaneous read-modify-write operation
S    * performed by two threads (main and interrupt threads). To guarantee data
S    * integrity in such cases, the macro should be invoked while the specific
S    * interrupt is disabled or within a critical section (all interrupts are
S    * disabled).
S    *
S    * Using this macro on the 16-bit and 8-bit width registers generates a hard
S    * fault exception.
S	*
S    * \param registerName The fully qualified name of the PSoC 4 device register.
S    * \param bitFieldName The fully qualified name of the bit field. The
S    * biFieldName is automatically appended with __OFFSET and __SIZE by the macro
S    * for usage.
S    *
S    * For fully qualified names of the register and bit fields and the possible
S    * values the field can take, please, refer to a respective PSoC family register
S    * TRM.
S    *
S    *******************************************************************************/
S    #define CY_CLEAR_REG32_FIELD(registerName, bitFieldName) \
S        (CY_SET_REG32((registerName), (CY_GET_REG32((registerName)) & ~CY_GET_FIELD_MASK(32, bitFieldName))))
X    #define CY_CLEAR_REG32_FIELD(registerName, bitFieldName)         (CY_SET_REG32((registerName), (CY_GET_REG32((registerName)) & ~CY_GET_FIELD_MASK(32, bitFieldName))))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_GET_FIELD(regValue, bitFieldName)
S    ****************************************************************************//**
S    *
S    * Reads the specified bit field value from the given 32-bit value.
S    *
S    * The macro operation is not atomic. It is not guaranteed that the shared
S    * register remains uncorrupted during simultaneous read-modify-write operation
S    * performed by two threads (main and interrupt threads). To guarantee data
S    * integrity in such cases, the macro should be invoked while the specific
S    * interrupt is disabled or within a critical section (all interrupts are
S    * disabled).
S    *
S    * This macro has to be used in conjunction with \ref CY_GET_REG32 for atomic
S    * reads.
S    *
S    * \param regValue The value as read by \ref CY_GET_REG32.
S    * \param bitFieldName The fully qualified name of the bit field. The
S    * biFieldName is automatically appended with __OFFSET and __SIZE by the macro
S    * for usage.
S    *
S    * For fully qualified names of the bit field and the possible values the field
S    * can take, please, refer to a respective PSoC family register TRM.
S    *
S    * \return Zero if the specified bit field is zero, and a non-zero value,
S    * otherwise. The return value is of type uint32.
S    *
S    *******************************************************************************/
S    #define CY_GET_FIELD(regValue, bitFieldName) \
S        (((regValue) >> bitFieldName ## __OFFSET) & (~(0xFFFFFFFFu << bitFieldName ## __SIZE)))
X    #define CY_GET_FIELD(regValue, bitFieldName)         (((regValue) >> bitFieldName ## __OFFSET) & (~(0xFFFFFFFFu << bitFieldName ## __SIZE)))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_SET_FIELD(regValue, bitFieldName, value)
S    ****************************************************************************//**
S    *
S    * Sets the specified bit field value within a given 32-bit value.
S    *
S    * The macro operation is not atomic. It is not guaranteed that the shared
S    * register remains uncorrupted during simultaneous read-modify-write operation
S    * performed by two threads (main and interrupt threads). To guarantee data
S    * integrity in such cases, the macro should be invoked while the specific
S    * interrupt is disabled or within a critical section (all interrupts are
S    * disabled).
S    *
S    * This macro has to be used in conjunction with \ref CY_GET_REG32 for atomic
S    * reads and \ref CY_SET_REG32 for atomic writes.
S    *
S    * \param regValue The value as read by \ref CY_GET_REG32.
S    * \param bitFieldName The fully qualified name of the bit field. The
S    * biFieldName is automatically appended with __OFFSET and __SIZE by the macro
S    * for usage.
S    * \param value The value that the field must be configured for.
S    *
S    * For fully qualified names of the bit field and the possible values the field
S    * can take, please, refer to the respective PSoC family register TRM.
S    *
S    *******************************************************************************/
S    #define CY_SET_FIELD(regValue, bitFieldName, value) \
S        ((regValue) = \
S        ((((uint32)(value) & (~(0xFFFFFFu << bitFieldName ## __SIZE))) << bitFieldName ## __OFFSET)) | \
S        ((uint32)(regValue) & (((~(0xFFu << bitFieldName ## __SIZE))) << bitFieldName ## __OFFSET)))
X    #define CY_SET_FIELD(regValue, bitFieldName, value)         ((regValue) =         ((((uint32)(value) & (~(0xFFFFFFu << bitFieldName ## __SIZE))) << bitFieldName ## __OFFSET)) |         ((uint32)(regValue) & (((~(0xFFu << bitFieldName ## __SIZE))) << bitFieldName ## __OFFSET)))
S
N#endif  /* (CY_PSOC4) */
N
N/** @} group_register_access_bits */
N
N
N/*******************************************************************************
N*  Data manipulation defines
N*******************************************************************************/
N
N/* Get 8 bits of 16 bit value. */
N#define LO8(x)                  ((uint8) ((x) & 0xFFu))
N#define HI8(x)                  ((uint8) ((uint16)(x) >> 8))
N
N/* Get 16 bits of 32 bit value. */
N#define LO16(x)                 ((uint16) ((x) & 0xFFFFu))
N#define HI16(x)                 ((uint16) ((uint32)(x) >> 16))
N
N/* Swap the byte ordering of 32 bit value */
N#define CYSWAP_ENDIAN32(x)  \
N        ((uint32)((((x) >> 24) & 0x000000FFu) | (((x) & 0x00FF0000u) >> 8) | (((x) & 0x0000FF00u) << 8) | ((x) << 24)))
X#define CYSWAP_ENDIAN32(x)          ((uint32)((((x) >> 24) & 0x000000FFu) | (((x) & 0x00FF0000u) >> 8) | (((x) & 0x0000FF00u) << 8) | ((x) << 24)))
N
N/* Swap the byte ordering of 16 bit value */
N#define CYSWAP_ENDIAN16(x)      ((uint16)(((x) << 8) | (((x) >> 8) & 0x00FFu)))
N
N
N/*******************************************************************************
N* Defines the standard return values used in PSoC content. A function is
N* not limited to these return values but can use them when returning standard
N* error values. Return values can be overloaded if documented in the function
N* header. On the 8051 a function can use a larger return type but still use the
N* defined return codes.
N*
N* Zero is successful, all other values indicate some form of failure. 1 - 0x7F -
N* standard defined values; 0x80 - ...  - user or content defined values.
N*******************************************************************************/
N#define CYRET_SUCCESS           (0x00u)           /* Successful */
N#define CYRET_BAD_PARAM         (0x01u)           /* One or more invalid parameters */
N#define CYRET_INVALID_OBJECT    (0x02u)           /* Invalid object specified */
N#define CYRET_MEMORY            (0x03u)           /* Memory related failure */
N#define CYRET_LOCKED            (0x04u)           /* Resource lock failure */
N#define CYRET_EMPTY             (0x05u)           /* No more objects available */
N#define CYRET_BAD_DATA          (0x06u)           /* Bad data received (CRC or other error check) */
N#define CYRET_STARTED           (0x07u)           /* Operation started, but not necessarily completed yet */
N#define CYRET_FINISHED          (0x08u)           /* Operation completed */
N#define CYRET_CANCELED          (0x09u)           /* Operation canceled */
N#define CYRET_TIMEOUT           (0x10u)           /* Operation timed out */
N#define CYRET_INVALID_STATE     (0x11u)           /* Operation not setup or is in an improper state */
N#define CYRET_UNKNOWN           ((cystatus) 0xFFFFFFFFu)    /* Unknown failure */
N
N
N/*******************************************************************************
N*   Intrinsic Defines: Processor NOP instruction
N*******************************************************************************/
N#if(CY_PSOC3)
X#if((3u == 1u))
S
S    #define CY_NOP          _nop_()
S
N#else
N
N    #if defined(__ARMCC_VERSION)
X    #if 1L
N
N        /* RealView */
N        #define CY_NOP      __nop()
N
N    #else
S
S        /* GCC */
S        #define CY_NOP      __asm("NOP\n")
S
N    #endif  /* defined(__ARMCC_VERSION) */
N
N#endif  /* (CY_PSOC3) */
N
N
N/*******************************************************************************
N* The following code is OBSOLETE and must not be used starting from cy_boot 5.10
N*
N* If the obsoleted macro definitions intended for use in the application use the
N* following scheme, redefine your own versions of these definitions:
N*    #ifdef <OBSOLETED_DEFINE>
N*        #undef  <OBSOLETED_DEFINE>
N*        #define <OBSOLETED_DEFINE>      (<New Value>)
N*    #endif
N*
N* Note: Redefine obsoleted macro definitions with caution. They might still be
N*       used in the application and their modification might lead to unexpected
N*       consequences.
N*******************************************************************************/
N#define CY_IP_S8FS      CY_IP_FS
N
N
N/*******************************************************************************
N* The following code is OBSOLETE and must not be used starting from cy_boot 3.10
N*******************************************************************************/
N#define CY_UDB_V0           (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_5A)
N#define CY_UDB_V1           (!CY_UDB_V0)
N#define CY_PSOC4A  (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4A)
N#ifdef CYDEV_CHIP_MEMBER_4D
N    #define CY_PSOC4D   (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4D)
N    #define CY_PSOC4SF  (CY_PSOC4D)
N#else
S    #define CY_PSOC4D   (0u != 0u)
S    #define CY_PSOC4SF  (CY_PSOC4D)
N#endif  /* CYDEV_CHIP_MEMBER_4D */
N#define CY_PSOC5A  (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_5A)
N#ifdef CYDEV_CHIP_MEMBER_5B
N    #define CY_PSOC5LP  (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_5B)
N#else
S    #define CY_PSOC5LP  (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_5B */
N
N#if (!CY_PSOC4)
X#if (!(3u == 2u))
N
N    /* Device is PSoC 3 and the revision is ES2 or earlier */
N    #define CY_PSOC3_ES2 ((CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_3A) && \
N        (CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_3A_ES2))
X    #define CY_PSOC3_ES2 ((CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_3A) &&         (CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_3A_ES2))
N
N    /* Device is PSoC 3 and the revision is ES3 or later */
N    #define CY_PSOC3_ES3 ((CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_3A) && \
N        (CYDEV_CHIP_REVISION_USED >= CYDEV_CHIP_REVISION_3A_ES3))
X    #define CY_PSOC3_ES3 ((CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_3A) &&         (CYDEV_CHIP_REVISION_USED >= CYDEV_CHIP_REVISION_3A_ES3))
N
N    /* Device is PSoC 5 and the revision is ES1 or earlier */
N    #define CY_PSOC5_ES1 (CY_PSOC5A && \
N        (CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_5A_ES1))
X    #define CY_PSOC5_ES1 (CY_PSOC5A &&         (CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_5A_ES1))
N
N    /* Device is PSoC 5 and the revision is ES2 or later */
N    #define CY_PSOC5_ES2 (CY_PSOC5A && \
N        (CYDEV_CHIP_REVISION_USED > CYDEV_CHIP_REVISION_5A_ES1))
X    #define CY_PSOC5_ES2 (CY_PSOC5A &&         (CYDEV_CHIP_REVISION_USED > CYDEV_CHIP_REVISION_5A_ES1))
N
N#endif  /* (!CY_PSOC4) */
N
N#endif  /* CY_BOOT_CYTYPES_H */
N
N
N/* [] END OF FILE */
L 21 "Generated_Source\PSoC5\cyfitter_cfg.h" 2
N
Nextern void cyfitter_cfg(void);
N
N/* Analog Set/Unset methods */
Nextern void SetAnalogRoutingPumps(uint8 enabled);
N
N
N#endif /* CYFITTER_CFG_H */
N
N/*[]*/
L 18 "Generated_Source\PSoC5\project.h" 2
N#include "cydevice.h"
N#include "cydevice_trm.h"
N#include "cyfitter.h"
N#include "cydisabledsheets.h"
L 1 "Generated_Source\PSoC5\cydisabledsheets.h" 1
N#ifndef INCLUDED_CYDISABLEDSHEETS_H
N#define INCLUDED_CYDISABLEDSHEETS_H
N
N
N#endif /* INCLUDED_CYDISABLEDSHEETS_H */
L 22 "Generated_Source\PSoC5\project.h" 2
N#include "core_cm3_psoc5.h"
L 1 "Generated_Source\PSoC5\core_cm3_psoc5.h" 1
N/*******************************************************************************
N* \file core_cm3_psoc5.h
N* \version 6.10
N*
N* \brief Provides important type information for the PSoC5.  This includes types
N* necessary for core_cm3.h.
N*
N* \note Documentation of the API's in this file is located in the
N* System Reference Guide provided with PSoC Creator.
N*
N********************************************************************************
N* Copyright 2008-2021, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions,
N* disclaimers, and limitations in the end user license agreement accompanying
N* the software package with which this file was provided.
N********************************************************************************/
N
N
N#if !defined(__CORE_CM3_PSOC5_H__)
X#if !0L
N#define __CORE_CM3_PSOC5_H__
N
N/** Interrupt Number Definition */
Ntypedef enum IRQn
N{
N/******  Cortex-M3 Processor Exceptions Numbers ***************************************************/
N  NonMaskableInt_IRQn   = -14,              /*!< 2 Non Maskable Interrupt                         */
N  HardFault_IRQn        = -13,              /*!< 3 Cortex-M3 Hard Fault Interrupt                 */
N  MemoryManagement_IRQn = -12,              /*!< 4 Cortex-M3 Memory Management Interrupt          */
N  BusFault_IRQn         = -11,              /*!< 5 Cortex-M3 Bus Fault Interrupt                  */
N  UsageFault_IRQn       = -10,              /*!< 6 Cortex-M3 Usage Fault Interrupt                */
N  SVCall_IRQn           = -5,               /*!< 11 Cortex-M3 SV Call Interrupt                   */
N  DebugMonitor_IRQn     = -4,               /*!< 12 Cortex-M3 Debug Monitor Interrupt             */
N  PendSV_IRQn           = -2,               /*!< 14 Cortex-M3 Pend SV Interrupt                   */
N  SysTick_IRQn          = -1                /*!< 15 Cortex-M3 System Tick Interrupt               */
N/******  PSoC5 Peripheral Interrupt Numbers *******************************************************/
N  /* Not relevant.  All peripheral interrupts are defined by the user */
N} IRQn_Type;
N
N#include <cytypes.h>
N
N#define __CHECK_DEVICE_DEFINES
N
N#define __CM3_REV                 0x0201
N
N#define __MPU_PRESENT             0
N#define __NVIC_PRIO_BITS          3
N#define __Vendor_SysTickConfig    0
N
N#include <core_cm3.h>
L 1 "Generated_Source\PSoC5\core_cm3.h" 1
N/**************************************************************************//**
N * @file     core_cm3.h
N * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
N * @version  V5.00
N * @date     13. September 2016
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * http://www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060960 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CM3_H_GENERIC
N#define __CORE_CM3_H_GENERIC
N
N#include <stdint.h>
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/**
N  \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
N  CMSIS violates the following MISRA-C:2004 rules:
N
N   \li Required Rule 8.5, object/function definition in header file.<br>
N     Function definitions in header files are used to allow 'inlining'.
N
N   \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
N     Unions are used for effective representation of core registers.
N
N   \li Advisory Rule 19.7, Function-like macro defined.<br>
N     Function-like macros are used to allow more efficient code.
N */
N
N
N/*******************************************************************************
N *                 CMSIS definitions
N ******************************************************************************/
N/**
N  \ingroup Cortex_M3
N  @{
N */
N
N/*  CMSIS CM3 definitions */
N#define __CM3_CMSIS_VERSION_MAIN  ( 5U)                                  /*!< [31:16] CMSIS HAL main version */
N#define __CM3_CMSIS_VERSION_SUB   ( 0U)                                  /*!< [15:0]  CMSIS HAL sub version */
N#define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16U) | \
N                                    __CM3_CMSIS_VERSION_SUB           )  /*!< CMSIS HAL version number */
X#define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16U) |                                     __CM3_CMSIS_VERSION_SUB           )   
N
N#define __CORTEX_M                (3U)                                   /*!< Cortex-M Core */
N
N/** __FPU_USED indicates whether an FPU is used or not.
N    This core does not support an FPU at all
N*/
N#define __FPU_USED       0U
N
N#if defined ( __CC_ARM )
X#if 1L
N  #if defined __TARGET_FPU_VFP
X  #if 0L
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
N  #endif
N
N#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #if defined __ARM_PCS_VFP
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __GNUC__ )
S  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __ICCARM__ )
S  #if defined __ARMVFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TI_ARM__ )
S  #if defined __TI_VFP_SUPPORT__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TASKING__ )
S  #if defined __FPU_VFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __CSMC__ )
S  #if ( __CSMC__ & 0x400U)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
N#endif
N
N#include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
L 1 "Generated_Source\PSoC5\cmsis_compiler.h" 1
N/**************************************************************************//**
N * @file     cmsis_compiler.h
N * @brief    CMSIS compiler specific macros, functions, instructions
N * @version  V5.00
N * @date     09. November 2016
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * http://www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_COMPILER_H
N#define __CMSIS_COMPILER_H
N
N#include <stdint.h>
N
N/*
N * ARM Compiler 4/5
N */
N#if   defined ( __CC_ARM )
X#if   1L
N  #include "cmsis_armcc.h"
L 1 "Generated_Source\PSoC5\cmsis_armcc.h" 1
N/**************************************************************************//**
N * @file     cmsis_armcc.h
N * @brief    CMSIS Cortex-M Core Function/Instruction Header File
N * @version  V5.00
N * @date     27. September 2016
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * http://www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_ARMCC_H
N#define __CMSIS_ARMCC_H
N
N
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 400677)
X#if 1L && (5060960 < 400677)
S  #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
N#endif
N
N/* CMSIS compiler control architecture macros */
N#if (defined (__TARGET_ARCH_6_M ) && (__TARGET_ARCH_6_M  == 1))
X#if (0L && (__TARGET_ARCH_6_M  == 1))
S  #define __ARM_ARCH_6M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7_M ) && (__TARGET_ARCH_7_M  == 1))
X#if (1L && (1  == 1))
N  #define __ARM_ARCH_7M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7E_M) && (__TARGET_ARCH_7E_M == 1))
X#if (0L && (__TARGET_ARCH_7E_M == 1))
S  #define __ARM_ARCH_7EM__          1
N#endif
N
N  /* __ARM_ARCH_8M_BASE__  not applicable */
N  /* __ARM_ARCH_8M_MAIN__  not applicable */
N
N
N/* CMSIS compiler specific defines */
N#ifndef   __ASM
N  #define __ASM                     __asm
N#endif
N#ifndef   __INLINE
N  #define __INLINE                  __inline
N#endif
N#ifndef   __STATIC_INLINE
N  #define __STATIC_INLINE           static __inline
N#endif
N#ifndef   __NO_RETURN
N  #define __NO_RETURN               __declspec(noreturn)
N#endif
N#ifndef   __USED
N  #define __USED                    __attribute__((used))
N#endif
N#ifndef   __WEAK
N  #define __WEAK                    __attribute__((weak))
N#endif
N#ifndef   __UNALIGNED_UINT32
N  #define __UNALIGNED_UINT32(x)     (*((__packed uint32_t *)(x)))
N#endif
N#ifndef   __ALIGNED
N  #define __ALIGNED(x)              __attribute__((aligned(x)))
N#endif
N#ifndef   __PACKED
N  #define __PACKED                  __attribute__((packed))
N#endif
N
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N */
N
N/**
N  \brief   Enable IRQ Interrupts
N  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __enable_irq();     */
N
N
N/**
N  \brief   Disable IRQ Interrupts
N  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __disable_irq();    */
N
N/**
N  \brief   Get Control Register
N  \details Returns the content of the Control Register.
N  \return               Control Register value
N */
N__STATIC_INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N
N
N/**
N  \brief   Set Control Register
N  \details Writes the given value to the Control Register.
N  \param [in]    control  Control Register value to set
N */
N__STATIC_INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N
N
N/**
N  \brief   Get IPSR Register
N  \details Returns the content of the IPSR Register.
N  \return               IPSR Register value
N */
N__STATIC_INLINE uint32_t __get_IPSR(void)
Xstatic __inline uint32_t __get_IPSR(void)
N{
N  register uint32_t __regIPSR          __ASM("ipsr");
X  register uint32_t __regIPSR          __asm("ipsr");
N  return(__regIPSR);
N}
N
N
N/**
N  \brief   Get APSR Register
N  \details Returns the content of the APSR Register.
N  \return               APSR Register value
N */
N__STATIC_INLINE uint32_t __get_APSR(void)
Xstatic __inline uint32_t __get_APSR(void)
N{
N  register uint32_t __regAPSR          __ASM("apsr");
X  register uint32_t __regAPSR          __asm("apsr");
N  return(__regAPSR);
N}
N
N
N/**
N  \brief   Get xPSR Register
N  \details Returns the content of the xPSR Register.
N  \return               xPSR Register value
N */
N__STATIC_INLINE uint32_t __get_xPSR(void)
Xstatic __inline uint32_t __get_xPSR(void)
N{
N  register uint32_t __regXPSR          __ASM("xpsr");
X  register uint32_t __regXPSR          __asm("xpsr");
N  return(__regXPSR);
N}
N
N
N/**
N  \brief   Get Process Stack Pointer
N  \details Returns the current value of the Process Stack Pointer (PSP).
N  \return               PSP Register value
N */
N__STATIC_INLINE uint32_t __get_PSP(void)
Xstatic __inline uint32_t __get_PSP(void)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  return(__regProcessStackPointer);
N}
N
N
N/**
N  \brief   Set Process Stack Pointer
N  \details Assigns the given value to the Process Stack Pointer (PSP).
N  \param [in]    topOfProcStack  Process Stack Pointer value to set
N */
N__STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
Xstatic __inline void __set_PSP(uint32_t topOfProcStack)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  __regProcessStackPointer = topOfProcStack;
N}
N
N
N/**
N  \brief   Get Main Stack Pointer
N  \details Returns the current value of the Main Stack Pointer (MSP).
N  \return               MSP Register value
N */
N__STATIC_INLINE uint32_t __get_MSP(void)
Xstatic __inline uint32_t __get_MSP(void)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  return(__regMainStackPointer);
N}
N
N
N/**
N  \brief   Set Main Stack Pointer
N  \details Assigns the given value to the Main Stack Pointer (MSP).
N  \param [in]    topOfMainStack  Main Stack Pointer value to set
N */
N__STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
Xstatic __inline void __set_MSP(uint32_t topOfMainStack)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  __regMainStackPointer = topOfMainStack;
N}
N
N
N/**
N  \brief   Get Priority Mask
N  \details Returns the current state of the priority mask bit from the Priority Mask Register.
N  \return               Priority Mask value
N */
N__STATIC_INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N
N
N/**
N  \brief   Set Priority Mask
N  \details Assigns the given value to the Priority Mask Register.
N  \param [in]    priMask  Priority Mask
N */
N__STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((1L && (1  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
N
N/**
N  \brief   Enable FIQ
N  \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N#define __enable_fault_irq                __enable_fiq
N
N
N/**
N  \brief   Disable FIQ
N  \details Disables FIQ interrupts by setting the F-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N#define __disable_fault_irq               __disable_fiq
N
N
N/**
N  \brief   Get Base Priority
N  \details Returns the current value of the Base Priority register.
N  \return               Base Priority register value
N */
N__STATIC_INLINE uint32_t  __get_BASEPRI(void)
Xstatic __inline uint32_t  __get_BASEPRI(void)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  return(__regBasePri);
N}
N
N
N/**
N  \brief   Set Base Priority
N  \details Assigns the given value to the Base Priority register.
N  \param [in]    basePri  Base Priority value to set
N */
N__STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
Xstatic __inline void __set_BASEPRI(uint32_t basePri)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  __regBasePri = (basePri & 0xFFU);
N}
N
N
N/**
N  \brief   Set Base Priority with condition
N  \details Assigns the given value to the Base Priority register only if BASEPRI masking is disabled,
N           or the new value increases the BASEPRI priority level.
N  \param [in]    basePri  Base Priority value to set
N */
N__STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
Xstatic __inline void __set_BASEPRI_MAX(uint32_t basePri)
N{
N  register uint32_t __regBasePriMax      __ASM("basepri_max");
X  register uint32_t __regBasePriMax      __asm("basepri_max");
N  __regBasePriMax = (basePri & 0xFFU);
N}
N
N
N/**
N  \brief   Get Fault Mask
N  \details Returns the current value of the Fault Mask register.
N  \return               Fault Mask register value
N */
N__STATIC_INLINE uint32_t __get_FAULTMASK(void)
Xstatic __inline uint32_t __get_FAULTMASK(void)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  return(__regFaultMask);
N}
N
N
N/**
N  \brief   Set Fault Mask
N  \details Assigns the given value to the Fault Mask register.
N  \param [in]    faultMask  Fault Mask value to set
N */
N__STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
Xstatic __inline void __set_FAULTMASK(uint32_t faultMask)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  __regFaultMask = (faultMask & (uint32_t)1U);
N}
N
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7EM__ == 1))     )
S
S/**
S  \brief   Get FPSCR
S  \details Returns the current value of the Floating Point Status/Control register.
S  \return               Floating Point Status/Control register value
S */
S__STATIC_INLINE uint32_t __get_FPSCR(void)
S{
S#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
S     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) &&      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  return(__regfpscr);
S#else
S   return(0U);
S#endif
S}
S
S
S/**
S  \brief   Set FPSCR
S  \details Assigns the given value to the Floating Point Status/Control register.
S  \param [in]    fpscr  Floating Point Status/Control value to set
S */
S__STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
S{
S#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
S     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) &&      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  __regfpscr = (fpscr);
S#endif
S}
S
N#endif /* ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
N
N
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N/**
N  \brief   No Operation
N  \details No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N#define __NOP                             __nop
N
N
N/**
N  \brief   Wait For Interrupt
N  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
N */
N#define __WFI                             __wfi
N
N
N/**
N  \brief   Wait For Event
N  \details Wait For Event is a hint instruction that permits the processor to enter
N           a low-power state until one of a number of events occurs.
N */
N#define __WFE                             __wfe
N
N
N/**
N  \brief   Send Event
N  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
N */
N#define __SEV                             __sev
N
N
N/**
N  \brief   Instruction Synchronization Barrier
N  \details Instruction Synchronization Barrier flushes the pipeline in the processor,
N           so that all instructions following the ISB are fetched from cache or memory,
N           after the instruction has been completed.
N */
N#define __ISB() do {\
N                   __schedule_barrier();\
N                   __isb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __ISB() do {                   __schedule_barrier();                   __isb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Data Synchronization Barrier
N  \details Acts as a special kind of Data Memory Barrier.
N           It completes when all explicit memory accesses before this instruction complete.
N */
N#define __DSB() do {\
N                   __schedule_barrier();\
N                   __dsb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __DSB() do {                   __schedule_barrier();                   __dsb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Data Memory Barrier
N  \details Ensures the apparent order of the explicit memory operations before
N           and after the instruction, without ensuring their completion.
N */
N#define __DMB() do {\
N                   __schedule_barrier();\
N                   __dmb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __DMB() do {                   __schedule_barrier();                   __dmb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Reverse byte order (32 bit)
N  \details Reverses the byte order in integer value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#define __REV                             __rev
N
N
N/**
N  \brief   Reverse byte order (16 bit)
N  \details Reverses the byte order in two unsigned short values.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
X__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
N{
N  rev16 r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Reverse byte order in signed short value
N  \details Reverses the byte order in a signed short value with sign extension to integer.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
X__attribute__((section(".revsh_text"))) static __inline __asm int32_t __REVSH(int32_t value)
N{
N  revsh r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Rotate Right in unsigned value (32 bit)
N  \details Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.
N  \param [in]    op1  Value to rotate
N  \param [in]    op2  Number of Bits to rotate
N  \return               Rotated value
N */
N#define __ROR                             __ror
N
N
N/**
N  \brief   Breakpoint
N  \details Causes the processor to enter Debug state.
N           Debug tools can use this to investigate system state when the instruction at a particular address is reached.
N  \param [in]    value  is ignored by the processor.
N                 If required, a debugger can use it to store additional information about the breakpoint.
N */
N#define __BKPT(value)                       __breakpoint(value)
N
N
N/**
N  \brief   Reverse bit order of value
N  \details Reverses the bit order of the given value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((1L && (1  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
N  #define __RBIT                          __rbit
N#else
S__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
S{
S  uint32_t result;
S  int32_t s = (4 /*sizeof(v)*/ * 8) - 1; /* extra shift needed at end */
S
S  result = value;                      /* r will be reversed bits of v; first get LSB of v */
S  for (value >>= 1U; value; value >>= 1U)
S  {
S    result <<= 1U;
S    result |= value & 1U;
S    s--;
S  }
S  result <<= s;                        /* shift when v's highest bits are zero */
S  return(result);
S}
N#endif
N
N
N/**
N  \brief   Count leading zeros
N  \details Counts the number of leading zeros of a data value.
N  \param [in]  value  Value to count the leading zeros
N  \return             number of leading zeros in value
N */
N#define __CLZ                             __clz
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((1L && (1  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
N
N/**
N  \brief   LDR Exclusive (8 bit)
N  \details Executes a exclusive LDR instruction for 8 bit value.
N  \param [in]    ptr  Pointer to data
N  \return             value of type uint8_t at (*ptr)
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060960 < 5060020)
S  #define __LDREXB(ptr)                                                        ((uint8_t ) __ldrex(ptr))
N#else
N  #define __LDREXB(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint8_t ) __ldrex(ptr))  _Pragma("pop")
N#endif
N
N
N/**
N  \brief   LDR Exclusive (16 bit)
N  \details Executes a exclusive LDR instruction for 16 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint16_t at (*ptr)
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060960 < 5060020)
S  #define __LDREXH(ptr)                                                        ((uint16_t) __ldrex(ptr))
N#else
N  #define __LDREXH(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint16_t) __ldrex(ptr))  _Pragma("pop")
N#endif
N
N
N/**
N  \brief   LDR Exclusive (32 bit)
N  \details Executes a exclusive LDR instruction for 32 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint32_t at (*ptr)
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060960 < 5060020)
S  #define __LDREXW(ptr)                                                        ((uint32_t ) __ldrex(ptr))
N#else
N  #define __LDREXW(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint32_t ) __ldrex(ptr))  _Pragma("pop")
N#endif
N
N
N/**
N  \brief   STR Exclusive (8 bit)
N  \details Executes a exclusive STR instruction for 8 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N  \return          0  Function succeeded
N  \return          1  Function failed
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060960 < 5060020)
S  #define __STREXB(value, ptr)                                                 __strex(value, ptr)
N#else
N  #define __STREXB(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
N#endif
N
N
N/**
N  \brief   STR Exclusive (16 bit)
N  \details Executes a exclusive STR instruction for 16 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N  \return          0  Function succeeded
N  \return          1  Function failed
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060960 < 5060020)
S  #define __STREXH(value, ptr)                                                 __strex(value, ptr)
N#else
N  #define __STREXH(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
N#endif
N
N
N/**
N  \brief   STR Exclusive (32 bit)
N  \details Executes a exclusive STR instruction for 32 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N  \return          0  Function succeeded
N  \return          1  Function failed
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060960 < 5060020)
S  #define __STREXW(value, ptr)                                                 __strex(value, ptr)
N#else
N  #define __STREXW(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
N#endif
N
N
N/**
N  \brief   Remove the exclusive lock
N  \details Removes the exclusive lock which is created by LDREX.
N */
N#define __CLREX                           __clrex
N
N
N/**
N  \brief   Signed Saturate
N  \details Saturates a signed value.
N  \param [in]  value  Value to be saturated
N  \param [in]    sat  Bit position to saturate to (1..32)
N  \return             Saturated value
N */
N#define __SSAT                            __ssat
N
N
N/**
N  \brief   Unsigned Saturate
N  \details Saturates an unsigned value.
N  \param [in]  value  Value to be saturated
N  \param [in]    sat  Bit position to saturate to (0..31)
N  \return             Saturated value
N */
N#define __USAT                            __usat
N
N
N/**
N  \brief   Rotate Right with Extend (32 bit)
N  \details Moves each bit of a bitstring right by one bit.
N           The carry input is shifted in at the left end of the bitstring.
N  \param [in]    value  Value to rotate
N  \return               Rotated value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
X__attribute__((section(".rrx_text"))) static __inline __asm uint32_t __RRX(uint32_t value)
N{
N  rrx r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   LDRT Unprivileged (8 bit)
N  \details Executes a Unprivileged LDRT instruction for 8 bit value.
N  \param [in]    ptr  Pointer to data
N  \return             value of type uint8_t at (*ptr)
N */
N#define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
N
N
N/**
N  \brief   LDRT Unprivileged (16 bit)
N  \details Executes a Unprivileged LDRT instruction for 16 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint16_t at (*ptr)
N */
N#define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
N
N
N/**
N  \brief   LDRT Unprivileged (32 bit)
N  \details Executes a Unprivileged LDRT instruction for 32 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint32_t at (*ptr)
N */
N#define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
N
N
N/**
N  \brief   STRT Unprivileged (8 bit)
N  \details Executes a Unprivileged STRT instruction for 8 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N */
N#define __STRBT(value, ptr)               __strt(value, ptr)
N
N
N/**
N  \brief   STRT Unprivileged (16 bit)
N  \details Executes a Unprivileged STRT instruction for 16 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N */
N#define __STRHT(value, ptr)               __strt(value, ptr)
N
N
N/**
N  \brief   STRT Unprivileged (32 bit)
N  \details Executes a Unprivileged STRT instruction for 32 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N */
N#define __STRT(value, ptr)                __strt(value, ptr)
N
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N/** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
N  Access to dedicated SIMD instructions
N  @{
N*/
N
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7EM__ == 1))     )
S
S#define __SADD8                           __sadd8
S#define __QADD8                           __qadd8
S#define __SHADD8                          __shadd8
S#define __UADD8                           __uadd8
S#define __UQADD8                          __uqadd8
S#define __UHADD8                          __uhadd8
S#define __SSUB8                           __ssub8
S#define __QSUB8                           __qsub8
S#define __SHSUB8                          __shsub8
S#define __USUB8                           __usub8
S#define __UQSUB8                          __uqsub8
S#define __UHSUB8                          __uhsub8
S#define __SADD16                          __sadd16
S#define __QADD16                          __qadd16
S#define __SHADD16                         __shadd16
S#define __UADD16                          __uadd16
S#define __UQADD16                         __uqadd16
S#define __UHADD16                         __uhadd16
S#define __SSUB16                          __ssub16
S#define __QSUB16                          __qsub16
S#define __SHSUB16                         __shsub16
S#define __USUB16                          __usub16
S#define __UQSUB16                         __uqsub16
S#define __UHSUB16                         __uhsub16
S#define __SASX                            __sasx
S#define __QASX                            __qasx
S#define __SHASX                           __shasx
S#define __UASX                            __uasx
S#define __UQASX                           __uqasx
S#define __UHASX                           __uhasx
S#define __SSAX                            __ssax
S#define __QSAX                            __qsax
S#define __SHSAX                           __shsax
S#define __USAX                            __usax
S#define __UQSAX                           __uqsax
S#define __UHSAX                           __uhsax
S#define __USAD8                           __usad8
S#define __USADA8                          __usada8
S#define __SSAT16                          __ssat16
S#define __USAT16                          __usat16
S#define __UXTB16                          __uxtb16
S#define __UXTAB16                         __uxtab16
S#define __SXTB16                          __sxtb16
S#define __SXTAB16                         __sxtab16
S#define __SMUAD                           __smuad
S#define __SMUADX                          __smuadx
S#define __SMLAD                           __smlad
S#define __SMLADX                          __smladx
S#define __SMLALD                          __smlald
S#define __SMLALDX                         __smlaldx
S#define __SMUSD                           __smusd
S#define __SMUSDX                          __smusdx
S#define __SMLSD                           __smlsd
S#define __SMLSDX                          __smlsdx
S#define __SMLSLD                          __smlsld
S#define __SMLSLDX                         __smlsldx
S#define __SEL                             __sel
S#define __QADD                            __qadd
S#define __QSUB                            __qsub
S
S#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |  \
S                                           ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
X#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |                                             ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
S
S#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |  \
S                                           ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
X#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |                                             ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
S
S#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) + \
S                                                      ((int64_t)(ARG3) << 32U)     ) >> 32U))
X#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) +                                                       ((int64_t)(ARG3) << 32U)     ) >> 32U))
S
N#endif /* ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
N/*@} end of group CMSIS_SIMD_intrinsics */
N
N
N#endif /* __CMSIS_ARMCC_H */
L 35 "Generated_Source\PSoC5\cmsis_compiler.h" 2
N
N
N/*
N * ARM Compiler 6 (armclang)
N */
N#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #include "cmsis_armclang.h"
S
S
S/*
S * GNU Compiler
S */
S#elif defined ( __GNUC__ )
S  #include "cmsis_gcc.h"
S
S
S/*
S * IAR Compiler
S */
S#elif defined ( __ICCARM__ )
S
S  #ifndef   __ASM
S    #define __ASM                     __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                  inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE           static inline
S  #endif
S
S  #include <cmsis_iar.h>
S
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN               __noreturn
S  #endif
S  #ifndef   __USED
S    #define __USED                    __root
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                    __weak
S  #endif
S  #ifndef   __UNALIGNED_UINT32
S    __packed struct T_UINT32 { uint32_t v; };
S      #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                  __packed
S  #endif
S
S
S/*
S * TI ARM Compiler
S */
S#elif defined ( __TI_ARM__ )
S  #include <cmsis_ccs.h>
S
S  #ifndef   __ASM
S    #define __ASM                     __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                  inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE           static inline
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN               __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                    __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                    __attribute__((weak))
S  #endif
S  #ifndef   __UNALIGNED_UINT32
S    struct __attribute__((packed)) T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)              __attribute__((aligned(x)))
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                  __attribute__((packed))
S  #endif
S
S
S/*
S * TASKING Compiler
S */
S#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S  #ifndef   __ASM
S    #define __ASM                     __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                  inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE           static inline
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN               __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                    __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                    __attribute__((weak))
S  #endif
S  #ifndef   __UNALIGNED_UINT32
S    struct __packed__ T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)              __align(x)
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                  __packed__
S  #endif
S
S
S/*
S * COSMIC Compiler
S */
S#elif defined ( __CSMC__ )
S   #include <cmsis_csm.h>
S
S #ifndef   __ASM
S    #define __ASM                     _asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                  inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE           static inline
S  #endif
S  #ifndef   __NO_RETURN
S    // NO RETURN is automatically detected hence no warning here
S    #define __NO_RETURN
S  #endif
S  #ifndef   __USED
S    #warning No compiler specific solution for __USED. __USED is ignored.
S    #define __USED
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                    __weak
S  #endif
S  #ifndef   __UNALIGNED_UINT32
S    @packed struct T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #warning No compiler specific solution for __ALIGNED. __ALIGNED is ignored.
S    #define __ALIGNED(x)
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                  @packed
S  #endif
S
S
S#else
S  #error Unknown compiler.
N#endif
N
N
N#endif /* __CMSIS_COMPILER_H */
N
L 114 "Generated_Source\PSoC5\core_cm3.h" 2
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM3_H_GENERIC */
N
N#ifndef __CMSIS_GENERIC
N
N#ifndef __CORE_CM3_H_DEPENDANT
N#define __CORE_CM3_H_DEPENDANT
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* check device defines and use defaults */
N#if defined __CHECK_DEVICE_DEFINES
X#if 1L
N  #ifndef __CM3_REV
S    #define __CM3_REV               0x0200U
S    #warning "__CM3_REV not defined in device header file; using default!"
N  #endif
N
N  #ifndef __MPU_PRESENT
S    #define __MPU_PRESENT             0U
S    #warning "__MPU_PRESENT not defined in device header file; using default!"
N  #endif
N
N  #ifndef __NVIC_PRIO_BITS
S    #define __NVIC_PRIO_BITS          3U
S    #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
N  #endif
N
N  #ifndef __Vendor_SysTickConfig
S    #define __Vendor_SysTickConfig    0U
S    #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
N  #endif
N#endif
N
N/* IO definitions (access restrictions to peripheral registers) */
N/**
N    \defgroup CMSIS_glob_defs CMSIS Global Defines
N
N    <strong>IO Type Qualifiers</strong> are used
N    \li to specify the access to peripheral variables.
N    \li for automatic generation of peripheral register debug information.
N*/
N#ifdef __cplusplus
S  #define   __I     volatile             /*!< Defines 'read only' permissions */
N#else
N  #define   __I     volatile const       /*!< Defines 'read only' permissions */
N#endif
N#define     __O     volatile             /*!< Defines 'write only' permissions */
N#define     __IO    volatile             /*!< Defines 'read / write' permissions */
N
N/* following defines should be used for structure members */
N#define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
N#define     __OM     volatile            /*! Defines 'write only' structure member permissions */
N#define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
N
N/*@} end of group Cortex_M3 */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N  Core Register contain:
N  - Core Register
N  - Core NVIC Register
N  - Core SCB Register
N  - Core SysTick Register
N  - Core Debug Register
N  - Core MPU Register
N ******************************************************************************/
N/**
N  \defgroup CMSIS_core_register Defines and Type Definitions
N  \brief Type definitions and defines for Cortex-M processor based devices.
N*/
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_CORE  Status and Control Registers
N  \brief      Core Register type definitions.
N  @{
N */
N
N/**
N  \brief  Union type to access the Application Program Status Register (APSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved */
N    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} APSR_Type;
N
N/* APSR Register Definitions */
N#define APSR_N_Pos                         31U                                            /*!< APSR: N Position */
N#define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR: N Mask */
N
N#define APSR_Z_Pos                         30U                                            /*!< APSR: Z Position */
N#define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR: Z Mask */
N
N#define APSR_C_Pos                         29U                                            /*!< APSR: C Position */
N#define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR: C Mask */
N
N#define APSR_V_Pos                         28U                                            /*!< APSR: V Position */
N#define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR: V Mask */
N
N#define APSR_Q_Pos                         27U                                            /*!< APSR: Q Position */
N#define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR: Q Mask */
N
N
N/**
N  \brief  Union type to access the Interrupt Program Status Register (IPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} IPSR_Type;
N
N/* IPSR Register Definitions */
N#define IPSR_ISR_Pos                        0U                                            /*!< IPSR: ISR Position */
N#define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
N    uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
N    uint32_t _reserved1:8;               /*!< bit: 16..23  Reserved */
N    uint32_t T:1;                        /*!< bit:     24  Thumb bit */
N    uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
N    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} xPSR_Type;
N
N/* xPSR Register Definitions */
N#define xPSR_N_Pos                         31U                                            /*!< xPSR: N Position */
N#define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR: N Mask */
N
N#define xPSR_Z_Pos                         30U                                            /*!< xPSR: Z Position */
N#define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR: Z Mask */
N
N#define xPSR_C_Pos                         29U                                            /*!< xPSR: C Position */
N#define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR: C Mask */
N
N#define xPSR_V_Pos                         28U                                            /*!< xPSR: V Position */
N#define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR: V Mask */
N
N#define xPSR_Q_Pos                         27U                                            /*!< xPSR: Q Position */
N#define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR: Q Mask */
N
N#define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR: ICI/IT part 2 Position */
N#define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR: ICI/IT part 2 Mask */
N
N#define xPSR_T_Pos                         24U                                            /*!< xPSR: T Position */
N#define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR: T Mask */
N
N#define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR: ICI/IT part 1 Position */
N#define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR: ICI/IT part 1 Mask */
N
N#define xPSR_ISR_Pos                        0U                                            /*!< xPSR: ISR Position */
N#define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Control Registers (CONTROL).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
N    uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
N    uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} CONTROL_Type;
N
N/* CONTROL Register Definitions */
N#define CONTROL_SPSEL_Pos                   1U                                            /*!< CONTROL: SPSEL Position */
N#define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONTROL: SPSEL Mask */
N
N#define CONTROL_nPRIV_Pos                   0U                                            /*!< CONTROL: nPRIV Position */
N#define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONTROL: nPRIV Mask */
N
N/*@} end of group CMSIS_CORE */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
N  \brief      Type definitions for the NVIC Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
N */
Ntypedef struct
N{
N  __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
X  volatile uint32_t ISER[8U];                
N        uint32_t RESERVED0[24U];
N  __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register */
X  volatile uint32_t ICER[8U];                
N        uint32_t RSERVED1[24U];
N  __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register */
X  volatile uint32_t ISPR[8U];                
N        uint32_t RESERVED2[24U];
N  __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register */
X  volatile uint32_t ICPR[8U];                
N        uint32_t RESERVED3[24U];
N  __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
X  volatile uint32_t IABR[8U];                
N        uint32_t RESERVED4[56U];
N  __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bit wide) */
X  volatile uint8_t  IP[240U];                
N        uint32_t RESERVED5[644U];
N  __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Register */
X  volatile  uint32_t STIR;                    
N}  NVIC_Type;
N
N/* Software Triggered Interrupt Register Definitions */
N#define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: INTLINESNUM Position */
N#define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: INTLINESNUM Mask */
N
N/*@} end of group CMSIS_NVIC */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SCB     System Control Block (SCB)
N  \brief    Type definitions for the System Control Block Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Control Block (SCB).
N */
Ntypedef struct
N{
N  __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
X  volatile const  uint32_t CPUID;                   
N  __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register */
X  volatile uint32_t ICSR;                    
N  __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
X  volatile uint32_t VTOR;                    
N  __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register */
X  volatile uint32_t AIRCR;                   
N  __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
X  volatile uint32_t SCR;                     
N  __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register */
X  volatile uint32_t CCR;                     
N  __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registers (4-7, 8-11, 12-15) */
X  volatile uint8_t  SHP[12U];                
N  __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State Register */
X  volatile uint32_t SHCSR;                   
N  __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Register */
X  volatile uint32_t CFSR;                    
N  __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
X  volatile uint32_t HFSR;                    
N  __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
X  volatile uint32_t DFSR;                    
N  __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register */
X  volatile uint32_t MMFAR;                   
N  __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
X  volatile uint32_t BFAR;                    
N  __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register */
X  volatile uint32_t AFSR;                    
N  __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
X  volatile const  uint32_t PFR[2U];                 
N  __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
X  volatile const  uint32_t DFR;                     
N  __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
X  volatile const  uint32_t ADR;                     
N  __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
X  volatile const  uint32_t MMFR[4U];                
N  __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Register */
X  volatile const  uint32_t ISAR[5U];                
N        uint32_t RESERVED0[5U];
N  __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Register */
X  volatile uint32_t CPACR;                   
N} SCB_Type;
N
N/* SCB CPUID Register Definitions */
N#define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB CPUID: IMPLEMENTER Position */
N#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
N
N#define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB CPUID: VARIANT Position */
N#define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
N
N#define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB CPUID: ARCHITECTURE Position */
N#define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
N
N#define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB CPUID: PARTNO Position */
N#define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
N
N#define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB CPUID: REVISION Position */
N#define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB CPUID: REVISION Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB ICSR: NMIPENDSET Position */
N#define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
N
N#define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB ICSR: PENDSVSET Position */
N#define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
N
N#define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB ICSR: PENDSVCLR Position */
N#define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
N
N#define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB ICSR: PENDSTSET Position */
N#define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
N
N#define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB ICSR: PENDSTCLR Position */
N#define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
N
N#define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB ICSR: ISRPREEMPT Position */
N#define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
N
N#define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB ICSR: ISRPENDING Position */
N#define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
N
N#define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB ICSR: VECTPENDING Position */
N#define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
N
N#define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB ICSR: RETTOBASE Position */
N#define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB ICSR: RETTOBASE Mask */
N
N#define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB ICSR: VECTACTIVE Position */
N#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB ICSR: VECTACTIVE Mask */
N
N/* SCB Vector Table Offset Register Definitions */
N#if defined (__CM3_REV) && (__CM3_REV < 0x0201U)                   /* core r2p1 */
X#if 1L && (0x0201 < 0x0201U)                    
S#define SCB_VTOR_TBLBASE_Pos               29U                                            /*!< SCB VTOR: TBLBASE Position */
S#define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB VTOR: TBLBASE Mask */
S
S#define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB VTOR: TBLOFF Position */
S#define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB VTOR: TBLOFF Mask */
N#else
N#define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB VTOR: TBLOFF Position */
N#define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB VTOR: TBLOFF Mask */
N#endif
N
N/* SCB Application Interrupt and Reset Control Register Definitions */
N#define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB AIRCR: VECTKEY Position */
N#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
N
N#define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB AIRCR: VECTKEYSTAT Position */
N#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
N
N#define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB AIRCR: ENDIANESS Position */
N#define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
N
N#define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB AIRCR: PRIGROUP Position */
N#define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB AIRCR: PRIGROUP Mask */
N
N#define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB AIRCR: SYSRESETREQ Position */
N#define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
N
N#define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB AIRCR: VECTCLRACTIVE Position */
N#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
N
N#define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB AIRCR: VECTRESET Position */
N#define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB AIRCR: VECTRESET Mask */
N
N/* SCB System Control Register Definitions */
N#define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB SCR: SEVONPEND Position */
N#define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
N
N#define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB SCR: SLEEPDEEP Position */
N#define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
N
N#define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB SCR: SLEEPONEXIT Position */
N#define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
N
N/* SCB Configuration Control Register Definitions */
N#define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB CCR: STKALIGN Position */
N#define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
N
N#define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB CCR: BFHFNMIGN Position */
N#define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB CCR: BFHFNMIGN Mask */
N
N#define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB CCR: DIV_0_TRP Position */
N#define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB CCR: DIV_0_TRP Mask */
N
N#define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB CCR: UNALIGN_TRP Position */
N#define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
N
N#define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB CCR: USERSETMPEND Position */
N#define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB CCR: USERSETMPEND Mask */
N
N#define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB CCR: NONBASETHRDENA Position */
N#define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB CCR: NONBASETHRDENA Mask */
N
N/* SCB System Handler Control and State Register Definitions */
N#define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB SHCSR: USGFAULTENA Position */
N#define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB SHCSR: USGFAULTENA Mask */
N
N#define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB SHCSR: BUSFAULTENA Position */
N#define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB SHCSR: BUSFAULTENA Mask */
N
N#define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB SHCSR: MEMFAULTENA Position */
N#define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB SHCSR: MEMFAULTENA Mask */
N
N#define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB SHCSR: SVCALLPENDED Position */
N#define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
N
N#define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB SHCSR: BUSFAULTPENDED Position */
N#define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB SHCSR: BUSFAULTPENDED Mask */
N
N#define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB SHCSR: MEMFAULTPENDED Position */
N#define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB SHCSR: MEMFAULTPENDED Mask */
N
N#define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB SHCSR: USGFAULTPENDED Position */
N#define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB SHCSR: USGFAULTPENDED Mask */
N
N#define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB SHCSR: SYSTICKACT Position */
N#define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB SHCSR: SYSTICKACT Mask */
N
N#define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB SHCSR: PENDSVACT Position */
N#define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB SHCSR: PENDSVACT Mask */
N
N#define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB SHCSR: MONITORACT Position */
N#define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB SHCSR: MONITORACT Mask */
N
N#define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB SHCSR: SVCALLACT Position */
N#define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB SHCSR: SVCALLACT Mask */
N
N#define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB SHCSR: USGFAULTACT Position */
N#define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB SHCSR: USGFAULTACT Mask */
N
N#define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB SHCSR: BUSFAULTACT Position */
N#define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB SHCSR: BUSFAULTACT Mask */
N
N#define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB SHCSR: MEMFAULTACT Position */
N#define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB SHCSR: MEMFAULTACT Mask */
N
N/* SCB Configurable Fault Status Register Definitions */
N#define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB CFSR: Usage Fault Status Register Position */
N#define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB CFSR: Usage Fault Status Register Mask */
N
N#define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB CFSR: Bus Fault Status Register Position */
N#define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB CFSR: Bus Fault Status Register Mask */
N
N#define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB CFSR: Memory Manage Fault Status Register Position */
N#define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB CFSR: Memory Manage Fault Status Register Mask */
N
N/* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
N#define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB CFSR (MMFSR): MMARVALID Position */
N#define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB CFSR (MMFSR): MMARVALID Mask */
N
N#define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB CFSR (MMFSR): MSTKERR Position */
N#define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB CFSR (MMFSR): MSTKERR Mask */
N
N#define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB CFSR (MMFSR): MUNSTKERR Position */
N#define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB CFSR (MMFSR): MUNSTKERR Mask */
N
N#define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB CFSR (MMFSR): DACCVIOL Position */
N#define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB CFSR (MMFSR): DACCVIOL Mask */
N
N#define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB CFSR (MMFSR): IACCVIOL Position */
N#define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB CFSR (MMFSR): IACCVIOL Mask */
N
N/* BusFault Status Register (part of SCB Configurable Fault Status Register) */
N#define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB CFSR (BFSR): BFARVALID Position */
N#define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB CFSR (BFSR): BFARVALID Mask */
N
N#define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB CFSR (BFSR): STKERR Position */
N#define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB CFSR (BFSR): STKERR Mask */
N
N#define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB CFSR (BFSR): UNSTKERR Position */
N#define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB CFSR (BFSR): UNSTKERR Mask */
N
N#define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB CFSR (BFSR): IMPRECISERR Position */
N#define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB CFSR (BFSR): IMPRECISERR Mask */
N
N#define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB CFSR (BFSR): PRECISERR Position */
N#define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB CFSR (BFSR): PRECISERR Mask */
N
N#define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB CFSR (BFSR): IBUSERR Position */
N#define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB CFSR (BFSR): IBUSERR Mask */
N
N/* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
N#define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB CFSR (UFSR): DIVBYZERO Position */
N#define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB CFSR (UFSR): DIVBYZERO Mask */
N
N#define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB CFSR (UFSR): UNALIGNED Position */
N#define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB CFSR (UFSR): UNALIGNED Mask */
N
N#define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB CFSR (UFSR): NOCP Position */
N#define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB CFSR (UFSR): NOCP Mask */
N
N#define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB CFSR (UFSR): INVPC Position */
N#define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB CFSR (UFSR): INVPC Mask */
N
N#define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB CFSR (UFSR): INVSTATE Position */
N#define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB CFSR (UFSR): INVSTATE Mask */
N
N#define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB CFSR (UFSR): UNDEFINSTR Position */
N#define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB CFSR (UFSR): UNDEFINSTR Mask */
N
N/* SCB Hard Fault Status Register Definitions */
N#define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB HFSR: DEBUGEVT Position */
N#define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB HFSR: DEBUGEVT Mask */
N
N#define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB HFSR: FORCED Position */
N#define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB HFSR: FORCED Mask */
N
N#define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB HFSR: VECTTBL Position */
N#define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB HFSR: VECTTBL Mask */
N
N/* SCB Debug Fault Status Register Definitions */
N#define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB DFSR: EXTERNAL Position */
N#define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB DFSR: EXTERNAL Mask */
N
N#define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB DFSR: VCATCH Position */
N#define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB DFSR: VCATCH Mask */
N
N#define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB DFSR: DWTTRAP Position */
N#define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB DFSR: DWTTRAP Mask */
N
N#define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB DFSR: BKPT Position */
N#define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB DFSR: BKPT Mask */
N
N#define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB DFSR: HALTED Position */
N#define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB DFSR: HALTED Mask */
N
N/*@} end of group CMSIS_SCB */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
N  \brief    Type definitions for the System Control and ID Register not in the SCB
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Control and ID Register not in the SCB.
N */
Ntypedef struct
N{
N        uint32_t RESERVED0[1U];
N  __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Register */
X  volatile const  uint32_t ICTR;                    
N#if defined (__CM3_REV) && (__CM3_REV >= 0x200U)
X#if 1L && (0x0201 >= 0x200U)
N  __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
X  volatile uint32_t ACTLR;                   
N#else
S        uint32_t RESERVED1[1U];
N#endif
N} SCnSCB_Type;
N
N/* Interrupt Controller Type Register Definitions */
N#define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: INTLINESNUM Position */
N#define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: INTLINESNUM Mask */
N
N/* Auxiliary Control Register Definitions */
N
N#define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: DISFOLD Position */
N#define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: DISFOLD Mask */
N
N#define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: DISDEFWBUF Position */
N#define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: DISDEFWBUF Mask */
N
N#define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: DISMCYCINT Position */
N#define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: DISMCYCINT Mask */
N
N/*@} end of group CMSIS_SCnotSCB */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
N  \brief    Type definitions for the System Timer Registers.
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Timer (SysTick).
N */
Ntypedef struct
N{
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
X  volatile uint32_t LOAD;                    
N  __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register */
X  volatile uint32_t VAL;                     
N  __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
X  volatile const  uint32_t CALIB;                   
N} SysTick_Type;
N
N/* SysTick Control / Status Register Definitions */
N#define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysTick CTRL: COUNTFLAG Position */
N#define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
N
N#define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysTick CTRL: CLKSOURCE Position */
N#define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
N
N#define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysTick CTRL: TICKINT Position */
N#define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
N
N#define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysTick CTRL: ENABLE Position */
N#define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysTick CTRL: ENABLE Mask */
N
N/* SysTick Reload Register Definitions */
N#define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysTick LOAD: RELOAD Position */
N#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysTick LOAD: RELOAD Mask */
N
N/* SysTick Current Register Definitions */
N#define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysTick VAL: CURRENT Position */
N#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysTick VAL: CURRENT Mask */
N
N/* SysTick Calibration Register Definitions */
N#define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysTick CALIB: NOREF Position */
N#define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
N
N#define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysTick CALIB: SKEW Position */
N#define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
N
N#define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysTick CALIB: TENMS Position */
N#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysTick CALIB: TENMS Mask */
N
N/*@} end of group CMSIS_SysTick */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
N  \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
N */
Ntypedef struct
N{
N  __OM  union
X  volatile  union
N  {
N    __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
X    volatile  uint8_t    u8;                  
N    __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
X    volatile  uint16_t   u16;                 
N    __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
X    volatile  uint32_t   u32;                 
N  }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
N        uint32_t RESERVED0[864U];
N  __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
X  volatile uint32_t TER;                     
N        uint32_t RESERVED1[15U];
N  __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
X  volatile uint32_t TPR;                     
N        uint32_t RESERVED2[15U];
N  __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
X  volatile uint32_t TCR;                     
N        uint32_t RESERVED3[29U];
N  __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register */
X  volatile  uint32_t IWR;                     
N  __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
X  volatile const  uint32_t IRR;                     
N  __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Register */
X  volatile uint32_t IMCR;                    
N        uint32_t RESERVED4[43U];
N  __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
X  volatile  uint32_t LAR;                     
N  __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
X  volatile const  uint32_t LSR;                     
N        uint32_t RESERVED5[6U];
N  __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Register #4 */
X  volatile const  uint32_t PID4;                    
N  __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Register #5 */
X  volatile const  uint32_t PID5;                    
N  __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Register #6 */
X  volatile const  uint32_t PID6;                    
N  __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Register #7 */
X  volatile const  uint32_t PID7;                    
N  __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Register #0 */
X  volatile const  uint32_t PID0;                    
N  __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Register #1 */
X  volatile const  uint32_t PID1;                    
N  __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Register #2 */
X  volatile const  uint32_t PID2;                    
N  __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Register #3 */
X  volatile const  uint32_t PID3;                    
N  __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Register #0 */
X  volatile const  uint32_t CID0;                    
N  __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Register #1 */
X  volatile const  uint32_t CID1;                    
N  __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Register #2 */
X  volatile const  uint32_t CID2;                    
N  __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Register #3 */
X  volatile const  uint32_t CID3;                    
N} ITM_Type;
N
N/* ITM Trace Privilege Register Definitions */
N#define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM TPR: PRIVMASK Position */
N#define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM TPR: PRIVMASK Mask */
N
N/* ITM Trace Control Register Definitions */
N#define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM TCR: BUSY Position */
N#define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM TCR: BUSY Mask */
N
N#define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM TCR: ATBID Position */
N#define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM TCR: ATBID Mask */
N
N#define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM TCR: Global timestamp frequency Position */
N#define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM TCR: Global timestamp frequency Mask */
N
N#define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM TCR: TSPrescale Position */
N#define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM TCR: TSPrescale Mask */
N
N#define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM TCR: SWOENA Position */
N#define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM TCR: SWOENA Mask */
N
N#define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM TCR: DWTENA Position */
N#define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM TCR: DWTENA Mask */
N
N#define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM TCR: SYNCENA Position */
N#define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM TCR: SYNCENA Mask */
N
N#define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM TCR: TSENA Position */
N#define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM TCR: TSENA Mask */
N
N#define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM TCR: ITM Enable bit Position */
N#define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM TCR: ITM Enable bit Mask */
N
N/* ITM Integration Write Register Definitions */
N#define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM IWR: ATVALIDM Position */
N#define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM IWR: ATVALIDM Mask */
N
N/* ITM Integration Read Register Definitions */
N#define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM IRR: ATREADYM Position */
N#define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM IRR: ATREADYM Mask */
N
N/* ITM Integration Mode Control Register Definitions */
N#define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM IMCR: INTEGRATION Position */
N#define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM IMCR: INTEGRATION Mask */
N
N/* ITM Lock Status Register Definitions */
N#define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM LSR: ByteAcc Position */
N#define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM LSR: ByteAcc Mask */
N
N#define ITM_LSR_Access_Pos                  1U                                            /*!< ITM LSR: Access Position */
N#define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM LSR: Access Mask */
N
N#define ITM_LSR_Present_Pos                 0U                                            /*!< ITM LSR: Present Position */
N#define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM LSR: Present Mask */
N
N/*@}*/ /* end of group CMSIS_ITM */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
N  \brief    Type definitions for the Data Watchpoint and Trace (DWT)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
N */
Ntypedef struct
N{
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
X  volatile uint32_t CYCCNT;                  
N  __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
X  volatile uint32_t CPICNT;                  
N  __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Register */
X  volatile uint32_t EXCCNT;                  
N  __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
X  volatile uint32_t SLEEPCNT;                
N  __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
X  volatile uint32_t LSUCNT;                  
N  __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Register */
X  volatile uint32_t FOLDCNT;                 
N  __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register */
X  volatile const  uint32_t PCSR;                    
N  __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
X  volatile uint32_t COMP0;                   
N  __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
X  volatile uint32_t MASK0;                   
N  __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
X  volatile uint32_t FUNCTION0;               
N        uint32_t RESERVED0[1U];
N  __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
X  volatile uint32_t COMP1;                   
N  __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
X  volatile uint32_t MASK1;                   
N  __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
X  volatile uint32_t FUNCTION1;               
N        uint32_t RESERVED1[1U];
N  __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
X  volatile uint32_t COMP2;                   
N  __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
X  volatile uint32_t MASK2;                   
N  __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
X  volatile uint32_t FUNCTION2;               
N        uint32_t RESERVED2[1U];
N  __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
X  volatile uint32_t COMP3;                   
N  __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
X  volatile uint32_t MASK3;                   
N  __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
X  volatile uint32_t FUNCTION3;               
N} DWT_Type;
N
N/* DWT Control Register Definitions */
N#define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTRL: NUMCOMP Position */
N#define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTRL: NUMCOMP Mask */
N
N#define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTRL: NOTRCPKT Position */
N#define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTRL: NOTRCPKT Mask */
N
N#define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTRL: NOEXTTRIG Position */
N#define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTRL: NOEXTTRIG Mask */
N
N#define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTRL: NOCYCCNT Position */
N#define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTRL: NOCYCCNT Mask */
N
N#define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTRL: NOPRFCNT Position */
N#define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTRL: NOPRFCNT Mask */
N
N#define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTRL: CYCEVTENA Position */
N#define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTRL: CYCEVTENA Mask */
N
N#define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTRL: FOLDEVTENA Position */
N#define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTRL: FOLDEVTENA Mask */
N
N#define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTRL: LSUEVTENA Position */
N#define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTRL: LSUEVTENA Mask */
N
N#define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTRL: SLEEPEVTENA Position */
N#define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTRL: SLEEPEVTENA Mask */
N
N#define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTRL: EXCEVTENA Position */
N#define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTRL: EXCEVTENA Mask */
N
N#define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTRL: CPIEVTENA Position */
N#define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTRL: CPIEVTENA Mask */
N
N#define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTRL: EXCTRCENA Position */
N#define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTRL: EXCTRCENA Mask */
N
N#define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTRL: PCSAMPLENA Position */
N#define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTRL: PCSAMPLENA Mask */
N
N#define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTRL: SYNCTAP Position */
N#define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTRL: SYNCTAP Mask */
N
N#define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTRL: CYCTAP Position */
N#define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTRL: CYCTAP Mask */
N
N#define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTRL: POSTINIT Position */
N#define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTRL: POSTINIT Mask */
N
N#define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTRL: POSTPRESET Position */
N#define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTRL: POSTPRESET Mask */
N
N#define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTRL: CYCCNTENA Position */
N#define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTRL: CYCCNTENA Mask */
N
N/* DWT CPI Count Register Definitions */
N#define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPICNT: CPICNT Position */
N#define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPICNT: CPICNT Mask */
N
N/* DWT Exception Overhead Count Register Definitions */
N#define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXCCNT: EXCCNT Position */
N#define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXCCNT: EXCCNT Mask */
N
N/* DWT Sleep Count Register Definitions */
N#define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLEEPCNT: SLEEPCNT Position */
N#define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLEEPCNT: SLEEPCNT Mask */
N
N/* DWT LSU Count Register Definitions */
N#define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSUCNT: LSUCNT Position */
N#define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSUCNT: LSUCNT Mask */
N
N/* DWT Folded-instruction Count Register Definitions */
N#define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOLDCNT: FOLDCNT Position */
N#define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOLDCNT: FOLDCNT Mask */
N
N/* DWT Comparator Mask Register Definitions */
N#define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MASK: MASK Position */
N#define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MASK: MASK Mask */
N
N/* DWT Comparator Function Register Definitions */
N#define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUNCTION: MATCHED Position */
N#define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUNCTION: MATCHED Mask */
N
N#define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUNCTION: DATAVADDR1 Position */
N#define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUNCTION: DATAVADDR1 Mask */
N
N#define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUNCTION: DATAVADDR0 Position */
N#define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUNCTION: DATAVADDR0 Mask */
N
N#define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUNCTION: DATAVSIZE Position */
N#define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUNCTION: DATAVSIZE Mask */
N
N#define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUNCTION: LNK1ENA Position */
N#define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUNCTION: LNK1ENA Mask */
N
N#define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUNCTION: DATAVMATCH Position */
N#define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUNCTION: DATAVMATCH Mask */
N
N#define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUNCTION: CYCMATCH Position */
N#define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUNCTION: CYCMATCH Mask */
N
N#define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUNCTION: EMITRANGE Position */
N#define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUNCTION: EMITRANGE Mask */
N
N#define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUNCTION: FUNCTION Position */
N#define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUNCTION: FUNCTION Mask */
N
N/*@}*/ /* end of group CMSIS_DWT */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_TPI     Trace Port Interface (TPI)
N  \brief    Type definitions for the Trace Port Interface (TPI)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Trace Port Interface Register (TPI).
N */
Ntypedef struct
N{
N  __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Register */
X  volatile uint32_t SSPSR;                   
N  __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Register */
X  volatile uint32_t CSPSR;                   
N        uint32_t RESERVED0[2U];
N  __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Register */
X  volatile uint32_t ACPR;                    
N        uint32_t RESERVED1[55U];
N  __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register */
X  volatile uint32_t SPPR;                    
N        uint32_t RESERVED2[131U];
N  __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Register */
X  volatile const  uint32_t FFSR;                    
N  __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Register */
X  volatile uint32_t FFCR;                    
N  __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counter Register */
X  volatile const  uint32_t FSCR;                    
N        uint32_t RESERVED3[759U];
N  __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
X  volatile const  uint32_t TRIGGER;                 
N  __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
X  volatile const  uint32_t FIFO0;                   
N  __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
X  volatile const  uint32_t ITATBCTR2;               
N        uint32_t RESERVED4[1U];
N  __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
X  volatile const  uint32_t ITATBCTR0;               
N  __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
X  volatile const  uint32_t FIFO1;                   
N  __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
X  volatile uint32_t ITCTRL;                  
N        uint32_t RESERVED5[39U];
N  __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
X  volatile uint32_t CLAIMSET;                
N  __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
X  volatile uint32_t CLAIMCLR;                
N        uint32_t RESERVED7[8U];
N  __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
X  volatile const  uint32_t DEVID;                   
N  __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
X  volatile const  uint32_t DEVTYPE;                 
N} TPI_Type;
N
N/* TPI Asynchronous Clock Prescaler Register Definitions */
N#define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACPR: PRESCALER Position */
N#define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACPR: PRESCALER Mask */
N
N/* TPI Selected Pin Protocol Register Definitions */
N#define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPPR: TXMODE Position */
N#define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPPR: TXMODE Mask */
N
N/* TPI Formatter and Flush Status Register Definitions */
N#define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFSR: FtNonStop Position */
N#define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFSR: FtNonStop Mask */
N
N#define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFSR: TCPresent Position */
N#define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFSR: TCPresent Mask */
N
N#define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFSR: FtStopped Position */
N#define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFSR: FtStopped Mask */
N
N#define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFSR: FlInProg Position */
N#define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFSR: FlInProg Mask */
N
N/* TPI Formatter and Flush Control Register Definitions */
N#define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFCR: TrigIn Position */
N#define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFCR: TrigIn Mask */
N
N#define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFCR: EnFCont Position */
N#define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFCR: EnFCont Mask */
N
N/* TPI TRIGGER Register Definitions */
N#define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRIGGER: TRIGGER Position */
N#define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRIGGER: TRIGGER Mask */
N
N/* TPI Integration ETM Data Register Definitions (FIFO0) */
N#define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIFO0: ITM_ATVALID Position */
N#define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIFO0: ITM_ATVALID Mask */
N
N#define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIFO0: ITM_bytecount Position */
N#define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIFO0: ITM_bytecount Mask */
N
N#define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIFO0: ETM_ATVALID Position */
N#define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIFO0: ETM_ATVALID Mask */
N
N#define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIFO0: ETM_bytecount Position */
N#define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIFO0: ETM_bytecount Mask */
N
N#define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIFO0: ETM2 Position */
N#define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIFO0: ETM2 Mask */
N
N#define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIFO0: ETM1 Position */
N#define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIFO0: ETM1 Mask */
N
N#define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIFO0: ETM0 Position */
N#define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIFO0: ETM0 Mask */
N
N/* TPI ITATBCTR2 Register Definitions */
N#define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITATBCTR2: ATREADY Position */
N#define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITATBCTR2: ATREADY Mask */
N
N/* TPI Integration ITM Data Register Definitions (FIFO1) */
N#define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIFO1: ITM_ATVALID Position */
N#define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIFO1: ITM_ATVALID Mask */
N
N#define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIFO1: ITM_bytecount Position */
N#define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIFO1: ITM_bytecount Mask */
N
N#define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIFO1: ETM_ATVALID Position */
N#define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIFO1: ETM_ATVALID Mask */
N
N#define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIFO1: ETM_bytecount Position */
N#define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIFO1: ETM_bytecount Mask */
N
N#define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIFO1: ITM2 Position */
N#define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIFO1: ITM2 Mask */
N
N#define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIFO1: ITM1 Position */
N#define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIFO1: ITM1 Mask */
N
N#define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIFO1: ITM0 Position */
N#define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIFO1: ITM0 Mask */
N
N/* TPI ITATBCTR0 Register Definitions */
N#define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITATBCTR0: ATREADY Position */
N#define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITATBCTR0: ATREADY Mask */
N
N/* TPI Integration Mode Control Register Definitions */
N#define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITCTRL: Mode Position */
N#define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITCTRL: Mode Mask */
N
N/* TPI DEVID Register Definitions */
N#define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEVID: NRZVALID Position */
N#define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEVID: NRZVALID Mask */
N
N#define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEVID: MANCVALID Position */
N#define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEVID: MANCVALID Mask */
N
N#define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEVID: PTINVALID Position */
N#define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEVID: PTINVALID Mask */
N
N#define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEVID: MinBufSz Position */
N#define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEVID: MinBufSz Mask */
N
N#define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEVID: AsynClkIn Position */
N#define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEVID: AsynClkIn Mask */
N
N#define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEVID: NrTraceInput Position */
N#define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEVID: NrTraceInput Mask */
N
N/* TPI DEVTYPE Register Definitions */
N#define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEVTYPE: MajorType Position */
N#define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEVTYPE: MajorType Mask */
N
N#define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEVTYPE: SubType Position */
N#define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEVTYPE: SubType Mask */
N
N/*@}*/ /* end of group CMSIS_TPI */
N
N
N#if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
X#if 1L && (0 == 1U)
S/**
S  \ingroup  CMSIS_core_register
S  \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
S  \brief    Type definitions for the Memory Protection Unit (MPU)
S  @{
S */
S
S/**
S  \brief  Structure type to access the Memory Protection Unit (MPU).
S */
Stypedef struct
S{
S  __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
S  __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
S  __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
S  __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register */
S  __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Register */
S  __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address Register */
S  __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and Size Register */
S  __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address Register */
S  __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and Size Register */
S  __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address Register */
S  __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and Size Register */
S} MPU_Type;
S
S/* MPU Type Register Definitions */
S#define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU TYPE: IREGION Position */
S#define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU TYPE: IREGION Mask */
S
S#define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU TYPE: DREGION Position */
S#define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU TYPE: DREGION Mask */
S
S#define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU TYPE: SEPARATE Position */
S#define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU TYPE: SEPARATE Mask */
S
S/* MPU Control Register Definitions */
S#define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU CTRL: PRIVDEFENA Position */
S#define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU CTRL: PRIVDEFENA Mask */
S
S#define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU CTRL: HFNMIENA Position */
S#define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU CTRL: HFNMIENA Mask */
S
S#define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU CTRL: ENABLE Position */
S#define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU CTRL: ENABLE Mask */
S
S/* MPU Region Number Register Definitions */
S#define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU RNR: REGION Position */
S#define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU RNR: REGION Mask */
S
S/* MPU Region Base Address Register Definitions */
S#define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU RBAR: ADDR Position */
S#define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU RBAR: ADDR Mask */
S
S#define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU RBAR: VALID Position */
S#define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU RBAR: VALID Mask */
S
S#define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU RBAR: REGION Position */
S#define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU RBAR: REGION Mask */
S
S/* MPU Region Attribute and Size Register Definitions */
S#define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU RASR: MPU Region Attribute field Position */
S#define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU RASR: MPU Region Attribute field Mask */
S
S#define MPU_RASR_XN_Pos                    28U                                            /*!< MPU RASR: ATTRS.XN Position */
S#define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU RASR: ATTRS.XN Mask */
S
S#define MPU_RASR_AP_Pos                    24U                                            /*!< MPU RASR: ATTRS.AP Position */
S#define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU RASR: ATTRS.AP Mask */
S
S#define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU RASR: ATTRS.TEX Position */
S#define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU RASR: ATTRS.TEX Mask */
S
S#define MPU_RASR_S_Pos                     18U                                            /*!< MPU RASR: ATTRS.S Position */
S#define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU RASR: ATTRS.S Mask */
S
S#define MPU_RASR_C_Pos                     17U                                            /*!< MPU RASR: ATTRS.C Position */
S#define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU RASR: ATTRS.C Mask */
S
S#define MPU_RASR_B_Pos                     16U                                            /*!< MPU RASR: ATTRS.B Position */
S#define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU RASR: ATTRS.B Mask */
S
S#define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU RASR: Sub-Region Disable Position */
S#define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU RASR: Sub-Region Disable Mask */
S
S#define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU RASR: Region Size Field Position */
S#define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU RASR: Region Size Field Mask */
S
S#define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU RASR: Region enable bit Position */
S#define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU RASR: Region enable bit Disable Mask */
S
S/*@} end of group CMSIS_MPU */
N#endif
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
N  \brief    Type definitions for the Core Debug Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the Core Debug Register (CoreDebug).
N */
Ntypedef struct
N{
N  __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status Register */
X  volatile uint32_t DHCSR;                   
N  __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Register */
X  volatile  uint32_t DCRSR;                   
N  __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Register */
X  volatile uint32_t DCRDR;                   
N  __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Control Register */
X  volatile uint32_t DEMCR;                   
N} CoreDebug_Type;
N
N/* Debug Halting Control and Status Register Definitions */
N#define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< CoreDebug DHCSR: DBGKEY Position */
N#define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< CoreDebug DHCSR: DBGKEY Mask */
N
N#define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< CoreDebug DHCSR: S_RESET_ST Position */
N#define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< CoreDebug DHCSR: S_RESET_ST Mask */
N
N#define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< CoreDebug DHCSR: S_RETIRE_ST Position */
N#define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< CoreDebug DHCSR: S_RETIRE_ST Mask */
N
N#define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< CoreDebug DHCSR: S_LOCKUP Position */
N#define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< CoreDebug DHCSR: S_LOCKUP Mask */
N
N#define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< CoreDebug DHCSR: S_SLEEP Position */
N#define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< CoreDebug DHCSR: S_SLEEP Mask */
N
N#define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< CoreDebug DHCSR: S_HALT Position */
N#define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< CoreDebug DHCSR: S_HALT Mask */
N
N#define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< CoreDebug DHCSR: S_REGRDY Position */
N#define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< CoreDebug DHCSR: S_REGRDY Mask */
N
N#define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< CoreDebug DHCSR: C_SNAPSTALL Position */
N#define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< CoreDebug DHCSR: C_SNAPSTALL Mask */
N
N#define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< CoreDebug DHCSR: C_MASKINTS Position */
N#define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< CoreDebug DHCSR: C_MASKINTS Mask */
N
N#define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< CoreDebug DHCSR: C_STEP Position */
N#define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< CoreDebug DHCSR: C_STEP Mask */
N
N#define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< CoreDebug DHCSR: C_HALT Position */
N#define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< CoreDebug DHCSR: C_HALT Mask */
N
N#define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< CoreDebug DHCSR: C_DEBUGEN Position */
N#define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< CoreDebug DHCSR: C_DEBUGEN Mask */
N
N/* Debug Core Register Selector Register Definitions */
N#define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< CoreDebug DCRSR: REGWnR Position */
N#define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< CoreDebug DCRSR: REGWnR Mask */
N
N#define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< CoreDebug DCRSR: REGSEL Position */
N#define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< CoreDebug DCRSR: REGSEL Mask */
N
N/* Debug Exception and Monitor Control Register Definitions */
N#define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< CoreDebug DEMCR: TRCENA Position */
N#define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< CoreDebug DEMCR: TRCENA Mask */
N
N#define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< CoreDebug DEMCR: MON_REQ Position */
N#define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< CoreDebug DEMCR: MON_REQ Mask */
N
N#define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< CoreDebug DEMCR: MON_STEP Position */
N#define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< CoreDebug DEMCR: MON_STEP Mask */
N
N#define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< CoreDebug DEMCR: MON_PEND Position */
N#define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< CoreDebug DEMCR: MON_PEND Mask */
N
N#define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< CoreDebug DEMCR: MON_EN Position */
N#define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< CoreDebug DEMCR: MON_EN Mask */
N
N#define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< CoreDebug DEMCR: VC_HARDERR Position */
N#define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< CoreDebug DEMCR: VC_HARDERR Mask */
N
N#define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< CoreDebug DEMCR: VC_INTERR Position */
N#define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< CoreDebug DEMCR: VC_INTERR Mask */
N
N#define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< CoreDebug DEMCR: VC_BUSERR Position */
N#define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< CoreDebug DEMCR: VC_BUSERR Mask */
N
N#define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< CoreDebug DEMCR: VC_STATERR Position */
N#define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< CoreDebug DEMCR: VC_STATERR Mask */
N
N#define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< CoreDebug DEMCR: VC_CHKERR Position */
N#define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< CoreDebug DEMCR: VC_CHKERR Mask */
N
N#define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< CoreDebug DEMCR: VC_NOCPERR Position */
N#define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< CoreDebug DEMCR: VC_NOCPERR Mask */
N
N#define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< CoreDebug DEMCR: VC_MMERR Position */
N#define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< CoreDebug DEMCR: VC_MMERR Mask */
N
N#define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< CoreDebug DEMCR: VC_CORERESET Position */
N#define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< CoreDebug DEMCR: VC_CORERESET Mask */
N
N/*@} end of group CMSIS_CoreDebug */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_bitfield     Core register bit field macros
N  \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
N  @{
N */
N
N/**
N  \brief   Mask and shift a bit field value for use in a register bit range.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
N  \return           Masked and shifted value.
N*/
N#define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
N
N/**
N  \brief     Mask and shift a register value to extract a bit filed value.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
N  \return           Masked and shifted bit field value.
N*/
N#define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
N
N/*@} end of group CMSIS_core_bitfield */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_base     Core Definitions
N  \brief      Definitions for base addresses, unions, and structures.
N  @{
N */
N
N/* Memory mapping of Cortex-M3 Hardware */
N#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address */
N#define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
N#define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
N#define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
N#define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address */
N#define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
N#define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
N#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address */
N
N#define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register not in SCB */
N#define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct */
N#define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration struct */
N#define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struct */
N#define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct */
N#define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct */
N#define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct */
N#define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration struct */
N
N#if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
X#if 1L && (0 == 1U)
S  #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit */
S  #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit */
N#endif
N
N/*@} */
N
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N  Core Function Interface contains:
N  - Core NVIC Functions
N  - Core SysTick Functions
N  - Core Debug Functions
N  - Core Register Access Functions
N ******************************************************************************/
N/**
N  \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
N*/
N
N
N
N/* ##########################   NVIC functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_NVICFunctions NVIC Functions
N  \brief    Functions that manage interrupts and exceptions via the NVIC.
N  @{
N */
N
N#define NVIC_USER_IRQ_OFFSET          16
N
N
N
N/**
N  \brief   Set Priority Grouping
N  \details Sets the priority grouping field using the required unlock sequence.
N           The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
N           Only values from 0..7 are used.
N           In case of a conflict between priority grouping and available
N           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
N  \param [in]      PriorityGroup  Priority grouping field.
N */
N__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
Xstatic __inline void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
N{
N  uint32_t reg_value;
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
N
N  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
X  reg_value  =  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;                                                    
N  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
X  reg_value &= ~((uint32_t)((0xFFFFUL << 16U) | (7UL << 8U)));  
N  reg_value  =  (reg_value                                   |
N                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
X                ((uint32_t)0x5FAUL << 16U) |
N                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
N  SCB->AIRCR =  reg_value;
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR =  reg_value;
N}
N
N
N/**
N  \brief   Get Priority Grouping
N  \details Reads the priority grouping field from the NVIC Interrupt Controller.
N  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
N */
N__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
Xstatic __inline uint32_t NVIC_GetPriorityGrouping(void)
N{
N  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
X  return ((uint32_t)((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) >> 8U));
N}
N
N
N/**
N  \brief   Enable Interrupt
N  \details Enables a device specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Enable status
N  \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt is not enabled.
N  \return             1  Interrupt is enabled.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t NVIC_GetEnableIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetEnableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Disable Interrupt
N  \details Disables a device specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Get Pending Interrupt
N  \details Reads the NVIC pending register and returns the pending bit for the specified device specific interrupt.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt status is not pending.
N  \return             1  Interrupt status is pending.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Set Pending Interrupt
N  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Clear Pending Interrupt
N  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Get Active Interrupt
N  \details Reads the active register in the NVIC and returns the active bit for the device specific interrupt.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt status is not active.
N  \return             1  Interrupt status is active.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetActive(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Set Interrupt Priority
N  \details Sets the priority of a device specific interrupt or a processor exception.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]      IRQn  Interrupt number.
N  \param [in]  priority  Priority to set.
N  \note    The priority cannot be set for every processor exception.
N */
N__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic __inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - 3)) & (uint32_t)0xFFUL);
N  }
N  else
N  {
N    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - 3)) & (uint32_t)0xFFUL);
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Priority
N  \details Reads the priority of a device specific interrupt or a processor exception.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]   IRQn  Interrupt number.
N  \return             Interrupt Priority.
N                      Value is aligned automatically to the implemented priority bits of the microcontroller.
N */
N__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
X    return(((uint32_t)((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - 3)));
N  }
N  else
N  {
N    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
X    return(((uint32_t)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - 3)));
N  }
N}
N
N
N/**
N  \brief   Encode Priority
N  \details Encodes the priority for an interrupt with the given priority group,
N           preemptive priority value, and subpriority value.
N           In case of a conflict between priority grouping and available
N           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
N  \param [in]     PriorityGroup  Used priority group.
N  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
N  \param [in]       SubPriority  Subpriority value (starting from 0).
N  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
N */
N__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
Xstatic __inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
X  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(3)) ? (uint32_t)(3) : (uint32_t)(7UL - PriorityGroupTmp);
N  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
X  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(3)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(3));
N
N  return (
N           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
N           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
N         );
N}
N
N
N/**
N  \brief   Decode Priority
N  \details Decodes an interrupt priority value with a given priority group to
N           preemptive priority value and subpriority value.
N           In case of a conflict between priority grouping and available
N           priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
N  \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC_GetPriority().
N  \param [in]     PriorityGroup  Used priority group.
N  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
N  \param [out]     pSubPriority  Subpriority value (starting from 0).
N */
N__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
Xstatic __inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
X  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(3)) ? (uint32_t)(3) : (uint32_t)(7UL - PriorityGroupTmp);
N  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
X  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(3)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(3));
N
N  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
N  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
N}
N
N
N/**
N  \brief   Set Interrupt Vector
N  \details Sets an interrupt vector in SRAM based interrupt vector table.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N           VTOR must been relocated to SRAM before.
N  \param [in]   IRQn      Interrupt number
N  \param [in]   vector    Address of interrupt handler function
N */
N__STATIC_INLINE void NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
Xstatic __inline void NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
N{
N    uint32_t *vectors = (uint32_t *)SCB->VTOR;
X    uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
N    vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
X    vectors[(int32_t)IRQn + 16] = vector;
N}
N
N
N/**
N  \brief   Get Interrupt Vector
N  \details Reads an interrupt vector from interrupt vector table.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]   IRQn      Interrupt number.
N  \return                 Address of interrupt handler function
N */
N__STATIC_INLINE uint32_t NVIC_GetVector(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetVector(IRQn_Type IRQn)
N{
N    uint32_t *vectors = (uint32_t *)SCB->VTOR;
X    uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
N    return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
X    return vectors[(int32_t)IRQn + 16];
N}
N
N
N/**
N  \brief   System Reset
N  \details Initiates a system reset request to reset the MCU.
N */
N__STATIC_INLINE void NVIC_SystemReset(void)
Xstatic __inline void NVIC_SystemReset(void)
N{
N  __DSB();                                                          /* Ensure all outstanding memory accesses included
X  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                          
N                                                                       buffered write are completed before reset */
N  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR  = (uint32_t)((0x5FAUL << 16U)    |
N                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
X                           (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) |
N                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
X                            (1UL << 2U)    );          
N  __DSB();                                                          /* Ensure completion of memory access */
X  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                           
N
N  for(;;)                                                           /* wait until reset */
N  {
N    __NOP();
X    __nop();
N  }
N}
N
N/*@} end of CMSIS_Core_NVICFunctions */
N
N
N/* ##########################  FPU functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_FpuFunctions FPU Functions
N  \brief    Function that provides FPU type.
N  @{
N */
N
N/**
N  \brief   get FPU type
N  \details returns the FPU type
N  \returns
N   - \b  0: No FPU
N   - \b  1: Single precision FPU
N   - \b  2: Double + Single precision FPU
N */
N__STATIC_INLINE uint32_t SCB_GetFPUType(void)
Xstatic __inline uint32_t SCB_GetFPUType(void)
N{
N    return 0U;           /* No FPU */
N}
N
N
N/*@} end of CMSIS_Core_FpuFunctions */
N
N
N
N/* ##################################    SysTick function  ############################################ */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
N  \brief    Functions that configure the System.
N  @{
N */
N
N#if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
X#if 1L && (0 == 0U)
N
N/**
N  \brief   System Tick Configuration
N  \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
N           Counter is in free running mode to generate periodic interrupts.
N  \param [in]  ticks  Number of ticks between two interrupts.
N  \return          0  Function succeeded.
N  \return          1  Function failed.
N  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
N           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
N           must contain a vendor-specific implementation of this function.
N */
N__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic __inline uint32_t SysTick_Config(uint32_t ticks)
N{
N  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
X  if ((ticks - 1UL) > (0xFFFFFFUL ))
N  {
N    return (1UL);                                                   /* Reload value impossible */
N  }
N
N  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD  = (uint32_t)(ticks - 1UL);                          
N  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
X  NVIC_SetPriority (SysTick_IRQn, (1UL << 3) - 1UL);  
N  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL   = 0UL;                                              
N  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  = (1UL << 2U) |
N                   SysTick_CTRL_TICKINT_Msk   |
X                   (1UL << 1U)   |
N                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
X                   (1UL );                          
N  return (0UL);                                                     /* Function successful */
N}
N
N#endif
N
N/*@} end of CMSIS_Core_SysTickFunctions */
N
N
N
N/* ##################################### Debug In/Output function ########################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_core_DebugFunctions ITM Functions
N  \brief    Functions that access the ITM debug interface.
N  @{
N */
N
Nextern volatile int32_t ITM_RxBuffer;                              /*!< External variable to receive characters. */
N#define                 ITM_RXBUFFER_EMPTY  ((int32_t)0x5AA55AA5U) /*!< Value identifying \ref ITM_RxBuffer is ready for next character. */
N
N
N/**
N  \brief   ITM Send Character
N  \details Transmits a character via the ITM channel 0, and
N           \li Just returns when no debugger is connected that has booked the output.
N           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
N  \param [in]     ch  Character to transmit.
N  \returns            Character to transmit.
N */
N__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
Xstatic __inline uint32_t ITM_SendChar (uint32_t ch)
N{
N  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
X  if (((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL )) != 0UL) &&       
N      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
X      ((((ITM_Type *) (0xE0000000UL) )->TER & 1UL               ) != 0UL)   )      
N  {
N    while (ITM->PORT[0U].u32 == 0UL)
X    while (((ITM_Type *) (0xE0000000UL) )->PORT[0U].u32 == 0UL)
N    {
N      __NOP();
X      __nop();
N    }
N    ITM->PORT[0U].u8 = (uint8_t)ch;
X    ((ITM_Type *) (0xE0000000UL) )->PORT[0U].u8 = (uint8_t)ch;
N  }
N  return (ch);
N}
N
N
N/**
N  \brief   ITM Receive Character
N  \details Inputs a character via the external variable \ref ITM_RxBuffer.
N  \return             Received character.
N  \return         -1  No character pending.
N */
N__STATIC_INLINE int32_t ITM_ReceiveChar (void)
Xstatic __inline int32_t ITM_ReceiveChar (void)
N{
N  int32_t ch = -1;                           /* no character available */
N
N  if (ITM_RxBuffer != ITM_RXBUFFER_EMPTY)
X  if (ITM_RxBuffer != ((int32_t)0x5AA55AA5U))
N  {
N    ch = ITM_RxBuffer;
N    ITM_RxBuffer = ITM_RXBUFFER_EMPTY;       /* ready for next character */
X    ITM_RxBuffer = ((int32_t)0x5AA55AA5U);        
N  }
N
N  return (ch);
N}
N
N
N/**
N  \brief   ITM Check Character
N  \details Checks whether a character is pending for reading in the variable \ref ITM_RxBuffer.
N  \return          0  No character available.
N  \return          1  Character available.
N */
N__STATIC_INLINE int32_t ITM_CheckChar (void)
Xstatic __inline int32_t ITM_CheckChar (void)
N{
N
N  if (ITM_RxBuffer == ITM_RXBUFFER_EMPTY)
X  if (ITM_RxBuffer == ((int32_t)0x5AA55AA5U))
N  {
N    return (0);                              /* no character available */
N  }
N  else
N  {
N    return (1);                              /*    character available */
N  }
N}
N
N/*@} end of CMSIS_core_DebugFunctions */
N
N
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM3_H_DEPENDANT */
N
N#endif /* __CMSIS_GENERIC */
L 50 "Generated_Source\PSoC5\core_cm3_psoc5.h" 2
N
N
N#endif /* __CORE_CM3_PSOC5_H__ */
L 23 "Generated_Source\PSoC5\project.h" 2
N#include "CyDmac.h"
L 1 "Generated_Source\PSoC5\CyDmac.h" 1
N/***************************************************************************//**
N* \file CyDmac.h
N* \version 6.10
N*
N* \brief Provides the function definitions for the DMA Controller.
N*
N* \note Documentation of the API's in this file is located in the System
N* Reference Guide provided with PSoC Creator.
N*
N********************************************************************************
N* \copyright
N* Copyright 2008-2021, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions,
N* disclaimers, and limitations in the end user license agreement accompanying
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_BOOT_CYDMAC_H)
X#if !0L
N#define CY_BOOT_CYDMAC_H
N
N
N#include "cytypes.h"
N#include "cyfitter.h"
N#include "cydevice_trm.h"
N#include "CyLib.h"
L 1 "Generated_Source\PSoC5\CyLib.h" 1
N/***************************************************************************//**
N* \file CyLib.h
N* \version 6.10
N*
N* \brief Provides the function definitions for the system, clocking, interrupts
N* and watchdog timer API.
N*
N* \note Documentation of the API's in this file is located in the System
N* Reference Guide provided with PSoC Creator.
N*
N********************************************************************************
N* \copyright
N* Copyright 2008-2021, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions,
N* disclaimers, and limitations in the end user license agreement accompanying
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_BOOT_CYLIB_H)
X#if !0L
N#define CY_BOOT_CYLIB_H
N
N#include <string.h>
L 1 "C:\Keil_v5\ARM\ARMCC\bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060044
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 23 "Generated_Source\PSoC5\CyLib.h" 2
N#include <limits.h>
L 1 "C:\Keil_v5\ARM\ARMCC\bin\..\include\limits.h" 1
N/* limits.h: ANSI 'C' (X3J11 Oct 88) library header, section 2.2.4.2 */
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991-1997 ARM Limited. All rights reserved         */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: drodgman $
N */
N
N#ifndef __limits_h
N#define __limits_h
N#define __ARMCLIB_VERSION 5060044
N
N#define CHAR_BIT 8
N    /* max number of bits for smallest object that is not a bit-field (byte) */
N#define SCHAR_MIN (-128)
N    /* mimimum value for an object of type signed char */
N#define SCHAR_MAX 127
N    /* maximum value for an object of type signed char */
N#define UCHAR_MAX 255
N    /* maximum value for an object of type unsigned char */
N#ifdef __FEATURE_SIGNED_CHAR
N  #define CHAR_MIN (-128)
N      /* minimum value for an object of type char */
N  #define CHAR_MAX 127
N      /* maximum value for an object of type char */
N#else
S  #define CHAR_MIN 0
S      /* minimum value for an object of type char */
S  #define CHAR_MAX 255
S      /* maximum value for an object of type char */
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X#if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S  #define _AEABI_PORTABLE
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
Sextern const int __aeabi_MB_LEN_MAX;
S#define MB_LEN_MAX (__aeabi_MB_LEN_MAX)
N#else
N#define MB_LEN_MAX 6
N#endif
N    /* maximum number of bytes in a multibyte character, */
N    /* for any supported locale */
N
N#define SHRT_MIN  (-0x8000)
N    /* minimum value for an object of type short int */
N#define SHRT_MAX  0x7fff
N    /* maximum value for an object of type short int */
N#define USHRT_MAX 65535
N    /* maximum value for an object of type unsigned short int */
N#define INT_MIN   (~0x7fffffff)  /* -2147483648 and 0x80000000 are unsigned */
N    /* minimum value for an object of type int */
N#define INT_MAX   0x7fffffff
N    /* maximum value for an object of type int */
N#define UINT_MAX  0xffffffffU
N    /* maximum value for an object of type unsigned int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define LONG_MIN  (~0x7fffffffffffffffL)
N#else
N  #define LONG_MIN  (~0x7fffffffL)
N#endif
N    /* minimum value for an object of type long int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define LONG_MAX  0x7fffffffffffffffL
N#else
N  #define LONG_MAX  0x7fffffffL
N#endif
N    /* maximum value for an object of type long int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define ULONG_MAX 0xffffffffffffffffUL
N#else
N  #define ULONG_MAX 0xffffffffUL
N#endif
N    /* maximum value for an object of type unsigned long int */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N  #define LLONG_MIN  (~0x7fffffffffffffffLL)
N      /* minimum value for an object of type long long int */
N  #define LLONG_MAX    0x7fffffffffffffffLL
N      /* maximum value for an object of type long long int */
N  #define ULLONG_MAX   0xffffffffffffffffULL
N      /* maximum value for an object of type unsigned long int */
N#endif
N
N#endif
N
N/* end of limits.h */
N
L 24 "Generated_Source\PSoC5\CyLib.h" 2
N#include <ctype.h>
L 1 "C:\Keil_v5\ARM\ARMCC\bin\..\include\ctype.h" 1
N/* ctype.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.3 */
N/* Copyright (C) Codemist Ltd. 1988-1993.                       */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.        */
N/* version 0.03 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N/*
N * ctype.h declares several functions useful for testing and mapping
N * characters. In all cases the argument is an int, the value of which shall
N * be representable as an unsigned char or shall equal the value of the
N * macro EOF. If the argument has any other value, the behaviour is undefined.
N */
N
N#ifndef __ctype_h
N#define __ctype_h
N#define __ARMCLIB_VERSION 5060044
N
N#define _ARMABI __declspec(__nothrow)
N#define _ARMABI_PURE __declspec(__nothrow) __attribute__((const))
N
N#ifdef __cplusplus
S#define _ARMABI_INLINE_DEF inline
N#elif defined(__GNUC__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#elif 0L || (1L && 199901L <= 199901L)
N#define _ARMABI_INLINE_DEF static inline
N#elif defined(_USE_STATIC_INLINE)
S#define _ARMABI_INLINE_DEF static __inline
S#else
S#define _ARMABI_INLINE_DEF __inline
N#endif
N
N  #ifndef __CTYPE_DECLS
N  #define __CTYPE_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N/* AEABI portable ctype flag bits */
N#define _ABI_A    1       /* alphabetic        */
N#define _ABI_X    2       /* A-F, a-f and 0-9  */
N#define _ABI_P    4       /* punctuation       */
N#define _ABI_B    8       /* blank             */
N#define _ABI_S   16       /* white space       */
N#define _ABI_L   32       /* lower case letter */
N#define _ABI_U   64       /* upper case letter */
N#define _ABI_C  128       /* control chars     */
N
N/* ARM internal ctype flag bits */
N/* N.B. - keep in step with <ctype.c> */
N
N/*
N * __ARM_CT_A (alphabetic) is required because characters in some locales
N * (e.g. Japanese) can be alphabetic but neither uppercase nor
N * lowercase. Unfortunately there wasn't a bit free for this, so
N * instead we've defined __ARM_CT_A as __ARM_CT_N+__ARM_CT_X (on the grounds that this
N * was a previously unused combination). Hence some of the ctype
N * predicates below are slightly less than obvious in
N * implementation.
N */
N#define __ARM_CT_S 1            /* whitespace           */
N#define __ARM_CT_P 2            /* punctuation          */
N#define __ARM_CT_B 4            /* blank                */
N#define __ARM_CT_L 8            /* lower case letter    */
N#define __ARM_CT_U 16           /* upper case letter    */
N#define __ARM_CT_N 32           /* (decimal) digit      */
N#define __ARM_CT_C 64           /* control chars        */
N#define __ARM_CT_X 128          /* A-F and a-f          */
N#define __ARM_CT_A (__ARM_CT_N+__ARM_CT_X)    /* alphabetic           */
N
N#if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X#if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S  #define _AEABI_PORTABLE
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S
Sextern int (isalnum)(int /*c*/);
Sextern int (isalpha)(int /*c*/);
Sextern int (isblank)(int /*c*/);
Sextern int (iscntrl)(int /*c*/);
Sextern int (isdigit)(int /*c*/);
Sextern int (isgraph)(int /*c*/);
Sextern int (islower)(int /*c*/);
Sextern int (isprint)(int /*c*/);
Sextern int (ispunct)(int /*c*/);
Sextern int (isspace)(int /*c*/);
Sextern int (isupper)(int /*c*/);
Sextern int (isxdigit)(int /*c*/);
S
S/* Mandatory character attribute arrays indexed from 0 to 256 */
Sextern unsigned char const __aeabi_ctype_table_C[257];  /* "C" locale */
Sextern unsigned char const __aeabi_ctype_table_[257];   /* default locale */
S         /* The default locale might be the C locale */
S/* Optional character attribute arrays indexed from 0 to 256.        */
S/* These do not have to be provided by every execution environment   */
S/* but, if provided, shall be provided with these names and meaning. */
Sextern unsigned char const __aeabi_ctype_table_ISO8859_1[257];
Sextern unsigned char const __aeabi_ctype_table_SJIS[257];
Sextern unsigned char const __aeabi_ctype_table_BIG5[257];
Sextern unsigned char const __aeabi_ctype_table_UTF8[257];
S#ifdef _AEABI_LC_CTYPE
S# define _AEABI_CTYPE_TABLE(_X) __aeabi_ctype_table_ ## _X
S# define _AEABI_CTYPE(_X) _AEABI_CTYPE_TABLE(_X)
S# define __aeabi_ctype_table _AEABI_CTYPE(_AEABI_LC_CTYPE)
S#else
S# define __aeabi_ctype_table __aeabi_ctype_table_
S#endif
S
S#define isspace(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] & _ABI_S)
S#define isalpha(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] & _ABI_A)
S#define isalnum(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] << 30) /* test for _ABI_A and _ABI_X */
S#define isprint(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] << 28) /* test for _ABI_A, _ABI_X, _ABI_P and _ABI_B */
S#define isupper(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] & _ABI_U)
S#define islower(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] & _ABI_L)
S#define isxdigit(x) ((__CLIBNS __aeabi_ctype_table+1)[(x)] & _ABI_X)
S#define isgraph(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] << 29) /* test for _ABI_A, _ABI_X and _ABI_P */
S#define iscntrl(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] & _ABI_C)
S#define ispunct(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] & _ABI_P)
S#define isdigit(c)  (((unsigned)(c) - '0') < 10)
S
N#else /* __AEABI_PORTABILITY_LEVEL */
N
Nextern _ARMABI_PURE unsigned char **__rt_ctype_table(void);
Xextern __declspec(__nothrow) __attribute__((const)) unsigned char **__rt_ctype_table(void);
N
N#define __arm_ctype (*__CLIBNS __rt_ctype_table())
N
N#ifdef __cplusplus
S    inline int isalnum(int __c) { return (__arm_ctype[__c] & (__ARM_CT_U+__ARM_CT_L+__ARM_CT_N)); }
N#else
N    #define isalnum(c) (__arm_ctype[c] & (__ARM_CT_U+__ARM_CT_L+__ARM_CT_N))
N    extern int (isalnum)(int /*c*/);
N#endif
N    /* non-0 iff c is alphabetic or numeric */
N
N#ifdef __cplusplus
S    inline int isalpha(int __c) { return (__arm_ctype[__c] & (__ARM_CT_U+__ARM_CT_L+__ARM_CT_X)); }
N#else
N    #define isalpha(c) (__arm_ctype[c] & (__ARM_CT_U+__ARM_CT_L+__ARM_CT_X))
N    extern int (isalpha)(int /*c*/);
N#endif
N    /* non-0 iff c is alphabetic */
N
N#ifdef __cplusplus
S    inline int iscntrl(int __c) { return (__arm_ctype[__c] & __ARM_CT_C); }
N#else
N    #define iscntrl(c) (__arm_ctype[c] & __ARM_CT_C)
N    extern int (iscntrl)(int /*c*/);
N#endif
N    /* non-0 iff c is a control character - in the "C" locale */
N    /*       this means (c < ' ') || (c > '~')                */
N
N/* isdigit must test for the presence of _only_ __ARM_CT_N, not just __ARM_CT_N at all. */
N#ifdef __cplusplus
S    inline int isdigit(int __c) { return (__arm_ctype[__c] == __ARM_CT_N); }
N#else
N    #define isdigit(c) (__arm_ctype[c] == __ARM_CT_N)
N    extern int (isdigit)(int /*c*/);
N#endif
N    /* non-0 iff c is a decimal digit */
N
N    extern int (isblank)(int /*c*/);
N    /* non-0 iff c is ' ', '\t' or some other locale-specific, */
N    /* word-separating character (there are no others in "C"   */
N    /* locale) */
N
N#ifdef __cplusplus
S    inline int isgraph(int __c) {return(__arm_ctype[__c] & (__ARM_CT_L+__ARM_CT_U+__ARM_CT_N+__ARM_CT_X+__ARM_CT_P));}
N#else
N    #define isgraph(c) (__arm_ctype[c]&(__ARM_CT_L+__ARM_CT_U+__ARM_CT_N+__ARM_CT_X+__ARM_CT_P))
N    extern int (isgraph)(int /*c*/);
N#endif
N    /* non-0 iff c is any printing character other than ' ' */
N
N#ifdef __cplusplus
S    inline int islower(int __c) { return (__arm_ctype[__c] & __ARM_CT_L); }
N#else
N    #define islower(c) (__arm_ctype[c] & __ARM_CT_L)
N    extern int (islower)(int /*c*/);
N#endif
N    /* non-0 iff c is a lower-case letter */
N
N#ifdef __cplusplus
S    inline int isprint(int __c) { return (__arm_ctype[__c] & (__ARM_CT_L+__ARM_CT_U+__ARM_CT_N+__ARM_CT_P+__ARM_CT_B)); }
N#else
N    #define isprint(c) (__arm_ctype[c] & (__ARM_CT_L+__ARM_CT_U+__ARM_CT_N+__ARM_CT_P+__ARM_CT_B))
N    extern int (isprint)(int /*c*/);
N#endif
N    /* non-0 iff c is a printing character - in the "C" locale */
N    /*       this means 0x20 (space) -> 0x7E (tilde)           */
N
N#ifdef __cplusplus
S    inline int ispunct(int __c) { return (__arm_ctype[__c] & __ARM_CT_P); }
N#else
N    #define ispunct(c) (__arm_ctype[c] & __ARM_CT_P)
N    extern int (ispunct)(int /*c*/);
N#endif
N    /* non-0 iff c is a non-space, non-alpha-numeric, printing character */
N
N#ifdef __cplusplus
S    inline int isspace(int __c) { return (__arm_ctype[__c] & __ARM_CT_S); }
N#else
N    #define isspace(c) (__arm_ctype[c] & __ARM_CT_S)
N    extern int (isspace)(int /*c*/);
N#endif
N    /* non-0 iff c is a white-space char: ' ', '\f', '\n', '\r', '\t', '\v'. */
N
N#ifdef __cplusplus
S    inline int isupper(int __c) { return (__arm_ctype[__c] & __ARM_CT_U); }
N#else
N    #define isupper(c) (__arm_ctype[c] & __ARM_CT_U)
N    extern int (isupper)(int /*c*/);
N#endif
N    /* non-0 iff c is an upper-case letter */
N
N/* isxdigit must test for the presence of __ARM_CT_N or __ARM_CT_X but not both. */
N/* This helper function avoids needing to evaluate c twice. */
N
N_ARMABI_INLINE_DEF int __isxdigit_helper(int __t) { return (__t ^ (__t << 2)); }
Xstatic inline int __isxdigit_helper(int __t) { return (__t ^ (__t << 2)); }
N#ifdef __cplusplus
S    inline int isxdigit(int __c){return __isxdigit_helper(__arm_ctype[__c]) & __ARM_CT_X;}
N#else
N    #define isxdigit(c) (__isxdigit_helper(__arm_ctype[c]) & __ARM_CT_X)
N    extern int (isxdigit)(int /*c*/);
N#endif
N    /* non-0 iff c is a digit, in 'a'..'f', or in 'A'..'F' */
N
N#endif /* __AEABI_PORTABILITY_LEVEL */
N
Nextern int tolower(int /*c*/);
N    /* if c is an upper-case letter then return the corresponding */
N    /* lower-case letter, otherwise return c.                     */
N
Nextern int toupper(int /*c*/);
N    /* if c is an lower-case letter then return the corresponding */
N    /* upper-case letter, otherwise return c.                     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __CTYPE_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __CTYPE_NO_EXPORTS
S      using ::std::isalnum;
S      using ::std::isalpha;
S      using ::std::iscntrl;
S      using ::std::isdigit;
S      using ::std::isblank;
S      using ::std::isgraph;
S      using ::std::islower;
S      using ::std::isprint;
S      using ::std::ispunct;
S      using ::std::isspace;
S      using ::std::isupper;
S      using ::std::isxdigit;
S      using ::std::tolower;
S      using ::std::toupper;
S    #endif /* __CTYPE_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of ctype.h */
N
L 25 "Generated_Source\PSoC5\CyLib.h" 2
N
N#include "cytypes.h"
N#include "cyfitter.h"
N#include "cydevice_trm.h"
N#include "cyPm.h"
L 1 "Generated_Source\PSoC5\cyPm.h" 1
N/***************************************************************************//**
N* \file cyPm.h
N* \version 6.10
N*
N* \brief Provides the function definitions for the power management API.
N*
N* \note Documentation of the API's in this file is located in the
N*  System Reference Guide provided with PSoC Creator.
N*
N********************************************************************************
N* \copyright
N* Copyright 2008-2021, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions,
N* disclaimers, and limitations in the end user license agreement accompanying
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_BOOT_CYPM_H)
X#if !0L
N#define CY_BOOT_CYPM_H
N
N#include "cytypes.h"        /* Register access API      */
N#include "cydevice_trm.h"   /* Registers addresses      */
N#include "cyfitter.h"       /* Comparators placement    */
N#include "CyLib.h"          /* Clock API                */
L 1 "Generated_Source\PSoC5\CyLib.h" 1
N/***************************************************************************//**
N* \file CyLib.h
N* \version 6.10
N*
N* \brief Provides the function definitions for the system, clocking, interrupts
N* and watchdog timer API.
N*
N* \note Documentation of the API's in this file is located in the System
N* Reference Guide provided with PSoC Creator.
N*
N********************************************************************************
N* \copyright
N* Copyright 2008-2021, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions,
N* disclaimers, and limitations in the end user license agreement accompanying
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_BOOT_CYLIB_H)
X#if !1L
S#define CY_BOOT_CYLIB_H
S
S#include <string.h>
S#include <limits.h>
S#include <ctype.h>
S
S#include "cytypes.h"
S#include "cyfitter.h"
S#include "cydevice_trm.h"
S#include "cyPm.h"
S
S#if(CY_PSOC3)
S    #include <PSoC3_8051.h>
S#endif  /* (CY_PSOC3) */
S
S
S#if(CYDEV_VARIABLE_VDDA == 1)
S
S    #include "CyScBoostClk.h"
S
S#endif  /* (CYDEV_VARIABLE_VDDA == 1) */
S
S
S/* Global variable with preserved reset status */
Sextern uint8 CYXDATA CyResetStatus;
S
S
S/* Variable Vdda */
S#if(CYDEV_VARIABLE_VDDA == 1)
S
S    extern uint8 CyScPumpEnabled;
S
S#endif  /* (CYDEV_VARIABLE_VDDA == 1) */
S
S
S/* Do not use these definitions directly in your application */
Sextern uint32 cydelay_freq_hz;
Sextern uint32 cydelay_freq_khz;
Sextern uint8  cydelay_freq_mhz;
Sextern uint32 cydelay_32k_ms;
S
S
S/***************************************
S*    Function Prototypes
S***************************************/
Scystatus CyPLL_OUT_Start(uint8 wait) ;
Svoid  CyPLL_OUT_Stop(void) ;
Svoid  CyPLL_OUT_SetPQ(uint8 pDiv, uint8 qDiv, uint8 current) ;
Svoid  CyPLL_OUT_SetSource(uint8 source) ;
S
Svoid  CyIMO_Start(uint8 wait) ;
Svoid  CyIMO_Stop(void) ;
Svoid  CyIMO_SetFreq(uint8 freq) ;
Svoid  CyIMO_SetSource(uint8 source) ;
Svoid  CyIMO_EnableDoubler(void) ;
Svoid  CyIMO_DisableDoubler(void) ;
S
Svoid  CyMasterClk_SetSource(uint8 source) ;
Svoid  CyMasterClk_SetDivider(uint8 divider) ;
Svoid  CyBusClk_SetDivider(uint16 divider) ;
S
S#if(CY_PSOC3)
S    void  CyCpuClk_SetDivider(uint8 divider) ;
S#endif  /* (CY_PSOC3) */
S
Svoid  CyUsbClk_SetSource(uint8 source) ;
S
Svoid  CyILO_Start1K(void) ;
Svoid  CyILO_Stop1K(void) ;
Svoid  CyILO_Start100K(void) ;
Svoid  CyILO_Stop100K(void) ;
Svoid  CyILO_Enable33K(void) ;
Svoid  CyILO_Disable33K(void) ;
Svoid  CyILO_SetSource(uint8 source) ;
Suint8 CyILO_SetPowerMode(uint8 mode) ;
S
Suint8 CyXTAL_32KHZ_ReadStatus(void) ;
Suint8 CyXTAL_32KHZ_SetPowerMode(uint8 mode) ;
Svoid  CyXTAL_32KHZ_Start(void) ;
Svoid  CyXTAL_32KHZ_Stop(void) ;
S
Scystatus CyXTAL_Start(uint8 wait) ;
Svoid  CyXTAL_Stop(void) ;
Svoid  CyXTAL_SetStartup(uint8 setting) ;
S
Svoid  CyXTAL_EnableErrStatus(void) ;
Svoid  CyXTAL_DisableErrStatus(void) ;
Suint8 CyXTAL_ReadStatus(void) ;
Svoid  CyXTAL_EnableFaultRecovery(void) ;
Svoid  CyXTAL_DisableFaultRecovery(void) ;
S
Svoid CyXTAL_SetFbVoltage(uint8 setting) ;
Svoid CyXTAL_SetWdVoltage(uint8 setting) ;
S
Svoid CyWdtStart(uint8 ticks, uint8 lpMode) ;
Svoid CyWdtClear(void) ;
S
S/* System Function Prototypes */
Svoid CyDelay(uint32 milliseconds) CYREENTRANT;
Svoid CyDelayUs(uint16 microseconds);
Svoid CyDelayFreq(uint32 freq) CYREENTRANT;
Svoid CyDelayCycles(uint32 cycles);
S
Svoid CySoftwareReset(void) ;
S
Suint8 CyEnterCriticalSection(void);
Svoid CyExitCriticalSection(uint8 savedIntrStatus);
Svoid CyHalt(uint8 reason) CYREENTRANT;
S
S
S/* Interrupt Function Prototypes */
S#if(CY_PSOC5)
S    cyisraddress CyIntSetSysVector(uint8 number, cyisraddress address)  ;
S    cyisraddress CyIntGetSysVector(uint8 number) ;
S#endif  /* (CY_PSOC5) */
S
Scyisraddress CyIntSetVector(uint8 number, cyisraddress address) ;
Scyisraddress CyIntGetVector(uint8 number) ;
S
Svoid  CyIntSetPriority(uint8 number, uint8 priority) ;
Suint8 CyIntGetPriority(uint8 number) ;
S
Suint8 CyIntGetState(uint8 number) ;
S
Suint32 CyDisableInts(void) ;
Svoid CyEnableInts(uint32 mask) ;
S
S
S#if(CY_PSOC5)
S    void CyFlushCache(void);
S#endif  /* (CY_PSOC5) */
S
S
S/* Voltage Detection Function Prototypes */
Svoid CyVdLvDigitEnable(uint8 reset, uint8 threshold) ;
Svoid CyVdLvAnalogEnable(uint8 reset, uint8 threshold) ;
Svoid CyVdLvDigitDisable(void) ;
Svoid CyVdLvAnalogDisable(void) ;
Svoid CyVdHvAnalogEnable(void) ;
Svoid CyVdHvAnalogDisable(void) ;
Suint8 CyVdStickyStatus(uint8 mask) ;
Suint8 CyVdRealTimeStatus(void) ;
S
Svoid CySetScPumps(uint8 enable) ;
S
S#if(CY_PSOC5)
S    /* Default interrupt handler */
S    CY_ISR_PROTO(IntDefaultHandler);
S#endif  /* (CY_PSOC5) */
S
S#if(CY_PSOC5)
S    /** System tick timer APIs */
S    typedef void (*cySysTickCallback)(void);
S
S    void CySysTickStart(void);
S    void CySysTickInit(void);
S    void CySysTickEnable(void);
S    void CySysTickStop(void);
S    void CySysTickEnableInterrupt(void);
S    void CySysTickDisableInterrupt(void);
S    void CySysTickSetReload(uint32 value);
S    uint32 CySysTickGetReload(void);
S    uint32 CySysTickGetValue(void);
S    cySysTickCallback CySysTickSetCallback(uint32 number, cySysTickCallback function);
S    cySysTickCallback CySysTickGetCallback(uint32 number);
S    void CySysTickSetClockSource(uint32 clockSource);
S    uint32 CySysTickGetCountFlag(void);
S    void CySysTickClear(void);
S#endif  /* (CY_PSOC5) */
S
Svoid CyGetUniqueId(uint32* uniqueId);
S
S
S/***************************************
S* API Constants
S***************************************/
S
S
S/*******************************************************************************
S* PLL API Constants
S*******************************************************************************/
S#define CY_CLK_PLL_ENABLE               (0x01u)
S#define CY_CLK_PLL_LOCK_STATUS          (0x01u)
S
S#define CY_CLK_PLL_FTW_INTERVAL         (24u)
S
S#define CY_CLK_PLL_MAX_Q_VALUE          (16u)
S#define CY_CLK_PLL_MIN_Q_VALUE          (1u)
S#define CY_CLK_PLL_MIN_P_VALUE          (8u)
S#define CY_CLK_PLL_MIN_CUR_VALUE        (1u)
S#define CY_CLK_PLL_MAX_CUR_VALUE        (7u)
S
S#define CY_CLK_PLL_CURRENT_POSITION     (4u)
S#define CY_CLK_PLL_CURRENT_MASK         (0x8Fu)
S
S
S/*******************************************************************************
S* External 32kHz Crystal Oscillator API Constants
S*******************************************************************************/
S#define CY_XTAL32K_ANA_STAT             (0x20u)
S
S#define CY_CLK_XTAL32_CR_LPM            (0x02u)
S#define CY_CLK_XTAL32_CR_EN             (0x01u)
S#if(CY_PSOC3)
S    #define CY_CLK_XTAL32_CR_PDBEN      (0x04u)
S#endif  /* (CY_PSOC3) */
S
S#define CY_CLK_XTAL32_TR_MASK           (0x07u)
S#define CY_CLK_XTAL32_TR_STARTUP        (0x03u)
S#define CY_CLK_XTAL32_TR_HIGH_POWER     (0x06u)
S#define CY_CLK_XTAL32_TR_LOW_POWER      (0x01u)
S#define CY_CLK_XTAL32_TR_POWERDOWN      (0x00u)
S
S#define CY_CLK_XTAL32_TST_DEFAULT       (0xF3u)
S
S#define CY_CLK_XTAL32_CFG_LP_DEFAULT    (0x04u)
S#define CY_CLK_XTAL32_CFG_LP_LOWPOWER   (0x08u)
S#define CY_CLK_XTAL32_CFG_LP_MASK       (0x0Cu)
S
S#define CY_CLK_XTAL32_CFG_LP_ALLOW      (0x80u)
S
S
S/*******************************************************************************
S* External MHz Crystal Oscillator API Constants
S*******************************************************************************/
S#define CY_CLK_XMHZ_FTW_INTERVAL        (24u)
S#define CY_CLK_XMHZ_MIN_TIMEOUT         (130u)
S
S#define CY_CLK_XMHZ_CSR_ENABLE          (0x01u)
S#define CY_CLK_XMHZ_CSR_XERR            (0x80u)
S#define CY_CLK_XMHZ_CSR_XFB             (0x04u)
S#define CY_CLK_XMHZ_CSR_XPROT           (0x40u)
S
S#define CY_CLK_XMHZ_CFG0_XCFG_MASK      (0x1Fu)
S#define CY_CLK_XMHZ_CFG1_VREF_FB_MASK   (0x0Fu)
S#define CY_CLK_XMHZ_CFG1_VREF_WD_MASK   (0x70u)
S
S
S/*******************************************************************************
S* Watchdog Timer API Constants
S*******************************************************************************/
S#define CYWDT_2_TICKS               (0x0u)     /*    4 -    6 ms */
S#define CYWDT_16_TICKS              (0x1u)     /*   32 -   48 ms */
S#define CYWDT_128_TICKS             (0x2u)     /*  256 -  384 ms */
S#define CYWDT_1024_TICKS            (0x3u)     /* 2048 - 3072 ms */
S
S#define CYWDT_LPMODE_NOCHANGE       (0x00u)
S#define CYWDT_LPMODE_MAXINTER       (0x01u)
S#define CYWDT_LPMODE_DISABLED       (0x03u)
S
S#define CY_WDT_CFG_INTERVAL_MASK    (0x03u)
S#define CY_WDT_CFG_CTW_RESET        (0x80u)
S#define CY_WDT_CFG_LPMODE_SHIFT     (5u)
S#define CY_WDT_CFG_LPMODE_MASK      (0x60u)
S#define CY_WDT_CFG_WDR_EN           (0x10u)
S#define CY_WDT_CFG_CLEAR_ALL        (0x00u)
S#define CY_WDT_CR_FEED              (0x01u)
S
S
S/*******************************************************************************
S*    Voltage Detection API Constants
S*******************************************************************************/
S
S#define CY_VD_LVID_EN                (0x01u)
S#define CY_VD_LVIA_EN                (0x02u)
S#define CY_VD_HVIA_EN                (0x04u)
S
S#define CY_VD_PRESD_EN               (0x40u)
S#define CY_VD_PRESA_EN               (0x80u)
S
S#define CY_VD_LVID                   (0x01u)
S#define CY_VD_LVIA                   (0x02u)
S#define CY_VD_HVIA                   (0x04u)
S
S#define CY_VD_LVI_TRIP_LVID_MASK     (0x0Fu)
S#define CY_VD_INT_MASK               ((uint32) (0x01u))
S
S
S/*******************************************************************************
S*    Variable VDDA API Constants
S*******************************************************************************/
S#if(CYDEV_VARIABLE_VDDA == 1)
S
S    /* Active Power Mode Configuration Register 9 */
S    #define CY_LIB_ACT_CFG9_SWCAP0_EN        (0x01u)
S    #define CY_LIB_ACT_CFG9_SWCAP1_EN        (0x02u)
S    #define CY_LIB_ACT_CFG9_SWCAP2_EN        (0x04u)
S    #define CY_LIB_ACT_CFG9_SWCAP3_EN        (0x08u)
S    #define CY_LIB_ACT_CFG9_SWCAPS_MASK      (0x0Fu)
S
S    /* Switched Cap Miscellaneous Control Register */
S    #define CY_LIB_SC_MISC_PUMP_FORCE        (0x20u)
S
S    /* Switched Capacitor 0 Boost Clock Selection Register */
S    #define CY_LIB_SC_BST_CLK_EN             (0x08u)
S    #define CY_LIB_SC_BST_CLK_INDEX_MASK     (0xF8u)
S
S#endif  /* (CYDEV_VARIABLE_VDDA == 1) */
S
S
S/*******************************************************************************
S* Clock Distribution API Constants
S*******************************************************************************/
S#define CY_LIB_CLKDIST_AMASK_MASK       (0xF0u)
S#define CY_LIB_CLKDIST_DMASK_MASK       (0x00u)
S#define CY_LIB_CLKDIST_LD_LOAD          (0x01u)
S#define CY_LIB_CLKDIST_BCFG2_MASK       (0x80u)
S#define CY_LIB_CLKDIST_MASTERCLK_DIV    (7u)
S#define CY_LIB_CLKDIST_BCFG2_SSS        (0x40u)
S#define CY_LIB_CLKDIST_MSTR1_SRC_MASK   (0xFCu)
S#define CY_LIB_FASTCLK_IMO_DOUBLER      (0x10u)
S#define CY_LIB_FASTCLK_IMO_IMO          (0x20u)
S#define CY_LIB_CLKDIST_CR_IMO2X         (0x40u)
S#define CY_LIB_FASTCLK_IMO_CR_RANGE_MASK (0xF8u)
S
S#define CY_LIB_CLKDIST_CR_PLL_SCR_MASK  (0xFCu)
S
S
S/* CyILO_SetPowerMode() */
S#define CY_ILO_CONTROL_PD_MODE          (0x10u)
S#define CY_ILO_CONTROL_PD_POSITION      (4u)
S
S#define CY_ILO_SOURCE_100K              (0u)
S#define CY_ILO_SOURCE_33K               (1u)
S#define CY_ILO_SOURCE_1K                (2u)
S
S#define CY_ILO_FAST_START               (0u)
S#define CY_ILO_SLOW_START               (1u)
S
S#define CY_ILO_SOURCE_BITS_CLEAR        (0xF3u)
S#define CY_ILO_SOURCE_1K_SET            (0x08u)
S#define CY_ILO_SOURCE_33K_SET           (0x04u)
S#define CY_ILO_SOURCE_100K_SET          (0x00u)
S
S#define CY_MASTER_SOURCE_IMO            (0u)
S#define CY_MASTER_SOURCE_PLL            (1u)
S#define CY_MASTER_SOURCE_XTAL           (2u)
S#define CY_MASTER_SOURCE_DSI            (3u)
S
S#define CY_IMO_SOURCE_IMO               (0u)
S#define CY_IMO_SOURCE_XTAL              (1u)
S#define CY_IMO_SOURCE_DSI               (2u)
S
S
S/* CyIMO_Start() */
S#define CY_LIB_PM_ACT_CFG0_IMO_EN       (0x10u)
S#define CY_LIB_PM_STBY_CFG0_IMO_EN      (0x10u)
S#define CY_LIB_CLK_IMO_FTW_TIMEOUT      (0x00u)
S
S#define CY_LIB_IMO_3MHZ_VALUE           (0x03u)
S#define CY_LIB_IMO_6MHZ_VALUE           (0x01u)
S#define CY_LIB_IMO_12MHZ_VALUE          (0x00u)
S#define CY_LIB_IMO_24MHZ_VALUE          (0x02u)
S#define CY_LIB_IMO_48MHZ_VALUE          (0x04u)
S#define CY_LIB_IMO_62MHZ_VALUE          (0x05u)
S#define CY_LIB_IMO_74MHZ_VALUE          (0x06u)
S
S
S/* CyIMO_SetFreq() */
S#define CY_IMO_FREQ_3MHZ                (0u)
S#define CY_IMO_FREQ_6MHZ                (1u)
S#define CY_IMO_FREQ_12MHZ               (2u)
S#define CY_IMO_FREQ_24MHZ               (3u)
S#define CY_IMO_FREQ_48MHZ               (4u)
S#define CY_IMO_FREQ_62MHZ               (5u)
S#if(CY_PSOC5)
S    #define CY_IMO_FREQ_74MHZ           (6u)
S#endif  /* (CY_PSOC5) */
S#define CY_IMO_FREQ_USB                 (8u)
S
S#define CY_LIB_IMO_USBCLK_ON_SET        (0x40u)
S
S
S/* CyCpuClk_SetDivider() */
S#define CY_LIB_CLKDIST_DIV_POSITION     (4u)
S#define CY_LIB_CLKDIST_MSTR1_DIV_MASK   (0x0Fu)
S
S
S/* CyIMO_SetTrimValue() */
S#define CY_LIB_USB_CLK_EN               (0x02u)
S
S
S/* CyPLL_OUT_SetSource() - parameters */
S#define CY_PLL_SOURCE_IMO               (0u)
S#define CY_PLL_SOURCE_XTAL              (1u)
S#define CY_PLL_SOURCE_DSI               (2u)
S
S
S/* CyILO_[Start|Stop][1|100K](), CyILO_[Enable|Disable]33K() */
S#define CY_LIB_SLOWCLK_ILO_CR0_EN_1KHZ   (0x02u)
S#define CY_LIB_SLOWCLK_ILO_CR0_EN_33KHZ  (0x20u)
S#define CY_LIB_SLOWCLK_ILO_CR0_EN_100KHZ (0x04u)
S
S
S/* CyUsbClk_SetSource() */
S#define CY_LIB_CLKDIST_UCFG_SRC_SEL_MASK (0x03u)
S
S
S/* CyUsbClk_SetSource() - parameters */
S#define CY_LIB_USB_CLK_IMO2X            (0x00u)
S#define CY_LIB_USB_CLK_IMO              (0x01u)
S#define CY_LIB_USB_CLK_PLL              (0x02u)
S#define CY_LIB_USB_CLK_DSI              (0x03u)
S
S
S/* CyUSB_PowerOnCheck() */
S#define CY_ACT_USB_ENABLED              (0x01u)
S#define CY_ALT_ACT_USB_ENABLED          (0x01u)
S
S
S#if(CY_PSOC5)
S
S    /***************************************************************************
S    * Instruction Synchronization Barrier flushes the pipeline in the processor,
S    * so that all instructions following the ISB are fetched from cache or
S    * memory, after the instruction has been completed.
S    ***************************************************************************/
S
S    #if defined(__ARMCC_VERSION)
S        #define CY_SYS_ISB       __isb(0x0f)
S    #else   /* ASM for GCC & IAR */
S        #define CY_SYS_ISB       __asm volatile ("isb \n")
S    #endif /* (__ARMCC_VERSION) */
S
S#endif /* (CY_PSOC5) */
S
S
S/***************************************
S* Registers
S***************************************/
S
S
S/*******************************************************************************
S* System Registers
S*******************************************************************************/
S
S/* Software Reset Control Register */
S#define CY_LIB_RESET_CR2_REG         (* (reg8 *) CYREG_RESET_CR2)
S#define CY_LIB_RESET_CR2_PTR         (  (reg8 *) CYREG_RESET_CR2)
S
S/* Timewheel Configuration Register 0 */
S#define CY_LIB_PM_TW_CFG0_REG           (*(reg8 *) CYREG_PM_TW_CFG0)
S#define CY_LIB_PM_TW_CFG0_PTR           ( (reg8 *) CYREG_PM_TW_CFG0)
S
S/* Timewheel Configuration Register 2 */
S#define CY_LIB_PM_TW_CFG2_REG           (*(reg8 *) CYREG_PM_TW_CFG2)
S#define CY_LIB_PM_TW_CFG2_PTR           ( (reg8 *) CYREG_PM_TW_CFG2)
S
S/* USB Configuration Register */
S#define CY_LIB_CLKDIST_UCFG_REG         (*(reg8 *) CYREG_CLKDIST_UCFG)
S#define CY_LIB_CLKDIST_UCFG_PTR         ( (reg8 *) CYREG_CLKDIST_UCFG)
S
S/* Internal Main Oscillator Trim Register 1 */
S#define CY_LIB_IMO_TR1_REG              (*(reg8 *) CYREG_IMO_TR1)
S#define CY_LIB_IMO_TR1_PTR              ( (reg8 *) CYREG_IMO_TR1)
S
S/* USB control 1 Register */
S#define CY_LIB_USB_CR1_REG              (*(reg8 *) CYREG_USB_CR1 )
S#define CY_LIB_USB_CR1_PTR              ( (reg8 *) CYREG_USB_CR1 )
S
S/* Active Power Mode Configuration Register 0 */
S#define CY_LIB_PM_ACT_CFG0_REG          (*(reg8 *) CYREG_PM_ACT_CFG0)
S#define CY_LIB_PM_ACT_CFG0_PTR          ( (reg8 *) CYREG_PM_ACT_CFG0)
S
S/* Standby Power Mode Configuration Register 0 */
S#define CY_LIB_PM_STBY_CFG0_REG          (*(reg8 *) CYREG_PM_STBY_CFG0)
S#define CY_LIB_PM_STBY_CFG0_PTR          ( (reg8 *) CYREG_PM_STBY_CFG0)
S
S/* Active Power Mode Configuration Register 5 */
S#define CY_LIB_PM_ACT_CFG5_REG              (* (reg8 *) CYREG_PM_ACT_CFG5 )
S#define CY_LIB_PM_ACT_CFG5_PTR              (  (reg8 *) CYREG_PM_ACT_CFG5 )
S
S/* Standby Power Mode Configuration Register 5 */
S#define CY_LIB_PM_STBY_CFG5_REG             (* (reg8 *) CYREG_PM_STBY_CFG5 )
S#define CY_LIB_PM_STBY_CFG5_PTR             (  (reg8 *) CYREG_PM_STBY_CFG5 )
S
S/* CyIMO_SetTrimValue() */
S#if(CY_PSOC3)
S    #define CY_LIB_TRIM_IMO_3MHZ_PTR         ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_3MHZ)
S    #define CY_LIB_TRIM_IMO_6MHZ_PTR         ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_6MHZ)
S    #define CY_LIB_TRIM_IMO_12MHZ_PTR        ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_12MHZ)
S    #define CY_LIB_TRIM_IMO_24MHZ_PTR        ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_24MHZ)
S    #define CY_LIB_TRIM_IMO_67MHZ_PTR        ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_67MHZ)
S    #define CY_LIB_TRIM_IMO_80MHZ_PTR        ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_80MHZ)
S    #define CY_LIB_TRIM_IMO_USB_PTR          ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_USB)
S    #define CY_LIB_TRIM_IMO_TR1_PTR          ((void far *) (CYREG_FLSHID_MFG_CFG_IMO_TR1 + 1u))
S #else
S    #define CY_LIB_TRIM_IMO_3MHZ_PTR         ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_3MHZ)
S    #define CY_LIB_TRIM_IMO_6MHZ_PTR         ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_6MHZ)
S    #define CY_LIB_TRIM_IMO_12MHZ_PTR        ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_12MHZ)
S    #define CY_LIB_TRIM_IMO_24MHZ_PTR        ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_24MHZ)
S    #define CY_LIB_TRIM_IMO_67MHZ_PTR        ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_67MHZ)
S    #define CY_LIB_TRIM_IMO_80MHZ_PTR        ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_80MHZ)
S    #define CY_LIB_TRIM_IMO_USB_PTR          ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_USB)
S    #define CY_LIB_TRIM_IMO_TR1_PTR          ((reg8 *) (CYREG_FLSHID_MFG_CFG_IMO_TR1 + 1u))
S#endif  /* (CY_PSOC3) */
S
S
S/*******************************************************************************
S* PLL Registers
S*******************************************************************************/
S
S/* PLL Configuration Register 0 */
S#define CY_CLK_PLL_CFG0_REG         (*(reg8 *) CYREG_FASTCLK_PLL_CFG0)
S#define CY_CLK_PLL_CFG0_PTR         ( (reg8 *) CYREG_FASTCLK_PLL_CFG0)
S
S/* PLL Configuration Register 1 */
S#define CY_CLK_PLL_CFG1_REG         (*(reg8 *) CYREG_FASTCLK_PLL_CFG1)
S#define CY_CLK_PLL_CFG1_PTR         ( (reg8 *) CYREG_FASTCLK_PLL_CFG1)
S
S/* PLL Status Register */
S#define CY_CLK_PLL_SR_REG           (*(reg8 *) CYREG_FASTCLK_PLL_SR)
S#define CY_CLK_PLL_SR_PTR           ( (reg8 *) CYREG_FASTCLK_PLL_SR)
S
S/* PLL Q-Counter Configuration Register */
S#define CY_CLK_PLL_Q_REG            (*(reg8 *) CYREG_FASTCLK_PLL_Q)
S#define CY_CLK_PLL_Q_PTR            ( (reg8 *) CYREG_FASTCLK_PLL_Q)
S
S/* PLL P-Counter Configuration Register */
S#define CY_CLK_PLL_P_REG            (*(reg8 *) CYREG_FASTCLK_PLL_P)
S#define CY_CLK_PLL_P_PTR            ( (reg8 *) CYREG_FASTCLK_PLL_P)
S
S
S/*******************************************************************************
S* External MHz Crystal Oscillator Registers
S*******************************************************************************/
S
S/* External MHz Crystal Oscillator Status and Control Register */
S#define CY_CLK_XMHZ_CSR_REG         (*(reg8 *) CYREG_FASTCLK_XMHZ_CSR)
S#define CY_CLK_XMHZ_CSR_PTR         ( (reg8 *) CYREG_FASTCLK_XMHZ_CSR)
S
S/* External MHz Crystal Oscillator Configuration Register 0 */
S#define CY_CLK_XMHZ_CFG0_REG        (*(reg8 *) CYREG_FASTCLK_XMHZ_CFG0)
S#define CY_CLK_XMHZ_CFG0_PTR        ( (reg8 *) CYREG_FASTCLK_XMHZ_CFG0)
S
S/* External MHz Crystal Oscillator Configuration Register 1 */
S#define CY_CLK_XMHZ_CFG1_REG        (*(reg8 *) CYREG_FASTCLK_XMHZ_CFG1)
S#define CY_CLK_XMHZ_CFG1_PTR        ( (reg8 *) CYREG_FASTCLK_XMHZ_CFG1)
S
S
S/*******************************************************************************
S* External 32kHz Crystal Oscillator Registers
S*******************************************************************************/
S
S/* 32 kHz Watch Crystal Oscillator Trim Register */
S#define CY_CLK_XTAL32_TR_REG        (*(reg8 *) CYREG_X32_TR)
S#define CY_CLK_XTAL32_TR_PTR        ( (reg8 *) CYREG_X32_TR)
S
S/* External 32kHz Crystal Oscillator Test Register */
S#define CY_CLK_XTAL32_TST_REG       (*(reg8 *) CYREG_SLOWCLK_X32_TST)
S#define CY_CLK_XTAL32_TST_PTR       ( (reg8 *) CYREG_SLOWCLK_X32_TST)
S
S/* External 32kHz Crystal Oscillator Control Register */
S#define CY_CLK_XTAL32_CR_REG        (*(reg8 *) CYREG_SLOWCLK_X32_CR)
S#define CY_CLK_XTAL32_CR_PTR        ( (reg8 *) CYREG_SLOWCLK_X32_CR)
S
S/* External 32kHz Crystal Oscillator Configuration Register */
S#define CY_CLK_XTAL32_CFG_REG       (*(reg8 *) CYREG_SLOWCLK_X32_CFG)
S#define CY_CLK_XTAL32_CFG_PTR       ( (reg8 *) CYREG_SLOWCLK_X32_CFG)
S
S
S/*******************************************************************************
S* Watchdog Timer Registers
S*******************************************************************************/
S
S/* Watchdog Timer Configuration Register */
S#define CY_WDT_CFG_REG              (*(reg8 *) CYREG_PM_WDT_CFG)
S#define CY_WDT_CFG_PTR              ( (reg8 *) CYREG_PM_WDT_CFG)
S
S/* Watchdog Timer Control Register */
S#define CY_WDT_CR_REG               (*(reg8 *) CYREG_PM_WDT_CR)
S#define CY_WDT_CR_PTR               ( (reg8 *) CYREG_PM_WDT_CR)
S
S
S/*******************************************************************************
S*    LVI/HVI Registers
S*******************************************************************************/
S
S#define CY_VD_LVI_TRIP_REG          (* (reg8 *) CYREG_RESET_CR0)
S#define CY_VD_LVI_TRIP_PTR          (  (reg8 *) CYREG_RESET_CR0)
S
S#define CY_VD_LVI_HVI_CONTROL_REG   (* (reg8 *) CYREG_RESET_CR1)
S#define CY_VD_LVI_HVI_CONTROL_PTR   (  (reg8 *) CYREG_RESET_CR1)
S
S#define CY_VD_PRES_CONTROL_REG      (* (reg8 *) CYREG_RESET_CR3)
S#define CY_VD_PRES_CONTROL_PTR      (  (reg8 *) CYREG_RESET_CR3)
S
S#define CY_VD_PERSISTENT_STATUS_REG (* (reg8 *) CYREG_RESET_SR0)
S#define CY_VD_PERSISTENT_STATUS_PTR (  (reg8 *) CYREG_RESET_SR0)
S
S#define CY_VD_RT_STATUS_REG         (* (reg8 *) CYREG_RESET_SR2)
S#define CY_VD_RT_STATUS_PTR         (  (reg8 *) CYREG_RESET_SR2)
S
S
S/*******************************************************************************
S*    Variable VDDA
S*******************************************************************************/
S#if(CYDEV_VARIABLE_VDDA == 1)
S
S    /* Active Power Mode Configuration Register 9 */
S    #define CY_LIB_ACT_CFG9_REG            (* (reg8 *) CYREG_PM_ACT_CFG9 )
S    #define CY_LIB_ACT_CFG9_PTR            (  (reg8 *) CYREG_PM_ACT_CFG9 )
S
S    /* Switched Capacitor 0 Boost Clock Selection Register */
S    #define CY_LIB_SC0_BST_REG             (* (reg8 *) CYREG_SC0_BST )
S    #define CY_LIB_SC0_BST_PTR             (  (reg8 *) CYREG_SC0_BST )
S
S    /* Switched Capacitor 1 Boost Clock Selection Register */
S    #define CY_LIB_SC1_BST_REG             (* (reg8 *) CYREG_SC1_BST )
S    #define CY_LIB_SC1_BST_PTR             (  (reg8 *) CYREG_SC1_BST )
S
S    /* Switched Capacitor 2 Boost Clock Selection Register */
S    #define CY_LIB_SC2_BST_REG             (* (reg8 *) CYREG_SC2_BST )
S    #define CY_LIB_SC2_BST_PTR             (  (reg8 *) CYREG_SC2_BST )
S
S    /* Switched Capacitor 3 Boost Clock Selection Register */
S    #define CY_LIB_SC3_BST_REG             (* (reg8 *) CYREG_SC3_BST )
S    #define CY_LIB_SC3_BST_PTR             (  (reg8 *) CYREG_SC3_BST )
S
S    /* Switched Cap Miscellaneous Control Register */
S    #define CY_LIB_SC_MISC_REG             (* (reg8 *) CYREG_SC_MISC )
S    #define CY_LIB_SC_MISC_PTR             (  (reg8 *) CYREG_SC_MISC )
S
S#endif  /* (CYDEV_VARIABLE_VDDA == 1) */
S
S
S/*******************************************************************************
S*    Clock Distribution Registers
S*******************************************************************************/
S
S/* Analog Clock Mask Register */
S#define CY_LIB_CLKDIST_AMASK_REG       (* (reg8 *) CYREG_CLKDIST_AMASK )
S#define CY_LIB_CLKDIST_AMASK_PTR       (  (reg8 *) CYREG_CLKDIST_AMASK )
S
S/* Digital Clock Mask Register */
S#define CY_LIB_CLKDIST_DMASK_REG        (*(reg8 *) CYREG_CLKDIST_DMASK)
S#define CY_LIB_CLKDIST_DMASK_PTR        ( (reg8 *) CYREG_CLKDIST_DMASK)
S
S/* CLK_BUS Configuration Register */
S#define CY_LIB_CLKDIST_BCFG2_REG        (*(reg8 *) CYREG_CLKDIST_BCFG2)
S#define CY_LIB_CLKDIST_BCFG2_PTR        ( (reg8 *) CYREG_CLKDIST_BCFG2)
S
S/* LSB Shadow Divider Value Register */
S#define CY_LIB_CLKDIST_WRK_LSB_REG      (*(reg8 *) CYREG_CLKDIST_WRK0)
S#define CY_LIB_CLKDIST_WRK_LSB_PTR      ( (reg8 *) CYREG_CLKDIST_WRK0)
S
S/* MSB Shadow Divider Value Register */
S#define CY_LIB_CLKDIST_WRK_MSB_REG      (*(reg8 *) CYREG_CLKDIST_WRK1)
S#define CY_LIB_CLKDIST_WRK_MSB_PTR      ( (reg8 *) CYREG_CLKDIST_WRK1)
S
S/* LOAD Register */
S#define CY_LIB_CLKDIST_LD_REG           (*(reg8 *) CYREG_CLKDIST_LD)
S#define CY_LIB_CLKDIST_LD_PTR           ( (reg8 *) CYREG_CLKDIST_LD)
S
S/* CLK_BUS LSB Divider Value Register */
S#define CY_LIB_CLKDIST_BCFG_LSB_REG     (*(reg8 *) CYREG_CLKDIST_BCFG0)
S#define CY_LIB_CLKDIST_BCFG_LSB_PTR     ( (reg8 *) CYREG_CLKDIST_BCFG0)
S
S/* CLK_BUS MSB Divider Value Register */
S#define CY_LIB_CLKDIST_BCFG_MSB_REG     (*(reg8 *) CYREG_CLKDIST_BCFG1)
S#define CY_LIB_CLKDIST_BCFG_MSB_PTR     ( (reg8 *) CYREG_CLKDIST_BCFG1)
S
S/* Master clock (clk_sync_d) Divider Value Register */
S#define CY_LIB_CLKDIST_MSTR0_REG        (*(reg8 *) CYREG_CLKDIST_MSTR0)
S#define CY_LIB_CLKDIST_MSTR0_PTR        ( (reg8 *) CYREG_CLKDIST_MSTR0)
S
S/* Master (clk_sync_d) Configuration Register/CPU Divider Value */
S#define CY_LIB_CLKDIST_MSTR1_REG        (*(reg8 *) CYREG_CLKDIST_MSTR1)
S#define CY_LIB_CLKDIST_MSTR1_PTR        ( (reg8 *) CYREG_CLKDIST_MSTR1)
S
S/* Internal Main Oscillator Control Register */
S#define CY_LIB_FASTCLK_IMO_CR_REG       (*(reg8 *) CYREG_FASTCLK_IMO_CR)
S#define CY_LIB_FASTCLK_IMO_CR_PTR       ( (reg8 *) CYREG_FASTCLK_IMO_CR)
S
S/* Configuration Register CR */
S#define CY_LIB_CLKDIST_CR_REG           (*(reg8 *) CYREG_CLKDIST_CR)
S#define CY_LIB_CLKDIST_CR_PTR           ( (reg8 *) CYREG_CLKDIST_CR)
S
S/* Internal Low-speed Oscillator Control Register 0 */
S#define CY_LIB_SLOWCLK_ILO_CR0_REG      (*(reg8 *) CYREG_SLOWCLK_ILO_CR0)
S#define CY_LIB_SLOWCLK_ILO_CR0_PTR      ( (reg8 *) CYREG_SLOWCLK_ILO_CR0)
S
S
S/*******************************************************************************
S* Interrupt Registers
S*******************************************************************************/
S
S#if(CY_PSOC5)
S
S    /* Interrupt Vector Table Offset */
S    #define CY_INT_VECT_TABLE           ((cyisraddress **) CYREG_NVIC_VECT_OFFSET)
S
S    /* Interrupt Priority 0-31 */
S    #define CY_INT_PRIORITY_REG         (* (reg8 *) CYREG_NVIC_PRI_0)
S    #define CY_INT_PRIORITY_PTR         (  (reg8 *) CYREG_NVIC_PRI_0)
S
S    /* Interrupt Enable Set 0-31 */
S    #define CY_INT_ENABLE_REG           (* (reg32 *) CYREG_NVIC_SETENA0)
S    #define CY_INT_ENABLE_PTR           (  (reg32 *) CYREG_NVIC_SETENA0)
S
S    /* Interrupt Enable Clear 0-31 */
S    #define CY_INT_CLEAR_REG            (* (reg32 *) CYREG_NVIC_CLRENA0)
S    #define CY_INT_CLEAR_PTR            (  (reg32 *) CYREG_NVIC_CLRENA0)
S
S    /* Interrupt Pending Set 0-31 */
S    #define CY_INT_SET_PEND_REG         (* (reg32 *) CYREG_NVIC_SETPEND0)
S    #define CY_INT_SET_PEND_PTR         (  (reg32 *) CYREG_NVIC_SETPEND0)
S
S    /* Interrupt Pending Clear 0-31 */
S    #define CY_INT_CLR_PEND_REG         (* (reg32 *) CYREG_NVIC_CLRPEND0)
S    #define CY_INT_CLR_PEND_PTR         (  (reg32 *) CYREG_NVIC_CLRPEND0)
S
S    /* Cache Control Register */
S    #define CY_CACHE_CONTROL_REG        (* (reg16 *) CYREG_CACHE_CC_CTL )
S    #define CY_CACHE_CONTROL_PTR        (  (reg16 *) CYREG_CACHE_CC_CTL )
S
S    /* System tick registers */
S    #define CY_SYS_SYST_CSR_REG         (*(reg32 *) CYREG_NVIC_SYSTICK_CTL)
S    #define CY_SYS_SYST_CSR_PTR         ( (reg32 *) CYREG_NVIC_SYSTICK_CTL)
S
S    #define CY_SYS_SYST_RVR_REG         (*(reg32 *) CYREG_NVIC_SYSTICK_RELOAD)
S    #define CY_SYS_SYST_RVR_PTR         ( (reg32 *) CYREG_NVIC_SYSTICK_RELOAD)
S
S    #define CY_SYS_SYST_CVR_REG         (*(reg32 *) CYREG_NVIC_SYSTICK_CURRENT)
S    #define CY_SYS_SYST_CVR_PTR         ( (reg32 *) CYREG_NVIC_SYSTICK_CURRENT)
S
S    #define CY_SYS_SYST_CALIB_REG       (*(reg32 *) CYREG_NVIC_SYSTICK_CAL)
S    #define CY_SYS_SYST_CALIB_PTR       ( (reg32 *) CYREG_NVIC_SYSTICK_CAL)
S
S#elif (CY_PSOC3)
S
S    /* Interrupt Address Vector registers */
S    #define CY_INT_VECT_TABLE           ((cyisraddress CYXDATA *) CYREG_INTC_VECT_MBASE)
S
S    /* Interrupt Controller Priority Registers */
S    #define CY_INT_PRIORITY_REG         (* (reg8 *) CYREG_INTC_PRIOR0)
S    #define CY_INT_PRIORITY_PTR         (  (reg8 *) CYREG_INTC_PRIOR0)
S
S    /* Interrupt Controller Set Enable Registers */
S    #define CY_INT_ENABLE_REG           (* (reg8 *) CYREG_INTC_SET_EN0)
S    #define CY_INT_ENABLE_PTR           (  (reg8 *) CYREG_INTC_SET_EN0)
S
S    #define CY_INT_SET_EN0_REG          (* (reg8 *) CYREG_INTC_SET_EN0)
S    #define CY_INT_SET_EN0_PTR          (  (reg8 *) CYREG_INTC_SET_EN0)
S
S    #define CY_INT_SET_EN1_REG          (* (reg8 *) CYREG_INTC_SET_EN1)
S    #define CY_INT_SET_EN1_PTR          (  (reg8 *) CYREG_INTC_SET_EN1)
S
S    #define CY_INT_SET_EN2_REG          (* (reg8 *) CYREG_INTC_SET_EN2)
S    #define CY_INT_SET_EN2_PTR          (  (reg8 *) CYREG_INTC_SET_EN2)
S
S    #define CY_INT_SET_EN3_REG          (* (reg8 *) CYREG_INTC_SET_EN3)
S    #define CY_INT_SET_EN3_PTR          (  (reg8 *) CYREG_INTC_SET_EN3)
S
S    /* Interrupt Controller Clear Enable Registers */
S    #define CY_INT_CLEAR_REG            (* (reg8 *) CYREG_INTC_CLR_EN0)
S    #define CY_INT_CLEAR_PTR            (  (reg8 *) CYREG_INTC_CLR_EN0)
S
S    #define CY_INT_CLR_EN0_REG          (* (reg8 *) CYREG_INTC_CLR_EN0)
S    #define CY_INT_CLR_EN0_PTR          (  (reg8 *) CYREG_INTC_CLR_EN0)
S
S    #define CY_INT_CLR_EN1_REG          (* (reg8 *) CYREG_INTC_CLR_EN1)
S    #define CY_INT_CLR_EN1_PTR          (  (reg8 *) CYREG_INTC_CLR_EN1)
S
S    #define CY_INT_CLR_EN2_REG          (* (reg8 *) CYREG_INTC_CLR_EN2)
S    #define CY_INT_CLR_EN2_PTR          (  (reg8 *) CYREG_INTC_CLR_EN2)
S
S    #define CY_INT_CLR_EN3_REG          (* (reg8 *) CYREG_INTC_CLR_EN3)
S    #define CY_INT_CLR_EN3_PTR          (  (reg8 *) CYREG_INTC_CLR_EN3)
S
S
S    /* Interrupt Controller Set Pend Registers */
S    #define CY_INT_SET_PEND_REG         (* (reg8 *) CYREG_INTC_SET_PD0)
S    #define CY_INT_SET_PEND_PTR         (  (reg8 *) CYREG_INTC_SET_PD0)
S
S    /* Interrupt Controller Clear Pend Registers */
S    #define CY_INT_CLR_PEND_REG         (* (reg8 *) CYREG_INTC_CLR_PD0)
S    #define CY_INT_CLR_PEND_PTR         (  (reg8 *) CYREG_INTC_CLR_PD0)
S
S
S    /* Access Interrupt Controller Registers based on interrupt number */
S    #define CY_INT_SET_EN_INDX_PTR(number)    ((reg8 *) (CYREG_INTC_SET_EN0 + (((number) & CY_INT_NUMBER_MASK) >> 3u)))
S    #define CY_INT_CLR_EN_INDX_PTR(number)    ((reg8 *) (CYREG_INTC_CLR_EN0 + (((number) & CY_INT_NUMBER_MASK) >> 3u)))
S    #define CY_INT_CLR_PEND_INDX_PTR(number)  ((reg8 *) (CYREG_INTC_CLR_PD0 + (((number) & CY_INT_NUMBER_MASK) >> 3u)))
S    #define CY_INT_SET_PEND_INDX_PTR(number)  ((reg8 *) (CYREG_INTC_SET_PD0 + (((number) & CY_INT_NUMBER_MASK) >> 3u)))
S
S#endif  /* (CY_PSOC5) */
S
S
S/*******************************************************************************
S* Macro Name: CyAssert
S****************************************************************************//**
S*  The macro that evaluates the expression and if it is false (evaluates to 0)
S*  then the processor is halted.
S*
S*  This macro is evaluated unless NDEBUG is defined.
S*
S*  If NDEBUG is defined, then no code is generated for this macro. NDEBUG is
S*  defined by default for a Release build setting and not defined for a Debug
S*  build setting.
S*
S*  \param expr: Logical expression.  Asserts if false.
S*
S*******************************************************************************/
S#if !defined(NDEBUG)
S    #define CYASSERT(x)     { \
S                                if(!(x)) \
S                                { \
S                                    CyHalt((uint8) 0u); \
S                                } \
S                            }
X    #define CYASSERT(x)     {                                 if(!(x))                                 {                                     CyHalt((uint8) 0u);                                 }                             }
S#else
S    #define CYASSERT(x)
S#endif /* !defined(NDEBUG) */
S
S
S/* Reset register fields of RESET_SR0 (CyResetStatus) */
S#define CY_RESET_LVID               (0x01u)
S#define CY_RESET_LVIA               (0x02u)
S#define CY_RESET_HVIA               (0x04u)
S#define CY_RESET_WD                 (0x08u)
S#define CY_RESET_SW                 (0x20u)
S#define CY_RESET_GPIO0              (0x40u)
S#define CY_RESET_GPIO1              (0x80u)
S
S
S/* Interrupt Controller Configuration and Status Register */
S#if(CY_PSOC3)
S    #define INTERRUPT_CSR               ((reg8 *) CYREG_INTC_CSR_EN)
S    #define DISABLE_IRQ_SET             ((uint8)(0x01u << 1u))    /* INTC_CSR_EN */
S    #define INTERRUPT_DISABLE_IRQ       {*INTERRUPT_CSR |= DISABLE_IRQ_SET;}
S    #define INTERRUPT_ENABLE_IRQ        {*INTERRUPT_CSR = (uint8)(~DISABLE_IRQ_SET);}
S#endif  /* (CY_PSOC3) */
S
S
S#if defined(__ARMCC_VERSION)
S    #define CyGlobalIntEnable           {__enable_irq();}
S    #define CyGlobalIntDisable          {__disable_irq();}
S#elif defined(__GNUC__) || defined (__ICCARM__)
S    #define CyGlobalIntEnable           {__asm("CPSIE   i");}
S    #define CyGlobalIntDisable          {__asm("CPSID   i");}
S#elif defined(__C51__)
S    #define CyGlobalIntEnable           {\
S                                            EA = 1u; \
S                                            INTERRUPT_ENABLE_IRQ\
S                                        }
X    #define CyGlobalIntEnable           {                                            EA = 1u;                                             INTERRUPT_ENABLE_IRQ                                        }
S
S    #define CyGlobalIntDisable          {\
S                                            INTERRUPT_DISABLE_IRQ; \
S                                            CY_NOP; \
S                                            EA = 0u;\
S                                        }
X    #define CyGlobalIntDisable          {                                            INTERRUPT_DISABLE_IRQ;                                             CY_NOP;                                             EA = 0u;                                        }
S#else
S    #error No compiler toolchain defined
S    #define CyGlobalIntEnable
S    #define CyGlobalIntDisable
S#endif  /* (__ARMCC_VERSION) */
S
S
S#ifdef CYREG_MLOGIC_CPU_SCR_CPU_SCR
S    #define CYDEV_HALT_CPU      CY_SET_REG8(CYREG_MLOGIC_CPU_SCR_CPU_SCR, 0x01u)
S#else
S    #define CYDEV_HALT_CPU      CY_SET_REG8(CYREG_MLOGIC_CPU_SCR, 0x01u)
S#endif  /* (CYREG_MLOGIC_CPU_SCR_CPU_SCR) */
S
S
S#ifdef CYREG_MLOGIC_REV_ID_REV_ID
S    #define CYDEV_CHIP_REV_ACTUAL       (CY_GET_REG8(CYREG_MLOGIC_REV_ID_REV_ID))
S#else
S    #define CYDEV_CHIP_REV_ACTUAL       (CY_GET_REG8(CYREG_MLOGIC_REV_ID))
S#endif  /* (CYREG_MLOGIC_REV_ID_REV_ID) */
S
S
S/*******************************************************************************
S* System API constants
S*******************************************************************************/
S#define CY_CACHE_CONTROL_FLUSH          (0x0004u)
S#define CY_LIB_RESET_CR2_RESET          (0x01u)
S
S#if(CY_PSOC5)
S    /* System tick API constants */
S    #define CY_SYS_SYST_CSR_ENABLE              ((uint32) (0x01u))
S    #define CY_SYS_SYST_CSR_ENABLE_INT          ((uint32) (0x02u))
S    #define CY_SYS_SYST_CSR_CLK_SOURCE_SHIFT    ((uint32) (0x02u))
S    #define CY_SYS_SYST_CSR_COUNTFLAG_SHIFT     ((uint32) (16u))
S    #define CY_SYS_SYST_CSR_CLK_SRC_SYSCLK      ((uint32) (1u))
S    #define CY_SYS_SYST_CSR_CLK_SRC_LFCLK       ((uint32) (0u))
S    #define CY_SYS_SYST_RVR_CNT_MASK            ((uint32) (0x00FFFFFFu))
S	#define CY_SYS_SYST_CVR_CNT_MASK            ((uint32) (0x00FFFFFFu))
S    #define CY_SYS_SYST_NUM_OF_CALLBACKS        ((uint32) (5u))
S#endif /* (CY_PSOC5) */
S
S
S
S/*******************************************************************************
S* Interrupt API constants
S*******************************************************************************/
S#if(CY_PSOC5)
S
S    #define CY_INT_IRQ_BASE             (16u)
S
S#elif (CY_PSOC3)
S
S    #define CY_INT_IRQ_BASE             (0u)
S
S#endif  /* (CY_PSOC5) */
S
S/* Valid range of interrupt 0-31 */
S#define CY_INT_NUMBER_MAX               (31u)
S
S/* Valid range of system interrupt 0-15 */
S#define CY_INT_SYS_NUMBER_MAX           (15u)
S
S/* Valid range of system priority 0-7 */
S#define CY_INT_PRIORITY_MAX             (7u)
S
S/* Mask to get valid range of interrupt 0-31 */
S#define CY_INT_NUMBER_MASK              (0x1Fu)
S
S/* Mask to get valid range of system priority 0-7 */
S#define CY_INT_PRIORITY_MASK            (0x7u)
S
S/* Mask to get valid range of system interrupt 0-15 */
S#define CY_INT_SYS_NUMBER_MASK          (0xFu)
S
S#if(CY_PSOC5)
S
S    /* CyIntSetSysVector()/CyIntGetSysVector() - parameter definitions */
S    #define CY_INT_NMI_IRQN                  ( 2u)      /* Non Maskable Interrupt      */
S    #define CY_INT_HARD_FAULT_IRQN           ( 3u)      /* Hard Fault Interrupt        */
S    #define CY_INT_MEM_MANAGE_IRQN           ( 4u)      /* Memory Management Interrupt */
S    #define CY_INT_BUS_FAULT_IRQN            ( 5u)      /* Bus Fault Interrupt         */
S    #define CY_INT_USAGE_FAULT_IRQN          ( 6u)      /* Usage Fault Interrupt       */
S    #define CY_INT_SVCALL_IRQN               (11u)      /* SV Call Interrupt           */
S    #define CY_INT_DEBUG_MONITOR_IRQN        (12u)      /* Debug Monitor Interrupt     */
S    #define CY_INT_PEND_SV_IRQN              (14u)      /* Pend SV Interrupt           */
S    #define CY_INT_SYSTICK_IRQN              (15u)      /* System Tick Interrupt       */
S
S#endif  /* (CY_PSOC5) */
S
S/*******************************************************************************
S* Interrupt Macros
S*******************************************************************************/
S
S#if(CY_PSOC5)
S
S    /*******************************************************************************
S    * Macro Name: CyIntEnable
S    ****************************************************************************//**
S    *
S    *  Enables the specified interrupt number.
S    *
S    *  \param number: Valid range [0-31].  Interrupt number
S    *
S    *******************************************************************************/
S    #define CyIntEnable(number)     CY_SET_REG32(CY_INT_ENABLE_PTR, ((uint32)((uint32)1u << (0x1Fu & (number)))))
S
S    /*******************************************************************************
S    * Macro Name: CyIntDisable
S    ****************************************************************************//**
S    *
S    *  Disables the specified interrupt number.
S    *
S    *  \param number: Valid range [0-31].  Interrupt number.
S    *
S    *******************************************************************************/
S    #define CyIntDisable(number)     CY_SET_REG32(CY_INT_CLEAR_PTR, ((uint32)((uint32)1u << (0x1Fu & (number)))))
S
S
S    /*******************************************************************************
S    * Macro Name: CyIntSetPending
S    ****************************************************************************//**
S    *
S    *   Forces the specified interrupt number to be pending.
S    *
S    *   \param number: Valid range [0-31].  Interrupt number.
S    *
S    *******************************************************************************/
S    #define CyIntSetPending(number)     CY_SET_REG32(CY_INT_SET_PEND_PTR, ((uint32)((uint32)1u << (0x1Fu & (number)))))
S
S
S    /*******************************************************************************
S    * Macro Name: CyIntClearPending
S    ****************************************************************************//**
S    *
S    *   Clears any pending interrupt for the specified interrupt number.
S    *
S    *   \param number: Valid range [0-31].  Interrupt number.
S    *
S    *******************************************************************************/
S    #define CyIntClearPending(number)   CY_SET_REG32(CY_INT_CLR_PEND_PTR, ((uint32)((uint32)1u << (0x1Fu & (number)))))
S
S
S#else   /* PSoC3 */
S
S
S    /*******************************************************************************
S    * Macro Name: CyIntEnable
S    ****************************************************************************//**
S    *
S    *  Enables the specified interrupt number.
S    *
S    *  \param number: Valid range [0-31].  Interrupt number
S    *
S    *******************************************************************************/
S    #define CyIntEnable(number)   CY_SET_REG8(CY_INT_SET_EN_INDX_PTR((number)), \
S                                          ((uint8)(1u << (0x07u & (number)))))
X    #define CyIntEnable(number)   CY_SET_REG8(CY_INT_SET_EN_INDX_PTR((number)),                                           ((uint8)(1u << (0x07u & (number)))))
S
S
S    /*******************************************************************************
S    * Macro Name: CyIntDisable
S    ****************************************************************************//**
S    *
S    *  Disables the specified interrupt number.
S    *
S    *  \param number: Valid range [0-31].  Interrupt number.
S    *
S    *******************************************************************************/
S    #define CyIntDisable(number)   CY_SET_REG8(CY_INT_CLR_EN_INDX_PTR((number)), \
S                                          ((uint8)(1u << (0x07u & (number)))))
X    #define CyIntDisable(number)   CY_SET_REG8(CY_INT_CLR_EN_INDX_PTR((number)),                                           ((uint8)(1u << (0x07u & (number)))))
S
S
S    /*******************************************************************************
S    * Macro Name: CyIntSetPending
S    ****************************************************************************//**
S    *
S    *  Forces the specified interrupt number to be pending.
S    *
S    *  \param number: Valid range [0-31].  Interrupt number.
S    *
S    *******************************************************************************/
S    #define CyIntSetPending(number)   CY_SET_REG8(CY_INT_SET_PEND_INDX_PTR((number)), \
S                                                  ((uint8)(1u << (0x07u & (number)))))
X    #define CyIntSetPending(number)   CY_SET_REG8(CY_INT_SET_PEND_INDX_PTR((number)),                                                   ((uint8)(1u << (0x07u & (number)))))
S
S
S    /*******************************************************************************
S    * Macro Name: CyIntClearPending
S    ****************************************************************************//**
S    *  Clears any pending interrupt for the specified interrupt number.
S    *
S    *  \param number: Valid range [0-31].  Interrupt number.
S    *
S    *******************************************************************************/
S    #define CyIntClearPending(number)   CY_SET_REG8(CY_INT_CLR_PEND_INDX_PTR((number)), \
S                                                    ((uint8)(1u << (0x07u & (number)))))
X    #define CyIntClearPending(number)   CY_SET_REG8(CY_INT_CLR_PEND_INDX_PTR((number)),                                                     ((uint8)(1u << (0x07u & (number)))))
S
S#endif  /* (CY_PSOC5) */
S
S
S/*******************************************************************************
S* The following code is OBSOLETE and must not be used.
S*
S* If the obsoleted macro definitions intended for use in the application use the
S* following scheme, redefine your own versions of these definitions:
S*    #ifdef <OBSOLETED_DEFINE>
S*        #undef  <OBSOLETED_DEFINE>
S*        #define <OBSOLETED_DEFINE>      (<New Value>)
S*    #endif
S*
S* Note: Redefine obsoleted macro definitions with caution. They might still be
S*       used in the application and their modification might lead to unexpected
S*       consequences.
S*******************************************************************************/
S
S#define CYGlobalIntEnable       CyGlobalIntEnable
S#define CYGlobalIntDisable      CyGlobalIntDisable
S
S#define cymemset(s,c,n)         memset((s),(c),(n))
S#define cymemcpy(d,s,n)         memcpy((d),(s),(n))
S
S#define MFGCFG_X32_TR_PTR               (CY_CLK_XTAL32_TR_PTR)
S#define MFGCFG_X32_TR                   (CY_CLK_XTAL32_TR_REG)
S#define SLOWCLK_X32_TST_PTR             (CY_CLK_XTAL32_TST_PTR)
S#define SLOWCLK_X32_TST                 (CY_CLK_XTAL32_TST_REG)
S#define SLOWCLK_X32_CR_PTR              (CY_CLK_XTAL32_CR_PTR)
S#define SLOWCLK_X32_CR                  (CY_CLK_XTAL32_CR_REG)
S#define SLOWCLK_X32_CFG_PTR             (CY_CLK_XTAL32_CFG_PTR)
S#define SLOWCLK_X32_CFG                 (CY_CLK_XTAL32_CFG_REG)
S
S#define X32_CONTROL_ANA_STAT            (CY_CLK_XTAL32_CR_ANA_STAT)
S#define X32_CONTROL_DIG_STAT            (0x10u)
S#define X32_CONTROL_LPM                 (CY_CLK_XTAL32_CR_LPM)
S#define X32_CONTROL_LPM_POSITION        (1u)
S#define X32_CONTROL_X32EN               (CY_CLK_XTAL32_CR_EN)
S#define X32_CONTROL_PDBEN           (CY_CLK_XTAL32_CR_PDBEN)
S#define X32_TR_DPMODE                   (CY_CLK_XTAL32_TR_STARTUP)
S#define X32_TR_CLEAR                    (CY_CLK_XTAL32_TR_POWERDOWN)
S#define X32_TR_HPMODE                   (CY_CLK_XTAL32_TR_HIGH_POWER)
S#define X32_TR_LPMODE                   (CY_CLK_XTAL32_TR_LOW_POWER)
S#define X32_TST_SETALL                  (CY_CLK_XTAL32_TST_DEFAULT)
S#define X32_CFG_LP_BITS_MASK            (CY_CLK_XTAL32_CFG_LP_MASK)
S#define X32_CFG_LP_DEFAULT              (CY_CLK_XTAL32_CFG_LP_DEFAULT)
S#define X32_CFG_LOWPOWERMODE            (0x80u)
S#define X32_CFG_LP_LOWPOWER             (0x8u)
S#define CY_X32_HIGHPOWER_MODE           (0u)
S#define CY_X32_LOWPOWER_MODE            (1u)
S#define CY_XTAL32K_DIG_STAT             (0x10u)
S#define CY_XTAL32K_STAT_FIELDS          (0x30u)
S#define CY_XTAL32K_DIG_STAT_UNSTABLE    (0u)
S#define CY_XTAL32K_ANA_STAT_UNSTABLE    (0x0u)
S#define CY_XTAL32K_STATUS               (0x20u)
S
S#define FASTCLK_XMHZ_CSR_PTR            (CY_CLK_XMHZ_CSR_PTR)
S#define FASTCLK_XMHZ_CSR                (CY_CLK_XMHZ_CSR_REG)
S#define FASTCLK_XMHZ_CFG0_PTR           (CY_CLK_XMHZ_CFG0_PTR)
S#define FASTCLK_XMHZ_CFG0               (CY_CLK_XMHZ_CFG0_REG)
S#define FASTCLK_XMHZ_CFG1_PTR           (CY_CLK_XMHZ_CFG1_PTR)
S#define FASTCLK_XMHZ_CFG1               (CY_CLK_XMHZ_CFG1_REG)
S#define FASTCLK_XMHZ_GAINMASK           (CY_CLK_XMHZ_CFG0_XCFG_MASK)
S#define FASTCLK_XMHZ_VREFMASK           (CY_CLK_XMHZ_CFG1_VREF_FB_MASK)
S#define FASTCLK_XMHZ_VREF_WD_MASK       (CY_CLK_XMHZ_CFG1_VREF_WD_MASK)
S#define XMHZ_CONTROL_ENABLE             (CY_CLK_XMHZ_CSR_ENABLE)
S#define X32_CONTROL_XERR_MASK           (CY_CLK_XMHZ_CSR_XERR)
S#define X32_CONTROL_XERR_DIS            (CY_CLK_XMHZ_CSR_XFB)
S#define X32_CONTROL_XERR_POSITION       (7u)
S#define X32_CONTROL_FAULT_RECOVER       (CY_CLK_XMHZ_CSR_XPROT)
S
S#define CYWDT_CFG                       (CY_WDT_CFG_PTR)
S#define CYWDT_CR                        (CY_WDT_CR_PTR)
S
S#define CYWDT_TICKS_MASK                (CY_WDT_CFG_INTERVAL_MASK)
S#define CYWDT_RESET                     (CY_WDT_CFG_CTW_RESET)
S#define CYWDT_LPMODE_SHIFT              (CY_WDT_CFG_LPMODE_SHIFT)
S#define CYWDT_LPMODE_MASK               (CY_WDT_CFG_LPMODE_MASK)
S#define CYWDT_ENABLE_BIT                (CY_WDT_CFG_WDR_EN)
S
S#define FASTCLK_PLL_CFG0_PTR            (CY_CLK_PLL_CFG0_PTR)
S#define FASTCLK_PLL_CFG0                (CY_CLK_PLL_CFG0_REG)
S#define FASTCLK_PLL_SR_PTR              (CY_CLK_PLL_SR_PTR)
S#define FASTCLK_PLL_SR                  (CY_CLK_PLL_SR_REG)
S
S#define MAX_FASTCLK_PLL_Q_VALUE         (CY_CLK_PLL_MAX_Q_VALUE)
S#define MIN_FASTCLK_PLL_Q_VALUE         (CY_CLK_PLL_MIN_Q_VALUE)
S#define MIN_FASTCLK_PLL_P_VALUE         (CY_CLK_PLL_MIN_P_VALUE)
S#define MIN_FASTCLK_PLL_CUR_VALUE       (CY_CLK_PLL_MIN_CUR_VALUE)
S#define MAX_FASTCLK_PLL_CUR_VALUE       (CY_CLK_PLL_MAX_CUR_VALUE)
S
S#define PLL_CONTROL_ENABLE              (CY_CLK_PLL_ENABLE)
S#define PLL_STATUS_LOCK                 (CY_CLK_PLL_LOCK_STATUS)
S#define PLL_STATUS_ENABLED              (CY_CLK_PLL_ENABLE)
S#define PLL_CURRENT_POSITION            (CY_CLK_PLL_CURRENT_POSITION)
S#define PLL_VCO_GAIN_2                  (2u)
S
S#define FASTCLK_PLL_Q_PTR              (CY_CLK_PLL_Q_PTR)
S#define FASTCLK_PLL_Q                  (CY_CLK_PLL_Q_REG)
S#define FASTCLK_PLL_P_PTR              (CY_CLK_PLL_P_PTR)
S#define FASTCLK_PLL_P                  (CY_CLK_PLL_P_REG)
S#define FASTCLK_PLL_CFG1_PTR           (CY_CLK_PLL_CFG1_REG)
S#define FASTCLK_PLL_CFG1               (CY_CLK_PLL_CFG1_REG)
S
S#define CY_VD_PRESISTENT_STATUS_REG    (CY_VD_PERSISTENT_STATUS_REG)
S#define CY_VD_PRESISTENT_STATUS_PTR    (CY_VD_PERSISTENT_STATUS_PTR)
S
S
S#if(CY_PSOC5)
S
S    #define CYINT_IRQ_BASE      (CY_INT_IRQ_BASE)
S
S    #define CYINT_VECT_TABLE    (CY_INT_VECT_TABLE)
S    #define CYINT_PRIORITY      (CY_INT_PRIORITY_PTR)
S    #define CYINT_ENABLE        (CY_INT_ENABLE_PTR)
S    #define CYINT_CLEAR         (CY_INT_CLEAR_PTR)
S    #define CYINT_SET_PEND      (CY_INT_SET_PEND_PTR)
S    #define CYINT_CLR_PEND      (CY_INT_CLR_PEND_PTR)
S    #define CACHE_CC_CTL        (CY_CACHE_CONTROL_PTR)
S
S#elif (CY_PSOC3)
S
S    #define CYINT_IRQ_BASE      (CY_INT_IRQ_BASE)
S
S    #define CYINT_VECT_TABLE    (CY_INT_VECT_TABLE)
S    #define CYINT_PRIORITY      (CY_INT_PRIORITY_PTR)
S    #define CYINT_ENABLE        (CY_INT_ENABLE_PTR)
S    #define CYINT_CLEAR         (CY_INT_CLEAR_PTR)
S    #define CYINT_SET_PEND      (CY_INT_SET_PEND_PTR)
S    #define CYINT_CLR_PEND      (CY_INT_CLR_PEND_PTR)
S
S#endif  /* (CY_PSOC5) */
S
S
S
S#define BUS_AMASK_CLEAR                 (0xF0u)
S#define BUS_DMASK_CLEAR                 (0x00u)
S#define CLKDIST_LD_LOAD_SET             (0x01u)
S#define CLKDIST_WRK0_MASK_SET           (0x80u) /* Enable shadow loads */
S#define MASTERCLK_DIVIDER_VALUE         (7u)
S#define CLKDIST_BCFG2_SSS_SET           (0x40u) /* Sync source is same frequency */
S#define MASTER_CLK_SRC_CLEAR            (0xFCu)
S#define IMO_DOUBLER_ENABLE              (0x10u)
S#define CLOCK_IMO_IMO                   (0x20u)
S#define CLOCK_IMO2X_XTAL                (0x40u)
S#define CLOCK_IMO_RANGE_CLEAR           (0xF8u)
S#define CLOCK_CONTROL_DIST_MASK         (0xFCu)
S
S
S#define CLKDIST_AMASK                  (*(reg8 *) CYREG_CLKDIST_AMASK)
S#define CLKDIST_AMASK_PTR              ( (reg8 *) CYREG_CLKDIST_AMASK)
S#define CLKDIST_DMASK_PTR              ( (reg8 *) CYREG_CLKDIST_DMASK)
S#define CLKDIST_DMASK                  (*(reg8 *) CYREG_CLKDIST_DMASK)
S#define CLKDIST_BCFG2_PTR              ( (reg8 *) CYREG_CLKDIST_BCFG2)
S#define CLKDIST_BCFG2                  (*(reg8 *) CYREG_CLKDIST_BCFG2)
S#define CLKDIST_WRK0_PTR               ( (reg8 *) CYREG_CLKDIST_WRK0)
S#define CLKDIST_WRK0                   (*(reg8 *) CYREG_CLKDIST_WRK0)
S#define CLKDIST_LD_PTR                 ( (reg8 *) CYREG_CLKDIST_LD)
S#define CLKDIST_LD                     (*(reg8 *) CYREG_CLKDIST_LD)
S#define CLKDIST_BCFG0_PTR              ( (reg8 *) CYREG_CLKDIST_BCFG0)
S#define CLKDIST_BCFG0                  (*(reg8 *) CYREG_CLKDIST_BCFG0)
S#define CLKDIST_MSTR0_PTR              ( (reg8 *) CYREG_CLKDIST_MSTR0)
S#define CLKDIST_MSTR0                  (*(reg8 *) CYREG_CLKDIST_MSTR0)
S#define FASTCLK_IMO_CR_PTR             ( (reg8 *) CYREG_FASTCLK_IMO_CR)
S#define FASTCLK_IMO_CR                 (*(reg8 *) CYREG_FASTCLK_IMO_CR)
S#define CLKDIST_CR_PTR                 ( (reg8 *) CYREG_CLKDIST_CR)
S#define CLKDIST_CR                     (*(reg8 *) CYREG_CLKDIST_CR)
S
S
S#define IMO_PM_ENABLE                   (0x10u)
S#define PM_ACT_CFG0_PTR                ( (reg8 *) CYREG_PM_ACT_CFG0)
S#define PM_ACT_CFG0                    (*(reg8 *) CYREG_PM_ACT_CFG0)
S#define SLOWCLK_ILO_CR0_PTR            ( (reg8 *) CYREG_SLOWCLK_ILO_CR0)
S#define SLOWCLK_ILO_CR0                (*(reg8 *) CYREG_SLOWCLK_ILO_CR0)
S#define ILO_CONTROL_PD_MODE             (0x10u)
S#define ILO_CONTROL_PD_POSITION         (4u)
S#define ILO_CONTROL_1KHZ_ON             (0x02u)
S#define ILO_CONTROL_100KHZ_ON           (0x04u)
S#define ILO_CONTROL_33KHZ_ON            (0x20u)
S#define PM_TW_CFG0_PTR                 ( (reg8 *) CYREG_PM_TW_CFG0)
S#define PM_TW_CFG0                     (*(reg8 *) CYREG_PM_TW_CFG0)
S#define PM_TW_CFG2_PTR                 ( (reg8 *) CYREG_PM_TW_CFG2)
S#define PM_TW_CFG2                     (*(reg8 *) CYREG_PM_TW_CFG2)
S#define RESET_CR2               ((reg8 *) CYREG_RESET_CR2)
S#define FASTCLK_IMO_USBCLK_ON_SET       (0x40u)
S#define CLOCK_IMO_3MHZ_VALUE            (0x03u)
S#define CLOCK_IMO_6MHZ_VALUE            (0x01u)
S#define CLOCK_IMO_12MHZ_VALUE           (0x00u)
S#define CLOCK_IMO_24MHZ_VALUE           (0x02u)
S#define CLOCK_IMO_48MHZ_VALUE           (0x04u)
S#define CLOCK_IMO_62MHZ_VALUE           (0x05u)
S#define CLOCK_IMO_74MHZ_VALUE           (0x06u)
S#define CLKDIST_DIV_POSITION            (4u)
S#define CLKDIST_MSTR1_DIV_CLEAR         (0x0Fu)
S#define SFR_USER_CPUCLK_DIV_MASK        (0x0Fu)
S#define CLOCK_USB_ENABLE                (0x02u)
S#define CLOCK_IMO_OUT_X2                (0x10u)
S#define CLOCK_IMO_OUT_X1                ((uint8)(~CLOCK_IMO_OUT_X2))
S#define CLOCK_IMO2X_ECO                 ((uint8)(~CLOCK_IMO2X_DSI))
S#define USB_CLKDIST_CONFIG_MASK         (0x03u)
S#define USB_CLK_IMO2X                   (0x00u)
S#define USB_CLK_IMO                     (0x01u)
S#define USB_CLK_PLL                     (0x02u)
S#define USB_CLK_DSI                     (0x03u)
S#define USB_CLK_DIV2_ON                 (0x04u)
S#define USB_CLK_STOP_FLAG               (0x00u)
S#define USB_CLK_START_FLAG              (0x01u)
S#define FTW_CLEAR_ALL_BITS              (0x00u)
S#define FTW_CLEAR_FTW_BITS              (0xFCu)
S#define FTW_ENABLE                      (0x01u)
S#define PM_STBY_CFG0_PTR               ( (reg8 *) CYREG_PM_STBY_CFG0)
S#define PM_STBY_CFG0                   (*(reg8 *) CYREG_PM_STBY_CFG0)
S#define PM_AVAIL_CR2_PTR               ( (reg8 *) CYREG_PM_AVAIL_CR2)
S#define PM_AVAIL_CR2                   (*(reg8 *) CYREG_PM_AVAIL_CR2)
S#define CLKDIST_UCFG_PTR               ( (reg8 *) CYREG_CLKDIST_UCFG)
S#define CLKDIST_UCFG                   (*(reg8 *) CYREG_CLKDIST_UCFG)
S#define CLKDIST_MSTR1_PTR              ( (reg8 *) CYREG_CLKDIST_MSTR1)
S#define CLKDIST_MSTR1                  (*(reg8 *) CYREG_CLKDIST_MSTR1)
S#define SFR_USER_CPUCLK_DIV_PTR        ((void far *) CYREG_SFR_USER_CPUCLK_DIV)
S#define IMO_TR1_PTR                    ( (reg8 *) CYREG_IMO_TR1)
S#define IMO_TR1                        (*(reg8 *) CYREG_IMO_TR1)
S#define CLOCK_CONTROL                  ( (reg8 *) CYREG_CLKDIST_CR)
S#define CY_USB_CR1_PTR                 ( (reg8 *) CYREG_USB_CR1 )
S#define CY_USB_CR1                     (*(reg8 *) CYREG_USB_CR1 )
S#define USB_CLKDIST_CONFIG_PTR         ( (reg8 *) CYREG_CLKDIST_UCFG)
S#define USB_CLKDIST_CONFIG             (*(reg8 *) CYREG_CLKDIST_UCFG)
S#define CY_PM_ACT_CFG5_REG              (* (reg8 *) CYREG_PM_ACT_CFG5 )
S#define CY_PM_ACT_CFG5_PTR              (  (reg8 *) CYREG_PM_ACT_CFG5 )
S#define CY_PM_STBY_CFG5_REG             (* (reg8 *) CYREG_PM_STBY_CFG5 )
S#define CY_PM_STBY_CFG5_PTR             (  (reg8 *) CYREG_PM_STBY_CFG5 )
S#if(CY_PSOC3)
S    #define FLSHID_CUST_TABLES_IMO_3MHZ_PTR         ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_3MHZ)
S    #define FLSHID_CUST_TABLES_IMO_6MHZ_PTR         ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_6MHZ)
S    #define FLSHID_CUST_TABLES_IMO_12MHZ_PTR        ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_12MHZ)
S    #define FLSHID_CUST_TABLES_IMO_24MHZ_PTR        ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_24MHZ)
S    #define FLSHID_CUST_TABLES_IMO_67MHZ_PTR        ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_67MHZ)
S    #define FLSHID_CUST_TABLES_IMO_80MHZ_PTR        ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_80MHZ)
S    #define FLSHID_CUST_TABLES_IMO_USB_PTR          ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_USB)
S    #define FLSHID_MFG_CFG_IMO_TR1_PTR              ((void far *) (CYREG_FLSHID_MFG_CFG_IMO_TR1 + 1u))
S #else
S    #define FLSHID_CUST_TABLES_IMO_3MHZ_PTR         ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_3MHZ)
S    #define FLSHID_CUST_TABLES_IMO_6MHZ_PTR         ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_6MHZ)
S    #define FLSHID_CUST_TABLES_IMO_12MHZ_PTR        ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_12MHZ)
S    #define FLSHID_CUST_TABLES_IMO_24MHZ_PTR        ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_24MHZ)
S    #define FLSHID_CUST_TABLES_IMO_67MHZ_PTR        ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_67MHZ)
S    #define FLSHID_CUST_TABLES_IMO_80MHZ_PTR        ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_80MHZ)
S    #define FLSHID_CUST_TABLES_IMO_USB_PTR          ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_USB)
S    #define FLSHID_MFG_CFG_IMO_TR1_PTR              ((reg8 *) (CYREG_FLSHID_MFG_CFG_IMO_TR1 + 1u))
S#endif  /* (CY_PSOC3) */
S
S
N#endif  /* (CY_BOOT_CYLIB_H) */
N
N
N/* [] END OF FILE */
L 25 "Generated_Source\PSoC5\cyPm.h" 2
N#include "CyFlash.h"        /* Flash API - CyFlash_SetWaitCycles()  */
L 1 "Generated_Source\PSoC5\CyFlash.h" 1
N/***************************************************************************//**
N* \file CyFlash.h
N* \version 6.10
N*
N* \brief Provides the function definitions for the FLASH/EEPROM.
N*
N* \note Documentation of the API's in this file is located in the System
N* Reference Guide provided with PSoC Creator.
N*
N********************************************************************************
N* \copyright
N* Copyright 2008-2021, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions,
N* disclaimers, and limitations in the end user license agreement accompanying
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_BOOT_CYFLASH_H)
X#if !0L
N#define CY_BOOT_CYFLASH_H
N
N#include "cydevice_trm.h"
N#include "cytypes.h"
N#include "CyLib.h"
N#include "CySpc.h"
L 1 "Generated_Source\PSoC5\CySpc.h" 1
N/***************************************************************************//**
N* \file CySpc.c
N* \version 6.10
N*
N* \brief Provides definitions for the System Performance Component API.
N*  The SPC functions are not meant to be called directly by the user
N*  application.
N*
N********************************************************************************
N* \copyright
N* Copyright 2008-2021, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions,
N* disclaimers, and limitations in the end user license agreement accompanying
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_BOOT_CYSPC_H)
X#if !0L
N#define CY_BOOT_CYSPC_H
N
N#include "cytypes.h"
N#include "CyLib.h"
N#include "cydevice_trm.h"
N
N
N/***************************************
N*    Global Variables
N***************************************/
Nextern uint8 SpcLockState;
N
N
N/***************************************
N*    Function Prototypes
N***************************************/
Nvoid     CySpcStart(void);
Nvoid     CySpcStop(void);
Nuint8    CySpcReadData(uint8 buffer[], uint8 size);
Ncystatus CySpcLoadMultiByte(uint8 array, uint16 address, const uint8 buffer[], uint8 size)\
N;
Xcystatus CySpcLoadMultiByte(uint8 array, uint16 address, const uint8 buffer[], uint8 size);
Ncystatus CySpcLoadRow(uint8 array, const uint8 buffer[], uint16 size);
Ncystatus CySpcLoadRowFull(uint8 array, uint16 row, const uint8 buffer[], uint16 size)\
N;
Xcystatus CySpcLoadRowFull(uint8 array, uint16 row, const uint8 buffer[], uint16 size);
Ncystatus CySpcWriteRow(uint8 array, uint16 address, uint8 tempPolarity, uint8 tempMagnitude)\
N;
Xcystatus CySpcWriteRow(uint8 array, uint16 address, uint8 tempPolarity, uint8 tempMagnitude);
Ncystatus CySpcEraseSector(uint8 array, uint8 sectorNumber);
Ncystatus CySpcEraseRow(uint8 array, uint16 address, uint8 tempPolarity, uint8 tempMagnitude)\
N;
Xcystatus CySpcEraseRow(uint8 array, uint16 address, uint8 tempPolarity, uint8 tempMagnitude);
Ncystatus CySpcGetTemp(uint8 numSamples);
Ncystatus CySpcGetAlgorithm(void);
Ncystatus CySpcLock(void);
Nvoid     CySpcUnlock(void);
N
N
N/***************************************
N*    API Constants
N***************************************/
N
N#define CY_SPC_LOCKED                       (0x01u)
N#define CY_SPC_UNLOCKED                     (0x00u)
N
N/*******************************************************************************
N* The Array ID indicates the unique ID of the SONOS array being accessed:
N* - 0x00-0x3E : Flash Arrays
N* - 0x3F      : Selects all Flash arrays simultaneously
N* - 0x40-0x7F : Embedded EEPROM Arrays
N*******************************************************************************/
N#define CY_SPC_FIRST_FLASH_ARRAYID          (0x00u)
N#define CY_SPC_LAST_FLASH_ARRAYID           (0x3Fu)
N#define CY_SPC_FIRST_EE_ARRAYID             (0x40u)
N#define CY_SPC_LAST_EE_ARRAYID              (0x7Fu)
N
N
N#define CY_SPC_STATUS_DATA_READY_MASK       (0x01u)
N#define CY_SPC_STATUS_IDLE_MASK             (0x02u)
N#define CY_SPC_STATUS_CODE_MASK             (0xFCu)
N#define CY_SPC_STATUS_CODE_SHIFT            (0x02u)
N
N/* Status codes for SPC. */
N#define CY_SPC_STATUS_SUCCESS               (0x00u)   /* Operation Successful */
N#define CY_SPC_STATUS_INVALID_ARRAY_ID      (0x01u)   /* Invalid Array ID for given command */
N#define CY_SPC_STATUS_INVALID_2BYTEKEY      (0x02u)   /* Invalid 2-byte key */
N#define CY_SPC_STATUS_ARRAY_ASLEEP          (0x03u)   /* Addressed Array is Asleep */
N#define CY_SPC_STATUS_EXTERN_ACCESS         (0x04u)   /* External Access Failure (SPC is not in external access mode) */
N#define CY_SPC_STATUS_INVALID_NUMBER        (0x05u)   /* Invalid 'N' Value for given command */
N#define CY_SPC_STATUS_TEST_MODE             (0x06u)   /* Test Mode Failure (SPC is not in test mode) */
N#define CY_SPC_STATUS_ALG_CSUM              (0x07u)   /* Smart Write Algorithm Checksum Failure */
N#define CY_SPC_STATUS_PARAM_CSUM            (0x08u)   /* Smart Write Parameter Checksum Failure */
N#define CY_SPC_STATUS_PROTECTION            (0x09u)   /* Protection Check Failure */
N#define CY_SPC_STATUS_ADDRESS_PARAM         (0x0Au)   /* Invalid Address parameter for the given command */
N#define CY_SPC_STATUS_COMMAND_CODE          (0x0Bu)   /* Invalid Command Code */
N#define CY_SPC_STATUS_ROW_ID                (0x0Cu)   /* Invalid Row ID parameter for given command */
N#define CY_SPC_STATUS_TADC_INPUT            (0x0Du)   /* Invalid input value for Get Temp & Get ADC commands */
N#define CY_SPC_STATUS_BUSY                  (0xFFu)   /* SPC is busy */
N
N#if(CY_PSOC5)
X#if((3u == 3u))
N
N    /* Wait-state pipeline */
N    #define CY_SPC_CPU_WAITPIPE_BYPASS      ((uint32)0x01u)
N
N#endif  /* (CY_PSOC5) */
N
N
N/***************************************
N* Registers
N***************************************/
N
N/* SPC CPU Data Register */
N#define CY_SPC_CPU_DATA_REG         (* (reg8 *) CYREG_SPC_CPU_DATA )
N#define CY_SPC_CPU_DATA_PTR         (  (reg8 *) CYREG_SPC_CPU_DATA )
N
N/* SPC Status Register */
N#define CY_SPC_STATUS_REG           (* (reg8 *) CYREG_SPC_SR )
N#define CY_SPC_STATUS_PTR           (  (reg8 *) CYREG_SPC_SR )
N
N/* Active Power Mode Configuration Register 0 */
N#define CY_SPC_PM_ACT_REG           (* (reg8 *) CYREG_PM_ACT_CFG0 )
N#define CY_SPC_PM_ACT_PTR           (  (reg8 *) CYREG_PM_ACT_CFG0 )
N
N/* Standby Power Mode Configuration Register 0 */
N#define CY_SPC_PM_STBY_REG          (* (reg8 *) CYREG_PM_STBY_CFG0 )
N#define CY_SPC_PM_STBY_PTR          (  (reg8 *) CYREG_PM_STBY_CFG0 )
N
N#if(CY_PSOC5)
X#if((3u == 3u))
N
N    /* Wait State Pipeline */
N    #define CY_SPC_CPU_WAITPIPE_REG     (* (reg32 *) CYREG_PANTHER_WAITPIPE )
N    #define CY_SPC_CPU_WAITPIPE_PTR     (  (reg32 *) CYREG_PANTHER_WAITPIPE )
N
N#endif  /* (CY_PSOC5) */
N
N
N/***************************************
N* Macros
N***************************************/
N#define CY_SPC_IDLE                 (0u != (CY_SPC_STATUS_REG & CY_SPC_STATUS_IDLE_MASK))
N#define CY_SPC_BUSY                 (0u == (CY_SPC_STATUS_REG & CY_SPC_STATUS_IDLE_MASK))
N#define CY_SPC_DATA_READY           (0u != (CY_SPC_STATUS_REG & CY_SPC_STATUS_DATA_READY_MASK))
N
N/* SPC must be in idle state in order to obtain correct status */
N#define CY_SPC_READ_STATUS          (CY_SPC_IDLE ? \
N                                     ((uint8)(CY_SPC_STATUS_REG >> CY_SPC_STATUS_CODE_SHIFT)) : \
N                                     ((uint8) CY_SPC_STATUS_BUSY))
X#define CY_SPC_READ_STATUS          (CY_SPC_IDLE ?                                      ((uint8)(CY_SPC_STATUS_REG >> CY_SPC_STATUS_CODE_SHIFT)) :                                      ((uint8) CY_SPC_STATUS_BUSY))
N
N
N/*******************************************************************************
N* The following code is OBSOLETE and must not be used.
N*
N* If the obsoleted macro definitions intended for use in the application use the
N* following scheme, redefine your own versions of these definitions:
N*    #ifdef <OBSOLETED_DEFINE>
N*        #undef  <OBSOLETED_DEFINE>
N*        #define <OBSOLETED_DEFINE>      (<New Value>)
N*    #endif
N*
N* Note: Redefine obsoleted macro definitions with caution. They might still be
N*       used in the application and their modification might lead to unexpected
N*       consequences.
N*******************************************************************************/
N#define FIRST_FLASH_ARRAYID         (CY_SPC_FIRST_FLASH_ARRAYID)
N#define LAST_FLASH_ARRAYID          (CY_SPC_LAST_FLASH_ARRAYID)
N#define FIRST_EE_ARRAYID            (CY_SPC_FIRST_EE_ARRAYID)
N#define LAST_EE_ARRAYID             (CY_SPC_LAST_EE_ARRAYID)
N#define SIZEOF_ECC_ROW              (CYDEV_ECC_ROW_SIZE)
N#define SIZEOF_FLASH_ROW            (CYDEV_FLS_ROW_SIZE)
N#define SIZEOF_EEPROM_ROW           (CYDEV_EEPROM_ROW_SIZE)
N
N
N#endif /* (CY_BOOT_CYSPC_H) */
N
N
N/* [] END OF FILE */
L 25 "Generated_Source\PSoC5\CyFlash.h" 2
N
N#define CY_FLASH_DIE_TEMP_DATA_SIZE      (2u)    /* Die temperature data size */
N
Nextern uint8 dieTemperature[CY_FLASH_DIE_TEMP_DATA_SIZE];
Xextern uint8 dieTemperature[(2u)];
N
N
N/***************************************
N*    API Constants
N***************************************/
N
N#define CY_FLASH_BASE               (CYDEV_FLASH_BASE)
N#define CY_FLASH_SIZE               (CYDEV_FLS_SIZE)
N#define CY_FLASH_SIZEOF_ARRAY       (CYDEV_FLS_SECTOR_SIZE)
N#define CY_FLASH_SIZEOF_ROW         (CYDEV_FLS_ROW_SIZE)
N#define CY_FLASH_SIZEOF_ECC_ROW     (CYDEV_ECC_ROW_SIZE)
N#define CY_FLASH_NUMBER_ROWS        (CYDEV_FLS_SIZE / CYDEV_FLS_ROW_SIZE)
N#define CY_FLASH_NUMBER_ARRAYS      (CYDEV_FLS_SIZE / CYDEV_FLS_SECTOR_SIZE)
N
N#if(CYDEV_ECC_ENABLE == 0)
X#if(0 == 0)
N    #define CY_FLASH_SIZEOF_FULL_ROW     (CY_FLASH_SIZEOF_ROW + CY_FLASH_SIZEOF_ECC_ROW)
N#else
S    #define CY_FLASH_SIZEOF_FULL_ROW     (CY_FLASH_SIZEOF_ROW)
N#endif  /* (CYDEV_ECC_ENABLE == 0) */
N#define CY_EEPROM_BASE              (CYDEV_EE_BASE)
N#define CY_EEPROM_SIZE              (CYDEV_EE_SIZE)
N#define CY_EEPROM_SIZEOF_ARRAY      (CYDEV_EE_SIZE)     /* EEPROM has one array */
N#define CY_EEPROM_SIZEOF_ROW        (CYDEV_EEPROM_ROW_SIZE)
N#define CY_EEPROM_NUMBER_ROWS       (CYDEV_EE_SIZE / CYDEV_EEPROM_ROW_SIZE)
N#define CY_EEPROM_NUMBER_ARRAYS     (CYDEV_EE_SIZE / CY_EEPROM_SIZEOF_ARRAY)
N#define CY_EEPROM_NUMBER_SECTORS    (CYDEV_EE_SIZE / CYDEV_EEPROM_SECTOR_SIZE)
N#define CY_EEPROM_SIZEOF_SECTOR     (CYDEV_EEPROM_SECTOR_SIZE)
N
N#if !defined(CYDEV_FLS_BASE)
X#if !0L
N    #define CYDEV_FLS_BASE    CYDEV_FLASH_BASE
N#endif  /* !defined(CYDEV_FLS_BASE) */
N
N
N/***************************************
N*     Function Prototypes
N***************************************/
N
N/* Flash Functions */
Nvoid     CyFlash_Start(void);
Nvoid     CyFlash_Stop(void);
Ncystatus CyFlash_EraseRow(uint8 arrayId, uint16 rowAddress);
Ncystatus CySetTemp(void);
Ncystatus CySetFlashEEBuffer(uint8 * buffer);
Ncystatus CyFlashGetSpcAlgorithm(void);
Ncystatus CyWriteRowFull(uint8 arrayId, uint16 rowNumber, const uint8 * rowData, uint16 rowSize) \
N            ;
Xcystatus CyWriteRowFull(uint8 arrayId, uint16 rowNumber, const uint8 * rowData, uint16 rowSize)             ;
Ncystatus CyWriteRowData(uint8 arrayId, uint16 rowAddress, const uint8 * rowData);
N
N#if ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u))
X#if ((0 == 0u) && (1 == 0u))
S    cystatus CyWriteRowConfig(uint8 arrayId, uint16 rowAddress, const uint8 * rowECC) \
S            ;
X    cystatus CyWriteRowConfig(uint8 arrayId, uint16 rowAddress, const uint8 * rowECC)             ;
N#endif  /* ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u)) */
N
Nvoid CyFlash_SetWaitCycles(uint8 freq) ;
N
N/* EEPROM Functions */
Nvoid CyEEPROM_Start(void) ;
Nvoid CyEEPROM_Stop(void) ;
N
Nvoid CyEEPROM_ReadReserve(void) ;
Nvoid CyEEPROM_ReadRelease(void) ;
N
N
N/***************************************
N*     Registers
N***************************************/
N/* Active Power Mode Configuration Register 0 */
N#define CY_FLASH_PM_ACT_CFG0_REG             (* (reg8 *) CYREG_PM_ACT_CFG0)
N#define CY_FLASH_PM_ACT_CFG0_PTR             (  (reg8 *) CYREG_PM_ACT_CFG0)
N
N/* Alternate Active Power Mode Configuration Register 0 */
N#define CY_FLASH_PM_ALTACT_CFG0_REG          (* (reg8 *) CYREG_PM_STBY_CFG0)
N#define CY_FLASH_PM_ALTACT_CFG0_PTR          (  (reg8 *) CYREG_PM_STBY_CFG0)
N
N/* Active Power Mode Configuration Register 12 */
N#define CY_FLASH_PM_ACT_CFG12_REG            (* (reg8 *) CYREG_PM_ACT_CFG12)
N#define CY_FLASH_PM_ACT_CFG12_PTR            (  (reg8 *) CYREG_PM_ACT_CFG12)
N
N/* Alternate Active Power Mode Configuration Register 12 */
N#define CY_FLASH_PM_ALTACT_CFG12_REG         (* (reg8 *) CYREG_PM_STBY_CFG12)
N#define CY_FLASH_PM_ALTACT_CFG12_PTR         (  (reg8 *) CYREG_PM_STBY_CFG12)
N
N/* Wake count (BUS_CLK cycles) it takes for the Flash and EEPROM to wake up */
N#define CY_FLASH_SPC_FM_EE_WAKE_CNT_REG      (* (reg8 *) CYREG_SPC_FM_EE_WAKE_CNT)
N#define CY_FLASH_SPC_FM_EE_WAKE_CNT_PTR      (  (reg8 *) CYREG_SPC_FM_EE_WAKE_CNT)
N
N/* Flash macro control register */
N#define CY_FLASH_SPC_FM_EE_CR_REG            (* (reg8 *) CYREG_SPC_FM_EE_CR)
N#define CY_FLASH_SPC_FM_EE_CR_PTR            (  (reg8 *) CYREG_SPC_FM_EE_CR)
N
N
N/* Cache Control Register */
N#if (CY_PSOC3)
X#if ((3u == 1u))
S
S    #define CY_FLASH_CONTROL_REG                (* (reg8 *) CYREG_CACHE_CR )
S    #define CY_FLASH_CONTROL_PTR                (  (reg8 *) CYREG_CACHE_CR )
S
N#else
N
N    #define CY_FLASH_CONTROL_REG                (* (reg8 *) CYREG_CACHE_CC_CTL )
N    #define CY_FLASH_CONTROL_PTR                (  (reg8 *) CYREG_CACHE_CC_CTL )
N
N#endif  /* (CY_PSOC3) */
N
N
N/* EEPROM Status & Control Register */
N#define CY_FLASH_EE_SCR_REG                     (* (reg8 *) CYREG_SPC_EE_SCR)
N#define CY_FLASH_EE_SCR_PTR                     (  (reg8 *) CYREG_SPC_EE_SCR)
N
N
N
N/***************************************
N*     Register Constants
N***************************************/
N
N/* Power Mode Masks */
N
N/* Enable EEPROM */
N#define CY_FLASH_PM_ACT_CFG12_EN_EE             (0x10u)
N#define CY_FLASH_PM_ALTACT_CFG12_EN_EE          (0x10u)
N
N/* Enable Flash */
N#if (CY_PSOC3)
X#if ((3u == 1u))
S    #define CY_FLASH_PM_ACT_CFG12_EN_FM         (0x01u)
S    #define CY_FLASH_PM_ALTACT_CFG12_EN_FM      (0x01u)
N#else
N    #define CY_FLASH_PM_ACT_CFG12_EN_FM         (0x0Fu)
N    #define CY_FLASH_PM_ALTACT_CFG12_EN_FM      (0x0Fu)
N#endif  /* (CY_PSOC3) */
N
N
N
N/* Frequency Constants */
N#if (CY_PSOC3)
X#if ((3u == 1u))
S    #define CY_FLASH_CACHE_WS_VALUE_MASK        (0xC0u)
S    #define CY_FLASH_CACHE_WS_1_VALUE_MASK      (0x40u)
S    #define CY_FLASH_CACHE_WS_2_VALUE_MASK      (0x80u)
S    #define CY_FLASH_CACHE_WS_3_VALUE_MASK      (0xC0u)
S
S    #define CY_FLASH_CACHE_WS_1_FREQ_MAX        (22u)
S    #define CY_FLASH_CACHE_WS_2_FREQ_MAX        (44u)
S    #define CY_FLASH_CACHE_WS_3_FREQ_MAX        (67u)
N#endif  /* (CY_PSOC3) */
N
N#if (CY_PSOC5)
X#if ((3u == 3u))
N    #define CY_FLASH_CACHE_WS_VALUE_MASK        (0xE0u)
N    #define CY_FLASH_CACHE_WS_1_VALUE_MASK      (0x40u)
N    #define CY_FLASH_CACHE_WS_2_VALUE_MASK      (0x80u)
N    #define CY_FLASH_CACHE_WS_3_VALUE_MASK      (0xC0u)
N    #define CY_FLASH_CACHE_WS_4_VALUE_MASK      (0x00u)
N    #define CY_FLASH_CACHE_WS_5_VALUE_MASK      (0x20u)
N
N    #define CY_FLASH_CACHE_WS_1_FREQ_MAX        (16u)
N    #define CY_FLASH_CACHE_WS_2_FREQ_MAX        (33u)
N    #define CY_FLASH_CACHE_WS_3_FREQ_MAX        (50u)
N    #define CY_FLASH_CACHE_WS_4_FREQ_MAX        (67u)
N    #define CY_FLASH_CACHE_WS_5_FREQ_MAX        (83u)
N#endif  /* (CY_PSOC5) */
N
N#define CY_FLASH_CYCLES_MASK_SHIFT              (0x06u)
N#define CY_FLASH_CYCLES_MASK                    ((uint8)(0x03u << (CY_FLASH_CYCLES_MASK_SHIFT)))
N
N#define CY_FLASH_EE_SCR_AHB_EE_REQ              (0x01u)
N#define CY_FLASH_EE_SCR_AHB_EE_ACK              (0x02u)
N
N
N#define CY_FLASH_EE_EE_AWAKE                    (0x20u)
N
N/* 5(us) * BUS_CLK(80 MHz) / granularity(2) */
N#define CY_FLASH_SPC_FM_EE_WAKE_CNT_80MHZ       (0xC8u)
N
N/* Enable clk_spc. This also internally enables the 36MHz IMO. */
N#define CY_FLASH_PM_ACT_CFG0_EN_CLK_SPC         (0x08u)
N#define CY_FLASH_PM_ALTACT_CFG0_EN_CLK_SPC      (0x08u)
N
N/* Default values for getting temperature. */
N
N#define CY_TEMP_NUMBER_OF_SAMPLES               (0x1u)
N#define CY_TEMP_TIMER_PERIOD                    (0xFFFu)
N#define CY_TEMP_CLK_DIV_SELECT                  (0x4u)
N#define CY_TEMP_NUM_SAMPLES                     (1 << (CY_TEMP_NUMBER_OF_SAMPLES))
N#define CY_SPC_CLK_PERIOD                       (120u)      /* nS */
N#define CY_SYS_ns_PER_TICK                      (1000u)
N#define CY_FRM_EXEC_TIME                        (1000u)     /* nS */
N
N#define CY_GET_TEMP_TIME                        ((1 << (CY_TEMP_NUM_SAMPLES + 1)) * \
N                                                    (CY_SPC_CLK_PERIOD * CY_TEMP_CLK_DIV_SELECT) * \
N                                                    CY_TEMP_TIMER_PERIOD + CY_FRM_EXEC_TIME)
X#define CY_GET_TEMP_TIME                        ((1 << (CY_TEMP_NUM_SAMPLES + 1)) *                                                     (CY_SPC_CLK_PERIOD * CY_TEMP_CLK_DIV_SELECT) *                                                     CY_TEMP_TIMER_PERIOD + CY_FRM_EXEC_TIME)
N
N#define CY_TEMP_MAX_WAIT                        ((CY_GET_TEMP_TIME) / CY_SYS_ns_PER_TICK)    /* In system ticks. */
N
N
N/*******************************************************************************
N* Thne following code is OBSOLETE and must not be used starting with cy_boot
N* 4.20.
N*
N* If the obsoleted macro definitions intended for use in the application use the
N* following scheme, redefine your own versions of these definitions:
N*    #ifdef <OBSOLETED_DEFINE>
N*        #undef  <OBSOLETED_DEFINE>
N*        #define <OBSOLETED_DEFINE>      (<New Value>)
N*    #endif
N*
N* Note: Redefine obsoleted macro definitions with caution. They might still be
N*       used in the application and their modification might lead to unexpected
N*       consequences.
N*******************************************************************************/
N#if (CY_PSOC5)
X#if ((3u == 3u))
N    #define CY_FLASH_LESSER_OR_EQUAL_16MHz      (0x01u)
N    #define CY_FLASH_LESSER_OR_EQUAL_33MHz      (0x02u)
N    #define CY_FLASH_LESSER_OR_EQUAL_50MHz      (0x03u)
N    #define CY_FLASH_GREATER_51MHz              (0x00u)
N#endif  /* (CY_PSOC5) */
N
N#if (CY_PSOC3)
X#if ((3u == 1u))
S    #define CY_FLASH_LESSER_OR_EQUAL_22MHz      (0x01u)
S    #define CY_FLASH_LESSER_OR_EQUAL_44MHz      (0x02u)
S    #define CY_FLASH_GREATER_44MHz              (0x03u)
N#endif  /* (CY_PSOC3) */
N
N#define CY_FLASH_PM_ACT_EEFLASH_REG         (* (reg8 *) CYREG_PM_ACT_CFG12)
N#define CY_FLASH_PM_ACT_EEFLASH_PTR         (  (reg8 *) CYREG_PM_ACT_CFG12)
N#define CY_FLASH_PM_ALTACT_EEFLASH_REG      (* (reg8 *) CYREG_PM_STBY_CFG12)
N#define CY_FLASH_PM_ALTACT_EEFLASH_PTR      (  (reg8 *) CYREG_PM_STBY_CFG12)
N#define CY_FLASH_PM_EE_MASK                 (0x10u)
N#define CY_FLASH_PM_FLASH_MASK              (0x01u)
N
N/*******************************************************************************
N* The following code is OBSOLETE and must not be used starting with cy_boot 3.0
N*******************************************************************************/
N#define FLASH_SIZE                  (CY_FLASH_SIZE)
N#define FLASH_SIZEOF_SECTOR         (CY_FLASH_SIZEOF_ARRAY)
N#define FLASH_NUMBER_ROWS           (CY_FLASH_NUMBER_ROWS)
N#define FLASH_NUMBER_SECTORS        (CY_FLASH_NUMBER_ARRAYS)
N#define EEPROM_SIZE                 (CY_EEPROM_SIZE)
N#define EEPROM_SIZEOF_SECTOR        (CYDEV_EEPROM_SECTOR_SIZE)
N#define EEPROM_NUMBER_ROWS          (CY_EEPROM_NUMBER_ROWS)
N#define EEPROM_NUMBER_SECTORS       (CY_EEPROM_NUMBER_SECTORS)
N
N
N/*******************************************************************************
N* The following code is OBSOLETE and must not be used starting with cy_boot 3.30
N*******************************************************************************/
N#define FLASH_CYCLES_PTR            (CY_FLASH_CONTROL_PTR)
N
N#define TEMP_NUMBER_OF_SAMPLES      (CY_TEMP_NUMBER_OF_SAMPLES)
N#define TEMP_TIMER_PERIOD           (CY_TEMP_TIMER_PERIOD)
N#define TEMP_CLK_DIV_SELECT         (CY_TEMP_CLK_DIV_SELECT)
N#define NUM_SAMPLES                 (CY_TEMP_NUM_SAMPLES)
N#define SPC_CLK_PERIOD              (CY_SPC_CLK_PERIOD)
N#define FRM_EXEC_TIME               (CY_FRM_EXEC_TIME)
N#define GET_TEMP_TIME               (CY_GET_TEMP_TIME)
N#define TEMP_MAX_WAIT               (CY_TEMP_MAX_WAIT)
N
N#define ECC_ADDR                    (0x80u)
N
N
N#define PM_ACT_EE_PTR           (CY_FLASH_PM_ACT_EEFLASH_PTR)
N#define PM_ACT_FLASH_PTR        (CY_FLASH_PM_ACT_EEFLASH_PTR)
N
N#define PM_STBY_EE_PTR          (CY_FLASH_PM_ALTACT_EEFLASH_PTR)
N#define PM_STBY_FLASH_PTR       (CY_FLASH_PM_ALTACT_EEFLASH_PTR)
N
N#define PM_EE_MASK              (CY_FLASH_PM_EE_MASK)
N#define PM_FLASH_MASK           (CY_FLASH_PM_FLASH_MASK)
N
N#define FLASH_CYCLES_MASK_SHIFT     (CY_FLASH_CYCLES_MASK_SHIFT)
N#define FLASH_CYCLES_MASK           (CY_FLASH_CYCLES_MASK)
N
N
N#if (CY_PSOC3)
X#if ((3u == 1u))
S
S    #define LESSER_OR_EQUAL_22MHz   (CY_FLASH_LESSER_OR_EQUAL_22MHz)
S    #define LESSER_OR_EQUAL_44MHz   (CY_FLASH_LESSER_OR_EQUAL_44MHz)
S    #define GREATER_44MHz           (CY_FLASH_GREATER_44MHz)
S
N#endif  /* (CY_PSOC3) */
N
N#if (CY_PSOC5)
X#if ((3u == 3u))
N
N    #define LESSER_OR_EQUAL_16MHz   (CY_FLASH_LESSER_OR_EQUAL_16MHz)
N    #define LESSER_OR_EQUAL_33MHz   (CY_FLASH_LESSER_OR_EQUAL_33MHz)
N    #define LESSER_OR_EQUAL_50MHz   (CY_FLASH_LESSER_OR_EQUAL_50MHz)
N    #define LESSER_OR_EQUAL_67MHz   (CY_FLASH_LESSER_OR_EQUAL_67MHz)
N    #define GREATER_67MHz           (CY_FLASH_GREATER_67MHz)
N    #define GREATER_51MHz           (CY_FLASH_GREATER_51MHz)
N
N#endif  /* (CY_PSOC5) */
N
N#define AHUB_EE_REQ_ACK_PTR         (CY_FLASH_EE_SCR_PTR)
N
N
N#endif  /* (CY_BOOT_CYFLASH_H) */
N
N
N/* [] END OF FILE */
L 26 "Generated_Source\PSoC5\cyPm.h" 2
N
N
N/***************************************
N*    Function Prototypes
N***************************************/
Nvoid CyPmSaveClocks(void) ;
Nvoid CyPmRestoreClocks(void) ;
Nvoid CyPmAltAct(uint16 wakeupTime, uint16 wakeupSource) ;
Nvoid CyPmSleep(uint8 wakeupTime, uint16 wakeupSource) ;
Nvoid CyPmHibernate(void) ;
Nvoid CyPmHibernateEx(uint16 wakeupSource) ;
N
Nuint8 CyPmReadStatus(uint8 mask) ;
N
N/* Internal APIs and are not meant to be called directly by the user */
Nvoid CyPmCtwSetInterval(uint8 ctwInterval) ;
Nvoid CyPmFtwSetInterval(uint8 ftwInterval) ;
Nvoid CyPmOppsSet(void) ;
N
N
N/***************************************
N*    API Constants
N***************************************/
N
N#define PM_SLEEP_SRC_NONE               (0x0000u)
N#define PM_SLEEP_TIME_NONE              (0x00u)
N#define PM_ALT_ACT_SRC_NONE             (0x0000u)
N#define PM_ALT_ACT_TIME_NONE            (0x0000u)
N
N#if(CY_PSOC3)
X#if((3u == 1u))
S
S    /* Wake up time for Sleep mode */
S    #define PM_SLEEP_TIME_ONE_PPS           (0x01u)
S    #define PM_SLEEP_TIME_CTW_2MS           (0x02u)
S    #define PM_SLEEP_TIME_CTW_4MS           (0x03u)
S    #define PM_SLEEP_TIME_CTW_8MS           (0x04u)
S    #define PM_SLEEP_TIME_CTW_16MS          (0x05u)
S    #define PM_SLEEP_TIME_CTW_32MS          (0x06u)
S    #define PM_SLEEP_TIME_CTW_64MS          (0x07u)
S    #define PM_SLEEP_TIME_CTW_128MS         (0x08u)
S    #define PM_SLEEP_TIME_CTW_256MS         (0x09u)
S    #define PM_SLEEP_TIME_CTW_512MS         (0x0Au)
S    #define PM_SLEEP_TIME_CTW_1024MS        (0x0Bu)
S    #define PM_SLEEP_TIME_CTW_2048MS        (0x0Cu)
S    #define PM_SLEEP_TIME_CTW_4096MS        (0x0Du)
S
S    /* Difference between parameter's value and register's one */
S    #define CY_PM_FTW_INTERVAL_SHIFT        (0x000Eu)
S
S    /* Wake up time for Alternate Active mode */
S    #define PM_ALT_ACT_TIME_ONE_PPS         (0x0001u)
S    #define PM_ALT_ACT_TIME_CTW_2MS         (0x0002u)
S    #define PM_ALT_ACT_TIME_CTW_4MS         (0x0003u)
S    #define PM_ALT_ACT_TIME_CTW_8MS         (0x0004u)
S    #define PM_ALT_ACT_TIME_CTW_16MS        (0x0005u)
S    #define PM_ALT_ACT_TIME_CTW_32MS        (0x0006u)
S    #define PM_ALT_ACT_TIME_CTW_64MS        (0x0007u)
S    #define PM_ALT_ACT_TIME_CTW_128MS       (0x0008u)
S    #define PM_ALT_ACT_TIME_CTW_256MS       (0x0009u)
S    #define PM_ALT_ACT_TIME_CTW_512MS       (0x000Au)
S    #define PM_ALT_ACT_TIME_CTW_1024MS      (0x000Bu)
S    #define PM_ALT_ACT_TIME_CTW_2048MS      (0x000Cu)
S    #define PM_ALT_ACT_TIME_CTW_4096MS      (0x000Du)
S    #define PM_ALT_ACT_TIME_FTW(x)          ((x) + CY_PM_FTW_INTERVAL_SHIFT)
S
N#endif  /* (CY_PSOC3) */
N
N
N/* Wake up sources for Sleep mode */
N#define PM_SLEEP_SRC_COMPARATOR0        (0x0001u)
N#define PM_SLEEP_SRC_COMPARATOR1        (0x0002u)
N#define PM_SLEEP_SRC_COMPARATOR2        (0x0004u)
N#define PM_SLEEP_SRC_COMPARATOR3        (0x0008u)
N#define PM_SLEEP_SRC_PICU               (0x0040u)
N#define PM_SLEEP_SRC_I2C                (0x0080u)
N#define PM_SLEEP_SRC_BOOSTCONVERTER     (0x0200u)
N#define PM_SLEEP_SRC_VD                 (0x0400u)
N#define PM_SLEEP_SRC_CTW                (0x0800u)
N#define PM_SLEEP_SRC_ONE_PPS            (0x0800u)
N#define PM_SLEEP_SRC_LCD                (0x1000u)
N
N/* Wake up sources for Hibernate mode */
N#define CY_PM_HIB_SRC_PICU              (0x0040u)
N#define CY_PM_HIB_SRC_COMPARATOR0       (0x0001u)
N#define CY_PM_HIB_SRC_COMPARATOR1       (0x0002u)
N#define CY_PM_HIB_SRC_COMPARATOR2       (0x0004u)
N#define CY_PM_HIB_SRC_COMPARATOR3       (0x0008u)
N
N/* Wake up sources for Alternate Active mode */
N#define PM_ALT_ACT_SRC_COMPARATOR0      (0x0001u)
N#define PM_ALT_ACT_SRC_COMPARATOR1      (0x0002u)
N#define PM_ALT_ACT_SRC_COMPARATOR2      (0x0004u)
N#define PM_ALT_ACT_SRC_COMPARATOR3      (0x0008u)
N#define PM_ALT_ACT_SRC_INTERRUPT        (0x0010u)
N#define PM_ALT_ACT_SRC_PICU             (0x0040u)
N#define PM_ALT_ACT_SRC_I2C              (0x0080u)
N#define PM_ALT_ACT_SRC_BOOSTCONVERTER   (0x0200u)
N#define PM_ALT_ACT_SRC_FTW              (0x0400u)
N#define PM_ALT_ACT_SRC_VD               (0x0400u)
N#define PM_ALT_ACT_SRC_CTW              (0x0800u)
N#define PM_ALT_ACT_SRC_ONE_PPS          (0x0800u)
N#define PM_ALT_ACT_SRC_LCD              (0x1000u)
N
N
N#define CY_PM_WAKEUP_PICU               (0x04u)
N#define CY_PM_IMO_NO_WAIT_TO_SETTLE     (0x00u)
N#define CY_PM_POWERDOWN_MODE            (0x01u)
N#define CY_PM_HIGHPOWER_MODE            (0x00u)     /* Deprecated */
N#define CY_PM_ENABLED                   (0x01u)
N#define CY_PM_DISABLED                  (0x00u)
N
N/* No wait for PLL to stabilize, used in CyPLL_OUT_Start() */
N#define CY_PM_PLL_OUT_NO_WAIT           (0u)
N
N/* No wait for MHZ XTAL to stabilize, used in CyXTAL_Start() */
N#define CY_PM_XTAL_MHZ_NO_WAIT          (0u)
N
N#define CY_PM_WAIT_200_US               (200u)
N#define CY_PM_WAIT_250_US               (250u)
N#define CY_PM_WAIT_20_US                (20u)
N
N#define CY_PM_FREQ_3MHZ                 (3u)
N#define CY_PM_FREQ_12MHZ                (12u)
N#define CY_PM_FREQ_48MHZ                (48u)
N
N
N#define     CY_PM_MHZ_XTAL_WAIT_NUM_OF_200_US   (5u)
N
N
N/* Delay line bandgap current settling time starting from wakeup event */
N#define     CY_PM_CLK_DELAY_BANDGAP_SETTLE_US       (50u)
N
N/* Delay line internal bias settling */
N#define     CY_PM_CLK_DELAY_BIAS_SETTLE_US          (25u)
N
N
N/* Max flash wait cycles for each device */
N#if(CY_PSOC3)
X#if((3u == 1u))
S    #define     CY_PM_MAX_FLASH_WAIT_CYCLES        (45u)
N#endif  /* (CY_PSOC3) */
N
N#if(CY_PSOC5)
X#if((3u == 3u))
N    #define     CY_PM_MAX_FLASH_WAIT_CYCLES        (55u)
N#endif  /* (CY_PSOC5) */
N
N
N/*******************************************************************************
N* This marco is used to obtain the CPU frequency in MHz. It should be only used
N* when the clock distribution system is prepared for the low power mode entry.
N* This macro is silicon dependent as PSoC 5 devices have no CPU clock divider
N* and PSoC 3 devices have different placement of the CPU clock divider register
N* bitfield.
N*******************************************************************************/
N#if(CY_PSOC3)
X#if((3u == 1u))
S    #define CY_PM_GET_CPU_FREQ_MHZ \
S                            ((uint32)(cyPmImoFreqReg2Mhz[CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK]) / \
S                            ((uint8)(((CY_PM_CLKDIST_MSTR1_REG & CY_PM_CLKDIST_CPU_DIV_MASK) >> 4u) + 1u)))
X    #define CY_PM_GET_CPU_FREQ_MHZ                             ((uint32)(cyPmImoFreqReg2Mhz[CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK]) /                             ((uint8)(((CY_PM_CLKDIST_MSTR1_REG & CY_PM_CLKDIST_CPU_DIV_MASK) >> 4u) + 1u)))
N#endif  /* (CY_PSOC3) */
N
N#if(CY_PSOC5)
X#if((3u == 3u))
N
N    /* CPU clock is directly derived from bus clock */
N    #define     CY_PM_GET_CPU_FREQ_MHZ (cyPmImoFreqReg2Mhz[CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK])
N
N#endif  /* (CY_PSOC5) */
N
N
N/*******************************************************************************
N* The low power mode entry is different for PSoC 3 and PSoC 5 devices. The low
N* power modes in PSoC 5 devices are invoked by Wait-For-Interrupt (WFI)
N* instruction. The ARM compilers has __wfi() intrinsic that inserts a WFI
N* instruction into the instruction stream generated by the compiler. The GCC
N* compiler has to execute assembly language instruction.
N*******************************************************************************/
N#if(CY_PSOC5)
X#if((3u == 3u))
N
N    #if defined(__ARMCC_VERSION)    /* Instristic for Keil compilers */
X    #if 1L     
N        #define CY_PM_WFI       __wfi()
N    #else   /* ASM for GCC & IAR */
S        #define CY_PM_WFI       __asm volatile ("WFI \n")
N    #endif /* (__ARMCC_VERSION) */
N
N#else
S
S    #define CY_PM_WFI           CY_NOP
S
N#endif /* (CY_PSOC5) */
N
N
N/*******************************************************************************
N* Macro for the wakeupTime argument of the CyPmAltAct() function. The FTW should
N* be programmed manually for non PSoC 3 devices.
N*******************************************************************************/
N#if(CY_PSOC3)
X#if((3u == 1u))
S
S    #define PM_ALT_ACT_FTW_INTERVAL(x)  ((uint8)((x) - CY_PM_FTW_INTERVAL_SHIFT))
S
N#endif  /* (CY_PSOC3) */
N
N
N/*******************************************************************************
N* This macro defines the IMO frequency that will be set by CyPmSaveClocks()
N* function based on Enable Fast IMO during Startup option from the DWR file.
N* The CyPmSleep()/CyPmHibernate() will set IMO 12 MHz just before entering the
N* low power mode and restore IMO back to the value set by CyPmSaveClocks()
N* immediately on wakeup.
N*******************************************************************************/
N
N/* Enable Fast IMO during Startup - enabled */
N#if(1u == CYDEV_CONFIGURATION_IMOENABLED)
X#if(1u == 1)
N
N    /* IMO will be configured to 48 MHz */
N    #define CY_PM_IMO_FREQ_LPM      (CY_IMO_FREQ_48MHZ)
N
N#else
S
S    /* IMO will be configured to 12 MHz */
S    #define CY_PM_IMO_FREQ_LPM      (CY_IMO_FREQ_12MHZ)
S
N#endif  /* (1u == CYDEV_CONFIGURATION_IMOENABLED) */
N
N
Ntypedef struct cyPmClockBackupStruct
N{
N    /* CyPmSaveClocks()/CyPmRestoreClocks() */
N    uint8  enClkA;              /* Analog clocks enable         */
N    uint8  enClkD;              /* Digital clocks enable        */
N    uint8  masterClkSrc;        /* Master clock source          */
N    uint8  imoFreq;             /* IMO frequency (reg's value)  */
N    uint8  imoUsbClk;           /* IMO USB CLK (reg's value)    */
N    uint8  flashWaitCycles;     /* Flash wait cycles            */
N    uint8  imoEnable;           /* IMO enable in Active mode    */
N    uint8  imoClkSrc;           /* The IMO output               */
N    uint8  clkImoSrc;
N    uint8  imo2x;               /* IMO doubler enable state     */
N    uint8  clkSyncDiv;          /* Master clk divider           */
N    uint16 clkBusDiv;           /* clk_bus divider              */
N    uint8  pllEnableState;      /* PLL enable state             */
N    uint8  xmhzEnableState;     /* XM HZ enable state           */
N    uint8  clkDistDelay;        /* Delay for clk_bus and ACLKs  */
N
N} CY_PM_CLOCK_BACKUP_STRUCT;
N
N
Ntypedef struct cyPmBackupStruct
N{
N    uint8 iloPowerMode;         /* ILO power mode           */
N    uint8 ilo1kEnable;          /* ILO 1K enable state      */
N    uint8 ilo100kEnable;        /* ILO 100K enable state    */
N
N    uint8 slpTrBypass;          /* Sleep Trim Bypass        */
N
N    #if(CY_PSOC3)
X    #if((3u == 1u))
S
S        uint8 swvClkEnabled;    /* SWV clock enable state   */
S        uint8 prt1Dm;           /* Ports drive mode configuration */
S        uint8 hardwareBuzz;
S
N    #endif  /* (CY_PSOC3)  */
N
N    uint8 wakeupCfg0;       /* Wake up configuration 0  */
N    uint8 wakeupCfg1;       /* Wake up configuration 1  */
N    uint8 wakeupCfg2;       /* Wake up configuration 2  */
N
N    uint8 wakeupTrim0;
N    uint8 wakeupTrim1;
N    
N    #if(CY_PSOC5)
X    #if((3u == 3u))
N
N        uint8 wakeupTrim3;
N
N    #endif  /* (CY_PSOC5) */    
N
N    uint8 scctData[28u];   /* SC/CT routing registers  */
N
N    /* CyPmHviLviSaveDisable()/CyPmHviLviRestore() */
N    uint8 lvidEn;
N    uint8 lvidTrip;
N    uint8 lviaEn;
N    uint8 lviaTrip;
N    uint8 hviaEn;
N    uint8 lvidRst;
N    uint8 lviaRst;
N
N    uint8 imoActFreq;       /* Last moment IMO change   */
N    uint8 imoActFreq12Mhz;  /* 12 MHz or not            */
N
N    uint8 boostRefExt;      /* Boost reference selection */
N
N} CY_PM_BACKUP_STRUCT;
N
N
N/***************************************
N* Registers
N***************************************/
N
N/* Power Mode Wakeup Trim Register 1 */
N#define CY_PM_PWRSYS_WAKE_TR1_REG           (* (reg8 *) CYREG_PWRSYS_WAKE_TR1 )
N#define CY_PM_PWRSYS_WAKE_TR1_PTR           (  (reg8 *) CYREG_PWRSYS_WAKE_TR1 )
N
N#if(CY_PSOC5)
X#if((3u == 3u))
N    /* Power Mode Wakeup Trim Register 3 */
N    #define CY_PM_PWRSYS_WAKE_TR3_REG           (* (reg8 *) CYREG_PWRSYS_WAKE_TR3 )
N    #define CY_PM_PWRSYS_WAKE_TR3_PTR           (  (reg8 *) CYREG_PWRSYS_WAKE_TR3 )
N#endif  /* (CY_PSOC5) */
N
N/* Master clock Divider Value Register */
N#define CY_PM_CLKDIST_MSTR0_REG             (* (reg8 *) CYREG_CLKDIST_MSTR0 )
N#define CY_PM_CLKDIST_MSTR0_PTR             (  (reg8 *) CYREG_CLKDIST_MSTR0 )
N
N/* Master Clock Configuration Register/CPU Divider Value */
N#define CY_PM_CLKDIST_MSTR1_REG             (* (reg8 *) CYREG_CLKDIST_MSTR1 )
N#define CY_PM_CLKDIST_MSTR1_PTR             (  (reg8 *) CYREG_CLKDIST_MSTR1 )
N
N/* Clock distribution configuration Register */
N#define CY_PM_CLKDIST_CR_REG                (* (reg8 *) CYREG_CLKDIST_CR )
N#define CY_PM_CLKDIST_CR_PTR                (  (reg8 *) CYREG_CLKDIST_CR )
N
N/* CLK_BUS LSB Divider Value Register */
N#define CY_PM_CLK_BUS_LSB_DIV_REG           (* (reg8 *) CYREG_CLKDIST_BCFG0 )
N#define CY_PM_CLK_BUS_LSB_DIV_PTR           (  (reg8 *) CYREG_CLKDIST_BCFG0 )
N
N/* CLK_BUS MSB Divider Value Register */
N#define CY_PM_CLK_BUS_MSB_DIV_REG           (* (reg8 *) CYREG_CLKDIST_BCFG1 )
N#define CY_PM_CLK_BUS_MSB_DIV_PTR           (  (reg8 *) CYREG_CLKDIST_BCFG1 )
N
N/* CLK_BUS Configuration Register */
N#define CLK_BUS_CFG_REG                     (* (reg8 *) CYREG_CLKDIST_BCFG2 )
N#define CLK_BUS_CFG_PTR                     (  (reg8 *) CYREG_CLKDIST_BCFG2 )
N
N/* Power Mode Control/Status Register */
N#define CY_PM_MODE_CSR_REG                  (* (reg8 *) CYREG_PM_MODE_CSR )
N#define CY_PM_MODE_CSR_PTR                  (  (reg8 *) CYREG_PM_MODE_CSR )
N
N/* Power System Control Register 1 */
N#define CY_PM_PWRSYS_CR1_REG                (* (reg8 *) CYREG_PWRSYS_CR1 )
N#define CY_PM_PWRSYS_CR1_PTR                (  (reg8 *) CYREG_PWRSYS_CR1 )
N
N/* Power System Control Register 0 */
N#define CY_PM_PWRSYS_CR0_REG                (* (reg8 *) CYREG_PWRSYS_CR0 )
N#define CY_PM_PWRSYS_CR0_PTR                (  (reg8 *) CYREG_PWRSYS_CR0 )
N
N/* Internal Low-speed Oscillator Control Register 0 */
N#define CY_PM_SLOWCLK_ILO_CR0_REG           (* (reg8 *) CYREG_SLOWCLK_ILO_CR0 )
N#define CY_PM_SLOWCLK_ILO_CR0_PTR           (  (reg8 *) CYREG_SLOWCLK_ILO_CR0 )
N
N/* External 32kHz Crystal Oscillator Control Register */
N#define CY_PM_SLOWCLK_X32_CR_REG            (* (reg8 *) CYREG_SLOWCLK_X32_CR )
N#define CY_PM_SLOWCLK_X32_CR_PTR            (  (reg8 *) CYREG_SLOWCLK_X32_CR )
N
N#if(CY_PSOC3)
X#if((3u == 1u))
S
S    /* MLOGIC Debug Register */
S    #define CY_PM_MLOGIC_DBG_REG            (* (reg8 *) CYREG_MLOGIC_DEBUG )
S    #define CY_PM_MLOGIC_DBG_PTR            (  (reg8 *) CYREG_MLOGIC_DEBUG )
S
S    /* Port Pin Configuration Register */
S    #define CY_PM_PRT1_PC3_REG              (* (reg8 *) CYREG_PRT1_PC3 )
S    #define CY_PM_PRT1_PC3_PTR              (  (reg8 *) CYREG_PRT1_PC3 )
S
N#endif /* (CY_PSOC3) */
N
N
N/* Sleep Regulator Trim Register */
N#define CY_PM_PWRSYS_SLP_TR_REG         (* (reg8 *) CYREG_PWRSYS_SLP_TR )
N#define CY_PM_PWRSYS_SLP_TR_PTR         (  (reg8 *) CYREG_PWRSYS_SLP_TR )
N
N
N/* Reset System Control Register */
N#define CY_PM_RESET_CR1_REG                 (* (reg8 *) CYREG_RESET_CR1 )
N#define CY_PM_RESET_CR1_PTR                 (  (reg8 *) CYREG_RESET_CR1 )
N
N/* Power Mode Wakeup Trim Register 0 */
N#define CY_PM_PWRSYS_WAKE_TR0_REG           (* (reg8 *) CYREG_PWRSYS_WAKE_TR0 )
N#define CY_PM_PWRSYS_WAKE_TR0_PTR           (  (reg8 *) CYREG_PWRSYS_WAKE_TR0 )
N
N#if(CY_PSOC3)
X#if((3u == 1u))
S
S    /* Power Mode Wakeup Trim Register 2 */
S    #define CY_PM_PWRSYS_WAKE_TR2_REG           (* (reg8 *) CYREG_PWRSYS_WAKE_TR2 )
S    #define CY_PM_PWRSYS_WAKE_TR2_PTR           (  (reg8 *) CYREG_PWRSYS_WAKE_TR2 )
S
N#endif  /* (CY_PSOC3) */
N
N/* Power Manager Interrupt Status Register */
N#define CY_PM_INT_SR_REG                    (* (reg8 *) CYREG_PM_INT_SR )
N#define CY_PM_INT_SR_PTR                    (  (reg8 *) CYREG_PM_INT_SR )
N
N/* Active Power Mode Configuration Register 0 */
N#define CY_PM_ACT_CFG0_REG                  (* (reg8 *) CYREG_PM_ACT_CFG0 )
N#define CY_PM_ACT_CFG0_PTR                  (  (reg8 *) CYREG_PM_ACT_CFG0 )
N
N/* Active Power Mode Configuration Register 1 */
N#define CY_PM_ACT_CFG1_REG                  (* (reg8 *) CYREG_PM_ACT_CFG1 )
N#define CY_PM_ACT_CFG1_PTR                  (  (reg8 *) CYREG_PM_ACT_CFG1 )
N
N/* Active Power Mode Configuration Register 2 */
N#define CY_PM_ACT_CFG2_REG                  (* (reg8 *) CYREG_PM_ACT_CFG2 )
N#define CY_PM_ACT_CFG2_PTR                  (  (reg8 *) CYREG_PM_ACT_CFG2 )
N
N/* Boost Control 1 */
N#define CY_PM_BOOST_CR1_REG                 (* (reg8 *) CYREG_BOOST_CR1 )
N#define CY_PM_BOOST_CR1_PTR                 (  (reg8 *) CYREG_BOOST_CR1 )
N
N/* Timewheel Configuration Register 0 */
N#define CY_PM_TW_CFG0_REG                   (* (reg8 *) CYREG_PM_TW_CFG0 )
N#define CY_PM_TW_CFG0_PTR                   (  (reg8 *) CYREG_PM_TW_CFG0 )
N
N/* Timewheel Configuration Register 1 */
N#define CY_PM_TW_CFG1_REG                   (* (reg8 *) CYREG_PM_TW_CFG1 )
N#define CY_PM_TW_CFG1_PTR                   (  (reg8 *) CYREG_PM_TW_CFG1 )
N
N/* Timewheel Configuration Register 2 */
N#define CY_PM_TW_CFG2_REG                   (* (reg8 *) CYREG_PM_TW_CFG2 )
N#define CY_PM_TW_CFG2_PTR                   (  (reg8 *) CYREG_PM_TW_CFG2 )
N
N/* PLL Status Register */
N#define CY_PM_FASTCLK_PLL_SR_REG            (*(reg8 *) CYREG_FASTCLK_PLL_SR )
N#define CY_PM_FASTCLK_PLL_SR_PTR            ( (reg8 *) CYREG_FASTCLK_PLL_SR )
N
N/* Internal Main Oscillator Control Register */
N#define CY_PM_FASTCLK_IMO_CR_REG            (* (reg8 *) CYREG_FASTCLK_IMO_CR )
N#define CY_PM_FASTCLK_IMO_CR_PTR            (  (reg8 *) CYREG_FASTCLK_IMO_CR )
N
N/* PLL Configuration Register */
N#define CY_PM_FASTCLK_PLL_CFG0_REG          (* (reg8 *) CYREG_FASTCLK_PLL_CFG0 )
N#define CY_PM_FASTCLK_PLL_CFG0_PTR          (  (reg8 *) CYREG_FASTCLK_PLL_CFG0 )
N
N/* External 4-33 MHz Crystal Oscillator Status and Control Register */
N#define CY_PM_FASTCLK_XMHZ_CSR_REG          (* (reg8 *) CYREG_FASTCLK_XMHZ_CSR )
N#define CY_PM_FASTCLK_XMHZ_CSR_PTR          (  (reg8 *) CYREG_FASTCLK_XMHZ_CSR )
N
N/* Delay block Configuration Register */
N#define CY_PM_CLKDIST_DELAY_REG             (* (reg8 *) CYREG_CLKDIST_DLY1 )
N#define CY_PM_CLKDIST_DELAY_PTR             (  (reg8 *) CYREG_CLKDIST_DLY1 )
N
N
N#if(CY_PSOC3)
X#if((3u == 1u))
S
S    /* Cache Control Register */
S    #define CY_PM_CACHE_CR_REG              (* (reg8 *) CYREG_CACHE_CR )
S    #define CY_PM_CACHE_CR_PTR              (  (reg8 *) CYREG_CACHE_CR )
S
N#else   /* Device is PSoC 5 */
N
N    /* Cache Control Register */
N    #define CY_PM_CACHE_CR_REG              (* (reg8 *) CYREG_CACHE_CC_CTL )
N    #define CY_PM_CACHE_CR_PTR              (  (reg8 *) CYREG_CACHE_CC_CTL )
N
N#endif  /* (CY_PSOC3) */
N
N
N/* Power Mode Wakeup Mask Configuration Register 0 */
N#define CY_PM_WAKEUP_CFG0_REG           (* (reg8 *) CYREG_PM_WAKEUP_CFG0 )
N#define CY_PM_WAKEUP_CFG0_PTR           (  (reg8 *) CYREG_PM_WAKEUP_CFG0 )
N
N/* Power Mode Wakeup Mask Configuration Register 1 */
N#define CY_PM_WAKEUP_CFG1_REG           (* (reg8 *) CYREG_PM_WAKEUP_CFG1 )
N#define CY_PM_WAKEUP_CFG1_PTR           (  (reg8 *) CYREG_PM_WAKEUP_CFG1 )
N
N/* Power Mode Wakeup Mask Configuration Register 2 */
N#define CY_PM_WAKEUP_CFG2_REG           (* (reg8 *) CYREG_PM_WAKEUP_CFG2 )
N#define CY_PM_WAKEUP_CFG2_PTR           (  (reg8 *) CYREG_PM_WAKEUP_CFG2 )
N
N/* Boost Control 2 */
N#define CY_PM_BOOST_CR2_REG           (* (reg8 *) CYREG_BOOST_CR2 )
N#define CY_PM_BOOST_CR2_PTR           (  (reg8 *) CYREG_BOOST_CR2 )
N
N#if(CY_PSOC3)
X#if((3u == 1u))
S
S    /* Interrrupt Controller Configuration and Status Register */
S    #define CY_PM_INTC_CSR_EN_REG           (* (reg8 *) CYREG_INTC_CSR_EN )
S    #define CY_PM_INTC_CSR_EN_PTR           (  (reg8 *) CYREG_INTC_CSR_EN )
S
N#endif  /* (CY_PSOC3) */
N
N
N/***************************************
N* Register Constants
N***************************************/
N
N/* Internal Main Oscillator Control Register */
N
N#define CY_PM_FASTCLK_IMO_CR_FREQ_MASK  (0x07u)    /* IMO frequency mask    */
N#define CY_PM_FASTCLK_IMO_CR_FREQ_12MHZ (0x00u)    /* IMO frequency 12 MHz  */
N#define CY_PM_FASTCLK_IMO_CR_F2XON      (0x10u)    /* IMO doubler enable    */
N#define CY_PM_FASTCLK_IMO_CR_USB        (0x40u)    /* IMO is in USB mode    */
N
N#define CY_PM_MASTER_CLK_SRC_IMO        (0u)
N#define CY_PM_MASTER_CLK_SRC_PLL        (1u)
N#define CY_PM_MASTER_CLK_SRC_XTAL       (2u)
N#define CY_PM_MASTER_CLK_SRC_DSI        (3u)
N#define CY_PM_MASTER_CLK_SRC_MASK       (3u)
N
N#define CY_PM_PLL_CFG0_ENABLE           (0x01u)     /* PLL enable             */
N#define CY_PM_PLL_STATUS_LOCK           (0x01u)     /* PLL Lock Status        */
N#define CY_PM_XMHZ_CSR_ENABLE           (0x01u)     /* Enable X MHz OSC       */
N#define CY_PM_XMHZ_CSR_XERR             (0x80u)     /* High indicates failure */
N#define CY_PM_BOOST_ENABLE              (0x08u)     /* Boost enable           */
N#define CY_PM_ILO_CR0_EN_1K             (0x02u)     /* Enable 1kHz ILO        */
N#define CY_PM_ILO_CR0_EN_100K           (0x04u)     /* Enable 100kHz ILO      */
N#define CY_PM_ILO_CR0_PD_MODE           (0x10u)     /* Power down mode for ILO*/
N#define CY_PM_X32_CR_X32EN              (0x01u)     /* Enable 32kHz OSC       */
N
N#define CY_PM_CTW_IE                    (0x08u)     /* CTW interrupt enable   */
N#define CY_PM_CTW_EN                    (0x04u)     /* CTW enable             */
N#define CY_PM_FTW_IE                    (0x02u)     /* FTW interrupt enable   */
N#define CY_PM_FTW_EN                    (0x01u)     /* FTW enable             */
N#define CY_PM_1PPS_EN                   (0x10u)     /* 1PPS enable            */
N#define CY_PM_1PPS_IE                   (0x20u)     /* 1PPS interrupt enable  */
N
N
N#define CY_PM_ACT_EN_CLK_A_MASK         (0x0Fu)
N#define CY_PM_ACT_EN_CLK_D_MASK         (0xFFu)
N
N#define CY_PM_DIV_BY_ONE                (0x00u)
N
N/* Internal Main Oscillator Control Register */
N#define CY_PM_FASTCLK_IMO_CR_XCLKEN     (0x20u)
N
N/* Clock distribution configuration Register */
N#define CY_PM_CLKDIST_IMO_OUT_MASK      (0x30u)
N#define CY_PM_CLKDIST_IMO_OUT_IMO       (0x00u)
N#define CY_PM_CLKDIST_IMO2X_SRC         (0x40u)
N
N#define CY_PM_CLKDIST_PLL_SRC_MASK      (0x03u)
N#define CY_PM_CLKDIST_PLL_SRC_IMO       (0x00u)
N#define CY_PM_CLKDIST_PLL_SRC_XTAL      (0x01u)
N#define CY_PM_CLKDIST_PLL_SRC_DSI       (0x02u)
N
N/* Waiting for hibernate/sleep regulator to stabilize */
N#define CY_PM_MODE_CSR_PWRUP_PULSE_Q    (0x08u)
N
N#define CY_PM_MODE_CSR_ACTIVE           (0x00u)     /* Active power mode      */
N#define CY_PM_MODE_CSR_ALT_ACT          (0x01u)     /* Alternate Active power */
N#define CY_PM_MODE_CSR_SLEEP            (0x03u)     /* Sleep power mode       */
N#define CY_PM_MODE_CSR_HIBERNATE        (0x04u)     /* Hibernate power mode   */
N#define CY_PM_MODE_CSR_MASK             (0x07u)
N
N/* I2C regulator backup enable */
N#define CY_PM_PWRSYS_CR1_I2CREG_BACKUP  (0x04u)
N
N/* When set, prepares system to disable LDO-A */
N#define CY_PM_PWRSYS_CR1_LDOA_ISO       (0x01u)
N
N/* When set, disables analog LDO regulator */
N#define CY_PM_PWRSYS_CR1_LDOA_DIS       (0x02u)
N
N#define CY_PM_PWRSYS_WAKE_TR2_VCCD_CLK_DET  (0x04u)
N
N#define CY_PM_FTW_INT                   (0x01u)     /* FTW event has occured  */
N#define CY_PM_CTW_INT                   (0x02u)     /* CTW event has occured  */
N#define CY_PM_ONEPPS_INT                (0x04u)     /* 1PPS event has occured */
N
N/* Active Power Mode Configuration Register 0 */
N#define CY_PM_ACT_CFG0_IMO              (0x10u)     /* IMO enable in Active */
N
N/* Cache Control Register (same mask for all device revisions) */
N#define CY_PM_CACHE_CR_CYCLES_MASK      (0xC0u)
N
N/* Bus Clock divider to divide-by-one */
N#define CY_PM_BUS_CLK_DIV_BY_ONE        (0x00u)
N
N/* HVI/LVI feature on external analog and digital supply mask */
N#define CY_PM_RESET_CR1_HVI_LVI_EN_MASK (0x07u)
N
N/* High-voltage-interrupt feature on external analog supply */
N#define CY_PM_RESET_CR1_HVIA_EN         (0x04u)
N
N/* Low-voltage-interrupt feature on external analog supply */
N#define CY_PM_RESET_CR1_LVIA_EN         (0x02u)
N
N/* Low-voltage-interrupt feature on external digital supply */
N#define CY_PM_RESET_CR1_LVID_EN         (0x01u)
N
N/* Allows system to program delays on clk_sync_d */
N#define CY_PM_CLKDIST_DELAY_EN          (0x04u)
N
N
N#define CY_PM_WAKEUP_SRC_CMPS_MASK      (0x000Fu)
N
N/* Holdoff mask sleep trim */
N#define CY_PM_PWRSYS_SLP_TR_HIBSLP_HOLDOFF_MASK     (0x1Fu)
N
N#if(CY_PSOC3)
X#if((3u == 1u))
S
S    /* CPU clock divider mask */
S    #define CY_PM_CLKDIST_CPU_DIV_MASK          (0xF0u)
S
S    /* Serial Wire View (SWV) clock enable */
S    #define CY_PM_MLOGIC_DBG_SWV_CLK_EN         (0x04u)
S
S    /* Port drive mode */
S    #define CY_PM_PRT1_PC3_DM_MASK              (0xf1u)
S
S    /* Mode 6, stong pull-up, strong pull-down */
S    #define CY_PM_PRT1_PC3_DM_STRONG            (0x0Cu)
S
S    /* When set, enables buzz wakeups */
S    #define CY_PM_PWRSYS_WAKE_TR2_EN_BUZZ       (0x01u)
S
N#endif  /* (CY_PSOC3) */
N
N
N/* Disables sleep regulator and shorts vccd to vpwrsleep */
N#define CY_PM_PWRSYS_SLP_TR_BYPASS          (0x10u)
N
N/* Boost Control 2: Select external precision reference */
N#define CY_PM_BOOST_CR2_EREFSEL_EXT     (0x08u)
N
N#if(CY_PSOC3)
X#if((3u == 1u))
S
S    #define CY_PM_PWRSYS_WAKE_TR0       (0xFFu)
S    #define CY_PM_PWRSYS_WAKE_TR1       (0x90u)
S
N#endif  /* (CY_PSOC3) */
N
N#if(CY_PSOC5)
X#if((3u == 3u))
N
N    #define CY_PM_PWRSYS_WAKE_TR0       (0xFFu)
N    #define CY_PM_PWRSYS_WAKE_TR1       (0xB0u)
N    #define CY_PM_PWRSYS_WAKE_TR3       (0xFFu)
N
N#endif  /* (CY_PSOC5) */
N
N#if(CY_PSOC3)
X#if((3u == 1u))
S
S    /* Interrrupt Controller Configuration and Status Register */
S    #define CY_PM_INTC_CSR_EN_CLK       (0x01u)
S
N#endif  /* (CY_PSOC3) */
N
N
N/*******************************************************************************
N* Lock Status Flag. If lock is acquired this flag will stay set (regardless of
N* whether lock is subsequently lost) until it is read. Upon reading it will
N* clear. If lock is still true then the bit will simply set again. If lock
N* happens to be false when the clear on read occurs then the bit will stay
N* cleared until the next lock event.
N*******************************************************************************/
N#define CY_PM_FASTCLK_PLL_LOCKED       (0x01u)
N
N
N/*******************************************************************************
N* The following code is OBSOLETE and must not be used starting with cy_boot 3.30
N*
N* If the obsoleted macro definitions intended for use in the application use the
N* following scheme, redefine your own versions of these definitions:
N*    #ifdef <OBSOLETED_DEFINE>
N*        #undef  <OBSOLETED_DEFINE>
N*        #define <OBSOLETED_DEFINE>      (<New Value>)
N*    #endif
N*
N* Note: Redefine obsoleted macro definitions with caution. They might still be
N*       used in the application and their modification might lead to unexpected
N*       consequences.
N*******************************************************************************/
N#if(CY_PSOC3)
X#if((3u == 1u))
S
S    /* Was removed as redundant */
S    #define CY_PM_FTW_INTERVAL_MASK    (0xFFu)
S
N#endif  /* (CY_PSOC3) */
N
N/* Was removed as redundant */
N#define CY_PM_CTW_INTERVAL_MASK         (0x0Fu)
N
N#endif  /* (CY_BOOT_CYPM_H) */
N
N
N/* [] END OF FILE */
L 30 "Generated_Source\PSoC5\CyLib.h" 2
N
N#if(CY_PSOC3)
X#if((3u == 1u))
S    #include <PSoC3_8051.h>
N#endif  /* (CY_PSOC3) */
N
N
N#if(CYDEV_VARIABLE_VDDA == 1)
X#if(0 == 1)
S
S    #include "CyScBoostClk.h"
S
N#endif  /* (CYDEV_VARIABLE_VDDA == 1) */
N
N
N/* Global variable with preserved reset status */
Nextern uint8 CYXDATA CyResetStatus;
Xextern uint8  CyResetStatus;
N
N
N/* Variable Vdda */
N#if(CYDEV_VARIABLE_VDDA == 1)
X#if(0 == 1)
S
S    extern uint8 CyScPumpEnabled;
S
N#endif  /* (CYDEV_VARIABLE_VDDA == 1) */
N
N
N/* Do not use these definitions directly in your application */
Nextern uint32 cydelay_freq_hz;
Nextern uint32 cydelay_freq_khz;
Nextern uint8  cydelay_freq_mhz;
Nextern uint32 cydelay_32k_ms;
N
N
N/***************************************
N*    Function Prototypes
N***************************************/
Ncystatus CyPLL_OUT_Start(uint8 wait) ;
Nvoid  CyPLL_OUT_Stop(void) ;
Nvoid  CyPLL_OUT_SetPQ(uint8 pDiv, uint8 qDiv, uint8 current) ;
Nvoid  CyPLL_OUT_SetSource(uint8 source) ;
N
Nvoid  CyIMO_Start(uint8 wait) ;
Nvoid  CyIMO_Stop(void) ;
Nvoid  CyIMO_SetFreq(uint8 freq) ;
Nvoid  CyIMO_SetSource(uint8 source) ;
Nvoid  CyIMO_EnableDoubler(void) ;
Nvoid  CyIMO_DisableDoubler(void) ;
N
Nvoid  CyMasterClk_SetSource(uint8 source) ;
Nvoid  CyMasterClk_SetDivider(uint8 divider) ;
Nvoid  CyBusClk_SetDivider(uint16 divider) ;
N
N#if(CY_PSOC3)
X#if((3u == 1u))
S    void  CyCpuClk_SetDivider(uint8 divider) ;
N#endif  /* (CY_PSOC3) */
N
Nvoid  CyUsbClk_SetSource(uint8 source) ;
N
Nvoid  CyILO_Start1K(void) ;
Nvoid  CyILO_Stop1K(void) ;
Nvoid  CyILO_Start100K(void) ;
Nvoid  CyILO_Stop100K(void) ;
Nvoid  CyILO_Enable33K(void) ;
Nvoid  CyILO_Disable33K(void) ;
Nvoid  CyILO_SetSource(uint8 source) ;
Nuint8 CyILO_SetPowerMode(uint8 mode) ;
N
Nuint8 CyXTAL_32KHZ_ReadStatus(void) ;
Nuint8 CyXTAL_32KHZ_SetPowerMode(uint8 mode) ;
Nvoid  CyXTAL_32KHZ_Start(void) ;
Nvoid  CyXTAL_32KHZ_Stop(void) ;
N
Ncystatus CyXTAL_Start(uint8 wait) ;
Nvoid  CyXTAL_Stop(void) ;
Nvoid  CyXTAL_SetStartup(uint8 setting) ;
N
Nvoid  CyXTAL_EnableErrStatus(void) ;
Nvoid  CyXTAL_DisableErrStatus(void) ;
Nuint8 CyXTAL_ReadStatus(void) ;
Nvoid  CyXTAL_EnableFaultRecovery(void) ;
Nvoid  CyXTAL_DisableFaultRecovery(void) ;
N
Nvoid CyXTAL_SetFbVoltage(uint8 setting) ;
Nvoid CyXTAL_SetWdVoltage(uint8 setting) ;
N
Nvoid CyWdtStart(uint8 ticks, uint8 lpMode) ;
Nvoid CyWdtClear(void) ;
N
N/* System Function Prototypes */
Nvoid CyDelay(uint32 milliseconds) CYREENTRANT;
Xvoid CyDelay(uint32 milliseconds) ;
Nvoid CyDelayUs(uint16 microseconds);
Nvoid CyDelayFreq(uint32 freq) CYREENTRANT;
Xvoid CyDelayFreq(uint32 freq) ;
Nvoid CyDelayCycles(uint32 cycles);
N
Nvoid CySoftwareReset(void) ;
N
Nuint8 CyEnterCriticalSection(void);
Nvoid CyExitCriticalSection(uint8 savedIntrStatus);
Nvoid CyHalt(uint8 reason) CYREENTRANT;
Xvoid CyHalt(uint8 reason) ;
N
N
N/* Interrupt Function Prototypes */
N#if(CY_PSOC5)
X#if((3u == 3u))
N    cyisraddress CyIntSetSysVector(uint8 number, cyisraddress address)  ;
N    cyisraddress CyIntGetSysVector(uint8 number) ;
N#endif  /* (CY_PSOC5) */
N
Ncyisraddress CyIntSetVector(uint8 number, cyisraddress address) ;
Ncyisraddress CyIntGetVector(uint8 number) ;
N
Nvoid  CyIntSetPriority(uint8 number, uint8 priority) ;
Nuint8 CyIntGetPriority(uint8 number) ;
N
Nuint8 CyIntGetState(uint8 number) ;
N
Nuint32 CyDisableInts(void) ;
Nvoid CyEnableInts(uint32 mask) ;
N
N
N#if(CY_PSOC5)
X#if((3u == 3u))
N    void CyFlushCache(void);
N#endif  /* (CY_PSOC5) */
N
N
N/* Voltage Detection Function Prototypes */
Nvoid CyVdLvDigitEnable(uint8 reset, uint8 threshold) ;
Nvoid CyVdLvAnalogEnable(uint8 reset, uint8 threshold) ;
Nvoid CyVdLvDigitDisable(void) ;
Nvoid CyVdLvAnalogDisable(void) ;
Nvoid CyVdHvAnalogEnable(void) ;
Nvoid CyVdHvAnalogDisable(void) ;
Nuint8 CyVdStickyStatus(uint8 mask) ;
Nuint8 CyVdRealTimeStatus(void) ;
N
Nvoid CySetScPumps(uint8 enable) ;
N
N#if(CY_PSOC5)
X#if((3u == 3u))
N    /* Default interrupt handler */
N    CY_ISR_PROTO(IntDefaultHandler);
X    void IntDefaultHandler (void);
N#endif  /* (CY_PSOC5) */
N
N#if(CY_PSOC5)
X#if((3u == 3u))
N    /** System tick timer APIs */
N    typedef void (*cySysTickCallback)(void);
N
N    void CySysTickStart(void);
N    void CySysTickInit(void);
N    void CySysTickEnable(void);
N    void CySysTickStop(void);
N    void CySysTickEnableInterrupt(void);
N    void CySysTickDisableInterrupt(void);
N    void CySysTickSetReload(uint32 value);
N    uint32 CySysTickGetReload(void);
N    uint32 CySysTickGetValue(void);
N    cySysTickCallback CySysTickSetCallback(uint32 number, cySysTickCallback function);
N    cySysTickCallback CySysTickGetCallback(uint32 number);
N    void CySysTickSetClockSource(uint32 clockSource);
N    uint32 CySysTickGetCountFlag(void);
N    void CySysTickClear(void);
N#endif  /* (CY_PSOC5) */
N
Nvoid CyGetUniqueId(uint32* uniqueId);
N
N
N/***************************************
N* API Constants
N***************************************/
N
N
N/*******************************************************************************
N* PLL API Constants
N*******************************************************************************/
N#define CY_CLK_PLL_ENABLE               (0x01u)
N#define CY_CLK_PLL_LOCK_STATUS          (0x01u)
N
N#define CY_CLK_PLL_FTW_INTERVAL         (24u)
N
N#define CY_CLK_PLL_MAX_Q_VALUE          (16u)
N#define CY_CLK_PLL_MIN_Q_VALUE          (1u)
N#define CY_CLK_PLL_MIN_P_VALUE          (8u)
N#define CY_CLK_PLL_MIN_CUR_VALUE        (1u)
N#define CY_CLK_PLL_MAX_CUR_VALUE        (7u)
N
N#define CY_CLK_PLL_CURRENT_POSITION     (4u)
N#define CY_CLK_PLL_CURRENT_MASK         (0x8Fu)
N
N
N/*******************************************************************************
N* External 32kHz Crystal Oscillator API Constants
N*******************************************************************************/
N#define CY_XTAL32K_ANA_STAT             (0x20u)
N
N#define CY_CLK_XTAL32_CR_LPM            (0x02u)
N#define CY_CLK_XTAL32_CR_EN             (0x01u)
N#if(CY_PSOC3)
X#if((3u == 1u))
S    #define CY_CLK_XTAL32_CR_PDBEN      (0x04u)
N#endif  /* (CY_PSOC3) */
N
N#define CY_CLK_XTAL32_TR_MASK           (0x07u)
N#define CY_CLK_XTAL32_TR_STARTUP        (0x03u)
N#define CY_CLK_XTAL32_TR_HIGH_POWER     (0x06u)
N#define CY_CLK_XTAL32_TR_LOW_POWER      (0x01u)
N#define CY_CLK_XTAL32_TR_POWERDOWN      (0x00u)
N
N#define CY_CLK_XTAL32_TST_DEFAULT       (0xF3u)
N
N#define CY_CLK_XTAL32_CFG_LP_DEFAULT    (0x04u)
N#define CY_CLK_XTAL32_CFG_LP_LOWPOWER   (0x08u)
N#define CY_CLK_XTAL32_CFG_LP_MASK       (0x0Cu)
N
N#define CY_CLK_XTAL32_CFG_LP_ALLOW      (0x80u)
N
N
N/*******************************************************************************
N* External MHz Crystal Oscillator API Constants
N*******************************************************************************/
N#define CY_CLK_XMHZ_FTW_INTERVAL        (24u)
N#define CY_CLK_XMHZ_MIN_TIMEOUT         (130u)
N
N#define CY_CLK_XMHZ_CSR_ENABLE          (0x01u)
N#define CY_CLK_XMHZ_CSR_XERR            (0x80u)
N#define CY_CLK_XMHZ_CSR_XFB             (0x04u)
N#define CY_CLK_XMHZ_CSR_XPROT           (0x40u)
N
N#define CY_CLK_XMHZ_CFG0_XCFG_MASK      (0x1Fu)
N#define CY_CLK_XMHZ_CFG1_VREF_FB_MASK   (0x0Fu)
N#define CY_CLK_XMHZ_CFG1_VREF_WD_MASK   (0x70u)
N
N
N/*******************************************************************************
N* Watchdog Timer API Constants
N*******************************************************************************/
N#define CYWDT_2_TICKS               (0x0u)     /*    4 -    6 ms */
N#define CYWDT_16_TICKS              (0x1u)     /*   32 -   48 ms */
N#define CYWDT_128_TICKS             (0x2u)     /*  256 -  384 ms */
N#define CYWDT_1024_TICKS            (0x3u)     /* 2048 - 3072 ms */
N
N#define CYWDT_LPMODE_NOCHANGE       (0x00u)
N#define CYWDT_LPMODE_MAXINTER       (0x01u)
N#define CYWDT_LPMODE_DISABLED       (0x03u)
N
N#define CY_WDT_CFG_INTERVAL_MASK    (0x03u)
N#define CY_WDT_CFG_CTW_RESET        (0x80u)
N#define CY_WDT_CFG_LPMODE_SHIFT     (5u)
N#define CY_WDT_CFG_LPMODE_MASK      (0x60u)
N#define CY_WDT_CFG_WDR_EN           (0x10u)
N#define CY_WDT_CFG_CLEAR_ALL        (0x00u)
N#define CY_WDT_CR_FEED              (0x01u)
N
N
N/*******************************************************************************
N*    Voltage Detection API Constants
N*******************************************************************************/
N
N#define CY_VD_LVID_EN                (0x01u)
N#define CY_VD_LVIA_EN                (0x02u)
N#define CY_VD_HVIA_EN                (0x04u)
N
N#define CY_VD_PRESD_EN               (0x40u)
N#define CY_VD_PRESA_EN               (0x80u)
N
N#define CY_VD_LVID                   (0x01u)
N#define CY_VD_LVIA                   (0x02u)
N#define CY_VD_HVIA                   (0x04u)
N
N#define CY_VD_LVI_TRIP_LVID_MASK     (0x0Fu)
N#define CY_VD_INT_MASK               ((uint32) (0x01u))
N
N
N/*******************************************************************************
N*    Variable VDDA API Constants
N*******************************************************************************/
N#if(CYDEV_VARIABLE_VDDA == 1)
X#if(0 == 1)
S
S    /* Active Power Mode Configuration Register 9 */
S    #define CY_LIB_ACT_CFG9_SWCAP0_EN        (0x01u)
S    #define CY_LIB_ACT_CFG9_SWCAP1_EN        (0x02u)
S    #define CY_LIB_ACT_CFG9_SWCAP2_EN        (0x04u)
S    #define CY_LIB_ACT_CFG9_SWCAP3_EN        (0x08u)
S    #define CY_LIB_ACT_CFG9_SWCAPS_MASK      (0x0Fu)
S
S    /* Switched Cap Miscellaneous Control Register */
S    #define CY_LIB_SC_MISC_PUMP_FORCE        (0x20u)
S
S    /* Switched Capacitor 0 Boost Clock Selection Register */
S    #define CY_LIB_SC_BST_CLK_EN             (0x08u)
S    #define CY_LIB_SC_BST_CLK_INDEX_MASK     (0xF8u)
S
N#endif  /* (CYDEV_VARIABLE_VDDA == 1) */
N
N
N/*******************************************************************************
N* Clock Distribution API Constants
N*******************************************************************************/
N#define CY_LIB_CLKDIST_AMASK_MASK       (0xF0u)
N#define CY_LIB_CLKDIST_DMASK_MASK       (0x00u)
N#define CY_LIB_CLKDIST_LD_LOAD          (0x01u)
N#define CY_LIB_CLKDIST_BCFG2_MASK       (0x80u)
N#define CY_LIB_CLKDIST_MASTERCLK_DIV    (7u)
N#define CY_LIB_CLKDIST_BCFG2_SSS        (0x40u)
N#define CY_LIB_CLKDIST_MSTR1_SRC_MASK   (0xFCu)
N#define CY_LIB_FASTCLK_IMO_DOUBLER      (0x10u)
N#define CY_LIB_FASTCLK_IMO_IMO          (0x20u)
N#define CY_LIB_CLKDIST_CR_IMO2X         (0x40u)
N#define CY_LIB_FASTCLK_IMO_CR_RANGE_MASK (0xF8u)
N
N#define CY_LIB_CLKDIST_CR_PLL_SCR_MASK  (0xFCu)
N
N
N/* CyILO_SetPowerMode() */
N#define CY_ILO_CONTROL_PD_MODE          (0x10u)
N#define CY_ILO_CONTROL_PD_POSITION      (4u)
N
N#define CY_ILO_SOURCE_100K              (0u)
N#define CY_ILO_SOURCE_33K               (1u)
N#define CY_ILO_SOURCE_1K                (2u)
N
N#define CY_ILO_FAST_START               (0u)
N#define CY_ILO_SLOW_START               (1u)
N
N#define CY_ILO_SOURCE_BITS_CLEAR        (0xF3u)
N#define CY_ILO_SOURCE_1K_SET            (0x08u)
N#define CY_ILO_SOURCE_33K_SET           (0x04u)
N#define CY_ILO_SOURCE_100K_SET          (0x00u)
N
N#define CY_MASTER_SOURCE_IMO            (0u)
N#define CY_MASTER_SOURCE_PLL            (1u)
N#define CY_MASTER_SOURCE_XTAL           (2u)
N#define CY_MASTER_SOURCE_DSI            (3u)
N
N#define CY_IMO_SOURCE_IMO               (0u)
N#define CY_IMO_SOURCE_XTAL              (1u)
N#define CY_IMO_SOURCE_DSI               (2u)
N
N
N/* CyIMO_Start() */
N#define CY_LIB_PM_ACT_CFG0_IMO_EN       (0x10u)
N#define CY_LIB_PM_STBY_CFG0_IMO_EN      (0x10u)
N#define CY_LIB_CLK_IMO_FTW_TIMEOUT      (0x00u)
N
N#define CY_LIB_IMO_3MHZ_VALUE           (0x03u)
N#define CY_LIB_IMO_6MHZ_VALUE           (0x01u)
N#define CY_LIB_IMO_12MHZ_VALUE          (0x00u)
N#define CY_LIB_IMO_24MHZ_VALUE          (0x02u)
N#define CY_LIB_IMO_48MHZ_VALUE          (0x04u)
N#define CY_LIB_IMO_62MHZ_VALUE          (0x05u)
N#define CY_LIB_IMO_74MHZ_VALUE          (0x06u)
N
N
N/* CyIMO_SetFreq() */
N#define CY_IMO_FREQ_3MHZ                (0u)
N#define CY_IMO_FREQ_6MHZ                (1u)
N#define CY_IMO_FREQ_12MHZ               (2u)
N#define CY_IMO_FREQ_24MHZ               (3u)
N#define CY_IMO_FREQ_48MHZ               (4u)
N#define CY_IMO_FREQ_62MHZ               (5u)
N#if(CY_PSOC5)
X#if((3u == 3u))
N    #define CY_IMO_FREQ_74MHZ           (6u)
N#endif  /* (CY_PSOC5) */
N#define CY_IMO_FREQ_USB                 (8u)
N
N#define CY_LIB_IMO_USBCLK_ON_SET        (0x40u)
N
N
N/* CyCpuClk_SetDivider() */
N#define CY_LIB_CLKDIST_DIV_POSITION     (4u)
N#define CY_LIB_CLKDIST_MSTR1_DIV_MASK   (0x0Fu)
N
N
N/* CyIMO_SetTrimValue() */
N#define CY_LIB_USB_CLK_EN               (0x02u)
N
N
N/* CyPLL_OUT_SetSource() - parameters */
N#define CY_PLL_SOURCE_IMO               (0u)
N#define CY_PLL_SOURCE_XTAL              (1u)
N#define CY_PLL_SOURCE_DSI               (2u)
N
N
N/* CyILO_[Start|Stop][1|100K](), CyILO_[Enable|Disable]33K() */
N#define CY_LIB_SLOWCLK_ILO_CR0_EN_1KHZ   (0x02u)
N#define CY_LIB_SLOWCLK_ILO_CR0_EN_33KHZ  (0x20u)
N#define CY_LIB_SLOWCLK_ILO_CR0_EN_100KHZ (0x04u)
N
N
N/* CyUsbClk_SetSource() */
N#define CY_LIB_CLKDIST_UCFG_SRC_SEL_MASK (0x03u)
N
N
N/* CyUsbClk_SetSource() - parameters */
N#define CY_LIB_USB_CLK_IMO2X            (0x00u)
N#define CY_LIB_USB_CLK_IMO              (0x01u)
N#define CY_LIB_USB_CLK_PLL              (0x02u)
N#define CY_LIB_USB_CLK_DSI              (0x03u)
N
N
N/* CyUSB_PowerOnCheck() */
N#define CY_ACT_USB_ENABLED              (0x01u)
N#define CY_ALT_ACT_USB_ENABLED          (0x01u)
N
N
N#if(CY_PSOC5)
X#if((3u == 3u))
N
N    /***************************************************************************
N    * Instruction Synchronization Barrier flushes the pipeline in the processor,
N    * so that all instructions following the ISB are fetched from cache or
N    * memory, after the instruction has been completed.
N    ***************************************************************************/
N
N    #if defined(__ARMCC_VERSION)
X    #if 1L
N        #define CY_SYS_ISB       __isb(0x0f)
N    #else   /* ASM for GCC & IAR */
S        #define CY_SYS_ISB       __asm volatile ("isb \n")
N    #endif /* (__ARMCC_VERSION) */
N
N#endif /* (CY_PSOC5) */
N
N
N/***************************************
N* Registers
N***************************************/
N
N
N/*******************************************************************************
N* System Registers
N*******************************************************************************/
N
N/* Software Reset Control Register */
N#define CY_LIB_RESET_CR2_REG         (* (reg8 *) CYREG_RESET_CR2)
N#define CY_LIB_RESET_CR2_PTR         (  (reg8 *) CYREG_RESET_CR2)
N
N/* Timewheel Configuration Register 0 */
N#define CY_LIB_PM_TW_CFG0_REG           (*(reg8 *) CYREG_PM_TW_CFG0)
N#define CY_LIB_PM_TW_CFG0_PTR           ( (reg8 *) CYREG_PM_TW_CFG0)
N
N/* Timewheel Configuration Register 2 */
N#define CY_LIB_PM_TW_CFG2_REG           (*(reg8 *) CYREG_PM_TW_CFG2)
N#define CY_LIB_PM_TW_CFG2_PTR           ( (reg8 *) CYREG_PM_TW_CFG2)
N
N/* USB Configuration Register */
N#define CY_LIB_CLKDIST_UCFG_REG         (*(reg8 *) CYREG_CLKDIST_UCFG)
N#define CY_LIB_CLKDIST_UCFG_PTR         ( (reg8 *) CYREG_CLKDIST_UCFG)
N
N/* Internal Main Oscillator Trim Register 1 */
N#define CY_LIB_IMO_TR1_REG              (*(reg8 *) CYREG_IMO_TR1)
N#define CY_LIB_IMO_TR1_PTR              ( (reg8 *) CYREG_IMO_TR1)
N
N/* USB control 1 Register */
N#define CY_LIB_USB_CR1_REG              (*(reg8 *) CYREG_USB_CR1 )
N#define CY_LIB_USB_CR1_PTR              ( (reg8 *) CYREG_USB_CR1 )
N
N/* Active Power Mode Configuration Register 0 */
N#define CY_LIB_PM_ACT_CFG0_REG          (*(reg8 *) CYREG_PM_ACT_CFG0)
N#define CY_LIB_PM_ACT_CFG0_PTR          ( (reg8 *) CYREG_PM_ACT_CFG0)
N
N/* Standby Power Mode Configuration Register 0 */
N#define CY_LIB_PM_STBY_CFG0_REG          (*(reg8 *) CYREG_PM_STBY_CFG0)
N#define CY_LIB_PM_STBY_CFG0_PTR          ( (reg8 *) CYREG_PM_STBY_CFG0)
N
N/* Active Power Mode Configuration Register 5 */
N#define CY_LIB_PM_ACT_CFG5_REG              (* (reg8 *) CYREG_PM_ACT_CFG5 )
N#define CY_LIB_PM_ACT_CFG5_PTR              (  (reg8 *) CYREG_PM_ACT_CFG5 )
N
N/* Standby Power Mode Configuration Register 5 */
N#define CY_LIB_PM_STBY_CFG5_REG             (* (reg8 *) CYREG_PM_STBY_CFG5 )
N#define CY_LIB_PM_STBY_CFG5_PTR             (  (reg8 *) CYREG_PM_STBY_CFG5 )
N
N/* CyIMO_SetTrimValue() */
N#if(CY_PSOC3)
X#if((3u == 1u))
S    #define CY_LIB_TRIM_IMO_3MHZ_PTR         ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_3MHZ)
S    #define CY_LIB_TRIM_IMO_6MHZ_PTR         ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_6MHZ)
S    #define CY_LIB_TRIM_IMO_12MHZ_PTR        ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_12MHZ)
S    #define CY_LIB_TRIM_IMO_24MHZ_PTR        ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_24MHZ)
S    #define CY_LIB_TRIM_IMO_67MHZ_PTR        ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_67MHZ)
S    #define CY_LIB_TRIM_IMO_80MHZ_PTR        ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_80MHZ)
S    #define CY_LIB_TRIM_IMO_USB_PTR          ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_USB)
S    #define CY_LIB_TRIM_IMO_TR1_PTR          ((void far *) (CYREG_FLSHID_MFG_CFG_IMO_TR1 + 1u))
N #else
N    #define CY_LIB_TRIM_IMO_3MHZ_PTR         ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_3MHZ)
N    #define CY_LIB_TRIM_IMO_6MHZ_PTR         ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_6MHZ)
N    #define CY_LIB_TRIM_IMO_12MHZ_PTR        ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_12MHZ)
N    #define CY_LIB_TRIM_IMO_24MHZ_PTR        ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_24MHZ)
N    #define CY_LIB_TRIM_IMO_67MHZ_PTR        ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_67MHZ)
N    #define CY_LIB_TRIM_IMO_80MHZ_PTR        ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_80MHZ)
N    #define CY_LIB_TRIM_IMO_USB_PTR          ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_USB)
N    #define CY_LIB_TRIM_IMO_TR1_PTR          ((reg8 *) (CYREG_FLSHID_MFG_CFG_IMO_TR1 + 1u))
N#endif  /* (CY_PSOC3) */
N
N
N/*******************************************************************************
N* PLL Registers
N*******************************************************************************/
N
N/* PLL Configuration Register 0 */
N#define CY_CLK_PLL_CFG0_REG         (*(reg8 *) CYREG_FASTCLK_PLL_CFG0)
N#define CY_CLK_PLL_CFG0_PTR         ( (reg8 *) CYREG_FASTCLK_PLL_CFG0)
N
N/* PLL Configuration Register 1 */
N#define CY_CLK_PLL_CFG1_REG         (*(reg8 *) CYREG_FASTCLK_PLL_CFG1)
N#define CY_CLK_PLL_CFG1_PTR         ( (reg8 *) CYREG_FASTCLK_PLL_CFG1)
N
N/* PLL Status Register */
N#define CY_CLK_PLL_SR_REG           (*(reg8 *) CYREG_FASTCLK_PLL_SR)
N#define CY_CLK_PLL_SR_PTR           ( (reg8 *) CYREG_FASTCLK_PLL_SR)
N
N/* PLL Q-Counter Configuration Register */
N#define CY_CLK_PLL_Q_REG            (*(reg8 *) CYREG_FASTCLK_PLL_Q)
N#define CY_CLK_PLL_Q_PTR            ( (reg8 *) CYREG_FASTCLK_PLL_Q)
N
N/* PLL P-Counter Configuration Register */
N#define CY_CLK_PLL_P_REG            (*(reg8 *) CYREG_FASTCLK_PLL_P)
N#define CY_CLK_PLL_P_PTR            ( (reg8 *) CYREG_FASTCLK_PLL_P)
N
N
N/*******************************************************************************
N* External MHz Crystal Oscillator Registers
N*******************************************************************************/
N
N/* External MHz Crystal Oscillator Status and Control Register */
N#define CY_CLK_XMHZ_CSR_REG         (*(reg8 *) CYREG_FASTCLK_XMHZ_CSR)
N#define CY_CLK_XMHZ_CSR_PTR         ( (reg8 *) CYREG_FASTCLK_XMHZ_CSR)
N
N/* External MHz Crystal Oscillator Configuration Register 0 */
N#define CY_CLK_XMHZ_CFG0_REG        (*(reg8 *) CYREG_FASTCLK_XMHZ_CFG0)
N#define CY_CLK_XMHZ_CFG0_PTR        ( (reg8 *) CYREG_FASTCLK_XMHZ_CFG0)
N
N/* External MHz Crystal Oscillator Configuration Register 1 */
N#define CY_CLK_XMHZ_CFG1_REG        (*(reg8 *) CYREG_FASTCLK_XMHZ_CFG1)
N#define CY_CLK_XMHZ_CFG1_PTR        ( (reg8 *) CYREG_FASTCLK_XMHZ_CFG1)
N
N
N/*******************************************************************************
N* External 32kHz Crystal Oscillator Registers
N*******************************************************************************/
N
N/* 32 kHz Watch Crystal Oscillator Trim Register */
N#define CY_CLK_XTAL32_TR_REG        (*(reg8 *) CYREG_X32_TR)
N#define CY_CLK_XTAL32_TR_PTR        ( (reg8 *) CYREG_X32_TR)
N
N/* External 32kHz Crystal Oscillator Test Register */
N#define CY_CLK_XTAL32_TST_REG       (*(reg8 *) CYREG_SLOWCLK_X32_TST)
N#define CY_CLK_XTAL32_TST_PTR       ( (reg8 *) CYREG_SLOWCLK_X32_TST)
N
N/* External 32kHz Crystal Oscillator Control Register */
N#define CY_CLK_XTAL32_CR_REG        (*(reg8 *) CYREG_SLOWCLK_X32_CR)
N#define CY_CLK_XTAL32_CR_PTR        ( (reg8 *) CYREG_SLOWCLK_X32_CR)
N
N/* External 32kHz Crystal Oscillator Configuration Register */
N#define CY_CLK_XTAL32_CFG_REG       (*(reg8 *) CYREG_SLOWCLK_X32_CFG)
N#define CY_CLK_XTAL32_CFG_PTR       ( (reg8 *) CYREG_SLOWCLK_X32_CFG)
N
N
N/*******************************************************************************
N* Watchdog Timer Registers
N*******************************************************************************/
N
N/* Watchdog Timer Configuration Register */
N#define CY_WDT_CFG_REG              (*(reg8 *) CYREG_PM_WDT_CFG)
N#define CY_WDT_CFG_PTR              ( (reg8 *) CYREG_PM_WDT_CFG)
N
N/* Watchdog Timer Control Register */
N#define CY_WDT_CR_REG               (*(reg8 *) CYREG_PM_WDT_CR)
N#define CY_WDT_CR_PTR               ( (reg8 *) CYREG_PM_WDT_CR)
N
N
N/*******************************************************************************
N*    LVI/HVI Registers
N*******************************************************************************/
N
N#define CY_VD_LVI_TRIP_REG          (* (reg8 *) CYREG_RESET_CR0)
N#define CY_VD_LVI_TRIP_PTR          (  (reg8 *) CYREG_RESET_CR0)
N
N#define CY_VD_LVI_HVI_CONTROL_REG   (* (reg8 *) CYREG_RESET_CR1)
N#define CY_VD_LVI_HVI_CONTROL_PTR   (  (reg8 *) CYREG_RESET_CR1)
N
N#define CY_VD_PRES_CONTROL_REG      (* (reg8 *) CYREG_RESET_CR3)
N#define CY_VD_PRES_CONTROL_PTR      (  (reg8 *) CYREG_RESET_CR3)
N
N#define CY_VD_PERSISTENT_STATUS_REG (* (reg8 *) CYREG_RESET_SR0)
N#define CY_VD_PERSISTENT_STATUS_PTR (  (reg8 *) CYREG_RESET_SR0)
N
N#define CY_VD_RT_STATUS_REG         (* (reg8 *) CYREG_RESET_SR2)
N#define CY_VD_RT_STATUS_PTR         (  (reg8 *) CYREG_RESET_SR2)
N
N
N/*******************************************************************************
N*    Variable VDDA
N*******************************************************************************/
N#if(CYDEV_VARIABLE_VDDA == 1)
X#if(0 == 1)
S
S    /* Active Power Mode Configuration Register 9 */
S    #define CY_LIB_ACT_CFG9_REG            (* (reg8 *) CYREG_PM_ACT_CFG9 )
S    #define CY_LIB_ACT_CFG9_PTR            (  (reg8 *) CYREG_PM_ACT_CFG9 )
S
S    /* Switched Capacitor 0 Boost Clock Selection Register */
S    #define CY_LIB_SC0_BST_REG             (* (reg8 *) CYREG_SC0_BST )
S    #define CY_LIB_SC0_BST_PTR             (  (reg8 *) CYREG_SC0_BST )
S
S    /* Switched Capacitor 1 Boost Clock Selection Register */
S    #define CY_LIB_SC1_BST_REG             (* (reg8 *) CYREG_SC1_BST )
S    #define CY_LIB_SC1_BST_PTR             (  (reg8 *) CYREG_SC1_BST )
S
S    /* Switched Capacitor 2 Boost Clock Selection Register */
S    #define CY_LIB_SC2_BST_REG             (* (reg8 *) CYREG_SC2_BST )
S    #define CY_LIB_SC2_BST_PTR             (  (reg8 *) CYREG_SC2_BST )
S
S    /* Switched Capacitor 3 Boost Clock Selection Register */
S    #define CY_LIB_SC3_BST_REG             (* (reg8 *) CYREG_SC3_BST )
S    #define CY_LIB_SC3_BST_PTR             (  (reg8 *) CYREG_SC3_BST )
S
S    /* Switched Cap Miscellaneous Control Register */
S    #define CY_LIB_SC_MISC_REG             (* (reg8 *) CYREG_SC_MISC )
S    #define CY_LIB_SC_MISC_PTR             (  (reg8 *) CYREG_SC_MISC )
S
N#endif  /* (CYDEV_VARIABLE_VDDA == 1) */
N
N
N/*******************************************************************************
N*    Clock Distribution Registers
N*******************************************************************************/
N
N/* Analog Clock Mask Register */
N#define CY_LIB_CLKDIST_AMASK_REG       (* (reg8 *) CYREG_CLKDIST_AMASK )
N#define CY_LIB_CLKDIST_AMASK_PTR       (  (reg8 *) CYREG_CLKDIST_AMASK )
N
N/* Digital Clock Mask Register */
N#define CY_LIB_CLKDIST_DMASK_REG        (*(reg8 *) CYREG_CLKDIST_DMASK)
N#define CY_LIB_CLKDIST_DMASK_PTR        ( (reg8 *) CYREG_CLKDIST_DMASK)
N
N/* CLK_BUS Configuration Register */
N#define CY_LIB_CLKDIST_BCFG2_REG        (*(reg8 *) CYREG_CLKDIST_BCFG2)
N#define CY_LIB_CLKDIST_BCFG2_PTR        ( (reg8 *) CYREG_CLKDIST_BCFG2)
N
N/* LSB Shadow Divider Value Register */
N#define CY_LIB_CLKDIST_WRK_LSB_REG      (*(reg8 *) CYREG_CLKDIST_WRK0)
N#define CY_LIB_CLKDIST_WRK_LSB_PTR      ( (reg8 *) CYREG_CLKDIST_WRK0)
N
N/* MSB Shadow Divider Value Register */
N#define CY_LIB_CLKDIST_WRK_MSB_REG      (*(reg8 *) CYREG_CLKDIST_WRK1)
N#define CY_LIB_CLKDIST_WRK_MSB_PTR      ( (reg8 *) CYREG_CLKDIST_WRK1)
N
N/* LOAD Register */
N#define CY_LIB_CLKDIST_LD_REG           (*(reg8 *) CYREG_CLKDIST_LD)
N#define CY_LIB_CLKDIST_LD_PTR           ( (reg8 *) CYREG_CLKDIST_LD)
N
N/* CLK_BUS LSB Divider Value Register */
N#define CY_LIB_CLKDIST_BCFG_LSB_REG     (*(reg8 *) CYREG_CLKDIST_BCFG0)
N#define CY_LIB_CLKDIST_BCFG_LSB_PTR     ( (reg8 *) CYREG_CLKDIST_BCFG0)
N
N/* CLK_BUS MSB Divider Value Register */
N#define CY_LIB_CLKDIST_BCFG_MSB_REG     (*(reg8 *) CYREG_CLKDIST_BCFG1)
N#define CY_LIB_CLKDIST_BCFG_MSB_PTR     ( (reg8 *) CYREG_CLKDIST_BCFG1)
N
N/* Master clock (clk_sync_d) Divider Value Register */
N#define CY_LIB_CLKDIST_MSTR0_REG        (*(reg8 *) CYREG_CLKDIST_MSTR0)
N#define CY_LIB_CLKDIST_MSTR0_PTR        ( (reg8 *) CYREG_CLKDIST_MSTR0)
N
N/* Master (clk_sync_d) Configuration Register/CPU Divider Value */
N#define CY_LIB_CLKDIST_MSTR1_REG        (*(reg8 *) CYREG_CLKDIST_MSTR1)
N#define CY_LIB_CLKDIST_MSTR1_PTR        ( (reg8 *) CYREG_CLKDIST_MSTR1)
N
N/* Internal Main Oscillator Control Register */
N#define CY_LIB_FASTCLK_IMO_CR_REG       (*(reg8 *) CYREG_FASTCLK_IMO_CR)
N#define CY_LIB_FASTCLK_IMO_CR_PTR       ( (reg8 *) CYREG_FASTCLK_IMO_CR)
N
N/* Configuration Register CR */
N#define CY_LIB_CLKDIST_CR_REG           (*(reg8 *) CYREG_CLKDIST_CR)
N#define CY_LIB_CLKDIST_CR_PTR           ( (reg8 *) CYREG_CLKDIST_CR)
N
N/* Internal Low-speed Oscillator Control Register 0 */
N#define CY_LIB_SLOWCLK_ILO_CR0_REG      (*(reg8 *) CYREG_SLOWCLK_ILO_CR0)
N#define CY_LIB_SLOWCLK_ILO_CR0_PTR      ( (reg8 *) CYREG_SLOWCLK_ILO_CR0)
N
N
N/*******************************************************************************
N* Interrupt Registers
N*******************************************************************************/
N
N#if(CY_PSOC5)
X#if((3u == 3u))
N
N    /* Interrupt Vector Table Offset */
N    #define CY_INT_VECT_TABLE           ((cyisraddress **) CYREG_NVIC_VECT_OFFSET)
N
N    /* Interrupt Priority 0-31 */
N    #define CY_INT_PRIORITY_REG         (* (reg8 *) CYREG_NVIC_PRI_0)
N    #define CY_INT_PRIORITY_PTR         (  (reg8 *) CYREG_NVIC_PRI_0)
N
N    /* Interrupt Enable Set 0-31 */
N    #define CY_INT_ENABLE_REG           (* (reg32 *) CYREG_NVIC_SETENA0)
N    #define CY_INT_ENABLE_PTR           (  (reg32 *) CYREG_NVIC_SETENA0)
N
N    /* Interrupt Enable Clear 0-31 */
N    #define CY_INT_CLEAR_REG            (* (reg32 *) CYREG_NVIC_CLRENA0)
N    #define CY_INT_CLEAR_PTR            (  (reg32 *) CYREG_NVIC_CLRENA0)
N
N    /* Interrupt Pending Set 0-31 */
N    #define CY_INT_SET_PEND_REG         (* (reg32 *) CYREG_NVIC_SETPEND0)
N    #define CY_INT_SET_PEND_PTR         (  (reg32 *) CYREG_NVIC_SETPEND0)
N
N    /* Interrupt Pending Clear 0-31 */
N    #define CY_INT_CLR_PEND_REG         (* (reg32 *) CYREG_NVIC_CLRPEND0)
N    #define CY_INT_CLR_PEND_PTR         (  (reg32 *) CYREG_NVIC_CLRPEND0)
N
N    /* Cache Control Register */
N    #define CY_CACHE_CONTROL_REG        (* (reg16 *) CYREG_CACHE_CC_CTL )
N    #define CY_CACHE_CONTROL_PTR        (  (reg16 *) CYREG_CACHE_CC_CTL )
N
N    /* System tick registers */
N    #define CY_SYS_SYST_CSR_REG         (*(reg32 *) CYREG_NVIC_SYSTICK_CTL)
N    #define CY_SYS_SYST_CSR_PTR         ( (reg32 *) CYREG_NVIC_SYSTICK_CTL)
N
N    #define CY_SYS_SYST_RVR_REG         (*(reg32 *) CYREG_NVIC_SYSTICK_RELOAD)
N    #define CY_SYS_SYST_RVR_PTR         ( (reg32 *) CYREG_NVIC_SYSTICK_RELOAD)
N
N    #define CY_SYS_SYST_CVR_REG         (*(reg32 *) CYREG_NVIC_SYSTICK_CURRENT)
N    #define CY_SYS_SYST_CVR_PTR         ( (reg32 *) CYREG_NVIC_SYSTICK_CURRENT)
N
N    #define CY_SYS_SYST_CALIB_REG       (*(reg32 *) CYREG_NVIC_SYSTICK_CAL)
N    #define CY_SYS_SYST_CALIB_PTR       ( (reg32 *) CYREG_NVIC_SYSTICK_CAL)
N
N#elif (CY_PSOC3)
S
S    /* Interrupt Address Vector registers */
S    #define CY_INT_VECT_TABLE           ((cyisraddress CYXDATA *) CYREG_INTC_VECT_MBASE)
S
S    /* Interrupt Controller Priority Registers */
S    #define CY_INT_PRIORITY_REG         (* (reg8 *) CYREG_INTC_PRIOR0)
S    #define CY_INT_PRIORITY_PTR         (  (reg8 *) CYREG_INTC_PRIOR0)
S
S    /* Interrupt Controller Set Enable Registers */
S    #define CY_INT_ENABLE_REG           (* (reg8 *) CYREG_INTC_SET_EN0)
S    #define CY_INT_ENABLE_PTR           (  (reg8 *) CYREG_INTC_SET_EN0)
S
S    #define CY_INT_SET_EN0_REG          (* (reg8 *) CYREG_INTC_SET_EN0)
S    #define CY_INT_SET_EN0_PTR          (  (reg8 *) CYREG_INTC_SET_EN0)
S
S    #define CY_INT_SET_EN1_REG          (* (reg8 *) CYREG_INTC_SET_EN1)
S    #define CY_INT_SET_EN1_PTR          (  (reg8 *) CYREG_INTC_SET_EN1)
S
S    #define CY_INT_SET_EN2_REG          (* (reg8 *) CYREG_INTC_SET_EN2)
S    #define CY_INT_SET_EN2_PTR          (  (reg8 *) CYREG_INTC_SET_EN2)
S
S    #define CY_INT_SET_EN3_REG          (* (reg8 *) CYREG_INTC_SET_EN3)
S    #define CY_INT_SET_EN3_PTR          (  (reg8 *) CYREG_INTC_SET_EN3)
S
S    /* Interrupt Controller Clear Enable Registers */
S    #define CY_INT_CLEAR_REG            (* (reg8 *) CYREG_INTC_CLR_EN0)
S    #define CY_INT_CLEAR_PTR            (  (reg8 *) CYREG_INTC_CLR_EN0)
S
S    #define CY_INT_CLR_EN0_REG          (* (reg8 *) CYREG_INTC_CLR_EN0)
S    #define CY_INT_CLR_EN0_PTR          (  (reg8 *) CYREG_INTC_CLR_EN0)
S
S    #define CY_INT_CLR_EN1_REG          (* (reg8 *) CYREG_INTC_CLR_EN1)
S    #define CY_INT_CLR_EN1_PTR          (  (reg8 *) CYREG_INTC_CLR_EN1)
S
S    #define CY_INT_CLR_EN2_REG          (* (reg8 *) CYREG_INTC_CLR_EN2)
S    #define CY_INT_CLR_EN2_PTR          (  (reg8 *) CYREG_INTC_CLR_EN2)
S
S    #define CY_INT_CLR_EN3_REG          (* (reg8 *) CYREG_INTC_CLR_EN3)
S    #define CY_INT_CLR_EN3_PTR          (  (reg8 *) CYREG_INTC_CLR_EN3)
S
S
S    /* Interrupt Controller Set Pend Registers */
S    #define CY_INT_SET_PEND_REG         (* (reg8 *) CYREG_INTC_SET_PD0)
S    #define CY_INT_SET_PEND_PTR         (  (reg8 *) CYREG_INTC_SET_PD0)
S
S    /* Interrupt Controller Clear Pend Registers */
S    #define CY_INT_CLR_PEND_REG         (* (reg8 *) CYREG_INTC_CLR_PD0)
S    #define CY_INT_CLR_PEND_PTR         (  (reg8 *) CYREG_INTC_CLR_PD0)
S
S
S    /* Access Interrupt Controller Registers based on interrupt number */
S    #define CY_INT_SET_EN_INDX_PTR(number)    ((reg8 *) (CYREG_INTC_SET_EN0 + (((number) & CY_INT_NUMBER_MASK) >> 3u)))
S    #define CY_INT_CLR_EN_INDX_PTR(number)    ((reg8 *) (CYREG_INTC_CLR_EN0 + (((number) & CY_INT_NUMBER_MASK) >> 3u)))
S    #define CY_INT_CLR_PEND_INDX_PTR(number)  ((reg8 *) (CYREG_INTC_CLR_PD0 + (((number) & CY_INT_NUMBER_MASK) >> 3u)))
S    #define CY_INT_SET_PEND_INDX_PTR(number)  ((reg8 *) (CYREG_INTC_SET_PD0 + (((number) & CY_INT_NUMBER_MASK) >> 3u)))
S
N#endif  /* (CY_PSOC5) */
N
N
N/*******************************************************************************
N* Macro Name: CyAssert
N****************************************************************************//**
N*  The macro that evaluates the expression and if it is false (evaluates to 0)
N*  then the processor is halted.
N*
N*  This macro is evaluated unless NDEBUG is defined.
N*
N*  If NDEBUG is defined, then no code is generated for this macro. NDEBUG is
N*  defined by default for a Release build setting and not defined for a Debug
N*  build setting.
N*
N*  \param expr: Logical expression.  Asserts if false.
N*
N*******************************************************************************/
N#if !defined(NDEBUG)
X#if !0L
N    #define CYASSERT(x)     { \
N                                if(!(x)) \
N                                { \
N                                    CyHalt((uint8) 0u); \
N                                } \
N                            }
X    #define CYASSERT(x)     {                                 if(!(x))                                 {                                     CyHalt((uint8) 0u);                                 }                             }
N#else
S    #define CYASSERT(x)
N#endif /* !defined(NDEBUG) */
N
N
N/* Reset register fields of RESET_SR0 (CyResetStatus) */
N#define CY_RESET_LVID               (0x01u)
N#define CY_RESET_LVIA               (0x02u)
N#define CY_RESET_HVIA               (0x04u)
N#define CY_RESET_WD                 (0x08u)
N#define CY_RESET_SW                 (0x20u)
N#define CY_RESET_GPIO0              (0x40u)
N#define CY_RESET_GPIO1              (0x80u)
N
N
N/* Interrupt Controller Configuration and Status Register */
N#if(CY_PSOC3)
X#if((3u == 1u))
S    #define INTERRUPT_CSR               ((reg8 *) CYREG_INTC_CSR_EN)
S    #define DISABLE_IRQ_SET             ((uint8)(0x01u << 1u))    /* INTC_CSR_EN */
S    #define INTERRUPT_DISABLE_IRQ       {*INTERRUPT_CSR |= DISABLE_IRQ_SET;}
S    #define INTERRUPT_ENABLE_IRQ        {*INTERRUPT_CSR = (uint8)(~DISABLE_IRQ_SET);}
N#endif  /* (CY_PSOC3) */
N
N
N#if defined(__ARMCC_VERSION)
X#if 1L
N    #define CyGlobalIntEnable           {__enable_irq();}
N    #define CyGlobalIntDisable          {__disable_irq();}
N#elif defined(__GNUC__) || defined (__ICCARM__)
S    #define CyGlobalIntEnable           {__asm("CPSIE   i");}
S    #define CyGlobalIntDisable          {__asm("CPSID   i");}
S#elif defined(__C51__)
S    #define CyGlobalIntEnable           {\
S                                            EA = 1u; \
S                                            INTERRUPT_ENABLE_IRQ\
S                                        }
X    #define CyGlobalIntEnable           {                                            EA = 1u;                                             INTERRUPT_ENABLE_IRQ                                        }
S
S    #define CyGlobalIntDisable          {\
S                                            INTERRUPT_DISABLE_IRQ; \
S                                            CY_NOP; \
S                                            EA = 0u;\
S                                        }
X    #define CyGlobalIntDisable          {                                            INTERRUPT_DISABLE_IRQ;                                             CY_NOP;                                             EA = 0u;                                        }
S#else
S    #error No compiler toolchain defined
S    #define CyGlobalIntEnable
S    #define CyGlobalIntDisable
N#endif  /* (__ARMCC_VERSION) */
N
N
N#ifdef CYREG_MLOGIC_CPU_SCR_CPU_SCR
N    #define CYDEV_HALT_CPU      CY_SET_REG8(CYREG_MLOGIC_CPU_SCR_CPU_SCR, 0x01u)
N#else
S    #define CYDEV_HALT_CPU      CY_SET_REG8(CYREG_MLOGIC_CPU_SCR, 0x01u)
N#endif  /* (CYREG_MLOGIC_CPU_SCR_CPU_SCR) */
N
N
N#ifdef CYREG_MLOGIC_REV_ID_REV_ID
S    #define CYDEV_CHIP_REV_ACTUAL       (CY_GET_REG8(CYREG_MLOGIC_REV_ID_REV_ID))
N#else
N    #define CYDEV_CHIP_REV_ACTUAL       (CY_GET_REG8(CYREG_MLOGIC_REV_ID))
N#endif  /* (CYREG_MLOGIC_REV_ID_REV_ID) */
N
N
N/*******************************************************************************
N* System API constants
N*******************************************************************************/
N#define CY_CACHE_CONTROL_FLUSH          (0x0004u)
N#define CY_LIB_RESET_CR2_RESET          (0x01u)
N
N#if(CY_PSOC5)
X#if((3u == 3u))
N    /* System tick API constants */
N    #define CY_SYS_SYST_CSR_ENABLE              ((uint32) (0x01u))
N    #define CY_SYS_SYST_CSR_ENABLE_INT          ((uint32) (0x02u))
N    #define CY_SYS_SYST_CSR_CLK_SOURCE_SHIFT    ((uint32) (0x02u))
N    #define CY_SYS_SYST_CSR_COUNTFLAG_SHIFT     ((uint32) (16u))
N    #define CY_SYS_SYST_CSR_CLK_SRC_SYSCLK      ((uint32) (1u))
N    #define CY_SYS_SYST_CSR_CLK_SRC_LFCLK       ((uint32) (0u))
N    #define CY_SYS_SYST_RVR_CNT_MASK            ((uint32) (0x00FFFFFFu))
N	#define CY_SYS_SYST_CVR_CNT_MASK            ((uint32) (0x00FFFFFFu))
N    #define CY_SYS_SYST_NUM_OF_CALLBACKS        ((uint32) (5u))
N#endif /* (CY_PSOC5) */
N
N
N
N/*******************************************************************************
N* Interrupt API constants
N*******************************************************************************/
N#if(CY_PSOC5)
X#if((3u == 3u))
N
N    #define CY_INT_IRQ_BASE             (16u)
N
N#elif (CY_PSOC3)
S
S    #define CY_INT_IRQ_BASE             (0u)
S
N#endif  /* (CY_PSOC5) */
N
N/* Valid range of interrupt 0-31 */
N#define CY_INT_NUMBER_MAX               (31u)
N
N/* Valid range of system interrupt 0-15 */
N#define CY_INT_SYS_NUMBER_MAX           (15u)
N
N/* Valid range of system priority 0-7 */
N#define CY_INT_PRIORITY_MAX             (7u)
N
N/* Mask to get valid range of interrupt 0-31 */
N#define CY_INT_NUMBER_MASK              (0x1Fu)
N
N/* Mask to get valid range of system priority 0-7 */
N#define CY_INT_PRIORITY_MASK            (0x7u)
N
N/* Mask to get valid range of system interrupt 0-15 */
N#define CY_INT_SYS_NUMBER_MASK          (0xFu)
N
N#if(CY_PSOC5)
X#if((3u == 3u))
N
N    /* CyIntSetSysVector()/CyIntGetSysVector() - parameter definitions */
N    #define CY_INT_NMI_IRQN                  ( 2u)      /* Non Maskable Interrupt      */
N    #define CY_INT_HARD_FAULT_IRQN           ( 3u)      /* Hard Fault Interrupt        */
N    #define CY_INT_MEM_MANAGE_IRQN           ( 4u)      /* Memory Management Interrupt */
N    #define CY_INT_BUS_FAULT_IRQN            ( 5u)      /* Bus Fault Interrupt         */
N    #define CY_INT_USAGE_FAULT_IRQN          ( 6u)      /* Usage Fault Interrupt       */
N    #define CY_INT_SVCALL_IRQN               (11u)      /* SV Call Interrupt           */
N    #define CY_INT_DEBUG_MONITOR_IRQN        (12u)      /* Debug Monitor Interrupt     */
N    #define CY_INT_PEND_SV_IRQN              (14u)      /* Pend SV Interrupt           */
N    #define CY_INT_SYSTICK_IRQN              (15u)      /* System Tick Interrupt       */
N
N#endif  /* (CY_PSOC5) */
N
N/*******************************************************************************
N* Interrupt Macros
N*******************************************************************************/
N
N#if(CY_PSOC5)
X#if((3u == 3u))
N
N    /*******************************************************************************
N    * Macro Name: CyIntEnable
N    ****************************************************************************//**
N    *
N    *  Enables the specified interrupt number.
N    *
N    *  \param number: Valid range [0-31].  Interrupt number
N    *
N    *******************************************************************************/
N    #define CyIntEnable(number)     CY_SET_REG32(CY_INT_ENABLE_PTR, ((uint32)((uint32)1u << (0x1Fu & (number)))))
N
N    /*******************************************************************************
N    * Macro Name: CyIntDisable
N    ****************************************************************************//**
N    *
N    *  Disables the specified interrupt number.
N    *
N    *  \param number: Valid range [0-31].  Interrupt number.
N    *
N    *******************************************************************************/
N    #define CyIntDisable(number)     CY_SET_REG32(CY_INT_CLEAR_PTR, ((uint32)((uint32)1u << (0x1Fu & (number)))))
N
N
N    /*******************************************************************************
N    * Macro Name: CyIntSetPending
N    ****************************************************************************//**
N    *
N    *   Forces the specified interrupt number to be pending.
N    *
N    *   \param number: Valid range [0-31].  Interrupt number.
N    *
N    *******************************************************************************/
N    #define CyIntSetPending(number)     CY_SET_REG32(CY_INT_SET_PEND_PTR, ((uint32)((uint32)1u << (0x1Fu & (number)))))
N
N
N    /*******************************************************************************
N    * Macro Name: CyIntClearPending
N    ****************************************************************************//**
N    *
N    *   Clears any pending interrupt for the specified interrupt number.
N    *
N    *   \param number: Valid range [0-31].  Interrupt number.
N    *
N    *******************************************************************************/
N    #define CyIntClearPending(number)   CY_SET_REG32(CY_INT_CLR_PEND_PTR, ((uint32)((uint32)1u << (0x1Fu & (number)))))
N
N
N#else   /* PSoC3 */
S
S
S    /*******************************************************************************
S    * Macro Name: CyIntEnable
S    ****************************************************************************//**
S    *
S    *  Enables the specified interrupt number.
S    *
S    *  \param number: Valid range [0-31].  Interrupt number
S    *
S    *******************************************************************************/
S    #define CyIntEnable(number)   CY_SET_REG8(CY_INT_SET_EN_INDX_PTR((number)), \
S                                          ((uint8)(1u << (0x07u & (number)))))
X    #define CyIntEnable(number)   CY_SET_REG8(CY_INT_SET_EN_INDX_PTR((number)),                                           ((uint8)(1u << (0x07u & (number)))))
S
S
S    /*******************************************************************************
S    * Macro Name: CyIntDisable
S    ****************************************************************************//**
S    *
S    *  Disables the specified interrupt number.
S    *
S    *  \param number: Valid range [0-31].  Interrupt number.
S    *
S    *******************************************************************************/
S    #define CyIntDisable(number)   CY_SET_REG8(CY_INT_CLR_EN_INDX_PTR((number)), \
S                                          ((uint8)(1u << (0x07u & (number)))))
X    #define CyIntDisable(number)   CY_SET_REG8(CY_INT_CLR_EN_INDX_PTR((number)),                                           ((uint8)(1u << (0x07u & (number)))))
S
S
S    /*******************************************************************************
S    * Macro Name: CyIntSetPending
S    ****************************************************************************//**
S    *
S    *  Forces the specified interrupt number to be pending.
S    *
S    *  \param number: Valid range [0-31].  Interrupt number.
S    *
S    *******************************************************************************/
S    #define CyIntSetPending(number)   CY_SET_REG8(CY_INT_SET_PEND_INDX_PTR((number)), \
S                                                  ((uint8)(1u << (0x07u & (number)))))
X    #define CyIntSetPending(number)   CY_SET_REG8(CY_INT_SET_PEND_INDX_PTR((number)),                                                   ((uint8)(1u << (0x07u & (number)))))
S
S
S    /*******************************************************************************
S    * Macro Name: CyIntClearPending
S    ****************************************************************************//**
S    *  Clears any pending interrupt for the specified interrupt number.
S    *
S    *  \param number: Valid range [0-31].  Interrupt number.
S    *
S    *******************************************************************************/
S    #define CyIntClearPending(number)   CY_SET_REG8(CY_INT_CLR_PEND_INDX_PTR((number)), \
S                                                    ((uint8)(1u << (0x07u & (number)))))
X    #define CyIntClearPending(number)   CY_SET_REG8(CY_INT_CLR_PEND_INDX_PTR((number)),                                                     ((uint8)(1u << (0x07u & (number)))))
S
N#endif  /* (CY_PSOC5) */
N
N
N/*******************************************************************************
N* The following code is OBSOLETE and must not be used.
N*
N* If the obsoleted macro definitions intended for use in the application use the
N* following scheme, redefine your own versions of these definitions:
N*    #ifdef <OBSOLETED_DEFINE>
N*        #undef  <OBSOLETED_DEFINE>
N*        #define <OBSOLETED_DEFINE>      (<New Value>)
N*    #endif
N*
N* Note: Redefine obsoleted macro definitions with caution. They might still be
N*       used in the application and their modification might lead to unexpected
N*       consequences.
N*******************************************************************************/
N
N#define CYGlobalIntEnable       CyGlobalIntEnable
N#define CYGlobalIntDisable      CyGlobalIntDisable
N
N#define cymemset(s,c,n)         memset((s),(c),(n))
N#define cymemcpy(d,s,n)         memcpy((d),(s),(n))
N
N#define MFGCFG_X32_TR_PTR               (CY_CLK_XTAL32_TR_PTR)
N#define MFGCFG_X32_TR                   (CY_CLK_XTAL32_TR_REG)
N#define SLOWCLK_X32_TST_PTR             (CY_CLK_XTAL32_TST_PTR)
N#define SLOWCLK_X32_TST                 (CY_CLK_XTAL32_TST_REG)
N#define SLOWCLK_X32_CR_PTR              (CY_CLK_XTAL32_CR_PTR)
N#define SLOWCLK_X32_CR                  (CY_CLK_XTAL32_CR_REG)
N#define SLOWCLK_X32_CFG_PTR             (CY_CLK_XTAL32_CFG_PTR)
N#define SLOWCLK_X32_CFG                 (CY_CLK_XTAL32_CFG_REG)
N
N#define X32_CONTROL_ANA_STAT            (CY_CLK_XTAL32_CR_ANA_STAT)
N#define X32_CONTROL_DIG_STAT            (0x10u)
N#define X32_CONTROL_LPM                 (CY_CLK_XTAL32_CR_LPM)
N#define X32_CONTROL_LPM_POSITION        (1u)
N#define X32_CONTROL_X32EN               (CY_CLK_XTAL32_CR_EN)
N#define X32_CONTROL_PDBEN           (CY_CLK_XTAL32_CR_PDBEN)
N#define X32_TR_DPMODE                   (CY_CLK_XTAL32_TR_STARTUP)
N#define X32_TR_CLEAR                    (CY_CLK_XTAL32_TR_POWERDOWN)
N#define X32_TR_HPMODE                   (CY_CLK_XTAL32_TR_HIGH_POWER)
N#define X32_TR_LPMODE                   (CY_CLK_XTAL32_TR_LOW_POWER)
N#define X32_TST_SETALL                  (CY_CLK_XTAL32_TST_DEFAULT)
N#define X32_CFG_LP_BITS_MASK            (CY_CLK_XTAL32_CFG_LP_MASK)
N#define X32_CFG_LP_DEFAULT              (CY_CLK_XTAL32_CFG_LP_DEFAULT)
N#define X32_CFG_LOWPOWERMODE            (0x80u)
N#define X32_CFG_LP_LOWPOWER             (0x8u)
N#define CY_X32_HIGHPOWER_MODE           (0u)
N#define CY_X32_LOWPOWER_MODE            (1u)
N#define CY_XTAL32K_DIG_STAT             (0x10u)
N#define CY_XTAL32K_STAT_FIELDS          (0x30u)
N#define CY_XTAL32K_DIG_STAT_UNSTABLE    (0u)
N#define CY_XTAL32K_ANA_STAT_UNSTABLE    (0x0u)
N#define CY_XTAL32K_STATUS               (0x20u)
N
N#define FASTCLK_XMHZ_CSR_PTR            (CY_CLK_XMHZ_CSR_PTR)
N#define FASTCLK_XMHZ_CSR                (CY_CLK_XMHZ_CSR_REG)
N#define FASTCLK_XMHZ_CFG0_PTR           (CY_CLK_XMHZ_CFG0_PTR)
N#define FASTCLK_XMHZ_CFG0               (CY_CLK_XMHZ_CFG0_REG)
N#define FASTCLK_XMHZ_CFG1_PTR           (CY_CLK_XMHZ_CFG1_PTR)
N#define FASTCLK_XMHZ_CFG1               (CY_CLK_XMHZ_CFG1_REG)
N#define FASTCLK_XMHZ_GAINMASK           (CY_CLK_XMHZ_CFG0_XCFG_MASK)
N#define FASTCLK_XMHZ_VREFMASK           (CY_CLK_XMHZ_CFG1_VREF_FB_MASK)
N#define FASTCLK_XMHZ_VREF_WD_MASK       (CY_CLK_XMHZ_CFG1_VREF_WD_MASK)
N#define XMHZ_CONTROL_ENABLE             (CY_CLK_XMHZ_CSR_ENABLE)
N#define X32_CONTROL_XERR_MASK           (CY_CLK_XMHZ_CSR_XERR)
N#define X32_CONTROL_XERR_DIS            (CY_CLK_XMHZ_CSR_XFB)
N#define X32_CONTROL_XERR_POSITION       (7u)
N#define X32_CONTROL_FAULT_RECOVER       (CY_CLK_XMHZ_CSR_XPROT)
N
N#define CYWDT_CFG                       (CY_WDT_CFG_PTR)
N#define CYWDT_CR                        (CY_WDT_CR_PTR)
N
N#define CYWDT_TICKS_MASK                (CY_WDT_CFG_INTERVAL_MASK)
N#define CYWDT_RESET                     (CY_WDT_CFG_CTW_RESET)
N#define CYWDT_LPMODE_SHIFT              (CY_WDT_CFG_LPMODE_SHIFT)
N#define CYWDT_LPMODE_MASK               (CY_WDT_CFG_LPMODE_MASK)
N#define CYWDT_ENABLE_BIT                (CY_WDT_CFG_WDR_EN)
N
N#define FASTCLK_PLL_CFG0_PTR            (CY_CLK_PLL_CFG0_PTR)
N#define FASTCLK_PLL_CFG0                (CY_CLK_PLL_CFG0_REG)
N#define FASTCLK_PLL_SR_PTR              (CY_CLK_PLL_SR_PTR)
N#define FASTCLK_PLL_SR                  (CY_CLK_PLL_SR_REG)
N
N#define MAX_FASTCLK_PLL_Q_VALUE         (CY_CLK_PLL_MAX_Q_VALUE)
N#define MIN_FASTCLK_PLL_Q_VALUE         (CY_CLK_PLL_MIN_Q_VALUE)
N#define MIN_FASTCLK_PLL_P_VALUE         (CY_CLK_PLL_MIN_P_VALUE)
N#define MIN_FASTCLK_PLL_CUR_VALUE       (CY_CLK_PLL_MIN_CUR_VALUE)
N#define MAX_FASTCLK_PLL_CUR_VALUE       (CY_CLK_PLL_MAX_CUR_VALUE)
N
N#define PLL_CONTROL_ENABLE              (CY_CLK_PLL_ENABLE)
N#define PLL_STATUS_LOCK                 (CY_CLK_PLL_LOCK_STATUS)
N#define PLL_STATUS_ENABLED              (CY_CLK_PLL_ENABLE)
N#define PLL_CURRENT_POSITION            (CY_CLK_PLL_CURRENT_POSITION)
N#define PLL_VCO_GAIN_2                  (2u)
N
N#define FASTCLK_PLL_Q_PTR              (CY_CLK_PLL_Q_PTR)
N#define FASTCLK_PLL_Q                  (CY_CLK_PLL_Q_REG)
N#define FASTCLK_PLL_P_PTR              (CY_CLK_PLL_P_PTR)
N#define FASTCLK_PLL_P                  (CY_CLK_PLL_P_REG)
N#define FASTCLK_PLL_CFG1_PTR           (CY_CLK_PLL_CFG1_REG)
N#define FASTCLK_PLL_CFG1               (CY_CLK_PLL_CFG1_REG)
N
N#define CY_VD_PRESISTENT_STATUS_REG    (CY_VD_PERSISTENT_STATUS_REG)
N#define CY_VD_PRESISTENT_STATUS_PTR    (CY_VD_PERSISTENT_STATUS_PTR)
N
N
N#if(CY_PSOC5)
X#if((3u == 3u))
N
N    #define CYINT_IRQ_BASE      (CY_INT_IRQ_BASE)
N
N    #define CYINT_VECT_TABLE    (CY_INT_VECT_TABLE)
N    #define CYINT_PRIORITY      (CY_INT_PRIORITY_PTR)
N    #define CYINT_ENABLE        (CY_INT_ENABLE_PTR)
N    #define CYINT_CLEAR         (CY_INT_CLEAR_PTR)
N    #define CYINT_SET_PEND      (CY_INT_SET_PEND_PTR)
N    #define CYINT_CLR_PEND      (CY_INT_CLR_PEND_PTR)
N    #define CACHE_CC_CTL        (CY_CACHE_CONTROL_PTR)
N
N#elif (CY_PSOC3)
S
S    #define CYINT_IRQ_BASE      (CY_INT_IRQ_BASE)
S
S    #define CYINT_VECT_TABLE    (CY_INT_VECT_TABLE)
S    #define CYINT_PRIORITY      (CY_INT_PRIORITY_PTR)
S    #define CYINT_ENABLE        (CY_INT_ENABLE_PTR)
S    #define CYINT_CLEAR         (CY_INT_CLEAR_PTR)
S    #define CYINT_SET_PEND      (CY_INT_SET_PEND_PTR)
S    #define CYINT_CLR_PEND      (CY_INT_CLR_PEND_PTR)
S
N#endif  /* (CY_PSOC5) */
N
N
N
N#define BUS_AMASK_CLEAR                 (0xF0u)
N#define BUS_DMASK_CLEAR                 (0x00u)
N#define CLKDIST_LD_LOAD_SET             (0x01u)
N#define CLKDIST_WRK0_MASK_SET           (0x80u) /* Enable shadow loads */
N#define MASTERCLK_DIVIDER_VALUE         (7u)
N#define CLKDIST_BCFG2_SSS_SET           (0x40u) /* Sync source is same frequency */
N#define MASTER_CLK_SRC_CLEAR            (0xFCu)
N#define IMO_DOUBLER_ENABLE              (0x10u)
N#define CLOCK_IMO_IMO                   (0x20u)
N#define CLOCK_IMO2X_XTAL                (0x40u)
N#define CLOCK_IMO_RANGE_CLEAR           (0xF8u)
N#define CLOCK_CONTROL_DIST_MASK         (0xFCu)
N
N
N#define CLKDIST_AMASK                  (*(reg8 *) CYREG_CLKDIST_AMASK)
N#define CLKDIST_AMASK_PTR              ( (reg8 *) CYREG_CLKDIST_AMASK)
N#define CLKDIST_DMASK_PTR              ( (reg8 *) CYREG_CLKDIST_DMASK)
N#define CLKDIST_DMASK                  (*(reg8 *) CYREG_CLKDIST_DMASK)
N#define CLKDIST_BCFG2_PTR              ( (reg8 *) CYREG_CLKDIST_BCFG2)
N#define CLKDIST_BCFG2                  (*(reg8 *) CYREG_CLKDIST_BCFG2)
N#define CLKDIST_WRK0_PTR               ( (reg8 *) CYREG_CLKDIST_WRK0)
N#define CLKDIST_WRK0                   (*(reg8 *) CYREG_CLKDIST_WRK0)
N#define CLKDIST_LD_PTR                 ( (reg8 *) CYREG_CLKDIST_LD)
N#define CLKDIST_LD                     (*(reg8 *) CYREG_CLKDIST_LD)
N#define CLKDIST_BCFG0_PTR              ( (reg8 *) CYREG_CLKDIST_BCFG0)
N#define CLKDIST_BCFG0                  (*(reg8 *) CYREG_CLKDIST_BCFG0)
N#define CLKDIST_MSTR0_PTR              ( (reg8 *) CYREG_CLKDIST_MSTR0)
N#define CLKDIST_MSTR0                  (*(reg8 *) CYREG_CLKDIST_MSTR0)
N#define FASTCLK_IMO_CR_PTR             ( (reg8 *) CYREG_FASTCLK_IMO_CR)
N#define FASTCLK_IMO_CR                 (*(reg8 *) CYREG_FASTCLK_IMO_CR)
N#define CLKDIST_CR_PTR                 ( (reg8 *) CYREG_CLKDIST_CR)
N#define CLKDIST_CR                     (*(reg8 *) CYREG_CLKDIST_CR)
N
N
N#define IMO_PM_ENABLE                   (0x10u)
N#define PM_ACT_CFG0_PTR                ( (reg8 *) CYREG_PM_ACT_CFG0)
N#define PM_ACT_CFG0                    (*(reg8 *) CYREG_PM_ACT_CFG0)
N#define SLOWCLK_ILO_CR0_PTR            ( (reg8 *) CYREG_SLOWCLK_ILO_CR0)
N#define SLOWCLK_ILO_CR0                (*(reg8 *) CYREG_SLOWCLK_ILO_CR0)
N#define ILO_CONTROL_PD_MODE             (0x10u)
N#define ILO_CONTROL_PD_POSITION         (4u)
N#define ILO_CONTROL_1KHZ_ON             (0x02u)
N#define ILO_CONTROL_100KHZ_ON           (0x04u)
N#define ILO_CONTROL_33KHZ_ON            (0x20u)
N#define PM_TW_CFG0_PTR                 ( (reg8 *) CYREG_PM_TW_CFG0)
N#define PM_TW_CFG0                     (*(reg8 *) CYREG_PM_TW_CFG0)
N#define PM_TW_CFG2_PTR                 ( (reg8 *) CYREG_PM_TW_CFG2)
N#define PM_TW_CFG2                     (*(reg8 *) CYREG_PM_TW_CFG2)
N#define RESET_CR2               ((reg8 *) CYREG_RESET_CR2)
N#define FASTCLK_IMO_USBCLK_ON_SET       (0x40u)
N#define CLOCK_IMO_3MHZ_VALUE            (0x03u)
N#define CLOCK_IMO_6MHZ_VALUE            (0x01u)
N#define CLOCK_IMO_12MHZ_VALUE           (0x00u)
N#define CLOCK_IMO_24MHZ_VALUE           (0x02u)
N#define CLOCK_IMO_48MHZ_VALUE           (0x04u)
N#define CLOCK_IMO_62MHZ_VALUE           (0x05u)
N#define CLOCK_IMO_74MHZ_VALUE           (0x06u)
N#define CLKDIST_DIV_POSITION            (4u)
N#define CLKDIST_MSTR1_DIV_CLEAR         (0x0Fu)
N#define SFR_USER_CPUCLK_DIV_MASK        (0x0Fu)
N#define CLOCK_USB_ENABLE                (0x02u)
N#define CLOCK_IMO_OUT_X2                (0x10u)
N#define CLOCK_IMO_OUT_X1                ((uint8)(~CLOCK_IMO_OUT_X2))
N#define CLOCK_IMO2X_ECO                 ((uint8)(~CLOCK_IMO2X_DSI))
N#define USB_CLKDIST_CONFIG_MASK         (0x03u)
N#define USB_CLK_IMO2X                   (0x00u)
N#define USB_CLK_IMO                     (0x01u)
N#define USB_CLK_PLL                     (0x02u)
N#define USB_CLK_DSI                     (0x03u)
N#define USB_CLK_DIV2_ON                 (0x04u)
N#define USB_CLK_STOP_FLAG               (0x00u)
N#define USB_CLK_START_FLAG              (0x01u)
N#define FTW_CLEAR_ALL_BITS              (0x00u)
N#define FTW_CLEAR_FTW_BITS              (0xFCu)
N#define FTW_ENABLE                      (0x01u)
N#define PM_STBY_CFG0_PTR               ( (reg8 *) CYREG_PM_STBY_CFG0)
N#define PM_STBY_CFG0                   (*(reg8 *) CYREG_PM_STBY_CFG0)
N#define PM_AVAIL_CR2_PTR               ( (reg8 *) CYREG_PM_AVAIL_CR2)
N#define PM_AVAIL_CR2                   (*(reg8 *) CYREG_PM_AVAIL_CR2)
N#define CLKDIST_UCFG_PTR               ( (reg8 *) CYREG_CLKDIST_UCFG)
N#define CLKDIST_UCFG                   (*(reg8 *) CYREG_CLKDIST_UCFG)
N#define CLKDIST_MSTR1_PTR              ( (reg8 *) CYREG_CLKDIST_MSTR1)
N#define CLKDIST_MSTR1                  (*(reg8 *) CYREG_CLKDIST_MSTR1)
N#define SFR_USER_CPUCLK_DIV_PTR        ((void far *) CYREG_SFR_USER_CPUCLK_DIV)
N#define IMO_TR1_PTR                    ( (reg8 *) CYREG_IMO_TR1)
N#define IMO_TR1                        (*(reg8 *) CYREG_IMO_TR1)
N#define CLOCK_CONTROL                  ( (reg8 *) CYREG_CLKDIST_CR)
N#define CY_USB_CR1_PTR                 ( (reg8 *) CYREG_USB_CR1 )
N#define CY_USB_CR1                     (*(reg8 *) CYREG_USB_CR1 )
N#define USB_CLKDIST_CONFIG_PTR         ( (reg8 *) CYREG_CLKDIST_UCFG)
N#define USB_CLKDIST_CONFIG             (*(reg8 *) CYREG_CLKDIST_UCFG)
N#define CY_PM_ACT_CFG5_REG              (* (reg8 *) CYREG_PM_ACT_CFG5 )
N#define CY_PM_ACT_CFG5_PTR              (  (reg8 *) CYREG_PM_ACT_CFG5 )
N#define CY_PM_STBY_CFG5_REG             (* (reg8 *) CYREG_PM_STBY_CFG5 )
N#define CY_PM_STBY_CFG5_PTR             (  (reg8 *) CYREG_PM_STBY_CFG5 )
N#if(CY_PSOC3)
X#if((3u == 1u))
S    #define FLSHID_CUST_TABLES_IMO_3MHZ_PTR         ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_3MHZ)
S    #define FLSHID_CUST_TABLES_IMO_6MHZ_PTR         ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_6MHZ)
S    #define FLSHID_CUST_TABLES_IMO_12MHZ_PTR        ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_12MHZ)
S    #define FLSHID_CUST_TABLES_IMO_24MHZ_PTR        ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_24MHZ)
S    #define FLSHID_CUST_TABLES_IMO_67MHZ_PTR        ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_67MHZ)
S    #define FLSHID_CUST_TABLES_IMO_80MHZ_PTR        ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_80MHZ)
S    #define FLSHID_CUST_TABLES_IMO_USB_PTR          ((void far *) CYREG_FLSHID_CUST_TABLES_IMO_USB)
S    #define FLSHID_MFG_CFG_IMO_TR1_PTR              ((void far *) (CYREG_FLSHID_MFG_CFG_IMO_TR1 + 1u))
N #else
N    #define FLSHID_CUST_TABLES_IMO_3MHZ_PTR         ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_3MHZ)
N    #define FLSHID_CUST_TABLES_IMO_6MHZ_PTR         ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_6MHZ)
N    #define FLSHID_CUST_TABLES_IMO_12MHZ_PTR        ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_12MHZ)
N    #define FLSHID_CUST_TABLES_IMO_24MHZ_PTR        ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_24MHZ)
N    #define FLSHID_CUST_TABLES_IMO_67MHZ_PTR        ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_67MHZ)
N    #define FLSHID_CUST_TABLES_IMO_80MHZ_PTR        ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_80MHZ)
N    #define FLSHID_CUST_TABLES_IMO_USB_PTR          ((reg8 *) CYREG_FLSHID_CUST_TABLES_IMO_USB)
N    #define FLSHID_MFG_CFG_IMO_TR1_PTR              ((reg8 *) (CYREG_FLSHID_MFG_CFG_IMO_TR1 + 1u))
N#endif  /* (CY_PSOC3) */
N
N
N#endif  /* (CY_BOOT_CYLIB_H) */
N
N
N/* [] END OF FILE */
L 26 "Generated_Source\PSoC5\CyDmac.h" 2
N
N
N/***************************************
N*    Function Prototypes
N***************************************/
N
N/* DMA Controller functions. */
Nvoid    CyDmacConfigure(void) ;
Nuint8   CyDmacError(void) ;
Nvoid    CyDmacClearError(uint8 error) ;
Nuint32  CyDmacErrorAddress(void) ;
N
N/* Channel specific functions. */
Nuint8    CyDmaChAlloc(void) ;
Ncystatus CyDmaChFree(uint8 chHandle) ;
Ncystatus CyDmaChEnable(uint8 chHandle, uint8 preserveTds) ;
Ncystatus CyDmaChDisable(uint8 chHandle) ;
Ncystatus CyDmaClearPendingDrq(uint8 chHandle) ;
Ncystatus CyDmaChPriority(uint8 chHandle, uint8 priority) ;
Ncystatus CyDmaChSetExtendedAddress(uint8 chHandle, uint16 source, uint16 destination)\
N;
Xcystatus CyDmaChSetExtendedAddress(uint8 chHandle, uint16 source, uint16 destination);
Ncystatus CyDmaChSetInitialTd(uint8 chHandle, uint8 startTd) ;
Ncystatus CyDmaChSetRequest(uint8 chHandle, uint8 request) ;
Ncystatus CyDmaChGetRequest(uint8 chHandle) ;
Ncystatus CyDmaChStatus(uint8 chHandle, uint8 * currentTd, uint8 * state) ;
Ncystatus CyDmaChSetConfiguration(uint8 chHandle, uint8 burstCount, uint8 requestPerBurst, uint8 tdDone0,
N                                 uint8 tdDone1, uint8 tdStop) ;
Ncystatus CyDmaChRoundRobin(uint8 chHandle, uint8 enableRR) ;
N
N/* Transfer Descriptor functions. */
Nuint8    CyDmaTdAllocate(void) ;
Nvoid     CyDmaTdFree(uint8 tdHandle) ;
Nuint8    CyDmaTdFreeCount(void) ;
Ncystatus CyDmaTdSetConfiguration(uint8 tdHandle, uint16 transferCount, uint8 nextTd, uint8 configuration)\
N;
Xcystatus CyDmaTdSetConfiguration(uint8 tdHandle, uint16 transferCount, uint8 nextTd, uint8 configuration);
Ncystatus CyDmaTdGetConfiguration(uint8 tdHandle, uint16 * transferCount, uint8 * nextTd, uint8 * configuration)\
N;
Xcystatus CyDmaTdGetConfiguration(uint8 tdHandle, uint16 * transferCount, uint8 * nextTd, uint8 * configuration);
Ncystatus CyDmaTdSetAddress(uint8 tdHandle, uint16 source, uint16 destination) ;
Ncystatus CyDmaTdGetAddress(uint8 tdHandle, uint16 * source, uint16 * destination) ;
N
N
N/***************************************
N* Data Struct Definitions
N***************************************/
N
Ntypedef struct dmac_ch_struct
N{
N    volatile uint8 basic_cfg[4];
N    volatile uint8 action[4];
N    volatile uint8 basic_status[4];
N    volatile uint8 reserved[4];
N
N} dmac_ch;
N
N
Ntypedef struct dmac_cfgmem_struct
N{
N    volatile uint8 CFG0[4];
N    volatile uint8 CFG1[4];
N
N} dmac_cfgmem;
N
N
Ntypedef struct dmac_tdmem_struct
N{
N    volatile uint8  TD0[4];
N    volatile uint8  TD1[4];
N
N} dmac_tdmem;
N
N
Ntypedef struct dmac_tdmem2_struct
N{
N    volatile uint16 xfercnt;
N    volatile uint8  next_td_ptr;
N    volatile uint8  flags;
N    volatile uint16 src_adr;
N    volatile uint16 dst_adr;
N} dmac_tdmem2;
N
N
N/***************************************
N* API Constants
N***************************************/
N
N#define CY_DMA_INVALID_CHANNEL      0xFFu   /* Invalid Channel ID */
N#define CY_DMA_INVALID_TD           0xFFu   /* Invalid TD */
N#define CY_DMA_END_CHAIN_TD         0xFFu   /* End of chain TD */
N#define CY_DMA_DISABLE_TD           0xFEu
N
N#define CY_DMA_TD_SIZE              0x08u
N
N/* "u" was removed as workaround for Keil compiler bug */
N#define CY_DMA_TD_SWAP_EN           0x80
N#define CY_DMA_TD_SWAP_SIZE4        0x40
N#define CY_DMA_TD_AUTO_EXEC_NEXT    0x20
N#define CY_DMA_TD_TERMIN_EN         0x10
N#define CY_DMA_TD_TERMOUT1_EN       0x08
N#define CY_DMA_TD_TERMOUT0_EN       0x04
N#define CY_DMA_TD_INC_DST_ADR       0x02
N#define CY_DMA_TD_INC_SRC_ADR       0x01
N
N#define CY_DMA_NUMBEROF_TDS         128u
N#define CY_DMA_NUMBEROF_CHANNELS    ((uint8)(CYDEV_DMA_CHANNELS_AVAILABLE))
N
N/* Action register bits */
N#define CY_DMA_CPU_REQ              ((uint8)(1u << 0u))
N#define CY_DMA_CPU_TERM_TD          ((uint8)(1u << 1u))
N#define CY_DMA_CPU_TERM_CHAIN       ((uint8)(1u << 2u))
N
N/* Basic Status register bits */
N#define CY_DMA_STATUS_CHAIN_ACTIVE  ((uint8)(1u << 0u))
N#define CY_DMA_STATUS_TD_ACTIVE     ((uint8)(1u << 1u))
N
N/* DMA controller register error bits */
N#define CY_DMA_BUS_TIMEOUT          (1u << 1u)
N#define CY_DMA_UNPOP_ACC            (1u << 2u)
N#define CY_DMA_PERIPH_ERR           (1u << 3u)
N
N/* Round robin bits */
N#define CY_DMA_ROUND_ROBIN_ENABLE   ((uint8)(1u << 4u))
N
N
N/*******************************************************************************
N* CyDmaChEnable() / CyDmaChDisable() API constants
N*******************************************************************************/
N#define CY_DMA_CH_BASIC_CFG_EN           (0x01u)
N#define CY_DMA_CH_BASIC_CFG_WORK_SEP     (0x20u)
N
N
N/***************************************
N* Registers
N***************************************/
N
N#define CY_DMA_CFG_REG              (*(reg32 *) CYREG_PHUB_CFG)
N#define CY_DMA_CFG_PTR              ( (reg32 *) CYREG_PHUB_CFG)
N
N#define CY_DMA_ERR_REG              (*(reg32 *) CYREG_PHUB_ERR)
N#define CY_DMA_ERR_PTR              ( (reg32 *) CYREG_PHUB_ERR)
N
N#define CY_DMA_ERR_ADR_REG          (*(reg32 *) CYREG_PHUB_ERR_ADR)
N#define CY_DMA_ERR_ADR_PTR          ( (reg32 *) CYREG_PHUB_ERR_ADR)
N
N#define CY_DMA_CH_STRUCT_REG        (*(dmac_ch CYXDATA *) CYDEV_PHUB_CH0_BASE)
N#define CY_DMA_CH_STRUCT_PTR        ( (dmac_ch CYXDATA *) CYDEV_PHUB_CH0_BASE)
N
N#define CY_DMA_CFGMEM_STRUCT_REG    (*(dmac_cfgmem CYXDATA *) CYDEV_PHUB_CFGMEM0_BASE)
N#define CY_DMA_CFGMEM_STRUCT_PTR    ( (dmac_cfgmem CYXDATA *) CYDEV_PHUB_CFGMEM0_BASE)
N
N#define CY_DMA_TDMEM_STRUCT_REG     (*(dmac_tdmem  CYXDATA *) CYDEV_PHUB_TDMEM0_BASE)
N#define CY_DMA_TDMEM_STRUCT_PTR     ( (dmac_tdmem  CYXDATA *) CYDEV_PHUB_TDMEM0_BASE)
N
N
N/*******************************************************************************
N* The following code is OBSOLETE and must not be used.
N*
N* If the obsoleted macro definitions intended for use in the application use the
N* following scheme, redefine your own versions of these definitions:
N*    #ifdef <OBSOLETED_DEFINE>
N*        #undef  <OBSOLETED_DEFINE>
N*        #define <OBSOLETED_DEFINE>      (<New Value>)
N*    #endif
N*
N* Note: Redefine obsoleted macro definitions with caution. They might still be
N*       used in the application and their modification might lead to unexpected
N*       consequences.
N*******************************************************************************/
N#define DMA_INVALID_CHANNEL         (CY_DMA_INVALID_CHANNEL)
N#define DMA_INVALID_TD              (CY_DMA_INVALID_TD)
N#define DMA_END_CHAIN_TD            (CY_DMA_END_CHAIN_TD)
N#define DMAC_TD_SIZE                (CY_DMA_TD_SIZE)
N#define TD_SWAP_EN                  (CY_DMA_TD_SWAP_EN)
N#define TD_SWAP_SIZE4               (CY_DMA_TD_SWAP_SIZE4)
N#define TD_AUTO_EXEC_NEXT           (CY_DMA_TD_AUTO_EXEC_NEXT)
N#define TD_TERMIN_EN                (CY_DMA_TD_TERMIN_EN)
N#define TD_TERMOUT1_EN              (CY_DMA_TD_TERMOUT1_EN)
N#define TD_TERMOUT0_EN              (CY_DMA_TD_TERMOUT0_EN)
N#define TD_INC_DST_ADR              (CY_DMA_TD_INC_DST_ADR)
N#define TD_INC_SRC_ADR              (CY_DMA_TD_INC_SRC_ADR)
N#define NUMBEROF_TDS                (CY_DMA_NUMBEROF_TDS)
N#define NUMBEROF_CHANNELS           (CY_DMA_NUMBEROF_CHANNELS)
N#define CPU_REQ                     (CY_DMA_CPU_REQ)
N#define CPU_TERM_TD                 (CY_DMA_CPU_TERM_TD)
N#define CPU_TERM_CHAIN              (CY_DMA_CPU_TERM_CHAIN)
N#define STATUS_CHAIN_ACTIVE         (CY_DMA_STATUS_CHAIN_ACTIVE)
N#define STATUS_TD_ACTIVE            (CY_DMA_STATUS_TD_ACTIVE)
N#define DMAC_BUS_TIMEOUT            (CY_DMA_BUS_TIMEOUT)
N#define DMAC_UNPOP_ACC              (CY_DMA_UNPOP_ACC)
N#define DMAC_PERIPH_ERR             (CY_DMA_PERIPH_ERR)
N#define ROUND_ROBIN_ENABLE          (CY_DMA_ROUND_ROBIN_ENABLE)
N#define DMA_DISABLE_TD              (CY_DMA_DISABLE_TD)
N
N#define DMAC_CFG                    (CY_DMA_CFG_PTR)
N#define DMAC_ERR                    (CY_DMA_ERR_PTR)
N#define DMAC_ERR_ADR                (CY_DMA_ERR_ADR_PTR)
N#define DMAC_CH                     (CY_DMA_CH_STRUCT_PTR)
N#define DMAC_CFGMEM                 (CY_DMA_CFGMEM_STRUCT_PTR)
N#define DMAC_TDMEM                  (CY_DMA_TDMEM_STRUCT_PTR)
N
N#endif  /* (CY_BOOT_CYDMAC_H) */
N
N
N/* [] END OF FILE */
L 24 "Generated_Source\PSoC5\project.h" 2
N#include "CyFlash.h"
N#include "CyLib.h"
N#include "cypins.h"
L 1 "Generated_Source\PSoC5\cypins.h" 1
N/***************************************************************************//**
N* \file cypins.h
N* \version 6.10
N*
N* \brief This file contains the function prototypes and constants used for a
N* port/pin in access and control.
N*
N* \note Documentation of the API's in this file is located in the
N* System Reference Guide provided with PSoC Creator.
N*
N********************************************************************************
N* \copyright
N* Copyright 2008-2021, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions,
N* disclaimers, and limitations in the end user license agreement accompanying
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_BOOT_CYPINS_H)
X#if !0L
N#define CY_BOOT_CYPINS_H
N
N#include "cyfitter.h"
N#include "cytypes.h"
N
N
N/**************************************
N*        API Parameter Constants
N**************************************/
N
N#define CY_PINS_PC_DRIVE_MODE_SHIFT (0x01u)
N#define CY_PINS_PC_DRIVE_MODE_MASK  ((uint8)(0x07u << CY_PINS_PC_DRIVE_MODE_SHIFT))
N#define CY_PINS_PC_DRIVE_MODE_0     ((uint8)(0x00u << CY_PINS_PC_DRIVE_MODE_SHIFT))
N#define CY_PINS_PC_DRIVE_MODE_1     ((uint8)(0x01u << CY_PINS_PC_DRIVE_MODE_SHIFT))
N#define CY_PINS_PC_DRIVE_MODE_2     ((uint8)(0x02u << CY_PINS_PC_DRIVE_MODE_SHIFT))
N#define CY_PINS_PC_DRIVE_MODE_3     ((uint8)(0x03u << CY_PINS_PC_DRIVE_MODE_SHIFT))
N#define CY_PINS_PC_DRIVE_MODE_4     ((uint8)(0x04u << CY_PINS_PC_DRIVE_MODE_SHIFT))
N#define CY_PINS_PC_DRIVE_MODE_5     ((uint8)(0x05u << CY_PINS_PC_DRIVE_MODE_SHIFT))
N#define CY_PINS_PC_DRIVE_MODE_6     ((uint8)(0x06u << CY_PINS_PC_DRIVE_MODE_SHIFT))
N#define CY_PINS_PC_DRIVE_MODE_7     ((uint8)(0x07u << CY_PINS_PC_DRIVE_MODE_SHIFT))
N
N
N/*  SetPinDriveMode */
N#define CY_PINS_DM_ALG_HIZ          (CY_PINS_PC_DRIVE_MODE_0)
N#define CY_PINS_DM_DIG_HIZ          (CY_PINS_PC_DRIVE_MODE_1)
N#define CY_PINS_DM_RES_UP           (CY_PINS_PC_DRIVE_MODE_2)
N#define CY_PINS_DM_RES_DWN          (CY_PINS_PC_DRIVE_MODE_3)
N#define CY_PINS_DM_OD_LO            (CY_PINS_PC_DRIVE_MODE_4)
N#define CY_PINS_DM_OD_HI            (CY_PINS_PC_DRIVE_MODE_5)
N#define CY_PINS_DM_STRONG           (CY_PINS_PC_DRIVE_MODE_6)
N#define CY_PINS_DM_RES_UPDWN        (CY_PINS_PC_DRIVE_MODE_7)
N
N
N/**************************************
N*       Register Constants
N**************************************/
N
N/* Port Pin Configuration Register */
N#define CY_PINS_PC_DATAOUT          (0x01u)
N#define CY_PINS_PC_PIN_FASTSLEW     (0xBFu)
N#define CY_PINS_PC_PIN_SLOWSLEW     (0x40u)
N#define CY_PINS_PC_PIN_STATE        (0x10u)
N#define CY_PINS_PC_BIDIR_EN         (0x20u)
N#define CY_PINS_PC_SLEW             (0x40u)
N#define CY_PINS_PC_BYPASS           (0x80u)
N
N
N/**************************************
N*       Pin API Macros
N**************************************/
N
N/*******************************************************************************
N* Macro Name: CyPins_ReadPin
N****************************************************************************//**
N*
N*  Reads the current value on the pin (pin state, PS).
N*
N*   \param pinPC: Port pin configuration register (uint16).
N*   #defines for each pin on a chip are provided in the cydevice_trm.h file
N*   \param in the form:
N*       CYREG_PRTx_PCy
N*
N*   where x is a port number 0 - 15 and y is a pin number 0 - 7
N*
N* \return
N*   Pin state
N*    0: Logic low value
N*    Non-0: Logic high value
N*
N*******************************************************************************/
N#define CyPins_ReadPin(pinPC)    ( *(reg8 *)(pinPC) & CY_PINS_PC_PIN_STATE )
N
N
N/*******************************************************************************
N* Macro Name: CyPins_SetPin
N****************************************************************************//**
N*
N*  Set the output value for the pin (data register, DR) to a logic high.
N*
N*  Note that this only has an effect for pins configured as software pins that
N*  are not driven by hardware.
N*
N*  The macro operation is not atomic. It is not guaranteed that shared register
N*  will remain uncorrupted during simultaneous read-modify-write operations
N*  performed by two threads (main and interrupt threads). To guarantee data
N*  integrity in such cases, the macro should be invoked while the specific
N*  interrupt is disabled or within critical section (all interrupts are
N*  disabled).
N*
N*   \param pinPC: Port pin configuration register (uint16).
N*   #defines for each pin on a chip are provided in the cydevice_trm.h file
N*   \param in the form:
N*       CYREG_PRTx_PCy
N*
N*   where x is a port number 0 - 15 and y is a pin number 0 - 7
N*
N*******************************************************************************/
N#define CyPins_SetPin(pinPC)     ( *(reg8 *)(pinPC) |= CY_PINS_PC_DATAOUT)
N
N
N/*******************************************************************************
N* Macro Name: CyPins_ClearPin
N****************************************************************************//**
N*
N*  This macro sets the state of the specified pin to 0.
N*
N*  The macro operation is not atomic. It is not guaranteed that shared register
N*  will remain uncorrupted during simultaneous read-modify-write operations
N*  performed by two threads (main and interrupt threads). To guarantee data
N*  integrity in such cases, the macro should be invoked while the specific
N*  interrupt is disabled or within critical section (all interrupts are
N*  disabled).
N*
N*   \param pinPC: address of a Pin Configuration register.
N*   #defines for each pin on a chip are provided in the cydevice_trm.h file
N*   \param in the form:
N*       CYREG_PRTx_PCy
N*
N*   where x is a port number 0 - 15 and y is a pin number 0 - 7
N*
N*******************************************************************************/
N#define CyPins_ClearPin(pinPC)   ( *(reg8 *)(pinPC) &= ((uint8)(~CY_PINS_PC_DATAOUT)))
N
N
N/*******************************************************************************
N* Macro Name: CyPins_SetPinDriveMode
N****************************************************************************//**
N*
N*  Sets the drive mode for the pin (DM).
N*
N*  The macro operation is not atomic. It is not guaranteed that shared register
N*  will remain uncorrupted during simultaneous read-modify-write operations
N*  performed by two threads (main and interrupt threads). To guarantee data
N*  integrity in such cases, the macro should be invoked while the specific
N*  interrupt is disabled or within critical section (all interrupts are
N*  disabled).
N*
N*   \param pinPC: Port pin configuration register (uint16)
N*   #defines for each pin on a chip are provided in the cydevice_trm.h file
N*   \param in the form:
N*       CYREG_PRTx_PCy
N*
N*   where x is a port number 0 - 15 and y is a pin number 0 - 7
N*
N*   \param mode: Desired drive mode
N*
N*   Define                Source
N*   PIN_DM_ALG_HIZ        Analog HiZ
N*   PIN_DM_DIG_HIZ        Digital HiZ
N*   PIN_DM_RES_UP        Resistive pull up
N*   PIN_DM_RES_DWN        Resistive pull down
N*   PIN_DM_OD_LO        Open drain - drive low
N*   PIN_DM_OD_HI        Open drain - drive high
N*   PIN_DM_STRONG        Strong CMOS Output
N*   PIN_DM_RES_UPDWN    Resistive pull up/down
N*
N*******************************************************************************/
N#define CyPins_SetPinDriveMode(pinPC, mode) \
N            ( *(reg8 *)(pinPC) = (*(reg8 *)(pinPC) & ((uint8)(~CY_PINS_PC_DRIVE_MODE_MASK))) | \
N            ((mode) & CY_PINS_PC_DRIVE_MODE_MASK))
X#define CyPins_SetPinDriveMode(pinPC, mode)             ( *(reg8 *)(pinPC) = (*(reg8 *)(pinPC) & ((uint8)(~CY_PINS_PC_DRIVE_MODE_MASK))) |             ((mode) & CY_PINS_PC_DRIVE_MODE_MASK))
N
N
N/*******************************************************************************
N* Macro Name: CyPins_ReadPinDriveMode
N****************************************************************************//**
N*
N*  Reads the drive mode for the pin (DM).
N*
N*   \param pinPC: Port pin configuration register (uint16)
N*   #defines for each pin on a chip are provided in the cydevice_trm.h file
N*   \param in the form:
N*       CYREG_PRTx_PCy
N*
N*   where x is a port number 0 - 15 and y is a pin number 0 - 7
N*
N*
N* \return
N*   mode:  The current drive mode for the pin
N*
N*   Define                Source
N*   PIN_DM_ALG_HIZ        Analog HiZ
N*   PIN_DM_DIG_HIZ        Digital HiZ
N*   PIN_DM_RES_UP        Resistive pull up
N*   PIN_DM_RES_DWN        Resistive pull down
N*   PIN_DM_OD_LO        Open drain - drive low
N*   PIN_DM_OD_HI        Open drain - drive high
N*   PIN_DM_STRONG        Strong CMOS Output
N*   PIN_DM_RES_UPDWN    Resistive pull up/down
N*
N*******************************************************************************/
N#define CyPins_ReadPinDriveMode(pinPC)      (*(reg8 *)(pinPC) & CY_PINS_PC_DRIVE_MODE_MASK)
N
N
N/*******************************************************************************
N* Macro Name: CyPins_FastSlew
N****************************************************************************//**
N*
N*  Set the slew rate for the pin to fast the edge rate.
N*  Note that this only applies for pins in strong output drive modes,
N*  not to resistive drive modes.
N*
N*  The macro operation is not atomic. It is not guaranteed that shared register
N*  will remain uncorrupted during simultaneous read-modify-write operations
N*  performed by two threads (main and interrupt threads). To guarantee data
N*  integrity in such cases, the macro should be invoked while the specific
N*  interrupt is disabled or within critical section (all interrupts are
N*  disabled).
N*
N*   \param pinPC: address of a Pin Configuration register.
N*   #defines for each pin on a chip are provided in the cydevice_trm.h file
N*   \param in the form:
N*       CYREG_PRTx_PCy
N*
N*   where x is a port number 0 - 15 and y is a pin number 0 - 7
N*
N*
N*******************************************************************************/
N#define CyPins_FastSlew(pinPC)      (*(reg8 *)(pinPC) = (*(reg8 *)(pinPC) & CY_PINS_PC_PIN_FASTSLEW))
N
N
N/*******************************************************************************
N* Macro Name: CyPins_SlowSlew
N****************************************************************************//**
N*
N*  Set the slew rate for the pin to slow the edge rate.
N*  Note that this only applies for pins in strong output drive modes,
N*  not to resistive drive modes.
N*
N*  The macro operation is not atomic. It is not guaranteed that shared register
N*  will remain uncorrupted during simultaneous read-modify-write operations
N*  performed by two threads (main and interrupt threads). To guarantee data
N*  integrity in such cases, the macro should be invoked while the specific
N*  interrupt is disabled or within critical section (all interrupts are
N*  disabled).
N*
N*   \param pinPC: address of a Pin Configuration register.
N*   #defines for each pin on a chip are provided in the cydevice_trm.h file
N*   \param in the form:
N*       CYREG_PRTx_PCy
N*
N*   where x is a port number 0 - 15 and y is a pin number 0 - 7
N*
N*******************************************************************************/
N#define CyPins_SlowSlew(pinPC)      (*(reg8 *)(pinPC) = (*(reg8 *)(pinPC) | CY_PINS_PC_PIN_SLOWSLEW))
N
N
N/*******************************************************************************
N* The following code is OBSOLETE and must not be used.
N*
N* If the obsoleted macro definitions intended for use in the application use the
N* following scheme, redefine your own versions of these definitions:
N*    #ifdef <OBSOLETED_DEFINE>
N*        #undef  <OBSOLETED_DEFINE>
N*        #define <OBSOLETED_DEFINE>      (<New Value>)
N*    #endif
N*
N* Note: Redefine obsoleted macro definitions with caution. They might still be
N*       used in the application and their modification might lead to unexpected
N*       consequences.
N*******************************************************************************/
N#define PC_DRIVE_MODE_SHIFT (CY_PINS_PC_DRIVE_MODE_SHIFT)
N#define PC_DRIVE_MODE_MASK  (CY_PINS_PC_DRIVE_MODE_MASK)
N#define PC_DRIVE_MODE_0     (CY_PINS_PC_DRIVE_MODE_0)
N#define PC_DRIVE_MODE_1     (CY_PINS_PC_DRIVE_MODE_1)
N#define PC_DRIVE_MODE_2     (CY_PINS_PC_DRIVE_MODE_2)
N#define PC_DRIVE_MODE_3     (CY_PINS_PC_DRIVE_MODE_3)
N#define PC_DRIVE_MODE_4     (CY_PINS_PC_DRIVE_MODE_4)
N#define PC_DRIVE_MODE_5     (CY_PINS_PC_DRIVE_MODE_5)
N#define PC_DRIVE_MODE_6     (CY_PINS_PC_DRIVE_MODE_6)
N#define PC_DRIVE_MODE_7     (CY_PINS_PC_DRIVE_MODE_7)
N
N#define PIN_DM_ALG_HIZ      (CY_PINS_DM_ALG_HIZ)
N#define PIN_DM_DIG_HIZ      (CY_PINS_DM_DIG_HIZ)
N#define PIN_DM_RES_UP       (CY_PINS_DM_RES_UP)
N#define PIN_DM_RES_DWN      (CY_PINS_DM_RES_DWN)
N#define PIN_DM_OD_LO        (CY_PINS_DM_OD_LO)
N#define PIN_DM_OD_HI        (CY_PINS_DM_OD_HI)
N#define PIN_DM_STRONG       (CY_PINS_DM_STRONG)
N#define PIN_DM_RES_UPDWN    (CY_PINS_DM_RES_UPDWN)
N
N#define PC_DATAOUT          (CY_PINS_PC_DATAOUT)
N#define PC_PIN_FASTSLEW     (CY_PINS_PC_PIN_FASTSLEW)
N#define PC_PIN_SLOWSLEW     (CY_PINS_PC_PIN_SLOWSLEW)
N#define PC_PIN_STATE        (CY_PINS_PC_PIN_STATE)
N#define PC_BIDIR_EN         (CY_PINS_PC_BIDIR_EN)
N#define PC_SLEW             (CY_PINS_PC_SLEW)
N#define PC_BYPASS           (CY_PINS_PC_BYPASS)
N
N#endif /* (CY_BOOT_CYPINS_H) */
N
N
N/* [] END OF FILE */
L 27 "Generated_Source\PSoC5\project.h" 2
N#include "cyPm.h"
N#include "CySpc.h"
N#include "cytypes.h"
N#include "cy_em_eeprom.h"
L 1 "Generated_Source\PSoC5\cy_em_eeprom.h" 1
N/*******************************************************************************
N* \file cy_em_eeprom.h
N* \version 2.20
N*
N* \brief
N*  This file provides the function prototypes and constants for the Emulated
N*  EEPROM middleware library.
N*
N********************************************************************************
N* Copyright 2017, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions,
N* disclaimers, and limitations in the end user license agreement accompanying
N* the software package with which this file was provided.
N*******************************************************************************/
N
N/**
N * \mainpage Cypress Em_EEPROM Middleware Library
N *
N * The Emulated EEPROM provides an API that allows creating an emulated
N * EEPROM in flash that has the ability to do wear leveling and restore
N * corrupted data from a redundant copy. The Emulated EEPROM library is designed
N * to be used with the Em_EEPROM component.
N *
N * The Cy_Em_EEPROM API is described in the following sections:
N * - \ref group_em_eeprom_macros
N * - \ref group_em_eeprom_data_structures
N * - \ref group_em_eeprom_enums
N * - \ref group_em_eeprom_functions
N *
N * <b>Features:</b>
N * * EEPROM-Like Non-Volatile Storage
N * * Easy to use Read and Write API
N * * Optional Wear Leveling
N * * Optional Redundant Data storage
N *
N * \section group_em_eeprom_configuration Configuration Considerations
N *
N * The Em_EEPROM operates on the top of the flash driver. The flash driver has
N * some prerequisites for proper operation. Refer to the "Flash System 
N * Routine (Flash)" section of the PDL API Reference Manual.
N *
N * <b>Initializing Emulated EEPROM in User flash</b>
N *
N * To initialize an Emulated EEPROM in the User flash, the EEPROM storage should
N * be declared by the user. For the proper operation, the EEPROM storage should
N * be aligned to the size of the flash row. An example of the EEPROM storage
N * declaration is below (applicable for GCC and MDK compilers):
N *
N *      CY_ALIGN(CY_EM_EEPROM_FLASH_SIZEOF_ROW)
N *      const uint8 emEeprom[Em_EEPROM_PHYSICAL_SIZE] = {0u};
N *
N * The same declaration for the IAR compiler:
N *
N *      #pragma data_alignment = CY_EM_EEPROM_FLASH_SIZEOF_ROW
N *      const uint8 emEeprom[Em_EEPROM_PHYSICAL_SIZE] = {0u};
N * 
N * Note that the name "emEeprom" is shown for reference. Any other name can be
N * used instead. Also, note that the Em_EEPROM_PHYSICAL_SIZE constant is 
N * generated by the PSoC Creator Em_EEPROM component and so it is instance name
N * dependent and its prefix should be changed when the name of the component 
N * changes. If the The Cy_Em_EEPROM middleware library is used without the 
N * Em_EEPROM component, the user has to provide a proper size for the EEPROM 
N * storage instead of Em_EEPROM_PHYSICAL_SIZE. The size of the EEPROM storage 
N * can be calculated using the following equation:
N * 
N *  Physical size = EEPROM data size * 2 * wear leveling * (1 + redundant copy)
N *
N * where, 
N *   "EEPROM data size" - the size of data the user wants to store in the 
N *   EEPROM. The data size must divide evenly to the half of the flash row size.
N *   "wear leveling" - the wear leveling factor (1-10).
N *   "redundant copy" - "zero" if a redundant copy is not used, and "one" 
N *   otherwise.
N *
N * The start address of the storage should be filled to the Emulated EEPROM 
N * configuration structure and then passed to the Cy_Em_EEPROM_Init().
N * If the Em_EEPROM component is used, the config (Em_EEPROM_config) and 
N * context structures (Em_EEPROM_context) are defined by the component, so the
N * user may just use that structures otherwise both of the structures need to 
N * be provided by the user. Note that if the "Config Data in Flash"
N * option is selected in the component, then the configuration structure should
N * be copied to RAM to allow EEPROM storage start address update. The following 
N * code demonstrates utilization of "Em_EEPROM_config" and "Em_EEPROM_context"
N * Em_EEPROM component structures for Cy_Em_EEPROM middleware library 
N * initialization:
N *
N *      cy_en_em_eeprom_status_t retValue;
N *      cy_stc_eeprom_config_t config;
N *
N *      memcpy((void *)&config, 
N               (void *)&Em_EEPROM_config, 
N               sizeof(cy_stc_eeprom_config_t));
N *      config.userFlashStartAddr = (uint32)emEeprom;
N *      retValue = Cy_Em_EEPROM_Init(&config, &Em_EEPROM_context);
N *
N * <b>Initializing EEPROM in Emulated EEPROM flash area</b>
N * 
N * Initializing of the EEPROM storage in the Emulated EEPROM flash area is 
N * identical to initializing of the EEPROM storage in the User flash with one 
N * difference. The location of the Emulated EEPROM storage should be specified 
N * somewhere in the EmulatedEEPROM flash area. If the Em_EEPROM component is 
N * utilized in the project, then the respective storage 
N * (Em_EEPROM_em_EepromStorage[]) is automatically declared by the component 
N * if the "Use Emulated EEPROM" option is set to "Yes". The user just needs to 
N * fill the start address of the storage to the config structure. If the
N * Em_EEPROM component is not used, the user needs to declare the storage
N * in the Emulated EEPROM flash area. An example of such declaration is 
N * following (applicable for GCC and MDK compilers):
N *
N *      CY_SECTION(".cy_em_eeprom") CY_ALIGN(CY_EM_EEPROM_FLASH_SIZEOF_ROW)
N *      const uint8_t emEeprom[Em_EEPROM_PHYSICAL_SIZE] = {0u};
N *
N * The same declaration for the IAR compiler:
N *
N *      #pragma location = ".cy_em_eeprom"
N *      #pragma data_alignment = CY_EM_EEPROM_FLASH_SIZEOF_ROW
N *      const uint8 emEeprom[Em_EEPROM_PHYSICAL_SIZE] = {0u};
N *
N * where,
N *   Em_EEPROM_PHYSICAL_SIZE - is a constant that is generated by the Em_EEPROM
N *   component when the component is utilized in the project or it should be 
N *   provided by the user. The equation for the calculation of the constant is 
N *   shown above.
N *
N * Note that the size of the Emulated EEPROM flash area is limited. Refer to the
N * specific device datasheet for the value of the available EEPROM Emulation 
N * area.
N *
N * \section group_em_eeprom_more_information More Information
N * See the Em_EEPROM Component datasheet.
N *
N *
N * \section group_em_eeprom_MISRA MISRA-C Compliance
N *
N * The Cy_Em_EEPROM library has the following specific deviations:
N *
N * <table class="doxtable">
N *   <tr>
N *     <th>MISRA Rule</th>
N *     <th>Rule Class (Required/Advisory)</th>
N *     <th>Rule Description</th>
N *     <th>Description of Deviation(s)</th>
N *   </tr>
N *   <tr>
N *     <td>11.4</td>
N *     <td>A</td>
N *     <td>The cast should not be performed between a pointer to the object type
N *         and a different pointer to the object type.</td>
N *     <td>The cast from the object type and a different pointer to the object 
N *         was used intentionally because of the performance reasons.</td>
N *   </tr>
N *   <tr>
N *     <td>14.2</td>
N *     <td>R</td>
N *     <td>All non-null statements shall either have at least one side-effect,
N *         however executed, or cause control flow to change.</td>
N *     <td>To maintain common codebase, some variables, unused for a specific 
N *         device, are casted to void to prevent generation of an unused variable
N *         compiler warning.</td>
N *   </tr>
N *   <tr>
N *     <td>16.7</td>
N *     <td>A</td>
N *     <td>The object addressed by the pointer parameter is not modified and so
N *          the pointer could be of type 'pointer to const'.</td>
N *     <td>The warning is generated because of the pointer dereferencing to
N *         address which makes the MISRA checker think the data is not
N *         modified.</td>
N *   </tr>
N *   <tr>
N *     <td>17.4</td>
N *     <td>R</td>
N *     <td>The array indexing shall be the only allowed form of pointer 
N *         arithmetic.</td>
N *     <td>The pointer arithmetic used in several places on the Cy_Em_EEPROM
N *         implementation is safe and preferred because it increases the code
N *         flexibility.</td>
N *   </tr>
N *   <tr>
N *     <td>19.7</td>
N *     <td>A</td>
N *     <td>A function shall be used in preference to a function-like macro.</td>
N *     <td>Macro is used because of performance reasons.</td>
N *   </tr>
N * </table>
N *
N * \section group_em_eeprom_changelog Changelog
N * <table class="doxtable">
N *   <tr><th>Version</th><th>Changes</th><th>Reason for Change</th></tr>
N *   <tr>
N *     <td>1.0</td>
N *     <td>Initial Version</td>
N *     <td></td>
N *   </tr>
N * </table>
N *
N * \defgroup group_em_eeprom_macros Macros
N * \brief
N * This section describes the Emulated EEPROM Macros.
N *
N * \defgroup group_em_eeprom_functions Functions
N * \brief
N * This section describes the Emulated EEPROM Function Prototypes.
N *
N * \defgroup group_em_eeprom_data_structures Data Structures
N * \brief
N * Describes the data structures defined by the Emulated EEPROM.
N *
N * \defgroup group_em_eeprom_enums Enumerated types
N * \brief
N * Describes the enumeration types defined by the Emulated EEPROM.
N *
N */
N
N
N#if !defined(CY_EM_EEPROM_H)
X#if !0L
N#define CY_EM_EEPROM_H
N
N#include "cytypes.h"
N#include <stddef.h>
L 1 "C:\Keil_v5\ARM\ARMCC\bin\..\include\stddef.h" 1
N/* stddef.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.1.4 */
N
N/* Copyright (C) ARM Ltd., 1999
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991 ARM Limited. All rights reserved.             */
N/* version 0.05 */
N
N/*
N * The following types and macros are defined in several headers referred to in
N * the descriptions of the functions declared in that header. They are also
N * defined in this header file.
N */
N
N#ifndef __stddef_h
N#define __stddef_h
N#define __ARMCLIB_VERSION 5060044
N
N  #ifndef __STDDEF_DECLS
N  #define __STDDEF_DECLS
N    #undef __CLIBNS
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS ::std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if __sizeof_ptr == 8
X#if 4 == 8
S  typedef signed long ptrdiff_t;
N#else
N  typedef signed int ptrdiff_t;
N#endif
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
S   /* the unsigned integral type of the result of the sizeof operator. */
N#endif
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N  /* unconditional in non-strict C for consistency of debug info */
N    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X    #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #else
N      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #else
S      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #endif
S   /*
S    * An integral type whose range of values can represent distinct codes for
S    * all members of the largest extended character set specified among the
S    * supported locales; the null character shall have the code value zero and
S    * each member of the basic character set shall have a code value when used
S    * as the lone character in an integer character constant.
S    */
N  #endif
N#endif
N
N#undef NULL  /* others (e.g. <stdio.h>) also define */
N#define NULL 0
N   /* null pointer constant. */
N
N#ifdef __clang__
S  #define offsetof(t, d) __builtin_offsetof(t, d)
N#else
N  /* EDG uses __INTADDR__ to avoid errors when strict */
N  #define offsetof(t, memb) ((__CLIBNS size_t)__INTADDR__(&(((t *)0)->memb)))
N#endif
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 201112L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 201112L <= 199901L) || (0L && 201103L <= __cplusplus)
N  typedef long double max_align_t;
N#endif
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDDEF_DECLS */
N
N
N  #ifdef __cplusplus
S    #ifndef __STDDEF_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::ptrdiff_t;
S      #if !defined(__STRICT_ANSI__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S        using ::std::max_align_t;
S      #endif
S    #endif 
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of stddef.h */
N
L 221 "Generated_Source\PSoC5\cy_em_eeprom.h" 2
N#if (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC6)
X#if (3u == 4u)
S    #include <cy_device_headers.h>
S    #include "syslib/cy_syslib.h"
S    #include "flash/cy_flash.h"
N#else
N    #include "CyFlash.h"
N    #include <cyfitter.h>
N#endif /* (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC6) */
N
N/* The C binding of definitions if building with the C++ compiler */
N#ifdef __cplusplus
Sextern "C" {
N#endif /* __cplusplus */
N
N
N/***************************************
N* Conditional Compilation Parameters
N***************************************/
N#define CY_PSOC6                                    (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC6)
N
N
N/***************************************
N* Data Structure definitions
N***************************************/
N/**
N* \addtogroup group_em_eeprom_data_structures
N* \{
N*/
N
N/** EEPROM configuration structure */
Ntypedef struct
N{
N    /** The number of bytes to store in EEPROM */
N    uint32 eepromSize;
N
N    /** The amount of wear leveling from 1 to 10. 1 means no wear leveling
N    * is used.
N    */
N    uint32 wearLevelingFactor;
N
N    /** If not zero, a redundant copy of the Em_EEPROM is included. */
N    uint8 redundantCopy;
N
N    /** If not zero, a blocking write to flash is used. Otherwise non-blocking
N    * write is used. This parameter is used only for PSoC 6.
N    */
N    uint8 blockingWrite;
N
N    /** The start address for the EEPROM memory in the user's flash. */
N    uint32 userFlashStartAddr;
N} cy_stc_eeprom_config_t;
N
N/** \} group_em_eeprom_data_structures */
N
N/** The EEPROM context data structure. It is used to store the specific
N* EEPROM context data.
N*/
Ntypedef struct
N{
N    /** The pointer to the end address of EEPROM including wear leveling overhead
N    * and excluding redundant copy overhead.
N    */
N    uint32 wlEndAddr;
N
N    /** The number of flash rows allocated for the EEPROM excluding the number of
N    * rows allocated for wear leveling and redundant copy overhead.
N    */
N    uint32 numberOfRows;
N
N    /** The address of the last written EEPROM row */
N    uint32 lastWrRowAddr;
N
N    /** The number of bytes to store in EEPROM */
N    uint32 eepromSize;
N
N    /** The amount of wear leveling from 1 to 10. 1 means no wear leveling
N    * is used.
N    */
N    uint32 wearLevelingFactor;
N
N    /** If not zero, a redundant copy of the Em_EEPROM is included. */
N    uint8 redundantCopy;
N
N    /** If not zero, a blocking write to flash is used. Otherwise non-blocking
N    * write is used. This parameter is used only for PSoC 6.
N    */
N    uint8 blockingWrite;
N
N    /** The start address for the EEPROM memory in the user's flash. */
N    uint32 userFlashStartAddr;
N} cy_stc_eeprom_context_t;
N
N#if (CY_PSOC6)
X#if ((3u == 4u))
S
S    #define CY_EM_EEPROM_ID                         (CY_PDL_DRV_ID(0x1BuL))  /**< Em_EEPROM PDL ID */
S    /**
S    * \addtogroup group_em_eeprom_enums
S    * \{
S    * Specifies return values meaning.
S    */
S    /** A prefix for EEPROM function error return-values */
S    #define CY_EM_EEPROM_ID_ERROR                   (uint32_t)(CY_EM_EEPROM_ID | CY_PDL_STATUS_ERROR)
S
N#else
N
N    /** A prefix for EEPROM function status codes. For non-PSoC6 devices,
N    * prefix is zero.
N    */
N    #define CY_EM_EEPROM_ID_ERROR                       (0uL)
N
N#endif /* (CY_PSOC6) */
N
N
N/***************************************
N* Enumerated Types and Parameters
N***************************************/
N
N/** EEPROM return enumeration type */
Ntypedef enum
N{
N    CY_EM_EEPROM_SUCCESS      = 0x00uL,                             /**< The function executed successfully */
N    CY_EM_EEPROM_BAD_PARAM    = (CY_EM_EEPROM_ID_ERROR + 1uL),      /**< The input parameter is invalid */
X    CY_EM_EEPROM_BAD_PARAM    = ((0uL) + 1uL),       
N    CY_EM_EEPROM_BAD_CHECKSUM = (CY_EM_EEPROM_ID_ERROR + 2uL),      /**< The data in EEPROM is corrupted */
X    CY_EM_EEPROM_BAD_CHECKSUM = ((0uL) + 2uL),       
N    CY_EM_EEPROM_BAD_DATA     = (CY_EM_EEPROM_ID_ERROR + 3uL),      /**< Failed to place the EEPROM in flash */
X    CY_EM_EEPROM_BAD_DATA     = ((0uL) + 3uL),       
N    CY_EM_EEPROM_WRITE_FAIL   = (CY_EM_EEPROM_ID_ERROR + 4uL)       /**< Write to EEPROM failed */
X    CY_EM_EEPROM_WRITE_FAIL   = ((0uL) + 4uL)        
N} cy_en_em_eeprom_status_t;
N
N/** \} group_em_eeprom_enums */
N
N
N/***************************************
N*        Function Prototypes
N***************************************/
N
N/**
N* \addtogroup group_em_eeprom_functions
N* \{
N*/
Ncy_en_em_eeprom_status_t Cy_Em_EEPROM_Init(cy_stc_eeprom_config_t* config, cy_stc_eeprom_context_t * context);
Ncy_en_em_eeprom_status_t Cy_Em_EEPROM_Read(uint32 addr,
N                                        void * eepromData,
N                                        uint32 size,
N                                        cy_stc_eeprom_context_t * context);
Ncy_en_em_eeprom_status_t Cy_Em_EEPROM_Write(uint32 addr,
N                                            void * eepromData,
N                                            uint32 size,
N                                            cy_stc_eeprom_context_t * context);
Ncy_en_em_eeprom_status_t Cy_Em_EEPROM_Erase(cy_stc_eeprom_context_t * context);
Nuint32 Cy_Em_EEPROM_NumWrites(cy_stc_eeprom_context_t * context);
N/** \} group_em_eeprom_functions */
N
N
N/***************************************
N* API Constants
N***************************************/
N/**
N* \addtogroup group_em_eeprom_macros
N* \{
N*/
N/** Library major version */
N#define CY_EM_EEPROM_VERSION_MAJOR                  (2)
N
N/** Library minor version */
N#define CY_EM_EEPROM_VERSION_MINOR                  (20)
N
N/** Defines the maximum data length that can be stored in one flash row */
N#define CY_EM_EEPROM_EEPROM_DATA_LEN                (CY_EM_EEPROM_FLASH_SIZEOF_ROW / 2u)
N
N/** \} group_em_eeprom_macros */
N
N
N/***************************************
N* Macro definitions
N***************************************/
N/** \cond INTERNAL */
N
N/* Defines the size of flash row */
N#define CY_EM_EEPROM_FLASH_SIZEOF_ROW               (CY_FLASH_SIZEOF_ROW)
N
N/* Device specific flash constants */
N#if (!CY_PSOC6)
X#if (!(3u == 4u))
N    #define CY_EM_EEPROM_FLASH_BASE_ADDR                (CYDEV_FLASH_BASE)
N    #define CY_EM_EEPROM_FLASH_SIZE                     (CYDEV_FLASH_SIZE)
N    #define CY_EM_EEPROM_ROWS_IN_ARRAY                  (CY_FLASH_SIZEOF_ARRAY / CY_EM_EEPROM_FLASH_SIZEOF_ROW)
N    #if (CY_PSOC3)
X    #if ((3u == 1u))
S        #define CY_EM_EEPROM_CODE_MEM_CLASS_PREFIX          (0xff0000uL)
S        #define CY_EM_EEPROM_CODE_ADDR_END                  \
S                        (CY_EM_EEPROM_CODE_MEM_CLASS_PREFIX + (CY_EM_EEPROM_FLASH_SIZE - 1u))
X        #define CY_EM_EEPROM_CODE_ADDR_END                                          (CY_EM_EEPROM_CODE_MEM_CLASS_PREFIX + (CY_EM_EEPROM_FLASH_SIZE - 1u))
S        #define CY_EM_EEPROM_CODE_ADDR_MASK                 (0xffffu)
S        /* Checks if the EEPROM is in flash range */
S        #define CY_EM_EEPROM_IS_IN_FLASH_RANGE(startAddr, endAddr) \
S                        (((startAddr) > CY_EM_EEPROM_CODE_MEM_CLASS_PREFIX) && \
S                         ((endAddr) <= CY_EM_EEPROM_CODE_ADDR_END))
X        #define CY_EM_EEPROM_IS_IN_FLASH_RANGE(startAddr, endAddr)                         (((startAddr) > CY_EM_EEPROM_CODE_MEM_CLASS_PREFIX) &&                          ((endAddr) <= CY_EM_EEPROM_CODE_ADDR_END))
N    #else
N        /* Checks is the EEPROM is in flash range */
N        #define CY_EM_EEPROM_IS_IN_FLASH_RANGE(startAddr, endAddr) \
N                        (((startAddr) > CY_EM_EEPROM_FLASH_BASE_ADDR) && ((endAddr) <= CY_EM_EEPROM_FLASH_END_ADDR))
X        #define CY_EM_EEPROM_IS_IN_FLASH_RANGE(startAddr, endAddr)                         (((startAddr) > CY_EM_EEPROM_FLASH_BASE_ADDR) && ((endAddr) <= CY_EM_EEPROM_FLASH_END_ADDR))
N    #endif /* (CY_PSOC3) */
N#else
S    #define CY_EM_EEPROM_FLASH_BASE_ADDR                (CY_FLASH_BASE)
S    #define CY_EM_EEPROM_FLASH_SIZE                     (CY_FLASH_SIZE)
S    #define CY_EM_EEPROM_EM_EEPROM_BASE_ADDR            (CY_EM_EEPROM_BASE)
S    #define CY_EM_EEPROM_EM_EEPROM_SIZE                 (CY_EM_EEPROM_SIZE)
S    #define CY_EM_EEPROM_EM_EEPROM_END_ADDR             (CY_EM_EEPROM_EM_EEPROM_BASE_ADDR + CY_EM_EEPROM_EM_EEPROM_SIZE)
S    /* Checks is the EEPROM is in flash range */
S    #define CY_EM_EEPROM_IS_IN_FLASH_RANGE(startAddr, endAddr) \
S                    (((((startAddr) > CY_EM_EEPROM_FLASH_BASE_ADDR) && ((endAddr) <= CY_EM_EEPROM_FLASH_END_ADDR)) || \
S                      (((startAddr) >= CY_EM_EEPROM_EM_EEPROM_BASE_ADDR) && \
S                                                                    ((endAddr) <= CY_EM_EEPROM_EM_EEPROM_END_ADDR))))
X    #define CY_EM_EEPROM_IS_IN_FLASH_RANGE(startAddr, endAddr)                     (((((startAddr) > CY_EM_EEPROM_FLASH_BASE_ADDR) && ((endAddr) <= CY_EM_EEPROM_FLASH_END_ADDR)) ||                       (((startAddr) >= CY_EM_EEPROM_EM_EEPROM_BASE_ADDR) &&                                                                     ((endAddr) <= CY_EM_EEPROM_EM_EEPROM_END_ADDR))))
N#endif /* (!CY_PSOC6) */
N
N#define CY_EM_EEPROM_FLASH_END_ADDR                 (CY_EM_EEPROM_FLASH_BASE_ADDR + CY_EM_EEPROM_FLASH_SIZE)
N
N/* Defines the length of EEPROM data that can be stored in Em_EEPROM header */
N#define CY_EM_EEPROM_HEADER_DATA_LEN                ((CY_EM_EEPROM_FLASH_SIZEOF_ROW / 2u) - 16u)
N
N#define CY_EM_EEPROM_ADDR_IN_RANGE                  (1u)
N
N/* Return CY_EM_EEPROM_ADDR_IN_RANGE if addr exceeded the upper range of
N* EEPROM. The wear leveling overhead is included in the range but redundant copy
N* is excluded.
N*/
N#define CY_EM_EEPROM_IS_ADDR_EXCEED_RANGE(addr, endEepromAddr) \
N                                    (((addr) >= (endEepromAddr)) ? (0u) : (CY_EM_EEPROM_ADDR_IN_RANGE))
X#define CY_EM_EEPROM_IS_ADDR_EXCEED_RANGE(addr, endEepromAddr)                                     (((addr) >= (endEepromAddr)) ? (0u) : (CY_EM_EEPROM_ADDR_IN_RANGE))
N
N/* Check to see if the specified address is present in the EEPROM */
N#define CY_EM_EEPROM_IS_ADDR_IN_RANGE(addr, startEepromAddr, endEepromAddr) \
N                                    (((addr) > (startEepromAddr)) ? \
N                                    (((addr) < (endEepromAddr)) ? (CY_EM_EEPROM_ADDR_IN_RANGE) : (0u)) : (0u))
X#define CY_EM_EEPROM_IS_ADDR_IN_RANGE(addr, startEepromAddr, endEepromAddr)                                     (((addr) > (startEepromAddr)) ?                                     (((addr) < (endEepromAddr)) ? (CY_EM_EEPROM_ADDR_IN_RANGE) : (0u)) : (0u))
N
N/* Check if the EEPROM address locations from startAddr1 to endAddr1
N* are crossed with EEPROM address locations from startAddr2 to endAddr2.
N*/
N#define CY_EM_EEPROM_IS_ADDRESES_CROSSING(startAddr1, endAddr1 , startAddr2, endAddr2) \
N                                    (((startAddr1) > (startAddr2)) ? (((startAddr1) >= (endAddr2)) ? (0u) : (1u) ) : \
N                                    (((startAddr2) >= (endAddr1)) ? (0u) : (1u)))
X#define CY_EM_EEPROM_IS_ADDRESES_CROSSING(startAddr1, endAddr1 , startAddr2, endAddr2)                                     (((startAddr1) > (startAddr2)) ? (((startAddr1) >= (endAddr2)) ? (0u) : (1u) ) :                                     (((startAddr2) >= (endAddr1)) ? (0u) : (1u)))
N
N/* Return the pointer to the start of the redundant copy of the EEPROM */
N#define CY_EM_EEPROM_GET_REDNT_COPY_ADDR_BASE(numRows, wearLeveling, eepromStartAddr) \
N                                    ((((numRows) * CY_EM_EEPROM_FLASH_SIZEOF_ROW) * (wearLeveling)) + (eepromStartAddr))
X#define CY_EM_EEPROM_GET_REDNT_COPY_ADDR_BASE(numRows, wearLeveling, eepromStartAddr)                                     ((((numRows) * CY_EM_EEPROM_FLASH_SIZEOF_ROW) * (wearLeveling)) + (eepromStartAddr))
N
N/* Return the number of the row in EM_EEPROM which contains an address defined by
N* rowAddr.
N */
N#define CY_EM_EEPROM_GET_ACT_ROW_NUM_FROM_ADDR(rowAddr, maxRows, eepromStartAddr) \
N                                    ((((rowAddr) - (eepromStartAddr)) / CY_EM_EEPROM_FLASH_SIZEOF_ROW) % (maxRows))
X#define CY_EM_EEPROM_GET_ACT_ROW_NUM_FROM_ADDR(rowAddr, maxRows, eepromStartAddr)                                     ((((rowAddr) - (eepromStartAddr)) / CY_EM_EEPROM_FLASH_SIZEOF_ROW) % (maxRows))
N
N
N/** Returns the size allocated for the EEPROM excluding wear leveling and
N* redundant copy overhead.
N*/
N#define CY_EM_EEPROM_GET_EEPROM_SIZE(numRows)       ((numRows) * CY_EM_EEPROM_FLASH_SIZEOF_ROW)
N
N/* Check if the given address belongs to the EEPROM address of the row
N* specified by rowNum.
N*/
N#define CY_EM_EEPROM_IS_ADDR_IN_ROW_RANGE(addr, rowNum) \
N                                    (((addr) < ((rowNum) * (CY_EM_EEPROM_FLASH_SIZEOF_ROW / 2u))) ? (0u) : \
N                                    (((addr) > ((((rowNum) + 1u) * (CY_EM_EEPROM_FLASH_SIZEOF_ROW / 2u)) - 1u)) ? \
N                                    (0u) : (1u)))
X#define CY_EM_EEPROM_IS_ADDR_IN_ROW_RANGE(addr, rowNum)                                     (((addr) < ((rowNum) * (CY_EM_EEPROM_FLASH_SIZEOF_ROW / 2u))) ? (0u) :                                     (((addr) > ((((rowNum) + 1u) * (CY_EM_EEPROM_FLASH_SIZEOF_ROW / 2u)) - 1u)) ?                                     (0u) : (1u)))
N
N/* CRC-8 constants */
N#define CY_EM_EEPROM_CRC8_POLYNOM                   ((uint8)(0x31u))
N#define CY_EM_EEPROM_CRC8_POLYNOM_LEN               (8u)
N#define CY_EM_EEPROM_CRC8_SEED                      (0xFFu)
N#define CY_EM_EEPROM_CRC8_XOR_VAL                   ((uint8) (0x80u))
N
N#define CY_EM_EEPROM_CALCULATE_CRC8(crc)            \
N                  ((CY_EM_EEPROM_CRC8_XOR_VAL == ((crc) & CY_EM_EEPROM_CRC8_XOR_VAL)) ? \
N                  ((uint8)(((uint8)((uint8)((crc) << 1u))) ^ CY_EM_EEPROM_CRC8_POLYNOM)) : ((uint8)((crc) << 1u)))
X#define CY_EM_EEPROM_CALCULATE_CRC8(crc)                              ((CY_EM_EEPROM_CRC8_XOR_VAL == ((crc) & CY_EM_EEPROM_CRC8_XOR_VAL)) ?                   ((uint8)(((uint8)((uint8)((crc) << 1u))) ^ CY_EM_EEPROM_CRC8_POLYNOM)) : ((uint8)((crc) << 1u)))
N
N#define CY_EM_EEPROM_GET_SEQ_NUM(addr)                (*(uint32*)(addr))
N
N/** \endcond */
N
N/**
N* \addtogroup group_em_eeprom_macros
N* \{
N*/
N
N/** Calculate the number of flash rows required to create an Em_EEPROM of
N* dataSize.
N*/
N#define CY_EM_EEPROM_GET_NUM_ROWS_IN_EEPROM(dataSize) \
N                                    (((dataSize) / (CY_EM_EEPROM_EEPROM_DATA_LEN)) + \
N                                    ((((dataSize) % (CY_EM_EEPROM_EEPROM_DATA_LEN)) != 0u) ? 1U : 0U))
X#define CY_EM_EEPROM_GET_NUM_ROWS_IN_EEPROM(dataSize)                                     (((dataSize) / (CY_EM_EEPROM_EEPROM_DATA_LEN)) +                                     ((((dataSize) % (CY_EM_EEPROM_EEPROM_DATA_LEN)) != 0u) ? 1U : 0U))
N
N/** Returns the size of flash allocated for EEPROM including wear leveling and
N* redundant copy overhead.
N*/
N#define CY_EM_EEPROM_GET_PHYSICAL_SIZE(dataSize, wearLeveling, redundantCopy) \
N                                    (((CY_EM_EEPROM_GET_NUM_ROWS_IN_EEPROM(dataSize) * \
N                                    CY_EM_EEPROM_FLASH_SIZEOF_ROW) * \
N                                    (wearLeveling)) * (1uL + (redundantCopy)))
X#define CY_EM_EEPROM_GET_PHYSICAL_SIZE(dataSize, wearLeveling, redundantCopy)                                     (((CY_EM_EEPROM_GET_NUM_ROWS_IN_EEPROM(dataSize) *                                     CY_EM_EEPROM_FLASH_SIZEOF_ROW) *                                     (wearLeveling)) * (1uL + (redundantCopy)))
N
N/** \} group_em_eeprom_macros */
N
N
N/******************************************************************************
N* Local definitions
N*******************************************************************************/
N/** \cond INTERNAL */
N
N/* Offsets for 32-bit RAM buffer addressing */
N#define CY_EM_EEPROM_EEPROM_DATA_OFFSET_U32         ((CY_EM_EEPROM_FLASH_SIZEOF_ROW / 2u) / 4u)
N#define CY_EM_EEPROM_HEADER_SEQ_NUM_OFFSET_U32      (0u)
N#define CY_EM_EEPROM_HEADER_ADDR_OFFSET_U32         (1u)
N#define CY_EM_EEPROM_HEADER_LEN_OFFSET_U32          (2u)
N#define CY_EM_EEPROM_HEADER_DATA_OFFSET_U32         (3u)
N#define CY_EM_EEPROM_HEADER_CHECKSUM_OFFSET_U32     (CY_EM_EEPROM_EEPROM_DATA_OFFSET_U32 - 1u)
N
N/* The same offsets as above used for direct memory addressing */
N#define CY_EM_EEPROM_EEPROM_DATA_OFFSET             (CY_EM_EEPROM_FLASH_SIZEOF_ROW / 2u)
N#define CY_EM_EEPROM_HEADER_ADDR_OFFSET             (4u)
N#define CY_EM_EEPROM_HEADER_LEN_OFFSET              (8u)
N#define CY_EM_EEPROM_HEADER_DATA_OFFSET             (12u)
N#define CY_EM_EEPROM_HEADER_CHECKSUM_OFFSET         (CY_EM_EEPROM_EEPROM_DATA_OFFSET - 4u)
N
N#define CY_EM_EEPROM_U32_DIV                        (4u)
N
N/* Maximum wear leveling value */
N#define CY_EM_EEPROM_MAX_WEAR_LEVELING_FACTOR       (10u)
N
N/* Maximum allowed flash row write/erase operation duration */
N#define CY_EM_EEPROM_MAX_WRITE_DURATION_MS          (50u)
N
N/** \endcond */
N
N
N#ifdef __cplusplus
S}
N#endif /* __cplusplus */
N#endif /* CY_EM_EEPROM_H */
N
N
N/* [] END OF FILE */
L 31 "Generated_Source\PSoC5\project.h" 2
N
N/*[]*/
N
L 13 "main.c" 2
N
Nint main(void)
N{
N    CyGlobalIntEnable; /* Enable global interrupts. */
X    {__enable_irq();};  
N
N    /* Place your initialization/startup code here (e.g. MyInst_Start()) */
N
N    for(;;)
N    {
N        /* Place your application code here. */
N    }
N}
N
N/* [] END OF FILE */
